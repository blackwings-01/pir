import pir.graph.{Mux =>_, _}
import pir.codegen._
import pir.plasticine.config._
import pir.Design
import pir.util.enums._
import pir.util._
import pir.PIRApp

object Gibbs_Ising2D extends PIRApp {
  def main(top:Top) = {
    val x2938_x2980_s = Scalar("x2938_x2980")
    val x2940_x2950_data_s = Scalar("x2940_x2950_data")
    val exp_lut_oc = OffChip("exp_lut")
    val x2961_x2974_data_v = Vector("x2961_x2974_data")
    val x2938_10_s = Scalar("x2938_10")
    val bias_dram_oc = OffChip("bias_dram")
    val x2938_x3087_s = Scalar("x2938_x3087")
    val x2938_1_s = Scalar("x2938_1")
    val x2938_9_s = Scalar("x2938_9")
    val iters_argin = ArgIn("iters")
    val grid_dram_oc = OffChip("grid_dram")
    val x3245_x3265_v = Vector("x3245_x3265")
    val x2937_0_s = Scalar("x2937_0")
    val x2938_x3237_s = Scalar("x2938_x3237")
    val x2938_5_s = Scalar("x2938_5")
    val x2937_3_s = Scalar("x2937_3")
    val x3015_x3026_s = Scalar("x3015_x3026")
    val x2938_x3187_s = Scalar("x2938_x3187")
    val x2983_0_s = Scalar("x2983_0")
    val x2938_0_s = Scalar("x2938_0")
    val x2983_x3006_s = Scalar("x2983_x3006")
    val x3017_x3036_s = Scalar("x3017_x3036")
    val x2938_6_s = Scalar("x2938_6")
    val x2939_b3326_x2948_b3328_s = Scalar("x2939_b3326_x2948_b3328")
    val x2938_x3137_s = Scalar("x2938_x3137")
    val x2938_2_s = Scalar("x2938_2")
    val x2960_b3330_x2972_b3332_s = Scalar("x2960_b3330_x2972_b3332")
    val x2960_b3329_x2972_b3331_s = Scalar("x2960_b3329_x2972_b3331")
    val exp_posbias_argin = ArgIn("exp_posbias")
    val x3016_x3031_s = Scalar("x3016_x3031")
    val x2986_b3335_x2998_b3337_s = Scalar("x2986_b3335_x2998_b3337")
    val x2938_8_s = Scalar("x2938_8")
    val x2938_7_s = Scalar("x2938_7")
    val x3244_b3397_x3257_b3399_s = Scalar("x3244_b3397_x3257_b3399")
    val exp_lut_da = DRAMAddress("exp_lut", "exp_lut")
    val x2938_11_s = Scalar("x2938_11")
    val grid_dram_da = DRAMAddress("grid_dram", "grid_dram")
    val x2986_b3336_x2998_b3338_s = Scalar("x2986_b3336_x2998_b3338")
    val x2938_3_s = Scalar("x2938_3")
    val bias_dram_da = DRAMAddress("bias_dram", "bias_dram")
    val x3244_b3398_x3257_b3400_s = Scalar("x3244_b3398_x3257_b3400")
    val x2938_4_s = Scalar("x2938_4")
    val x3014_x3021_s = Scalar("x3014_x3021")
    val x2937_1_s = Scalar("x2937_1")
    val exp_negbias_argin = ArgIn("exp_negbias")
    val x2937_x2955_s = Scalar("x2937_x2955")
    val x2987_x3000_data_v = Vector("x2987_x3000_data")
    val x2939_b3325_x2948_b3327_s = Scalar("x2939_b3325_x2948_b3327")
    val x2937_2_s = Scalar("x2937_2")
    val x3272 = Sequential(name="x3272",parent=top) { implicit CU => 
      val x3272_unit = CounterChain(name = "x3272_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x2937_dsp0 = MemoryPipeline(name="x2937_dsp0",parent="x3272") { implicit CU => 
      val x3063 = CU.temp
      val x3056 = CU.temp
      val x3062 = CU.temp
      val x3042 = CU.temp
      val x3064 = CU.temp
      val x3065 = CU.temp
      val x3048 = CU.temp
      val x3052 = CU.temp
      val x3050 = ScalarFIFO(size=1,name="x3050").wtPort(x2938_7_s)
      val x2955 = ScalarFIFO(size=1,name="x2955").wtPort(x2937_x2955_s)
      val x3058 = ScalarFIFO(size=1,name="x3058").wtPort(x2938_2_s)
      val x3054 = ScalarFIFO(size=1,name="x3054").wtPort(x2938_3_s)
      val x3060 = ScalarFIFO(size=1,name="x3060").wtPort(x2938_1_s)
      val x3046 = ScalarFIFO(size=1,name="x3046").wtPort(x2938_8_s)
      val x2952 = CounterChain.copy("x2956", "x2952")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x3041 = CounterChain.copy("x3088", "x3041")
      val x2937 = SRAM(size=9,name="x2937",banking = Strided(1)).wtPort(x2955.readPort).rdPort(x2937_0_s).wtAddr(x2952(0))
      RAStage(operands=List(CU.ctr(x3041(0)), Const(1)), op=FixSub, results=List(x3056))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3052))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3042))
      RAStage(operands=List(CU.ctr(x3041(0)), Const(1)), op=FixAdd, results=List(x3048))
      RAStage(operands=List(CU.load(x3046), CU.load(x3050)), op=FixAdd, results=List(x3062))
      RAStage(operands=List(x3062, CU.load(x3054)), op=FixAdd, results=List(x3063))
      RAStage(operands=List(x3063, CU.load(x3058)), op=FixAdd, results=List(x3064))
      RAStage(operands=List(x3064, CU.load(x3060)), op=FixMul, results=List(x3065))
      RAStage(operands=List(x3065, Const(4)), op=FixAdd, results=List(x2937.readAddr))
    }
    val x2937_dsp1 = MemoryPipeline(name="x2937_dsp1",parent="x3272") { implicit CU => 
      val x3092 = CU.temp()
      val x3106 = CU.temp()
      val x3098 = CU.temp()
      val x3102 = CU.temp()
      val x3114 = CU.temp()
      val x3112 = CU.temp()
      val x3115 = CU.temp()
      val x3113 = CU.temp()
      val x3108 = ScalarFIFO(size=1,name="x3108").wtPort(x2938_2_s)
      val x2955 = ScalarFIFO(size=1,name="x2955").wtPort(x2937_x2955_s)
      val x3100 = ScalarFIFO(size=1,name="x3100").wtPort(x2938_7_s)
      val x3096 = ScalarFIFO(size=1,name="x3096").wtPort(x2938_9_s)
      val x3110 = ScalarFIFO(size=1,name="x3110").wtPort(x2938_1_s)
      val x3104 = ScalarFIFO(size=1,name="x3104").wtPort(x2938_4_s)
      val x2952 = CounterChain.copy("x2956", "x2952")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x3091 = CounterChain.copy("x3138", "x3091")
      val x2937 = SRAM(size=9,name="x2937",banking = Strided(1)).wtPort(x2955.readPort).rdPort(x2937_1_s).wtAddr(x2952(0))
      RAStage(operands=List(CU.ctr(x3091(0)), Const(1)), op=FixSub, results=List(x3106))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3102))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3092))
      RAStage(operands=List(CU.ctr(x3091(0)), Const(1)), op=FixAdd, results=List(x3098))
      RAStage(operands=List(CU.load(x3096), CU.load(x3100)), op=FixAdd, results=List(x3112))
      RAStage(operands=List(x3112, CU.load(x3104)), op=FixAdd, results=List(x3113))
      RAStage(operands=List(x3113, CU.load(x3108)), op=FixAdd, results=List(x3114))
      RAStage(operands=List(x3114, CU.load(x3110)), op=FixMul, results=List(x3115))
      RAStage(operands=List(x3115, Const(4)), op=FixAdd, results=List(x2937.readAddr))
    }
    val x2937_dsp2 = MemoryPipeline(name="x2937_dsp2",parent="x3272") { implicit CU => 
      val x3163 = CU.temp()
      val x3156 = CU.temp()
      val x3165 = CU.temp()
      val x3142 = CU.temp()
      val x3164 = CU.temp()
      val x3162 = CU.temp()
      val x3148 = CU.temp()
      val x3152 = CU.temp()
      val x3158 = ScalarFIFO(size=1,name="x3158").wtPort(x2938_2_s)
      val x3160 = ScalarFIFO(size=1,name="x3160").wtPort(x2938_1_s)
      val x3154 = ScalarFIFO(size=1,name="x3154").wtPort(x2938_5_s)
      val x2955 = ScalarFIFO(size=1,name="x2955").wtPort(x2937_x2955_s)
      val x3150 = ScalarFIFO(size=1,name="x3150").wtPort(x2938_7_s)
      val x3146 = ScalarFIFO(size=1,name="x3146").wtPort(x2938_10_s)
      val x2952 = CounterChain.copy("x2956", "x2952")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x3141 = CounterChain.copy("x3188", "x3141")
      val x2937 = SRAM(size=9,name="x2937",banking = Strided(1)).wtPort(x2955.readPort).rdPort(x2937_2_s).wtAddr(x2952(0))
      RAStage(operands=List(CU.ctr(x3141(0)), Const(1)), op=FixSub, results=List(x3156))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3152))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3142))
      RAStage(operands=List(CU.ctr(x3141(0)), Const(1)), op=FixAdd, results=List(x3148))
      RAStage(operands=List(CU.load(x3146), CU.load(x3150)), op=FixAdd, results=List(x3162))
      RAStage(operands=List(x3162, CU.load(x3154)), op=FixAdd, results=List(x3163))
      RAStage(operands=List(x3163, CU.load(x3158)), op=FixAdd, results=List(x3164))
      RAStage(operands=List(x3164, CU.load(x3160)), op=FixMul, results=List(x3165))
      RAStage(operands=List(x3165, Const(4)), op=FixAdd, results=List(x2937.readAddr))
    }
    val x2937_dsp3 = MemoryPipeline(name="x2937_dsp3",parent="x3272") { implicit CU => 
      val x3198 = CU.temp()
      val x3215 = CU.temp()
      val x3213 = CU.temp()
      val x3212 = CU.temp()
      val x3192 = CU.temp()
      val x3214 = CU.temp()
      val x3202 = CU.temp()
      val x3206 = CU.temp()
      val x2955 = ScalarFIFO(size=1,name="x2955").wtPort(x2937_x2955_s)
      val x3204 = ScalarFIFO(size=1,name="x3204").wtPort(x2938_6_s)
      val x3210 = ScalarFIFO(size=1,name="x3210").wtPort(x2938_1_s)
      val x3200 = ScalarFIFO(size=1,name="x3200").wtPort(x2938_7_s)
      val x3196 = ScalarFIFO(size=1,name="x3196").wtPort(x2938_11_s)
      val x3208 = ScalarFIFO(size=1,name="x3208").wtPort(x2938_2_s)
      val x2952 = CounterChain.copy("x2956", "x2952")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x2937 = SRAM(size=9,name="x2937",banking = Strided(1)).wtPort(x2955.readPort).rdPort(x2937_3_s).wtAddr(x2952(0))
      RAStage(operands=List(CU.ctr(x3191(0)), Const(1)), op=FixSub, results=List(x3206))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3202))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3192))
      RAStage(operands=List(CU.ctr(x3191(0)), Const(1)), op=FixAdd, results=List(x3198))
      RAStage(operands=List(CU.load(x3196), CU.load(x3200)), op=FixAdd, results=List(x3212))
      RAStage(operands=List(x3212, CU.load(x3204)), op=FixAdd, results=List(x3213))
      RAStage(operands=List(x3213, CU.load(x3208)), op=FixAdd, results=List(x3214))
      RAStage(operands=List(x3214, CU.load(x3210)), op=FixMul, results=List(x3215))
      RAStage(operands=List(x3215, Const(4)), op=FixAdd, results=List(x2937.readAddr))
    }
    val x2938_dsp0 = MemoryPipeline(name="x2938_dsp0",parent="x3272") { implicit CU => 
      val b3401 = CU.temp()
      val b3395 = CU.temp()
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3260 = CounterChain.copy("x3266", "x3260")
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3243 = CounterChain.copy("x3271", "x3243")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_0_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3243(0)), Const(64)), op=FixMul, results=List(b3401))
      RAStage(operands=List(b3401, CU.ctr(x3260(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp1 = MemoryPipeline(name="x2938_dsp1",parent="x3272") { implicit CU => 
      val b3391 = CU.temp()
      val b3395 = CU.temp()
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_1_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3391))
      RAStage(operands=List(b3391, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp2 = MemoryPipeline(name="x2938_dsp2",parent="x3272") { implicit CU => 
      val b3389 = CU.temp()
      val b3395 = CU.temp()
      val x3207 = CU.temp()
      val x3206 = CU.temp()
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_2_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3191(0)), Const(1)), op=FixSub, results=List(x3206))
      RAStage(operands=List(x3206, Const(64)), op=FixMod, results=List(x3207))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3389))
      RAStage(operands=List(b3389, x3207), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp3 = MemoryPipeline(name="x2938_dsp3",parent="x3272") { implicit CU => 
      val x3053 = CU.temp()
      val b3395 = CU.temp()
      val x3052 = CU.temp()
      val b3345 = CU.temp()
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3041 = CounterChain.copy("x3088", "x3041")
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_3_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3052))
      RAStage(operands=List(x3052, Const(32)), op=FixMod, results=List(x3053))
      RAStage(operands=List(x3053, Const(64)), op=FixMul, results=List(b3345))
      RAStage(operands=List(b3345, CU.ctr(x3041(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp4 = MemoryPipeline(name="x2938_dsp4",parent="x3272") { implicit CU => 
      val x3103 = CU.temp()
      val x3102 = CU.temp()
      val b3395 = CU.temp()
      val b3359 = CU.temp()
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3091 = CounterChain.copy("x3138", "x3091")
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_4_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3102))
      RAStage(operands=List(x3102, Const(32)), op=FixMod, results=List(x3103))
      RAStage(operands=List(x3103, Const(64)), op=FixMul, results=List(b3359))
      RAStage(operands=List(b3359, CU.ctr(x3091(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp5 = MemoryPipeline(name="x2938_dsp5",parent="x3272") { implicit CU => 
      val b3373 = CU.temp()
      val x3153 = CU.temp()
      val b3395 = CU.temp()
      val x3152 = CU.temp()
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3141 = CounterChain.copy("x3188", "x3141")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_5_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3152))
      RAStage(operands=List(x3152, Const(32)), op=FixMod, results=List(x3153))
      RAStage(operands=List(x3153, Const(64)), op=FixMul, results=List(b3373))
      RAStage(operands=List(b3373, CU.ctr(x3141(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp6 = MemoryPipeline(name="x2938_dsp6",parent="x3272") { implicit CU => 
      val x3203 = CU.temp()
      val b3395 = CU.temp()
      val b3387 = CU.temp()
      val x3202 = CU.temp()
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_6_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3202))
      RAStage(operands=List(x3202, Const(32)), op=FixMod, results=List(x3203))
      RAStage(operands=List(x3203, Const(64)), op=FixMul, results=List(b3387))
      RAStage(operands=List(b3387, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp7 = MemoryPipeline(name="x2938_dsp7",parent="x3272") { implicit CU => 
      val x3198 = CU.temp()
      val b3395 = CU.temp()
      val x3199 = CU.temp()
      val b3385 = CU.temp()
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_7_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3191(0)), Const(1)), op=FixAdd, results=List(x3198))
      RAStage(operands=List(x3198, Const(64)), op=FixMod, results=List(x3199))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3385))
      RAStage(operands=List(b3385, x3199), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp8 = MemoryPipeline(name="x2938_dsp8",parent="x3272") { implicit CU => 
      val b3341 = CU.temp()
      val x3042 = CU.temp()
      val b3395 = CU.temp()
      val x3043 = CU.temp()
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3041 = CounterChain.copy("x3088", "x3041")
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_8_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3042))
      RAStage(operands=List(x3042, Const(32)), op=FixMod, results=List(x3043))
      RAStage(operands=List(x3043, Const(64)), op=FixMul, results=List(b3341))
      RAStage(operands=List(b3341, CU.ctr(x3041(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp9 = MemoryPipeline(name="x2938_dsp9",parent="x3272") { implicit CU => 
      val x3092 = CU.temp()
      val b3355 = CU.temp()
      val b3395 = CU.temp()
      val x3093 = CU.temp()
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3091 = CounterChain.copy("x3138", "x3091")
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_9_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3092))
      RAStage(operands=List(x3092, Const(32)), op=FixMod, results=List(x3093))
      RAStage(operands=List(x3093, Const(64)), op=FixMul, results=List(b3355))
      RAStage(operands=List(b3355, CU.ctr(x3091(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp10 = MemoryPipeline(name="x2938_dsp10",parent="x3272") { implicit CU => 
      val x3142 = CU.temp()
      val x3143 = CU.temp()
      val b3395 = CU.temp()
      val b3369 = CU.temp()
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3141 = CounterChain.copy("x3188", "x3141")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_10_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3142))
      RAStage(operands=List(x3142, Const(32)), op=FixMod, results=List(x3143))
      RAStage(operands=List(x3143, Const(64)), op=FixMul, results=List(b3369))
      RAStage(operands=List(b3369, CU.ctr(x3141(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2938_dsp11 = MemoryPipeline(name="x2938_dsp11",parent="x3272") { implicit CU => 
      val x3192 = CU.temp()
      val b3395 = CU.temp()
      val x3193 = CU.temp()
      val b3383 = CU.temp()
      val x3137 = ScalarFIFO(size=1,name="x3137").wtPort(x2938_x3137_s)
      val x2980 = ScalarFIFO(size=1,name="x2980").wtPort(x2938_x2980_s)
      val x3087 = ScalarFIFO(size=1,name="x3087").wtPort(x2938_x3087_s)
      val x3237 = ScalarFIFO(size=1,name="x3237").wtPort(x2938_x3237_s)
      val x3187 = ScalarFIFO(size=1,name="x3187").wtPort(x2938_x3187_s)
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2938 = SRAM(size=2048,name="x2938",banking = Strided(1)).wtPort(x2980.readPort).wtPort(x3087.readPort).wtPort(x3137.readPort).wtPort(x3187.readPort).wtPort(x3237.readPort).rdPort(x2938_11_s)
      WAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3395))
      WAStage(operands=List(b3395, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3192))
      RAStage(operands=List(x3192, Const(32)), op=FixMod, results=List(x3193))
      RAStage(operands=List(x3193, Const(64)), op=FixMul, results=List(b3383))
      RAStage(operands=List(b3383, CU.ctr(x3191(0))), op=FixAdd, results=List(x2938.readAddr))
    }
    val x2957 = StreamController(name="x2957",parent=x3272) { implicit CU => 
      val x2957_unit = CounterChain(name = "x2957_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x2949 = Pipeline(name="x2949",parent=x2957) { implicit CU => 
      val x2942 = CU.temp()
      val x2944 = ScalarBuffer(name="x2944").wtPort(exp_lut_da)
      val x2949_unit = CounterChain(name = "x2949_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
      Stage(operands=List(Const(0), Const(3)), op=FixSla, results=List(x2942))
      Stage(operands=List(x2942, CU.load(x2944)), op=FixAdd, results=List(CU.scalarOut(x2939_b3325_x2948_b3327_s)))
      Stage(operands=List(Const(72)), op=Bypass, results=List(CU.scalarOut(x2939_b3326_x2948_b3328_s)))
    }
    val x2950 = MemoryController(name="x2950",parent=x2957,offchip=exp_lut_oc, mctpe=TileLoad) { implicit CU => 
      val x2939_b3325 = ScalarFIFO(size=1,name="offset").wtPort(x2939_b3325_x2948_b3327_s)
      val x2939_b3326 = ScalarFIFO(size=1,name="size").wtPort(x2939_b3326_x2948_b3328_s)
      CU.newSout("data", x2940_x2950_data_s)
    }
    val x2956 = Pipeline(name="x2956",parent=x2957) { implicit CU => 
      val x2940 = ScalarFIFO(size=1,name="x2940").wtPort(x2940_x2950_data_s)
      val ctr1 = Counter(min=Const(0), max=Const(9), step=Const(1), par=1) // Counter
      val x2952 = CounterChain(name = "x2952", ctr1).iter(9)
      Stage(operands=List(CU.load(x2940)), op=Bypass, results=List(CU.scalarOut(x2937_x2955_s)))
    }
    val x2982 = StreamController(name="x2982",parent=x3272) { implicit CU => 
      val ctr2 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1) // Counter
      val x2959 = CounterChain(name = "x2959", ctr2).iter(32)
    }
    val x2973 = Pipeline(name="x2973",parent=x2982) { implicit CU => 
      val x2966 = CU.temp()
      val x2965 = CU.temp()
      val x2963 = CU.temp()
      val x2968 = ScalarBuffer(name="x2968").wtPort(grid_dram_da)
      val x2959 = CounterChain.copy("x2982", "x2959")
      val x2973_unit = CounterChain(name = "x2973_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
      Stage(operands=List(CU.ctr(x2959(0)), Const(6)), op=FixSla, results=List(x2963))
      Stage(operands=List(x2963, Const(0)), op=FixAdd, results=List(x2965))
      Stage(operands=List(x2965, Const(2)), op=FixSla, results=List(x2966))
      Stage(operands=List(x2966, CU.load(x2968)), op=FixAdd, results=List(CU.scalarOut(x2960_b3329_x2972_b3331_s)))
      Stage(operands=List(Const(256)), op=Bypass, results=List(CU.scalarOut(x2960_b3330_x2972_b3332_s)))
    }
    val x2974 = MemoryController(name="x2974",parent=x2982,offchip=grid_dram_oc, mctpe=TileLoad) { implicit CU => 
      val x2960_b3330 = ScalarFIFO(size=1,name="size").wtPort(x2960_b3330_x2972_b3332_s)
      val x2960_b3329 = ScalarFIFO(size=1,name="offset").wtPort(x2960_b3329_x2972_b3331_s)
      CU.newVout("data", x2961_x2974_data_v)
    }
    val x2981 = Pipeline(name="x2981",parent=x2982) { implicit CU => 
      val x2961 = VectorFIFO(size=1,name="x2961").wtPort(x2961_x2974_data_v)
      val ctr3 = Counter(min=Const(0), max=Const(64), step=Const(1), par=16) // Counter
      val x2976 = CounterChain(name = "x2976", ctr3).iter(4)
      Stage(operands=List(CU.load(x2961)), op=Bypass, results=List(CU.scalarOut(x2938_x2980_s)))
    }
    val x2983_dsp0 = MemoryPipeline(name="x2983_dsp0",parent="x3272") { implicit CU => 
      val b3339 = CU.temp()
      val b3393 = CU.temp()
      val x3006 = ScalarFIFO(size=1,name="x3006").wtPort(x2983_x3006_s)
      val x3002 = CounterChain.copy("x3007", "x3002")
      val x3191 = CounterChain.copy("x3238", "x3191")
      val x2985 = CounterChain.copy("x3008", "x2985")
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x2983 = SRAM(size=2048,name="x2983",banking = Strided(1)).wtPort(x3006.readPort).rdPort(x2983_0_s)
      WAStage(operands=List(CU.ctr(x2985(0)), Const(64)), op=FixMul, results=List(b3339))
      WAStage(operands=List(b3339, CU.ctr(x3002(0))), op=FixAdd, results=List(x2983.writeAddr))
      RAStage(operands=List(CU.ctr(x3013(0)), Const(64)), op=FixMul, results=List(b3393))
      RAStage(operands=List(b3393, CU.ctr(x3191(0))), op=FixAdd, results=List(x2983.readAddr))
    }
    val x3008 = StreamController(name="x3008",parent=x3272) { implicit CU => 
      val ctr4 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1) // Counter
      val x2985 = CounterChain(name = "x2985", ctr4).iter(32)
    }
    val x2999 = Pipeline(name="x2999",parent=x3008) { implicit CU => 
      val x2992 = CU.temp()
      val x2989 = CU.temp()
      val x2991 = CU.temp()
      val x2994 = ScalarBuffer(name="x2994").wtPort(bias_dram_da)
      val x2985 = CounterChain.copy("x3008", "x2985")
      val x2999_unit = CounterChain(name = "x2999_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
      Stage(operands=List(CU.ctr(x2985(0)), Const(6)), op=FixSla, results=List(x2989))
      Stage(operands=List(x2989, Const(0)), op=FixAdd, results=List(x2991))
      Stage(operands=List(x2991, Const(2)), op=FixSla, results=List(x2992))
      Stage(operands=List(x2992, CU.load(x2994)), op=FixAdd, results=List(CU.scalarOut(x2986_b3335_x2998_b3337_s)))
      Stage(operands=List(Const(256)), op=Bypass, results=List(CU.scalarOut(x2986_b3336_x2998_b3338_s)))
    }
    val x3000 = MemoryController(name="x3000",parent=x3008,offchip=bias_dram_oc, mctpe=TileLoad) { implicit CU => 
      val x2986_b3336 = ScalarFIFO(size=1,name="size").wtPort(x2986_b3336_x2998_b3338_s)
      val x2986_b3335 = ScalarFIFO(size=1,name="offset").wtPort(x2986_b3335_x2998_b3337_s)
      CU.newVout("data", x2987_x3000_data_v)
    }
    val x3007 = Pipeline(name="x3007",parent=x3008) { implicit CU => 
      val x2987 = VectorFIFO(size=1,name="x2987").wtPort(x2987_x3000_data_v)
      val ctr5 = Counter(min=Const(0), max=Const(64), step=Const(1), par=16) // Counter
      val x3002 = CounterChain(name = "x3002", ctr5).iter(4)
      Stage(operands=List(CU.load(x2987)), op=Bypass, results=List(CU.scalarOut(x2983_x3006_s)))
    }
    val x3241 = MetaPipeline(name="x3241",parent=x3272) { implicit CU => 
      val x2919 = ScalarBuffer(name="x2919").wtPort(iters_argin)
      val ctr6 = Counter(min=Const(0), max=x2919.readPort, step=Const(1), par=1) // Counter
      val x3011 = CounterChain(name = "x3011", ctr6).iter(1)
    }
    val x3240 = MetaPipeline(name="x3240",parent=x3241) { implicit CU => 
      val ctr7 = Counter(min=Const(0), max=Const(32), step=Const(1), par=4) // Counter
      val x3013 = CounterChain(name = "x3013", ctr7).iter(8)
    }
    val x3022 = Pipeline(name="x3022",parent=x3240) { implicit CU => 
      val x3018 = CU.temp()
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x3022_unit = CounterChain(name = "x3022_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
      Stage(operands=List(CU.ctr(x3013(0)), Const(4)), op=FixMod, results=List(x3018))
      Stage(operands=List(x3018), op=FixNeg, results=List(CU.scalarOut(x3014_x3021_s)))
    }
    val x3027 = Pipeline(name="x3027",parent=x3240) { implicit CU => 
      val x3023 = CU.temp()
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x3027_unit = CounterChain(name = "x3027_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
      Stage(operands=List(CU.ctr(x3013(0)), Const(4)), op=FixMod, results=List(x3023))
      Stage(operands=List(x3023), op=FixNeg, results=List(CU.scalarOut(x3015_x3026_s)))
    }
    val x3032 = Pipeline(name="x3032",parent=x3240) { implicit CU => 
      val x3028 = CU.temp()
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x3032_unit = CounterChain(name = "x3032_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
      Stage(operands=List(CU.ctr(x3013(0)), Const(4)), op=FixMod, results=List(x3028))
      Stage(operands=List(x3028), op=FixNeg, results=List(CU.scalarOut(x3016_x3031_s)))
    }
    val x3037 = Pipeline(name="x3037",parent=x3240) { implicit CU => 
      val x3033 = CU.temp()
      val x3013 = CounterChain.copy("x3240", "x3013")
      val x3037_unit = CounterChain(name = "x3037_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
      Stage(operands=List(CU.ctr(x3013(0)), Const(4)), op=FixMod, results=List(x3033))
      Stage(operands=List(x3033), op=FixNeg, results=List(CU.scalarOut(x3017_x3036_s)))
    }
    val x3088 = Pipeline(name="x3088",parent=x3240) { implicit CU => 
      val x3079 = CU.temp()
      val x3063 = CU.temp()
      val x3085 = CU.temp()
      val x3076 = CU.temp()
      val x3056 = CU.temp()
      val x3084 = CU.temp()
      val x3083 = CU.temp()
      val x3062 = CU.temp()
      val x3072 = CU.temp()
      val x3081 = CU.temp()
      val x3042 = CU.temp()
      val x3071 = CU.temp()
      val x3064 = CU.temp()
      val x3082 = CU.temp()
      val x3075 = CU.temp()
      val x3065 = CU.temp()
      val x3080 = CU.temp()
      val x3048 = CU.temp()
      val x3078 = CU.temp()
      val x3052 = CU.temp()
      val x3046 = ScalarFIFO(size=1,name="x3046").wtPort(x2938_8_s)
      val x3054 = ScalarFIFO(size=1,name="x3054").wtPort(x2938_3_s)
      val x3058 = ScalarFIFO(size=1,name="x3058").wtPort(x2938_2_s)
      val x3050 = ScalarFIFO(size=1,name="x3050").wtPort(x2938_7_s)
      val x2921 = ScalarBuffer(name="x2921").wtPort(exp_posbias_argin)
      val x3067 = ScalarFIFO(size=1,name="x3067").wtPort(x2937_0_s)
      val x3069 = ScalarFIFO(size=1,name="x3069").wtPort(x2983_0_s)
      val x3014 = ScalarBuffer(name="x3014").wtPort(x3014_x3021_s)
      val x2920 = ScalarBuffer(name="x2920").wtPort(exp_negbias_argin)
      val x3060 = ScalarFIFO(size=1,name="x3060").wtPort(x2938_1_s)
      val x3013 = CounterChain.copy("x3240", "x3013")
      val ctr8 = Counter(min=x3014.readPort, max=Const(64), step=Const(1), par=1) // Counter
      val x3041 = CounterChain(name = "x3041", ctr8).iter(64)
      Stage(operands=List(Const(0), CU.ctr(x3041(0))), op=FixLt, results=List(x3080))
      Stage(operands=List(CU.ctr(x3041(0)), Const(64)), op=FixLt, results=List(x3081))
      Stage(operands=List(x3080, x3081), op=BitAnd, results=List(x3082))
      Stage(operands=List(CU.ctr(x3041(0)), Const(1)), op=FixSub, results=List(x3056))
      Stage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3052))
      Stage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3042))
      Stage(operands=List(CU.ctr(x3041(0)), Const(1)), op=FixAdd, results=List(x3048))
      Stage(operands=List(CU.load(x3046), CU.load(x3050)), op=FixAdd, results=List(x3062))
      Stage(operands=List(x3062, CU.load(x3054)), op=FixAdd, results=List(x3063))
      Stage(operands=List(x3063, CU.load(x3058)), op=FixAdd, results=List(x3064))
      Stage(operands=List(x3064, CU.load(x3060)), op=FixMul, results=List(x3065))
      Stage(operands=List(CU.load(x3069), CU.load(x3060)), op=FixMul, results=List(x3071))
      Stage(operands=List(x3071, Const(0)), op=FixLt, results=List(x3072))
      Stage(operands=List(x3072, CU.load(x2921), CU.load(x2920)), op=Mux, results=List(x3075))
      Stage(operands=List(CU.load(x3067), x3075), op=FixMul, results=List(x3076))
      Stage(operands=List(Const(1), x3076), op=FixLt, results=List(x3078))
      Stage(operands=List(x3078, Const(1), Const(1)), op=Mux, results=List(x3079))
      Stage(operands=List(x3079, Const(1)), op=FixEql, results=List(x3083))
      Stage(operands=List(x3082, x3083), op=BitAnd, results=List(x3084))
      Stage(operands=List(CU.load(x3060)), op=FixNeg, results=List(x3085))
      Stage(operands=List(x3084, x3085, CU.load(x3060)), op=Mux, results=List(CU.scalarOut(x2938_x3087_s)))
    }
    val x3138 = Pipeline(name="x3138",parent=x3240) { implicit CU => 
      val x3092 = CU.temp()
      val x3133 = CU.temp()
      val x3122 = CU.temp()
      val x3132 = CU.temp()
      val x3106 = CU.temp()
      val x3126 = CU.temp()
      val x3135 = CU.temp()
      val x3129 = CU.temp()
      val x3128 = CU.temp()
      val x3121 = CU.temp()
      val x3098 = CU.temp()
      val x3102 = CU.temp()
      val x3114 = CU.temp()
      val x3112 = CU.temp()
      val x3134 = CU.temp()
      val x3131 = CU.temp()
      val x3115 = CU.temp()
      val x3125 = CU.temp()
      val x3130 = CU.temp()
      val x3113 = CU.temp()
      val x3100 = ScalarFIFO(size=1,name="x3100").wtPort(x2938_7_s)
      val x2920 = ScalarBuffer(name="x2920").wtPort(exp_negbias_argin)
      val x3110 = ScalarFIFO(size=1,name="x3110").wtPort(x2938_1_s)
      val x3015 = ScalarBuffer(name="x3015").wtPort(x3015_x3026_s)
      val x3117 = ScalarFIFO(size=1,name="x3117").wtPort(x2937_1_s)
      val x3104 = ScalarFIFO(size=1,name="x3104").wtPort(x2938_4_s)
      val x3108 = ScalarFIFO(size=1,name="x3108").wtPort(x2938_2_s)
      val x3096 = ScalarFIFO(size=1,name="x3096").wtPort(x2938_9_s)
      val x2921 = ScalarBuffer(name="x2921").wtPort(exp_posbias_argin)
      val x3119 = ScalarFIFO(size=1,name="x3119").wtPort(x2983_0_s)
      val x3013 = CounterChain.copy("x3240", "x3013")
      val ctr9 = Counter(min=x3015.readPort, max=Const(64), step=Const(1), par=1) // Counter
      val x3091 = CounterChain(name = "x3091", ctr9).iter(64)
      Stage(operands=List(Const(0), CU.ctr(x3091(0))), op=FixLt, results=List(x3130))
      Stage(operands=List(CU.ctr(x3091(0)), Const(64)), op=FixLt, results=List(x3131))
      Stage(operands=List(x3130, x3131), op=BitAnd, results=List(x3132))
      Stage(operands=List(CU.ctr(x3091(0)), Const(1)), op=FixSub, results=List(x3106))
      Stage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3102))
      Stage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3092))
      Stage(operands=List(CU.ctr(x3091(0)), Const(1)), op=FixAdd, results=List(x3098))
      Stage(operands=List(CU.load(x3096), CU.load(x3100)), op=FixAdd, results=List(x3112))
      Stage(operands=List(x3112, CU.load(x3104)), op=FixAdd, results=List(x3113))
      Stage(operands=List(x3113, CU.load(x3108)), op=FixAdd, results=List(x3114))
      Stage(operands=List(x3114, CU.load(x3110)), op=FixMul, results=List(x3115))
      Stage(operands=List(CU.load(x3119), CU.load(x3110)), op=FixMul, results=List(x3121))
      Stage(operands=List(x3121, Const(0)), op=FixLt, results=List(x3122))
      Stage(operands=List(x3122, CU.load(x2921), CU.load(x2920)), op=Mux, results=List(x3125))
      Stage(operands=List(CU.load(x3117), x3125), op=FixMul, results=List(x3126))
      Stage(operands=List(Const(1), x3126), op=FixLt, results=List(x3128))
      Stage(operands=List(x3128, Const(1), Const(1)), op=Mux, results=List(x3129))
      Stage(operands=List(x3129, Const(1)), op=FixEql, results=List(x3133))
      Stage(operands=List(x3132, x3133), op=BitAnd, results=List(x3134))
      Stage(operands=List(CU.load(x3110)), op=FixNeg, results=List(x3135))
      Stage(operands=List(x3134, x3135, CU.load(x3110)), op=Mux, results=List(CU.scalarOut(x2938_x3137_s)))
    }
    val x3188 = Pipeline(name="x3188",parent=x3240) { implicit CU => 
      val x3163 = CU.temp()
      val x3179 = CU.temp()
      val x3172 = CU.temp()
      val x3156 = CU.temp()
      val x3171 = CU.temp()
      val x3165 = CU.temp()
      val x3175 = CU.temp()
      val x3180 = CU.temp()
      val x3185 = CU.temp()
      val x3142 = CU.temp()
      val x3176 = CU.temp()
      val x3178 = CU.temp()
      val x3164 = CU.temp()
      val x3182 = CU.temp()
      val x3184 = CU.temp()
      val x3162 = CU.temp()
      val x3183 = CU.temp()
      val x3181 = CU.temp()
      val x3148 = CU.temp()
      val x3152 = CU.temp()
      val x2920 = ScalarBuffer(name="x2920").wtPort(exp_negbias_argin)
      val x3169 = ScalarFIFO(size=1,name="x3169").wtPort(x2983_0_s)
      val x3146 = ScalarFIFO(size=1,name="x3146").wtPort(x2938_10_s)
      val x3167 = ScalarFIFO(size=1,name="x3167").wtPort(x2937_2_s)
      val x3158 = ScalarFIFO(size=1,name="x3158").wtPort(x2938_2_s)
      val x3150 = ScalarFIFO(size=1,name="x3150").wtPort(x2938_7_s)
      val x3154 = ScalarFIFO(size=1,name="x3154").wtPort(x2938_5_s)
      val x3016 = ScalarBuffer(name="x3016").wtPort(x3016_x3031_s)
      val x2921 = ScalarBuffer(name="x2921").wtPort(exp_posbias_argin)
      val x3160 = ScalarFIFO(size=1,name="x3160").wtPort(x2938_1_s)
      val x3013 = CounterChain.copy("x3240", "x3013")
      val ctr10 = Counter(min=x3016.readPort, max=Const(64), step=Const(1), par=1) // Counter
      val x3141 = CounterChain(name = "x3141", ctr10).iter(64)
      Stage(operands=List(Const(0), CU.ctr(x3141(0))), op=FixLt, results=List(x3180))
      Stage(operands=List(CU.ctr(x3141(0)), Const(64)), op=FixLt, results=List(x3181))
      Stage(operands=List(x3180, x3181), op=BitAnd, results=List(x3182))
      Stage(operands=List(CU.ctr(x3141(0)), Const(1)), op=FixSub, results=List(x3156))
      Stage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3152))
      Stage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3142))
      Stage(operands=List(CU.ctr(x3141(0)), Const(1)), op=FixAdd, results=List(x3148))
      Stage(operands=List(CU.load(x3146), CU.load(x3150)), op=FixAdd, results=List(x3162))
      Stage(operands=List(x3162, CU.load(x3154)), op=FixAdd, results=List(x3163))
      Stage(operands=List(x3163, CU.load(x3158)), op=FixAdd, results=List(x3164))
      Stage(operands=List(x3164, CU.load(x3160)), op=FixMul, results=List(x3165))
      Stage(operands=List(CU.load(x3169), CU.load(x3160)), op=FixMul, results=List(x3171))
      Stage(operands=List(x3171, Const(0)), op=FixLt, results=List(x3172))
      Stage(operands=List(x3172, CU.load(x2921), CU.load(x2920)), op=Mux, results=List(x3175))
      Stage(operands=List(CU.load(x3167), x3175), op=FixMul, results=List(x3176))
      Stage(operands=List(Const(1), x3176), op=FixLt, results=List(x3178))
      Stage(operands=List(x3178, Const(1), Const(1)), op=Mux, results=List(x3179))
      Stage(operands=List(x3179, Const(1)), op=FixEql, results=List(x3183))
      Stage(operands=List(x3182, x3183), op=BitAnd, results=List(x3184))
      Stage(operands=List(CU.load(x3160)), op=FixNeg, results=List(x3185))
      Stage(operands=List(x3184, x3185, CU.load(x3160)), op=Mux, results=List(CU.scalarOut(x2938_x3187_s)))
    }
    val x3238 = Pipeline(name="x3238",parent=x3240) { implicit CU => 
      val x3231 = CU.temp()
      val x3198 = CU.temp()
      val x3228 = CU.temp()
      val x3221 = CU.temp()
      val x3225 = CU.temp()
      val x3233 = CU.temp()
      val x3215 = CU.temp()
      val x3213 = CU.temp()
      val x3212 = CU.temp()
      val x3192 = CU.temp()
      val x3214 = CU.temp()
      val x3222 = CU.temp()
      val x3230 = CU.temp()
      val x3202 = CU.temp()
      val x3235 = CU.temp()
      val x3232 = CU.temp()
      val x3229 = CU.temp()
      val x3234 = CU.temp()
      val x3206 = CU.temp()
      val x3226 = CU.temp()
      val x2921 = ScalarBuffer(name="x2921").wtPort(exp_posbias_argin)
      val x3017 = ScalarBuffer(name="x3017").wtPort(x3017_x3036_s)
      val x3210 = ScalarFIFO(size=1,name="x3210").wtPort(x2938_1_s)
      val x3219 = ScalarFIFO(size=1,name="x3219").wtPort(x2983_0_s)
      val x3204 = ScalarFIFO(size=1,name="x3204").wtPort(x2938_6_s)
      val x3200 = ScalarFIFO(size=1,name="x3200").wtPort(x2938_7_s)
      val x3208 = ScalarFIFO(size=1,name="x3208").wtPort(x2938_2_s)
      val x2920 = ScalarBuffer(name="x2920").wtPort(exp_negbias_argin)
      val x3196 = ScalarFIFO(size=1,name="x3196").wtPort(x2938_11_s)
      val x3217 = ScalarFIFO(size=1,name="x3217").wtPort(x2937_3_s)
      val x3013 = CounterChain.copy("x3240", "x3013")
      val ctr11 = Counter(min=x3017.readPort, max=Const(64), step=Const(1), par=1) // Counter
      val x3191 = CounterChain(name = "x3191", ctr11).iter(64)
      Stage(operands=List(Const(0), CU.ctr(x3191(0))), op=FixLt, results=List(x3230))
      Stage(operands=List(CU.ctr(x3191(0)), Const(64)), op=FixLt, results=List(x3231))
      Stage(operands=List(x3230, x3231), op=BitAnd, results=List(x3232))
      Stage(operands=List(CU.ctr(x3191(0)), Const(1)), op=FixSub, results=List(x3206))
      Stage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixSub, results=List(x3202))
      Stage(operands=List(CU.ctr(x3013(0)), Const(1)), op=FixAdd, results=List(x3192))
      Stage(operands=List(CU.ctr(x3191(0)), Const(1)), op=FixAdd, results=List(x3198))
      Stage(operands=List(CU.load(x3196), CU.load(x3200)), op=FixAdd, results=List(x3212))
      Stage(operands=List(x3212, CU.load(x3204)), op=FixAdd, results=List(x3213))
      Stage(operands=List(x3213, CU.load(x3208)), op=FixAdd, results=List(x3214))
      Stage(operands=List(x3214, CU.load(x3210)), op=FixMul, results=List(x3215))
      Stage(operands=List(CU.load(x3219), CU.load(x3210)), op=FixMul, results=List(x3221))
      Stage(operands=List(x3221, Const(0)), op=FixLt, results=List(x3222))
      Stage(operands=List(x3222, CU.load(x2921), CU.load(x2920)), op=Mux, results=List(x3225))
      Stage(operands=List(CU.load(x3217), x3225), op=FixMul, results=List(x3226))
      Stage(operands=List(Const(1), x3226), op=FixLt, results=List(x3228))
      Stage(operands=List(x3228, Const(1), Const(1)), op=Mux, results=List(x3229))
      Stage(operands=List(x3229, Const(1)), op=FixEql, results=List(x3233))
      Stage(operands=List(x3232, x3233), op=BitAnd, results=List(x3234))
      Stage(operands=List(CU.load(x3210)), op=FixNeg, results=List(x3235))
      Stage(operands=List(x3234, x3235, CU.load(x3210)), op=Mux, results=List(CU.scalarOut(x2938_x3237_s)))
    }
    val x3271 = StreamController(name="x3271",parent=x3272) { implicit CU => 
      val ctr12 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1) // Counter
      val x3243 = CounterChain(name = "x3243", ctr12).iter(32)
    }
    val x3267 = Sequential(name="x3267",parent=x3271) { implicit CU => 
      val x3267_unit = CounterChain(name = "x3267_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x3258 = Pipeline(name="x3258",parent=x3267) { implicit CU => 
      val x3250 = CU.temp()
      val x3251 = CU.temp()
      val x3248 = CU.temp()
      val x3253 = ScalarBuffer(name="x3253").wtPort(grid_dram_da)
      val x3243 = CounterChain.copy("x3271", "x3243")
      val x3258_unit = CounterChain(name = "x3258_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
      Stage(operands=List(CU.ctr(x3243(0)), Const(6)), op=FixSla, results=List(x3248))
      Stage(operands=List(x3248, Const(0)), op=FixAdd, results=List(x3250))
      Stage(operands=List(x3250, Const(2)), op=FixSla, results=List(x3251))
      Stage(operands=List(x3251, CU.load(x3253)), op=FixAdd, results=List(CU.scalarOut(x3244_b3397_x3257_b3399_s)))
      Stage(operands=List(Const(256)), op=Bypass, results=List(CU.scalarOut(x3244_b3398_x3257_b3400_s)))
    }
    val x3266 = Pipeline(name="x3266",parent=x3267) { implicit CU => 
      val x3262 = ScalarFIFO(size=1,name="x3262").wtPort(x2938_0_s)
      val ctr13 = Counter(min=Const(0), max=Const(64), step=Const(1), par=16) // Counter
      val x3260 = CounterChain(name = "x3260", ctr13).iter(4)
      Stage(operands=List(CU.load(x3262)), op=Bypass, results=List(CU.vecOut(x3245_x3265_v)))
    }
    val x3268 = MemoryController(name="x3268",parent=x3271,offchip=grid_dram_oc, mctpe=TileStore) { implicit CU => 
      val x3244_b3398 = ScalarFIFO(size=1,name="size").wtPort(x3244_b3398_x3257_b3400_s)
      val x3244_b3397 = ScalarFIFO(size=1,name="offset").wtPort(x3244_b3397_x3257_b3399_s)
      val x3245 = VectorFIFO(size=1,name="data").wtPort(x3245_x3265_v)
    }
    
  }
}
