import pir.graph.{Mux => _, _}
import pir.codegen._
import pir.spade.config._
import pir.Design
import pir.util.enums._
import pir.util._
import pir.PIRApp

object TensorLoadStore extends PIRApp {
  def main(top:Top) = {
    val x5430_x5540_x5544_s = Scalar("x5430_x5540_x5544")
    val x5580_b5902_x5617_b5904_s = Scalar("x5580_b5902_x5617_b5904")
    val x5330_x5415_x5419_s = Scalar("x5330_x5415_x5419")
    val bus_824_s = Scalar("bus_824")
    val x5499_b5892_x5529_b5894_s = Scalar("x5499_b5892_x5529_b5894")
    val bus_718_s = Scalar("bus_718")
    val bus_720_s = Scalar("bus_720")
    val x5557_x5692_x5696_s = Scalar("x5557_x5692_x5696")
    val x5641_b5914_x5679_b5916_s = Scalar("x5641_b5914_x5679_b5916")
    val x5557_x5633_s = Scalar("x5557_x5633")
    val srcDRAM5_da = DRAMAddress("srcDRAM5", "srcDRAM5")
    val srcDRAM3_oc = OffChip("srcDRAM3")
    val x5330_x5378_s = Scalar("x5330_x5378")
    val X_argin = ArgIn("X")
    val srcDRAM4_oc = OffChip("srcDRAM4")
    val dstDRAM4_oc = OffChip("dstDRAM4")
    val x5580_b5901_x5617_b5903_s = Scalar("x5580_b5901_x5617_b5903")
    val x5345_b5865_x5366_b5867_s = Scalar("x5345_b5865_x5366_b5867")
    val Y_argin = ArgIn("Y")
    val x5641_b5913_x5679_b5915_s = Scalar("x5641_b5913_x5679_b5915")
    val bus_620_s = Scalar("bus_620")
    val bus_785_s = Scalar("bus_785")
    val bus_783_s = Scalar("bus_783")
    val x5581_x5619_data_v = Vector("x5581_x5619_data")
    val srcDRAM4_da = DRAMAddress("srcDRAM4", "srcDRAM4")
    val bus_726_s = Scalar("bus_726")
    val bus_690_s = Scalar("bus_690")
    val dstDRAM3_da = DRAMAddress("dstDRAM3", "dstDRAM3")
    val x5346_x5368_data_v = Vector("x5346_x5368_data")
    val dstDRAM5_oc = OffChip("dstDRAM5")
    val C_argin = ArgIn("C")
    val dstDRAM3_oc = OffChip("dstDRAM3")
    val bus_719_s = Scalar("bus_719")
    val bus_822_s = Scalar("bus_822")
    val bus_829_s = Scalar("bus_829")
    val bus_689_s = Scalar("bus_689")
    val srcDRAM3_da = DRAMAddress("srcDRAM3", "srcDRAM3")
    val x5384_b5873_x5406_b5875_s = Scalar("x5384_b5873_x5406_b5875")
    val x5449_b5881_x5478_b5883_s = Scalar("x5449_b5881_x5478_b5883")
    val bus_790_s = Scalar("bus_790")
    val bus_641_s = Scalar("bus_641")
    val bus_688_s = Scalar("bus_688")
    val x5499_b5891_x5529_b5893_s = Scalar("x5499_b5891_x5529_b5893")
    val x5642_x5695_v = Vector("x5642_x5695")
    val bus_796_s = Scalar("bus_796")
    val srcDRAM5_oc = OffChip("srcDRAM5")
    val x5345_b5866_x5366_b5868_s = Scalar("x5345_b5866_x5366_b5868")
    val dstDRAM4_da = DRAMAddress("dstDRAM4", "dstDRAM4")
    val bus_696_s = Scalar("bus_696")
    val x5430_x5492_s = Scalar("x5430_x5492")
    val bus_835_s = Scalar("bus_835")
    val x5449_b5882_x5478_b5884_s = Scalar("x5449_b5882_x5478_b5884")
    val x5385_x5418_v = Vector("x5385_x5418")
    val x5384_b5874_x5406_b5876_s = Scalar("x5384_b5874_x5406_b5876")
    val x5500_x5543_v = Vector("x5500_x5543")
    val x5450_x5480_data_v = Vector("x5450_x5480_data")
    val P_argin = ArgIn("P")
    val R_argin = ArgIn("R")
    val dstDRAM5_da = DRAMAddress("dstDRAM5", "dstDRAM5")
    val x5711 = Sequential(name="x5711",parent=top) { implicit CU => 
      val x5711_unit = CounterChain(name = "x5711_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5330_dsp0 = MemoryPipeline(name="x5330_dsp0",parent="x5711") { implicit CU => 
      val b5877 = CU.temp()
      val b5870 = CU.temp()
      val b5878 = CU.temp()
      val b5871 = CU.temp()
      val b5869 = CU.temp()
      val b5879 = CU.temp()
      val x5378_x5378 = ScalarFIFO(size=1).wtPort(x5330_x5378_s)
      val x5344 = CounterChain.copy("x5380", "x5344")
      val x5409 = CounterChain.copy("x5419_0", "x5409")
      val x5383 = CounterChain.copy("x5428", "x5383")
      val x5370 = CounterChain.copy("x5379_0", "x5370")
      val x5330_x5415 = SRAM(size=64,banking = Strided(1)).wtPort(x5378_x5378.readPort).rdPort(x5330_x5415_x5419_s)
      WAStage(operands=List(CU.ctr(x5344(1)), Const(16)), op=FixMul, results=List(b5869))
      WAStage(operands=List(b5869, CU.ctr(x5370(0))), op=FixAdd, results=List(b5870))
      WAStage(operands=List(CU.ctr(x5344(0)), Const(32)), op=FixMul, results=List(b5871))
      WAStage(operands=List(b5871, b5870), op=FixAdd, results=List(x5330_x5415.writeAddr))
      RAStage(operands=List(CU.ctr(x5383(1)), Const(16)), op=FixMul, results=List(b5877))
      RAStage(operands=List(b5877, CU.ctr(x5409(0))), op=FixAdd, results=List(b5878))
      RAStage(operands=List(CU.ctr(x5383(0)), Const(32)), op=FixMul, results=List(b5879))
      RAStage(operands=List(b5879, b5878), op=FixAdd, results=List(x5330_x5415.readAddr))
    }
    val x5429 = MetaPipeline(name="x5429",parent=x5711) { implicit CU => 
      val x5287_x5335 = ScalarBuffer().wtPort(P_argin)
      val x5289_x5331 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5333 = ScalarBuffer().wtPort(R_argin)
      val ctr1 = Counter(min=Const(0), max=x5287_x5335.readPort, step=Const(2), par=1) // Counter
      val ctr2 = Counter(min=Const(0), max=x5288_x5333.readPort, step=Const(2), par=1) // Counter
      val ctr3 = Counter(min=Const(0), max=x5289_x5331.readPort, step=Const(16), par=1) // Counter
      val x5337 = CounterChain(name = "x5337", ctr1, ctr2, ctr3).iter(1)
    }
    val x5380 = StreamController(name="x5380",parent=x5429) { implicit CU => 
      val ctr4 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr5 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val x5344 = CounterChain(name = "x5344", ctr4, ctr5).iter(4)
    }
    val x5367 = StreamController(name="x5367",parent=x5380) { implicit CU => 
      val x5367_unit = CounterChain(name = "x5367_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5367_0 = Pipeline(name="x5367_0",parent=x5367) { implicit CU => 
      val x5347 = CU.temp()
      val x5352 = CU.temp()
      val x5348 = CU.temp()
      val x5353 = CU.temp()
      val x5351 = CU.temp()
      val x5289_x5350 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5349 = ScalarBuffer().wtPort(R_argin)
      val x5337 = CounterChain.copy("x5429", "x5337")
      val x5344 = CounterChain.copy("x5380", "x5344")
      Stage(operands=List(CU.ctr(x5337(0)), CU.ctr(x5344(0))), op=FixAdd, results=List(x5347))
      Stage(operands=List(CU.load(x5288_x5349), CU.load(x5289_x5350)), op=FixMul, results=List(x5351))
      Stage(operands=List(x5347, x5351), op=FixMul, results=List(x5352))
      Stage(operands=List(CU.ctr(x5337(1)), CU.ctr(x5344(1))), op=FixAdd, results=List(x5348))
      Stage(operands=List(x5348, CU.load(x5289_x5350)), op=FixMul, results=List(x5353))
      Stage(operands=List(x5352, x5353), op=FixAdd, results=List(CU.scalarOut(bus_620_s)))
    }
    val x5367_1 = Pipeline(name="x5367_1",parent=x5367) { implicit CU => 
      val x5356 = CU.temp()
      val x5355 = CU.temp()
      val x5358 = ScalarBuffer().wtPort(srcDRAM3_da)
      val x5354 = ScalarFIFO(size=1).wtPort(bus_620_s)
      val x5337 = CounterChain.copy("x5429", "x5337")
      Stage(operands=List(CU.load(x5354), CU.ctr(x5337(2))), op=FixAdd, results=List(x5355))
      Stage(operands=List(x5355, Const(4)), op=FixMul, results=List(x5356))
      Stage(operands=List(x5356, CU.load(x5358)), op=FixAdd, results=List(CU.scalarOut(x5345_b5865_x5366_b5867_s)))
      Stage(operands=List(Const(64)), op=Bypass, results=List(CU.scalarOut(x5345_b5866_x5366_b5868_s)))
    }
    val x5368 = MemoryController(name="x5368",parent=x5380,offchip=srcDRAM3_oc, mctpe=TileLoad) { implicit CU => 
      val x5345_b5866_x5368 = ScalarFIFO(name="size",size=1).wtPort(x5345_b5866_x5366_b5868_s)
      val x5345_b5865_x5368 = ScalarFIFO(name="offset",size=1).wtPort(x5345_b5865_x5366_b5867_s)
      CU.newVout("data", x5346_x5368_data_v)
    }
    val x5379_0 = Pipeline(name="x5379_0",parent=x5380) { implicit CU => 
      val x5346_x5376 = VectorFIFO(size=1).wtPort(x5346_x5368_data_v)
      val ctr6 = Counter(min=Const(0), max=Const(16), step=Const(1), par=1) // Counter
      val x5370 = CounterChain(name = "x5370", ctr6).iter(16)
      Stage(operands=List(CU.load(x5346_x5376)), op=Bypass, results=List(CU.scalarOut(x5330_x5378_s)))
    }
    val x5428 = StreamController(name="x5428",parent=x5429) { implicit CU => 
      val ctr7 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr8 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val x5383 = CounterChain(name = "x5383", ctr7, ctr8).iter(4)
    }
    val x5420 = Sequential(name="x5420",parent=x5428) { implicit CU => 
      val x5420_unit = CounterChain(name = "x5420_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5407 = StreamController(name="x5407",parent=x5420) { implicit CU => 
      val x5407_unit = CounterChain(name = "x5407_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5407_0 = Pipeline(name="x5407_0",parent=x5407) { implicit CU => 
      val x5391 = CU.temp()
      val x5388 = CU.temp()
      val x5387 = CU.temp()
      val x5393 = CU.temp()
      val x5392 = CU.temp()
      val x5289_x5390 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5389 = ScalarBuffer().wtPort(R_argin)
      val x5337 = CounterChain.copy("x5429", "x5337")
      val x5383 = CounterChain.copy("x5428", "x5383")
      Stage(operands=List(CU.ctr(x5337(0)), CU.ctr(x5383(0))), op=FixAdd, results=List(x5387))
      Stage(operands=List(CU.load(x5288_x5389), CU.load(x5289_x5390)), op=FixMul, results=List(x5391))
      Stage(operands=List(x5387, x5391), op=FixMul, results=List(x5392))
      Stage(operands=List(CU.ctr(x5337(1)), CU.ctr(x5383(1))), op=FixAdd, results=List(x5388))
      Stage(operands=List(x5388, CU.load(x5289_x5390)), op=FixMul, results=List(x5393))
      Stage(operands=List(x5392, x5393), op=FixAdd, results=List(CU.scalarOut(bus_641_s)))
    }
    val x5407_1 = Pipeline(name="x5407_1",parent=x5407) { implicit CU => 
      val x5396 = CU.temp()
      val x5395 = CU.temp()
      val x5394 = ScalarFIFO(size=1).wtPort(bus_641_s)
      val x5398 = ScalarBuffer().wtPort(dstDRAM3_da)
      val x5337 = CounterChain.copy("x5429", "x5337")
      Stage(operands=List(CU.load(x5394), CU.ctr(x5337(2))), op=FixAdd, results=List(x5395))
      Stage(operands=List(x5395, Const(4)), op=FixMul, results=List(x5396))
      Stage(operands=List(x5396, CU.load(x5398)), op=FixAdd, results=List(CU.scalarOut(x5384_b5873_x5406_b5875_s)))
      Stage(operands=List(Const(64)), op=Bypass, results=List(CU.scalarOut(x5384_b5874_x5406_b5876_s)))
    }
    val x5419_0 = Pipeline(name="x5419_0",parent=x5420) { implicit CU => 
      val x5415_x5415 = ScalarFIFO(size=1).wtPort(x5330_x5415_x5419_s)
      val ctr9 = Counter(min=Const(0), max=Const(16), step=Const(1), par=1) // Counter
      val x5409 = CounterChain(name = "x5409", ctr9).iter(16)
      Stage(operands=List(CU.load(x5415_x5415)), op=Bypass, results=List(CU.vecOut(x5385_x5418_v)))
    }
    val x5421 = MemoryController(name="x5421",parent=x5428,offchip=dstDRAM3_oc, mctpe=TileStore) { implicit CU => 
      val x5384_b5873_x5421 = ScalarFIFO(name="offset",size=1).wtPort(x5384_b5873_x5406_b5875_s)
      val x5385_x5421 = VectorFIFO(name="data",size=1).wtPort(x5385_x5418_v)
      val x5384_b5874_x5421 = ScalarFIFO(name="size",size=1).wtPort(x5384_b5874_x5406_b5876_s)
    }
    val x5430_dsp0 = MemoryPipeline(name="x5430_dsp0",parent="x5711") { implicit CU => 
      val b5889 = CU.temp()
      val b5886 = CU.temp()
      val b5899 = CU.temp()
      val b5885 = CU.temp()
      val b5898 = CU.temp()
      val b5897 = CU.temp()
      val b5887 = CU.temp()
      val b5896 = CU.temp()
      val b5895 = CU.temp()
      val b5888 = CU.temp()
      val x5492_x5492 = ScalarFIFO(size=1).wtPort(x5430_x5492_s)
      val x5448 = CounterChain.copy("x5494", "x5448")
      val x5498 = CounterChain.copy("x5555", "x5498")
      val x5482 = CounterChain.copy("x5493_0", "x5482")
      val x5532 = CounterChain.copy("x5544_0", "x5532")
      val x5430_x5540 = SRAM(size=128,banking = Strided(1)).wtPort(x5492_x5492.readPort).rdPort(x5430_x5540_x5544_s)
      WAStage(operands=List(CU.ctr(x5448(2)), Const(16)), op=FixMul, results=List(b5885))
      WAStage(operands=List(b5885, CU.ctr(x5482(0))), op=FixAdd, results=List(b5886))
      WAStage(operands=List(CU.ctr(x5448(1)), Const(32)), op=FixMul, results=List(b5887))
      WAStage(operands=List(b5887, b5886), op=FixAdd, results=List(b5888))
      WAStage(operands=List(CU.ctr(x5448(0)), Const(64)), op=FixMul, results=List(b5889))
      WAStage(operands=List(b5889, b5888), op=FixAdd, results=List(x5430_x5540.writeAddr))
      RAStage(operands=List(CU.ctr(x5498(2)), Const(16)), op=FixMul, results=List(b5895))
      RAStage(operands=List(b5895, CU.ctr(x5532(0))), op=FixAdd, results=List(b5896))
      RAStage(operands=List(CU.ctr(x5498(1)), Const(32)), op=FixMul, results=List(b5897))
      RAStage(operands=List(b5897, b5896), op=FixAdd, results=List(b5898))
      RAStage(operands=List(CU.ctr(x5498(0)), Const(64)), op=FixMul, results=List(b5899))
      RAStage(operands=List(b5899, b5898), op=FixAdd, results=List(x5430_x5540.readAddr))
    }
    val x5556 = MetaPipeline(name="x5556",parent=x5711) { implicit CU => 
      val x5287_x5435 = ScalarBuffer().wtPort(P_argin)
      val x5289_x5431 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5433 = ScalarBuffer().wtPort(R_argin)
      val x5302_x5437 = ScalarBuffer().wtPort(X_argin)
      val ctr10 = Counter(min=Const(0), max=x5302_x5437.readPort, step=Const(2), par=1) // Counter
      val ctr11 = Counter(min=Const(0), max=x5287_x5435.readPort, step=Const(2), par=1) // Counter
      val ctr12 = Counter(min=Const(0), max=x5288_x5433.readPort, step=Const(2), par=1) // Counter
      val ctr13 = Counter(min=Const(0), max=x5289_x5431.readPort, step=Const(16), par=1) // Counter
      val x5439 = CounterChain(name = "x5439", ctr10, ctr11, ctr12, ctr13).iter(1)
    }
    val x5494 = StreamController(name="x5494",parent=x5556) { implicit CU => 
      val ctr14 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr15 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr16 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val x5448 = CounterChain(name = "x5448", ctr14, ctr15, ctr16).iter(8)
    }
    val x5479 = StreamController(name="x5479",parent=x5494) { implicit CU => 
      val x5479_unit = CounterChain(name = "x5479_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5479_0 = Pipeline(name="x5479_0",parent=x5479) { implicit CU => 
      val x5451 = CU.temp()
      val x5456 = CU.temp()
      val x5458 = CU.temp()
      val x5287_x5454 = ScalarBuffer().wtPort(P_argin)
      val x5289_x5457 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5455 = ScalarBuffer().wtPort(R_argin)
      val x5439 = CounterChain.copy("x5556", "x5439")
      val x5448 = CounterChain.copy("x5494", "x5448")
      Stage(operands=List(CU.ctr(x5439(0)), CU.ctr(x5448(0))), op=FixAdd, results=List(x5451))
      Stage(operands=List(CU.load(x5287_x5454), CU.load(x5288_x5455)), op=FixMul, results=List(x5456))
      Stage(operands=List(x5456, CU.load(x5289_x5457)), op=FixMul, results=List(x5458))
      Stage(operands=List(x5451, x5458), op=FixMul, results=List(CU.scalarOut(bus_688_s)))
      Stage(operands=List(CU.ctr(x5439(1)), CU.ctr(x5448(1))), op=FixAdd, results=List(CU.scalarOut(bus_689_s)))
      Stage(operands=List(CU.load(x5288_x5455), CU.load(x5289_x5457)), op=FixMul, results=List(CU.scalarOut(bus_690_s)))
    }
    val x5479_1 = Pipeline(name="x5479_1",parent=x5479) { implicit CU => 
      val x5464 = CU.temp()
      val x5453 = CU.temp()
      val x5462 = CU.temp()
      val x5463 = CU.temp()
      val x5461 = CU.temp()
      val x5452 = ScalarFIFO(size=1).wtPort(bus_689_s)
      val x5460 = ScalarFIFO(size=1).wtPort(bus_688_s)
      val x5289_x5457 = ScalarBuffer().wtPort(C_argin)
      val x5459 = ScalarFIFO(size=1).wtPort(bus_690_s)
      val x5439 = CounterChain.copy("x5556", "x5439")
      val x5448 = CounterChain.copy("x5494", "x5448")
      Stage(operands=List(CU.load(x5452), CU.load(x5459)), op=FixMul, results=List(x5461))
      Stage(operands=List(CU.load(x5460), x5461), op=FixAdd, results=List(x5463))
      Stage(operands=List(CU.ctr(x5439(2)), CU.ctr(x5448(2))), op=FixAdd, results=List(x5453))
      Stage(operands=List(x5453, CU.load(x5289_x5457)), op=FixMul, results=List(x5462))
      Stage(operands=List(x5462, CU.ctr(x5439(3))), op=FixAdd, results=List(x5464))
      Stage(operands=List(x5463, x5464), op=FixAdd, results=List(CU.scalarOut(bus_696_s)))
    }
    val x5479_2 = Pipeline(name="x5479_2",parent=x5479) { implicit CU => 
      val x5466 = CU.temp()
      val x5468 = ScalarBuffer().wtPort(srcDRAM4_da)
      val x5465 = ScalarFIFO(size=1).wtPort(bus_696_s)
      Stage(operands=List(CU.load(x5465), Const(4)), op=FixMul, results=List(x5466))
      Stage(operands=List(x5466, CU.load(x5468)), op=FixAdd, results=List(CU.scalarOut(x5449_b5881_x5478_b5883_s)))
      Stage(operands=List(Const(64)), op=Bypass, results=List(CU.scalarOut(x5449_b5882_x5478_b5884_s)))
    }
    val x5480 = MemoryController(name="x5480",parent=x5494,offchip=srcDRAM4_oc, mctpe=TileLoad) { implicit CU => 
      val x5449_b5882_x5480 = ScalarFIFO(name="size",size=1).wtPort(x5449_b5882_x5478_b5884_s)
      val x5449_b5881_x5480 = ScalarFIFO(name="offset",size=1).wtPort(x5449_b5881_x5478_b5883_s)
      CU.newVout("data", x5450_x5480_data_v)
    }
    val x5493_0 = Pipeline(name="x5493_0",parent=x5494) { implicit CU => 
      val x5450_x5490 = VectorFIFO(size=1).wtPort(x5450_x5480_data_v)
      val ctr17 = Counter(min=Const(0), max=Const(16), step=Const(1), par=1) // Counter
      val x5482 = CounterChain(name = "x5482", ctr17).iter(16)
      Stage(operands=List(CU.load(x5450_x5490)), op=Bypass, results=List(CU.scalarOut(x5430_x5492_s)))
    }
    val x5555 = StreamController(name="x5555",parent=x5556) { implicit CU => 
      val ctr18 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr19 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr20 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val x5498 = CounterChain(name = "x5498", ctr18, ctr19, ctr20).iter(8)
    }
    val x5545 = Sequential(name="x5545",parent=x5555) { implicit CU => 
      val x5545_unit = CounterChain(name = "x5545_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5530 = StreamController(name="x5530",parent=x5545) { implicit CU => 
      val x5530_unit = CounterChain(name = "x5530_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5530_0 = Pipeline(name="x5530_0",parent=x5530) { implicit CU => 
      val x5507 = CU.temp()
      val x5502 = CU.temp()
      val x5509 = CU.temp()
      val x5287_x5505 = ScalarBuffer().wtPort(P_argin)
      val x5289_x5508 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5506 = ScalarBuffer().wtPort(R_argin)
      val x5439 = CounterChain.copy("x5556", "x5439")
      val x5498 = CounterChain.copy("x5555", "x5498")
      Stage(operands=List(CU.ctr(x5439(0)), CU.ctr(x5498(0))), op=FixAdd, results=List(x5502))
      Stage(operands=List(CU.load(x5287_x5505), CU.load(x5288_x5506)), op=FixMul, results=List(x5507))
      Stage(operands=List(x5507, CU.load(x5289_x5508)), op=FixMul, results=List(x5509))
      Stage(operands=List(x5502, x5509), op=FixMul, results=List(CU.scalarOut(bus_718_s)))
      Stage(operands=List(CU.ctr(x5439(1)), CU.ctr(x5498(1))), op=FixAdd, results=List(CU.scalarOut(bus_719_s)))
      Stage(operands=List(CU.load(x5288_x5506), CU.load(x5289_x5508)), op=FixMul, results=List(CU.scalarOut(bus_720_s)))
    }
    val x5530_1 = Pipeline(name="x5530_1",parent=x5530) { implicit CU => 
      val x5514 = CU.temp()
      val x5504 = CU.temp()
      val x5515 = CU.temp()
      val x5513 = CU.temp()
      val x5512 = CU.temp()
      val x5503 = ScalarFIFO(size=1).wtPort(bus_719_s)
      val x5289_x5508 = ScalarBuffer().wtPort(C_argin)
      val x5511 = ScalarFIFO(size=1).wtPort(bus_718_s)
      val x5510 = ScalarFIFO(size=1).wtPort(bus_720_s)
      val x5439 = CounterChain.copy("x5556", "x5439")
      val x5498 = CounterChain.copy("x5555", "x5498")
      Stage(operands=List(CU.load(x5503), CU.load(x5510)), op=FixMul, results=List(x5512))
      Stage(operands=List(CU.load(x5511), x5512), op=FixAdd, results=List(x5514))
      Stage(operands=List(CU.ctr(x5439(2)), CU.ctr(x5498(2))), op=FixAdd, results=List(x5504))
      Stage(operands=List(x5504, CU.load(x5289_x5508)), op=FixMul, results=List(x5513))
      Stage(operands=List(x5513, CU.ctr(x5439(3))), op=FixAdd, results=List(x5515))
      Stage(operands=List(x5514, x5515), op=FixAdd, results=List(CU.scalarOut(bus_726_s)))
    }
    val x5530_2 = Pipeline(name="x5530_2",parent=x5530) { implicit CU => 
      val x5517 = CU.temp()
      val x5516 = ScalarFIFO(size=1).wtPort(bus_726_s)
      val x5519 = ScalarBuffer().wtPort(dstDRAM4_da)
      Stage(operands=List(CU.load(x5516), Const(4)), op=FixMul, results=List(x5517))
      Stage(operands=List(x5517, CU.load(x5519)), op=FixAdd, results=List(CU.scalarOut(x5499_b5891_x5529_b5893_s)))
      Stage(operands=List(Const(64)), op=Bypass, results=List(CU.scalarOut(x5499_b5892_x5529_b5894_s)))
    }
    val x5544_0 = Pipeline(name="x5544_0",parent=x5545) { implicit CU => 
      val x5540_x5540 = ScalarFIFO(size=1).wtPort(x5430_x5540_x5544_s)
      val ctr21 = Counter(min=Const(0), max=Const(16), step=Const(1), par=1) // Counter
      val x5532 = CounterChain(name = "x5532", ctr21).iter(16)
      Stage(operands=List(CU.load(x5540_x5540)), op=Bypass, results=List(CU.vecOut(x5500_x5543_v)))
    }
    val x5546 = MemoryController(name="x5546",parent=x5555,offchip=dstDRAM4_oc, mctpe=TileStore) { implicit CU => 
      val x5499_b5891_x5546 = ScalarFIFO(name="offset",size=1).wtPort(x5499_b5891_x5529_b5893_s)
      val x5499_b5892_x5546 = ScalarFIFO(name="size",size=1).wtPort(x5499_b5892_x5529_b5894_s)
      val x5500_x5546 = VectorFIFO(name="data",size=1).wtPort(x5500_x5543_v)
    }
    val x5557_dsp0 = MemoryPipeline(name="x5557_dsp0",parent="x5711") { implicit CU => 
      val b5907 = CU.temp()
      val b5920 = CU.temp()
      val b5910 = CU.temp()
      val b5908 = CU.temp()
      val b5921 = CU.temp()
      val b5906 = CU.temp()
      val b5923 = CU.temp()
      val b5918 = CU.temp()
      val b5917 = CU.temp()
      val b5919 = CU.temp()
      val b5911 = CU.temp()
      val b5905 = CU.temp()
      val b5909 = CU.temp()
      val b5922 = CU.temp()
      val x5633_x5633 = ScalarFIFO(size=1).wtPort(x5557_x5633_s)
      val x5579 = CounterChain.copy("x5635", "x5579")
      val x5640 = CounterChain.copy("x5709", "x5640")
      val x5682 = CounterChain.copy("x5696_0", "x5682")
      val x5621 = CounterChain.copy("x5634_0", "x5621")
      val x5557_x5692 = SRAM(size=256,banking = Strided(1)).wtPort(x5633_x5633.readPort).rdPort(x5557_x5692_x5696_s)
      WAStage(operands=List(CU.ctr(x5579(3)), Const(16)), op=FixMul, results=List(b5905))
      WAStage(operands=List(b5905, CU.ctr(x5621(0))), op=FixAdd, results=List(b5906))
      WAStage(operands=List(CU.ctr(x5579(2)), Const(32)), op=FixMul, results=List(b5907))
      WAStage(operands=List(b5907, b5906), op=FixAdd, results=List(b5908))
      WAStage(operands=List(CU.ctr(x5579(1)), Const(64)), op=FixMul, results=List(b5909))
      WAStage(operands=List(b5909, b5908), op=FixAdd, results=List(b5910))
      WAStage(operands=List(CU.ctr(x5579(0)), Const(128)), op=FixMul, results=List(b5911))
      WAStage(operands=List(b5911, b5910), op=FixAdd, results=List(x5557_x5692.writeAddr))
      RAStage(operands=List(CU.ctr(x5640(3)), Const(16)), op=FixMul, results=List(b5917))
      RAStage(operands=List(b5917, CU.ctr(x5682(0))), op=FixAdd, results=List(b5918))
      RAStage(operands=List(CU.ctr(x5640(2)), Const(32)), op=FixMul, results=List(b5919))
      RAStage(operands=List(b5919, b5918), op=FixAdd, results=List(b5920))
      RAStage(operands=List(CU.ctr(x5640(1)), Const(64)), op=FixMul, results=List(b5921))
      RAStage(operands=List(b5921, b5920), op=FixAdd, results=List(b5922))
      RAStage(operands=List(CU.ctr(x5640(0)), Const(128)), op=FixMul, results=List(b5923))
      RAStage(operands=List(b5923, b5922), op=FixAdd, results=List(x5557_x5692.readAddr))
    }
    val x5710 = MetaPipeline(name="x5710",parent=x5711) { implicit CU => 
      val x5315_x5566 = ScalarBuffer().wtPort(Y_argin)
      val x5289_x5558 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5560 = ScalarBuffer().wtPort(R_argin)
      val x5287_x5562 = ScalarBuffer().wtPort(P_argin)
      val x5302_x5564 = ScalarBuffer().wtPort(X_argin)
      val ctr22 = Counter(min=Const(0), max=x5315_x5566.readPort, step=Const(2), par=1) // Counter
      val ctr23 = Counter(min=Const(0), max=x5302_x5564.readPort, step=Const(2), par=1) // Counter
      val ctr24 = Counter(min=Const(0), max=x5287_x5562.readPort, step=Const(2), par=1) // Counter
      val ctr25 = Counter(min=Const(0), max=x5288_x5560.readPort, step=Const(2), par=1) // Counter
      val ctr26 = Counter(min=Const(0), max=x5289_x5558.readPort, step=Const(16), par=1) // Counter
      val x5568 = CounterChain(name = "x5568", ctr22, ctr23, ctr24, ctr25, ctr26).iter(1)
    }
    val x5635 = StreamController(name="x5635",parent=x5710) { implicit CU => 
      val ctr27 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr28 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr29 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr30 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val x5579 = CounterChain(name = "x5579", ctr27, ctr28, ctr29, ctr30).iter(16)
    }
    val x5618 = StreamController(name="x5618",parent=x5635) { implicit CU => 
      val x5618_unit = CounterChain(name = "x5618_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5618_0 = Pipeline(name="x5618_0",parent=x5618) { implicit CU => 
      val x5591 = CU.temp()
      val x5592 = CU.temp()
      val x5588 = CU.temp()
      val x5582 = CU.temp()
      val x5287_x5587 = ScalarBuffer().wtPort(P_argin)
      val x5289_x5590 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5589 = ScalarBuffer().wtPort(R_argin)
      val x5302_x5586 = ScalarBuffer().wtPort(X_argin)
      val x5568 = CounterChain.copy("x5710", "x5568")
      val x5579 = CounterChain.copy("x5635", "x5579")
      Stage(operands=List(CU.ctr(x5568(0)), CU.ctr(x5579(0))), op=FixAdd, results=List(x5582))
      Stage(operands=List(CU.load(x5302_x5586), CU.load(x5287_x5587)), op=FixMul, results=List(x5588))
      Stage(operands=List(CU.load(x5288_x5589), CU.load(x5289_x5590)), op=FixMul, results=List(x5591, CU.scalarOut(bus_783_s)))
      Stage(operands=List(x5588, x5591), op=FixMul, results=List(x5592))
      Stage(operands=List(x5582, x5592), op=FixMul, results=List(CU.scalarOut(bus_785_s)))
    }
    val x5618_1 = Pipeline(name="x5618_1",parent=x5618) { implicit CU => 
      val x5594 = CU.temp()
      val x5593 = CU.temp()
      val x5596 = CU.temp()
      val x5583 = CU.temp()
      val x5287_x5587 = ScalarBuffer().wtPort(P_argin)
      val x5595 = ScalarFIFO(size=1).wtPort(bus_785_s)
      val x5289_x5590 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5589 = ScalarBuffer().wtPort(R_argin)
      val x5568 = CounterChain.copy("x5710", "x5568")
      val x5579 = CounterChain.copy("x5635", "x5579")
      Stage(operands=List(CU.ctr(x5568(1)), CU.ctr(x5579(1))), op=FixAdd, results=List(x5583))
      Stage(operands=List(CU.load(x5287_x5587), CU.load(x5288_x5589)), op=FixMul, results=List(x5593))
      Stage(operands=List(x5593, CU.load(x5289_x5590)), op=FixMul, results=List(x5594))
      Stage(operands=List(x5583, x5594), op=FixMul, results=List(x5596))
      Stage(operands=List(CU.load(x5595), x5596), op=FixAdd, results=List(CU.scalarOut(bus_790_s)))
    }
    val x5618_2 = Pipeline(name="x5618_2",parent=x5618) { implicit CU => 
      val x5600 = CU.temp()
      val x5597 = CU.temp()
      val x5584 = CU.temp()
      val x5585 = CU.temp()
      val x5598 = CU.temp()
      val x5289_x5590 = ScalarBuffer().wtPort(C_argin)
      val x5599 = ScalarFIFO(size=1).wtPort(bus_790_s)
      val x5591 = ScalarFIFO(size=1).wtPort(bus_783_s)
      val x5568 = CounterChain.copy("x5710", "x5568")
      val x5579 = CounterChain.copy("x5635", "x5579")
      Stage(operands=List(CU.ctr(x5568(2)), CU.ctr(x5579(2))), op=FixAdd, results=List(x5584))
      Stage(operands=List(x5584, CU.load(x5591)), op=FixMul, results=List(x5597))
      Stage(operands=List(CU.ctr(x5568(3)), CU.ctr(x5579(3))), op=FixAdd, results=List(x5585))
      Stage(operands=List(x5585, CU.load(x5289_x5590)), op=FixMul, results=List(x5598))
      Stage(operands=List(x5597, x5598), op=FixAdd, results=List(x5600))
      Stage(operands=List(CU.load(x5599), x5600), op=FixAdd, results=List(CU.scalarOut(bus_796_s)))
    }
    val x5618_3 = Pipeline(name="x5618_3",parent=x5618) { implicit CU => 
      val x5603 = CU.temp()
      val x5602 = CU.temp()
      val x5601 = ScalarFIFO(size=1).wtPort(bus_796_s)
      val x5605 = ScalarBuffer().wtPort(srcDRAM5_da)
      val x5568 = CounterChain.copy("x5710", "x5568")
      Stage(operands=List(CU.load(x5601), CU.ctr(x5568(4))), op=FixAdd, results=List(x5602))
      Stage(operands=List(x5602, Const(4)), op=FixMul, results=List(x5603))
      Stage(operands=List(x5603, CU.load(x5605)), op=FixAdd, results=List(CU.scalarOut(x5580_b5901_x5617_b5903_s)))
      Stage(operands=List(Const(64)), op=Bypass, results=List(CU.scalarOut(x5580_b5902_x5617_b5904_s)))
    }
    val x5619 = MemoryController(name="x5619",parent=x5635,offchip=srcDRAM5_oc, mctpe=TileLoad) { implicit CU => 
      val x5580_b5902_x5619 = ScalarFIFO(name="size",size=1).wtPort(x5580_b5902_x5617_b5904_s)
      val x5580_b5901_x5619 = ScalarFIFO(name="offset",size=1).wtPort(x5580_b5901_x5617_b5903_s)
      CU.newVout("data", x5581_x5619_data_v)
    }
    val x5634_0 = Pipeline(name="x5634_0",parent=x5635) { implicit CU => 
      val x5581_x5631 = VectorFIFO(size=1).wtPort(x5581_x5619_data_v)
      val ctr31 = Counter(min=Const(0), max=Const(16), step=Const(1), par=1) // Counter
      val x5621 = CounterChain(name = "x5621", ctr31).iter(16)
      Stage(operands=List(CU.load(x5581_x5631)), op=Bypass, results=List(CU.scalarOut(x5557_x5633_s)))
    }
    val x5709 = StreamController(name="x5709",parent=x5710) { implicit CU => 
      val ctr32 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr33 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr34 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val ctr35 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1) // Counter
      val x5640 = CounterChain(name = "x5640", ctr32, ctr33, ctr34, ctr35).iter(16)
    }
    val x5697 = Sequential(name="x5697",parent=x5709) { implicit CU => 
      val x5697_unit = CounterChain(name = "x5697_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5680 = StreamController(name="x5680",parent=x5697) { implicit CU => 
      val x5680_unit = CounterChain(name = "x5680_unit", Counter(Const(0), Const(1), Const(1), par=1)).iter(1l)
    }
    val x5680_0 = Pipeline(name="x5680_0",parent=x5680) { implicit CU => 
      val x5653 = CU.temp()
      val x5654 = CU.temp()
      val x5644 = CU.temp()
      val x5650 = CU.temp()
      val x5287_x5649 = ScalarBuffer().wtPort(P_argin)
      val x5289_x5652 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5651 = ScalarBuffer().wtPort(R_argin)
      val x5302_x5648 = ScalarBuffer().wtPort(X_argin)
      val x5568 = CounterChain.copy("x5710", "x5568")
      val x5640 = CounterChain.copy("x5709", "x5640")
      Stage(operands=List(CU.ctr(x5568(0)), CU.ctr(x5640(0))), op=FixAdd, results=List(x5644))
      Stage(operands=List(CU.load(x5302_x5648), CU.load(x5287_x5649)), op=FixMul, results=List(x5650))
      Stage(operands=List(CU.load(x5288_x5651), CU.load(x5289_x5652)), op=FixMul, results=List(x5653, CU.scalarOut(bus_822_s)))
      Stage(operands=List(x5650, x5653), op=FixMul, results=List(x5654))
      Stage(operands=List(x5644, x5654), op=FixMul, results=List(CU.scalarOut(bus_824_s)))
    }
    val x5680_1 = Pipeline(name="x5680_1",parent=x5680) { implicit CU => 
      val x5658 = CU.temp()
      val x5656 = CU.temp()
      val x5655 = CU.temp()
      val x5645 = CU.temp()
      val x5287_x5649 = ScalarBuffer().wtPort(P_argin)
      val x5289_x5652 = ScalarBuffer().wtPort(C_argin)
      val x5288_x5651 = ScalarBuffer().wtPort(R_argin)
      val x5657 = ScalarFIFO(size=1).wtPort(bus_824_s)
      val x5568 = CounterChain.copy("x5710", "x5568")
      val x5640 = CounterChain.copy("x5709", "x5640")
      Stage(operands=List(CU.ctr(x5568(1)), CU.ctr(x5640(1))), op=FixAdd, results=List(x5645))
      Stage(operands=List(CU.load(x5287_x5649), CU.load(x5288_x5651)), op=FixMul, results=List(x5655))
      Stage(operands=List(x5655, CU.load(x5289_x5652)), op=FixMul, results=List(x5656))
      Stage(operands=List(x5645, x5656), op=FixMul, results=List(x5658))
      Stage(operands=List(CU.load(x5657), x5658), op=FixAdd, results=List(CU.scalarOut(bus_829_s)))
    }
    val x5680_2 = Pipeline(name="x5680_2",parent=x5680) { implicit CU => 
      val x5660 = CU.temp()
      val x5659 = CU.temp()
      val x5646 = CU.temp()
      val x5647 = CU.temp()
      val x5662 = CU.temp()
      val x5289_x5652 = ScalarBuffer().wtPort(C_argin)
      val x5661 = ScalarFIFO(size=1).wtPort(bus_829_s)
      val x5653 = ScalarFIFO(size=1).wtPort(bus_822_s)
      val x5568 = CounterChain.copy("x5710", "x5568")
      val x5640 = CounterChain.copy("x5709", "x5640")
      Stage(operands=List(CU.ctr(x5568(2)), CU.ctr(x5640(2))), op=FixAdd, results=List(x5646))
      Stage(operands=List(x5646, CU.load(x5653)), op=FixMul, results=List(x5659))
      Stage(operands=List(CU.ctr(x5568(3)), CU.ctr(x5640(3))), op=FixAdd, results=List(x5647))
      Stage(operands=List(x5647, CU.load(x5289_x5652)), op=FixMul, results=List(x5660))
      Stage(operands=List(x5659, x5660), op=FixAdd, results=List(x5662))
      Stage(operands=List(CU.load(x5661), x5662), op=FixAdd, results=List(CU.scalarOut(bus_835_s)))
    }
    val x5680_3 = Pipeline(name="x5680_3",parent=x5680) { implicit CU => 
      val x5664 = CU.temp()
      val x5665 = CU.temp()
      val x5663 = ScalarFIFO(size=1).wtPort(bus_835_s)
      val x5667 = ScalarBuffer().wtPort(dstDRAM5_da)
      val x5568 = CounterChain.copy("x5710", "x5568")
      Stage(operands=List(CU.load(x5663), CU.ctr(x5568(4))), op=FixAdd, results=List(x5664))
      Stage(operands=List(x5664, Const(4)), op=FixMul, results=List(x5665))
      Stage(operands=List(x5665, CU.load(x5667)), op=FixAdd, results=List(CU.scalarOut(x5641_b5913_x5679_b5915_s)))
      Stage(operands=List(Const(64)), op=Bypass, results=List(CU.scalarOut(x5641_b5914_x5679_b5916_s)))
    }
    val x5696_0 = Pipeline(name="x5696_0",parent=x5697) { implicit CU => 
      val x5692_x5692 = ScalarFIFO(size=1).wtPort(x5557_x5692_x5696_s)
      val ctr36 = Counter(min=Const(0), max=Const(16), step=Const(1), par=1) // Counter
      val x5682 = CounterChain(name = "x5682", ctr36).iter(16)
      Stage(operands=List(CU.load(x5692_x5692)), op=Bypass, results=List(CU.vecOut(x5642_x5695_v)))
    }
    val x5698 = MemoryController(name="x5698",parent=x5709,offchip=dstDRAM5_oc, mctpe=TileStore) { implicit CU => 
      val x5642_x5698 = VectorFIFO(name="data",size=1).wtPort(x5642_x5695_v)
      val x5641_b5914_x5698 = ScalarFIFO(name="size",size=1).wtPort(x5641_b5914_x5679_b5916_s)
      val x5641_b5913_x5698 = ScalarFIFO(name="offset",size=1).wtPort(x5641_b5913_x5679_b5915_s)
    }
    
  }
}
