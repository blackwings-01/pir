import pir._
import pir.node._
import arch._
import prism.enums._

object SGD extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x2711 = top.argFringe.argIn(init=0).name("x2711").ctrl(top) // ArgInNew(Const(0))
    val x2712 = top.argFringe.argIn(init=0).name("x2712").ctrl(top) // ArgInNew(Const(0))
    val x2713 = top.argFringe.argIn(init=0.0).name("x2713").ctrl(top) // ArgInNew(Const(0))
    val x2717 = ReadMem(x2712).name("x2717").ctrl(top) // RegRead(x2712)
    val x2718 = DRAM().name("x2718").ctrl(top) // x2718 = DRAMNew(ArrayBuffer(x2717, Const(16)),Const(0))
    val x2719 = ReadMem(x2712).name("x2719").ctrl(top) // RegRead(x2712)
    val x2720 = DRAM().name("x2720").ctrl(top) // x2720 = DRAMNew(ArrayBuffer(x2719),Const(0))
    val x2721 = DRAM().name("x2721").ctrl(top) // x2721 = DRAMNew(ArrayBuffer(Const(16)),Const(0))
    val x2884 = UnitController(style=SeqPipe, level=OuterControl).name("x2884").ctrl(top) // Hwblock(Block(Const(())),false)
    val x2733_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x2733_d0_b0").ctrl(x2884) // x2733 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x2733_d0_b0) = false
    val x2734_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x2734_d0_b0").ctrl(x2884) // x2734 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x2734_d0_b0) = false
    val x2734_d1_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x2734_d1_b0").ctrl(x2884) // x2734 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x2734_d1_b0) = true
    val x2734_d2_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x2734_d2_b0").ctrl(x2884) // x2734 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x2734_d2_b0) = false
    val x2735 = Counter(min=Const(0), max=Const(16), step=Const(1), par=1).name("x2735").ctrl(x2884) // CounterNew(Const(0),Const(16),Const(1),Const(1))
    val x2736 = CounterChain(List(x2735)).name("x2736").ctrl(x2884) // CounterChainNew(List(x2735))
    val x2738 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2736).name("x2738").ctrl(x2884) // UnrolledForeach(List(Const(true)),x2736,Block(Const(())),List(List(b1698)),List(List(b1699)))
    val b1698 = CounterIter(x2735, None).ctrl(x2738).name("b1698")
    val b1699 = DummyOp().ctrl(x2738).name("b1699")
    val x2737 = StoreBanks(List(x2734_d0_b0, x2734_d1_b0, x2734_d2_b0), List(b1698), Const(0.0)).name("x2737").ctrl(x2738) // ParSRAMStore(x2734,List(List(b1698)),List(Const(0)),List(b1699))
    val x2739 = ReadMem(x2711).name("x2739").ctrl(x2884) // RegRead(x2711)
    val x2740 = Counter(min=Const(0), max=x2739, step=Const(1), par=1).name("x2740").ctrl(x2884) // CounterNew(Const(0),x2739,Const(1),Const(1))
    val x2741 = CounterChain(List(x2740)).name("x2741").ctrl(x2884) // CounterChainNew(List(x2740))
    val x2860 = LoopController(style=SeqPipe, level=OuterControl, cchain=x2741).name("x2860").ctrl(x2884) // UnrolledForeach(List(Const(true)),x2741,Block(Const(())),List(List(b1705)),List(List(b1706)))
    val b1705 = CounterIter(x2740, Some(0)).ctrl(x2860).name("b1705")
    val b1706 = DummyOp().ctrl(x2860).name("b1706")
    val x2742 = ReadMem(x2712).name("x2742").ctrl(x2860) // RegRead(x2712)
    val x2743 = Counter(min=Const(0), max=x2742, step=Const(16), par=1).name("x2743").ctrl(x2860) // CounterNew(Const(0),x2742,Const(16),Const(1))
    val x2744 = CounterChain(List(x2743)).name("x2744").ctrl(x2860) // CounterChainNew(List(x2743))
    val x2859 = LoopController(style=SeqPipe, level=OuterControl, cchain=x2744).name("x2859").ctrl(x2860) // UnrolledForeach(List(b1706),x2744,Block(Const(())),List(List(b1710)),List(List(b1711)))
    val b1710 = CounterIter(x2743, Some(0)).ctrl(x2859).name("b1710")
    val b1711 = DummyOp().ctrl(x2859).name("b1711")
    val x2746 = UnitController(style=SeqPipe, level=InnerControl).name("x2746").ctrl(x2859) // UnitPipe(List(b1711, b1706),Block(Const(())))
    val x2745 = OpDef(op=FixAdd, inputs=List(b1710, Const(16))).name("x2745").ctrl(x2746) // FixAdd(b1710,Const(16))
    val x2768 = UnitController(style=StreamPipe, level=OuterControl).name("x2768").ctrl(x2859) // UnitPipe(List(b1711, b1706),Block(Const(())))
    val b2910 = StreamOut(field="offset").name("b2910").ctrl(x2768) // x2747 = StreamOutNew(BurstCmdBus)
    val b2911 = StreamOut(field="size").name("b2911").ctrl(x2768) // x2747 = StreamOutNew(BurstCmdBus)
    val x2748 = StreamIn(field="data").name("x2748").ctrl(x2768) // x2748 = StreamInNew(BurstDataBus())
    val x2758 = UnitController(style=SeqPipe, level=InnerControl).name("x2758").ctrl(x2768) // UnitPipe(List(b1711, b1706),Block(x2757))
    val x2749 = b1710 // FixConvert(b1710,TRUE,_32,_0)
    val x2750 = OpDef(op=FixSla, inputs=List(x2749, Const(2))).name("x2750").ctrl(x2758) // FixLsh(x2749,Const(2))
    val x2751 = x2750 // FixConvert(x2750,TRUE,_64,_0)
    val x2752 = top.argFringe.dramAddress(x2720).name("x2752").ctrl(x2758) // GetDRAMAddress(x2720)
    val x2753 = OpDef(op=FixAdd, inputs=List(x2751, x2752)).name("x2753").ctrl(x2758) // FixAdd(x2751,x2752)
    val x2755_x2754 = x2753 // FixConvert(x2753,TRUE,_64,_0)
    // x2755 = SimpleStruct(ArrayBuffer((offset,x2754), (size,Const(64)), (isLoad,Const(true))))
    val x2756 = OpDef(op=BitAnd, inputs=List(b1711, b1706)).name("x2756").ctrl(x2758) // And(b1711,b1706)
    val b2912_b2910 = WriteMem(b2910, x2755_x2754).name("b2912_b2910").ctrl(x2758) // StreamWrite(x2747,x2755,x2756)
    val b2913_b2911 = WriteMem(b2911, Const(64)).name("b2913_b2911").ctrl(x2758) // StreamWrite(x2747,x2755,x2756)
    val x2759 = FringeContainer(x2720,b2910,b2911,x2748).name("x2759").ctrl(x2768) // FringeDenseLoad(x2720,x2747,x2748)
    val x2760 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x2760").ctrl(x2768) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x2761 = CounterChain(List(x2760)).name("x2761").ctrl(x2768) // CounterChainNew(List(x2760))
    val x2767 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2761).name("x2767").ctrl(x2768) // UnrolledForeach(List(b1711, b1706),x2761,Block(Const(())),List(List(b1729)),List(List(b1730)))
    val b1729 = CounterIter(x2760, None).ctrl(x2767).name("b1729")
    val b1730 = DummyOp().ctrl(x2767).name("b1730")
    val x2762 = OpDef(op=BitAnd, inputs=List(b1730, b1711)).name("x2762").ctrl(x2767) // And(b1730,b1711)
    val x2763 = OpDef(op=BitAnd, inputs=List(x2762, b1706)).name("x2763").ctrl(x2767) // And(x2762,b1706)
    val x2764_x2764 = ReadMem(x2748).name("x2764").ctrl(x2767) // ParStreamRead(x2748,List(x2763))
    val x2765_x2765 = x2764_x2764 // x2765 = VectorApply(x2764,0)
    val x2766 = StoreBanks(List(x2733_d0_b0), List(b1729), x2765_x2765).name("x2766").ctrl(x2767) // ParSRAMStore(x2733,List(List(b1729)),List(x2765),List(x2763))
    val x2769 = Counter(min=Const(0), max=Const(16), step=Const(1), par=1).name("x2769").ctrl(x2859) // CounterNew(Const(0),Const(16),Const(1),Const(1))
    val x2770 = CounterChain(List(x2769)).name("x2770").ctrl(x2859) // CounterChainNew(List(x2769))
    val x2858 = LoopController(style=SeqPipe, level=OuterControl, cchain=x2770).name("x2858").ctrl(x2859) // UnrolledForeach(List(b1711, b1706),x2770,Block(Const(())),List(List(b1740)),List(List(b1741)))
    val b1740 = CounterIter(x2769, Some(0)).ctrl(x2858).name("b1740")
    val b1741 = DummyOp().ctrl(x2858).name("b1741")
    val x2771 = Reg(init=0.0).name("x2771").ctrl(x2858) // x2771 = RegNew(Const(0))
    isAccum(x2771) = false
    val x2772_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x2772_d0_b0").ctrl(x2858) // x2772 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x2772_d0_b0) = false
    val x2772_d1_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x2772_d1_b0").ctrl(x2858) // x2772 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x2772_d1_b0) = false
    val x2773 = Reg(init=0).name("x2773").ctrl(x2858) // x2773 = RegNew(Const(0))
    isAccum(x2773) = false
    val x2779 = UnitController(style=SeqPipe, level=InnerControl).name("x2779").ctrl(x2858) // UnitPipe(List(b1741, b1711, b1706),Block(Const(())))
    val x2774 = OpDef(op=FixAdd, inputs=List(b1710, b1740)).name("x2774").ctrl(x2779) // FixAdd(b1710,b1740)
    val x2775 = OpDef(op=FixAdd, inputs=List(x2774, Const(1))).name("x2775").ctrl(x2779) // FixAdd(x2774,Const(1))
    val x2776 = OpDef(op=BitAnd, inputs=List(b1741, b1711)).name("x2776").ctrl(x2779) // And(b1741,b1711)
    val x2777 = OpDef(op=BitAnd, inputs=List(x2776, b1706)).name("x2777").ctrl(x2779) // And(x2776,b1706)
    val x2778_x2773 = WriteMem(x2773, x2774).name("x2778_x2773").ctrl(x2779) // RegWrite(x2773,x2774,x2777)
    val x2780 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x2780").ctrl(x2858) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x2781 = CounterChain(List(x2780)).name("x2781").ctrl(x2858) // CounterChainNew(List(x2780))
    val x2812 = LoopController(style=StreamPipe, level=OuterControl, cchain=x2781).name("x2812").ctrl(x2858) // UnrolledForeach(List(b1741, b1711, b1706),x2781,Block(Const(())),List(List(b1753)),List(List(b1754)))
    val b1753 = CounterIter(x2780, Some(0)).ctrl(x2812).name("b1753")
    val b1754 = DummyOp().ctrl(x2812).name("b1754")
    val b2914 = StreamOut(field="offset").name("b2914").ctrl(x2812) // x2782 = StreamOutNew(BurstCmdBus)
    val b2915 = StreamOut(field="size").name("b2915").ctrl(x2812) // x2782 = StreamOutNew(BurstCmdBus)
    val x2783 = StreamIn(field="data").name("x2783").ctrl(x2812) // x2783 = StreamInNew(BurstDataBus())
    val x2800 = UnitController(style=SeqPipe, level=InnerControl).name("x2800").ctrl(x2812) // UnitPipe(List(b1754, b1741, b1711, b1706),Block(x2799))
    val x2784 = ReadMem(x2773).name("x2784").ctrl(x2800) // RegRead(x2773)
    val x2785 = OpDef(op=FixAdd, inputs=List(x2784, b1753)).name("x2785").ctrl(x2800) // FixAdd(x2784,b1753)
    val x2786 = x2785 // FixConvert(x2785,TRUE,_32,_0)
    val x2787 = OpDef(op=FixSla, inputs=List(x2786, Const(4))).name("x2787").ctrl(x2800) // FixLsh(x2786,Const(4))
    val x2788 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x2789 = OpDef(op=FixAdd, inputs=List(x2787, x2788)).name("x2789").ctrl(x2800) // FixAdd(x2787,x2788)
    val x2790 = OpDef(op=FixSla, inputs=List(x2789, Const(2))).name("x2790").ctrl(x2800) // FixLsh(x2789,Const(2))
    val x2791 = x2790 // FixConvert(x2790,TRUE,_64,_0)
    val x2792 = top.argFringe.dramAddress(x2718).name("x2792").ctrl(x2800) // GetDRAMAddress(x2718)
    val x2793 = OpDef(op=FixAdd, inputs=List(x2791, x2792)).name("x2793").ctrl(x2800) // FixAdd(x2791,x2792)
    val x2795_x2794 = x2793 // FixConvert(x2793,TRUE,_64,_0)
    // x2795 = SimpleStruct(ArrayBuffer((offset,x2794), (size,Const(64)), (isLoad,Const(true))))
    val x2796 = OpDef(op=BitAnd, inputs=List(b1754, b1741)).name("x2796").ctrl(x2800) // And(b1754,b1741)
    val x2797 = OpDef(op=BitAnd, inputs=List(b1711, b1706)).name("x2797").ctrl(x2800) // And(b1711,b1706)
    val x2798 = OpDef(op=BitAnd, inputs=List(x2796, x2797)).name("x2798").ctrl(x2800) // And(x2796,x2797)
    val b2916_b2914 = WriteMem(b2914, x2795_x2794).name("b2916_b2914").ctrl(x2800) // StreamWrite(x2782,x2795,x2798)
    val b2917_b2915 = WriteMem(b2915, Const(64)).name("b2917_b2915").ctrl(x2800) // StreamWrite(x2782,x2795,x2798)
    val x2801 = FringeContainer(x2718,b2914,b2915,x2783).name("x2801").ctrl(x2812) // FringeDenseLoad(x2718,x2782,x2783)
    val x2802 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x2802").ctrl(x2812) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x2803 = CounterChain(List(x2802)).name("x2803").ctrl(x2812) // CounterChainNew(List(x2802))
    val x2811 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2803).name("x2811").ctrl(x2812) // UnrolledForeach(List(b1754, b1741, b1711, b1706),x2803,Block(Const(())),List(List(b1777)),List(List(b1778)))
    val b1777 = CounterIter(x2802, None).ctrl(x2811).name("b1777")
    val b1778 = DummyOp().ctrl(x2811).name("b1778")
    val x2804 = OpDef(op=BitAnd, inputs=List(b1778, b1754)).name("x2804").ctrl(x2811) // And(b1778,b1754)
    val x2805 = OpDef(op=BitAnd, inputs=List(b1741, b1711)).name("x2805").ctrl(x2811) // And(b1741,b1711)
    val x2806 = OpDef(op=BitAnd, inputs=List(x2804, x2805)).name("x2806").ctrl(x2811) // And(x2804,x2805)
    val x2807 = OpDef(op=BitAnd, inputs=List(x2806, b1706)).name("x2807").ctrl(x2811) // And(x2806,b1706)
    val x2808_x2808 = ReadMem(x2783).name("x2808").ctrl(x2811) // ParStreamRead(x2783,List(x2807))
    val x2809_x2809 = x2808_x2808 // x2809 = VectorApply(x2808,0)
    val x2810 = StoreBanks(List(x2772_d0_b0, x2772_d1_b0), List(b1777), x2809_x2809).name("x2810").ctrl(x2811) // ParSRAMStore(x2772,List(List(b1777)),List(x2809),List(x2807))
    val x2839 = UnitController(style=SeqPipe, level=OuterControl).name("x2839").ctrl(x2858) // UnitPipe(List(b1741, b1711, b1706),Block(Const(())))
    val x2813_d0 = Reg(init=0.0).name("x2813_d0").ctrl(x2839) // x2813 = RegNew(Const(0))
    isAccum(x2813_d0) = false
    val x2813_d1 = Reg(init=0.0).name("x2813_d1").ctrl(x2839) // x2813 = RegNew(Const(0))
    isAccum(x2813_d1) = true
    val x2814 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x2814").ctrl(x2839) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x2815 = CounterChain(List(x2814)).name("x2815").ctrl(x2839) // CounterChainNew(List(x2814))
    val x2831 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2815).name("x2831").ctrl(x2839) // UnrolledReduce(List(b1741, b1711, b1706),x2815,x2813,Block((x2813) => Const(())),List(List(b1792)),List(List(b1793)))
    val b1792 = CounterIter(x2814, None).ctrl(x2831).name("b1792")
    val b1793 = DummyOp().ctrl(x2831).name("b1793")
    val x2816 = OpDef(op=BitAnd, inputs=List(b1793, b1741)).name("x2816").ctrl(x2831) // And(b1793,b1741)
    val x2817 = OpDef(op=BitAnd, inputs=List(b1711, b1706)).name("x2817").ctrl(x2831) // And(b1711,b1706)
    val x2818 = OpDef(op=BitAnd, inputs=List(x2816, x2817)).name("x2818").ctrl(x2831) // And(x2816,x2817)
    val x2819 = LoadBanks(List(x2772_d1_b0), List(b1792)).name("x2819").ctrl(x2831) // ParSRAMLoad(x2772,List(List(b1792)),List(x2818))
    val x2820 = x2819 // x2820 = VectorApply(x2819,0)
    val x2821 = LoadBanks(List(x2734_d2_b0), List(b1792)).name("x2821").ctrl(x2831) // ParSRAMLoad(x2734,List(List(b1792)),List(x2818))
    val x2822 = x2821 // x2822 = VectorApply(x2821,0)
    val x2823 = x2822 // FixConvert(x2822,TRUE,_16,_16)
    val x2824 = OpDef(op=FixMul, inputs=List(x2820, x2823)).name("x2824").ctrl(x2831) // FixMul(x2820,x2823)
    val x2825 = ReadMem(x2813_d1).name("x2825").ctrl(x2831) // RegRead(x2813)
    val x2826 = OpDef(op=FixEql, inputs=List(b1792, Const(0))).name("x2826").ctrl(x2831) // FixEql(b1792,Const(0))
    val x2827 = ReduceAccumOp(op=FixAdd, input=x2824, accum=x2825).name("x2827").ctrl(x2831) // FixAdd(x2824,x2825)
    val x2828 = OpDef(op=BitAnd, inputs=List(b1741, b1711)).name("x2828").ctrl(x2831) // And(b1741,b1711)
    val x2829 = OpDef(op=BitAnd, inputs=List(x2828, b1706)).name("x2829").ctrl(x2831) // And(x2828,b1706)
    val x2830_x2813_d0 = WriteMem(x2813_d0, x2827).name("x2830_x2813_d0").ctrl(x2831) // RegWrite(x2813,x2827,x2829)
    val x2830_x2813_d1 = WriteMem(x2813_d1, x2827).name("x2830_x2813_d1").ctrl(x2831) // RegWrite(x2813,x2827,x2829)
    val x2838 = UnitController(style=SeqPipe, level=InnerControl).name("x2838").ctrl(x2839) // UnitPipe(List(b1741, b1711, b1706),Block(Const(())))
    val x2832 = OpDef(op=BitAnd, inputs=List(b1741, b1711)).name("x2832").ctrl(x2838) // And(b1741,b1711)
    val x2833 = OpDef(op=BitAnd, inputs=List(x2832, b1706)).name("x2833").ctrl(x2838) // And(x2832,b1706)
    val x2834 = LoadBanks(List(x2733_d0_b0), List(b1740)).name("x2834").ctrl(x2838) // SRAMLoad(x2733,ArrayBuffer(Const(16)),List(b1740),Const(0),x2833)
    val x2835 = ReadMem(x2813_d0).name("x2835").ctrl(x2838) // RegRead(x2813)
    val x2836 = OpDef(op=FixSub, inputs=List(x2834, x2835)).name("x2836").ctrl(x2838) // FixSub(x2834,x2835)
    val x2837_x2771 = WriteMem(x2771, x2836).name("x2837_x2771").ctrl(x2838) // RegWrite(x2771,x2836,x2833)
    val x2840 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x2840").ctrl(x2858) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x2841 = CounterChain(List(x2840)).name("x2841").ctrl(x2858) // CounterChainNew(List(x2840))
    val x2857 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2841).name("x2857").ctrl(x2858) // UnrolledForeach(List(b1741, b1711, b1706),x2841,Block(Const(())),List(List(b1820)),List(List(b1821)))
    val b1820 = CounterIter(x2840, None).ctrl(x2857).name("b1820")
    val b1821 = DummyOp().ctrl(x2857).name("b1821")
    val x2842 = OpDef(op=BitAnd, inputs=List(b1821, b1741)).name("x2842").ctrl(x2857) // And(b1821,b1741)
    val x2843 = OpDef(op=BitAnd, inputs=List(b1711, b1706)).name("x2843").ctrl(x2857) // And(b1711,b1706)
    val x2844 = OpDef(op=BitAnd, inputs=List(x2842, x2843)).name("x2844").ctrl(x2857) // And(x2842,x2843)
    val x2845 = LoadBanks(List(x2734_d1_b0), List(b1820)).name("x2845").ctrl(x2857) // ParSRAMLoad(x2734,List(List(b1820)),List(x2844))
    val x2846 = x2845 // x2846 = VectorApply(x2845,0)
    val x2847 = LoadBanks(List(x2772_d0_b0), List(b1820)).name("x2847").ctrl(x2857) // ParSRAMLoad(x2772,List(List(b1820)),List(x2844))
    val x2848 = x2847 // x2848 = VectorApply(x2847,0)
    val x2849 = x2848 // FixConvert(x2848,TRUE,_16,_16)
    val x2850 = ReadMem(x2771).name("x2850").ctrl(x2857) // RegRead(x2771)
    val x2851 = x2850 // FixConvert(x2850,TRUE,_16,_16)
    val x2852 = OpDef(op=FixMul, inputs=List(x2849, x2851)).name("x2852").ctrl(x2857) // FixMul(x2849,x2851)
    val x2853 = ReadMem(x2713).name("x2853").ctrl(x2857) // RegRead(x2713)
    val x2854 = OpDef(op=FixMul, inputs=List(x2852, x2853)).name("x2854").ctrl(x2857) // FixMul(x2852,x2853)
    val x2855 = OpDef(op=FixAdd, inputs=List(x2846, x2854)).name("x2855").ctrl(x2857) // FixAdd(x2846,x2854)
    val x2856 = StoreBanks(List(x2734_d0_b0, x2734_d1_b0, x2734_d2_b0), List(b1820), x2855).name("x2856").ctrl(x2857) // ParSRAMStore(x2734,List(List(b1820)),List(x2855),List(x2844))
    val x2883 = UnitController(style=StreamPipe, level=OuterControl).name("x2883").ctrl(x2884) // UnitPipe(List(Const(true)),Block(Const(())))
    val b2918 = StreamOut(field="offset").name("b2918").ctrl(x2883) // x2861 = StreamOutNew(BurstCmdBus)
    val b2919 = StreamOut(field="size").name("b2919").ctrl(x2883) // x2861 = StreamOutNew(BurstCmdBus)
    val x2862 = StreamOut(field="data").name("x2862").ctrl(x2883) // x2862 = StreamOutNew(BurstFullDataBus())
    val x2863 = StreamIn(field="ack").name("x2863").ctrl(x2883) // x2863 = StreamInNew(BurstAckBus)
    val x2872 = UnitController(style=SeqPipe, level=InnerControl).name("x2872").ctrl(x2883) // UnitPipe(List(Const(true)),Block(x2871))
    val x2864 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x2865 = OpDef(op=FixSla, inputs=List(x2864, Const(2))).name("x2865").ctrl(x2872) // FixLsh(x2864,Const(2))
    val x2866 = x2865 // FixConvert(x2865,TRUE,_64,_0)
    val x2867 = top.argFringe.dramAddress(x2721).name("x2867").ctrl(x2872) // GetDRAMAddress(x2721)
    val x2868 = OpDef(op=FixAdd, inputs=List(x2866, x2867)).name("x2868").ctrl(x2872) // FixAdd(x2866,x2867)
    val x2870_x2869 = x2868 // FixConvert(x2868,TRUE,_64,_0)
    // x2870 = SimpleStruct(ArrayBuffer((offset,x2869), (size,Const(64)), (isLoad,Const(false))))
    val b2920_b2918 = WriteMem(b2918, x2870_x2869).name("b2920_b2918").ctrl(x2872) // StreamWrite(x2861,x2870,Const(true))
    val b2921_b2919 = WriteMem(b2919, Const(64)).name("b2921_b2919").ctrl(x2872) // StreamWrite(x2861,x2870,Const(true))
    val x2873 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x2873").ctrl(x2883) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x2874 = CounterChain(List(x2873)).name("x2874").ctrl(x2883) // CounterChainNew(List(x2873))
    val x2879 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2874).name("x2879").ctrl(x2883) // UnrolledForeach(List(Const(true)),x2874,Block(Const(())),List(List(b1855)),List(List(b1856)))
    val b1855 = CounterIter(x2873, None).ctrl(x2879).name("b1855")
    val b1856 = DummyOp().ctrl(x2879).name("b1856")
    val x2875 = LoadBanks(List(x2734_d0_b0), List(b1855)).name("x2875").ctrl(x2879) // ParSRAMLoad(x2734,List(List(b1855)),List(b1856))
    val x2877_x2876 = x2875 // x2876 = VectorApply(x2875,0)
    // x2877 = SimpleStruct(ArrayBuffer((_1,x2876), (_2,Const(true))))
    val x2878_x2862 = WriteMem(x2862, x2877_x2876).name("x2878_x2862").ctrl(x2879) // ParStreamWrite(x2862,List(x2877),List(b1856))
    val x2880 = FringeContainer(x2721,b2918,b2919,x2862,x2863).name("x2880").ctrl(x2883) // FringeDenseStore(x2721,x2861,x2862,x2863)
    val x2882 = UnitController(style=SeqPipe, level=InnerControl).name("x2882").ctrl(x2883) // UnitPipe(List(Const(true)),Block(Const(())))
    val x2881_x2881 = ReadMem(x2863).name("x2881").ctrl(x2882) // StreamRead(x2863,Const(true))
    
  }
}
