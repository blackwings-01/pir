import pir._
import pir.newnode._
import arch._
import pirc.enums._

object GEMM_Blocked extends PIRApp {
  def main(top:Top) = {
    val x4701_d0 = top.argIn(init=0).name("x4701_d0").ctrl(top) // ArgInNew(Const(0))
    val x4707 = LoadDef(List(x4701_d0), None).name("x4707").ctrl(top) // RegRead(x4701)
    val x4708 = LoadDef(List(x4701_d0), None).name("x4708").ctrl(top) // RegRead(x4701)
    val x4709 = DRAM().name("x4709").ctrl(top) // x4709 = DRAMNew(ArrayBuffer(x4708, x4707),Const(0))
    val x4710 = LoadDef(List(x4701_d0), None).name("x4710").ctrl(top) // RegRead(x4701)
    val x4711 = LoadDef(List(x4701_d0), None).name("x4711").ctrl(top) // RegRead(x4701)
    val x4712 = DRAM().name("x4712").ctrl(top) // x4712 = DRAMNew(ArrayBuffer(x4711, x4710),Const(0))
    val x4713 = LoadDef(List(x4701_d0), None).name("x4713").ctrl(top) // RegRead(x4701)
    val x4714 = LoadDef(List(x4701_d0), None).name("x4714").ctrl(top) // RegRead(x4701)
    val x4715 = DRAM().name("x4715").ctrl(top) // x4715 = DRAMNew(ArrayBuffer(x4714, x4713),Const(0))
    val x5084 = Controller(style=SeqPipe, level=OuterControl, cchain=CounterChain.unit).name("x5084").ctrl(top) // Hwblock(Block(Const(())),false)
    val x4719 = LoadDef(List(x4701_d0), None).name("x4719").ctrl(x5084) // RegRead(x4701)
    val x4720 = Counter(min=Const(0).ctrl(x5084), max=x4719, step=Const(64).ctrl(x5084), par=1).name("x4720").ctrl(x5084) // CounterNew(Const(0),x4719,Const(64),Const(1))
    val x4721 = CounterChain(List(x4720)).name("x4721").ctrl(x5084) // CounterChainNew(List(x4720))
    val x5083 = Controller(style=MetaPipe, level=OuterControl, cchain=x4721).name("x5083").ctrl(x5084) // UnrolledForeach(List(Const(true)),x4721,Block(Const(())),List(List(b2618)),List(List(b2619)))
    val b2618 = IterDef(x4720, Some(0)).ctrl(x5083).name("b2618")
    val b2619 = DummyDef().ctrl(x5083).name("b2619")
    val x4722 = LoadDef(List(x4701_d0), None).name("x4722").ctrl(x5083) // RegRead(x4701)
    val x4723 = Counter(min=Const(0).ctrl(x5083), max=x4722, step=Const(16).ctrl(x5083), par=1).name("x4723").ctrl(x5083) // CounterNew(Const(0),x4722,Const(16),Const(1))
    val x4724 = CounterChain(List(x4723)).name("x4724").ctrl(x5083) // CounterChainNew(List(x4723))
    val x5082 = Controller(style=MetaPipe, level=OuterControl, cchain=x4724).name("x5082").ctrl(x5083) // UnrolledForeach(List(b2619),x4724,Block(Const(())),List(List(b2623)),List(List(b2624)))
    val b2623 = IterDef(x4723, Some(0)).ctrl(x5082).name("b2623")
    val b2624 = DummyDef().ctrl(x5082).name("b2624")
    val x4725_d0_b0 = SRAM(size=1024, banking=NoBanking()).name("x4725_d0_b0").ctrl(x5082) // x4725 = SRAMNew(ArrayBuffer(Const(64), Const(16)))
    val x4725_d1_b0 = SRAM(size=1024, banking=NoBanking()).name("x4725_d1_b0").ctrl(x5082) // x4725 = SRAMNew(ArrayBuffer(Const(64), Const(16)))
    val x4726 = LoadDef(List(x4701_d0), None).name("x4726").ctrl(x5082) // RegRead(x4701)
    val x4727 = Counter(min=Const(0).ctrl(x5082), max=x4726, step=Const(16).ctrl(x5082), par=1).name("x4727").ctrl(x5082) // CounterNew(Const(0),x4726,Const(16),Const(1))
    val x4728 = CounterChain(List(x4727)).name("x4728").ctrl(x5082) // CounterChainNew(List(x4727))
    val x4995 = Controller(style=MetaPipe, level=OuterControl, cchain=x4728).name("x4995").ctrl(x5082) // UnrolledReduce(List(b2624, b2619),x4728,x4725,Block((x4725) => Const(())),List(List(b2632)),List(List(b2633)))
    val b2632 = IterDef(x4727, Some(0)).ctrl(x4995).name("b2632")
    val b2633 = DummyDef().ctrl(x4995).name("b2633")
    val x4729_d0_b0 = SRAM(size=1024, banking=NoBanking()).name("x4729_d0_b0").ctrl(x4995) // x4729 = SRAMNew(ArrayBuffer(Const(64), Const(16)))
    val x4730_d0_b0 = SRAM(size=256, banking=NoBanking()).name("x4730_d0_b0").ctrl(x4995) // x4730 = SRAMNew(ArrayBuffer(Const(16), Const(16)))
    val x4731 = Reg(init=0).name("x4731").ctrl(x4995) // x4731 = RegNew(Const(0))
    val x4732 = Reg(init=0).name("x4732").ctrl(x4995) // x4732 = RegNew(Const(0))
    val x4743 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x4743").ctrl(x4995) // UnitPipe(List(b2633, b2624, b2619),Block(Const(())))
    val x4733 = b2632 // FixConvert(b2632)
    val x4734 = OpDef(op=FixAdd, inputs=List(x4733, Const(16).ctrl(x4743))).name("x4734").ctrl(x4743) // FixAdd(x4733,Const(16))
    val x4735 = b2623 // FixConvert(b2623)
    val x4736 = OpDef(op=FixAdd, inputs=List(x4735, Const(16).ctrl(x4743))).name("x4736").ctrl(x4743) // FixAdd(x4735,Const(16))
    val x4737 = OpDef(op=FixSub, inputs=List(x4734, b2632)).name("x4737").ctrl(x4743) // FixSub(x4734,b2632)
    val x4738 = OpDef(op=FixSub, inputs=List(x4736, b2623)).name("x4738").ctrl(x4743) // FixSub(x4736,b2623)
    val x4739 = OpDef(op=BitAnd, inputs=List(b2633, b2624)).name("x4739").ctrl(x4743) // And(b2633,b2624)
    val x4740 = OpDef(op=BitAnd, inputs=List(x4739, b2619)).name("x4740").ctrl(x4743) // And(x4739,b2619)
    val x4741 = StoreDef(List(x4731), None, x4737).name("x4741").ctrl(x4743) // RegWrite(x4731,x4737,x4740)
    val x4742 = StoreDef(List(x4732), None, x4738).name("x4742").ctrl(x4743) // RegWrite(x4732,x4738,x4740)
    val x4744 = LoadDef(List(x4731), None).name("x4744").ctrl(x4995) // RegRead(x4731)
    val x4745 = Counter(min=Const(0).ctrl(x4995), max=x4744, step=Const(1).ctrl(x4995), par=1).name("x4745").ctrl(x4995) // CounterNew(Const(0),x4744,Const(1),Const(1))
    val x4746 = CounterChain(List(x4745)).name("x4746").ctrl(x4995) // CounterChainNew(List(x4745))
    val x4823 = Controller(style=StreamPipe, level=OuterControl, cchain=x4746).name("x4823").ctrl(x4995) // UnrolledForeach(List(b2633, b2624, b2619),x4746,Block(Const(())),List(List(b2652)),List(List(b2653)))
    val b2652 = IterDef(x4745, Some(0)).ctrl(x4823).name("b2652")
    val b2653 = DummyDef().ctrl(x4823).name("b2653")
    val b5125 = StreamOut(field="offset").name("b5125").ctrl(x4823) // x4747 = StreamOutNew(BurstCmdBus)
    val b5126 = StreamOut(field="size").name("b5126").ctrl(x4823) // x4747 = StreamOutNew(BurstCmdBus)
    val b5127 = FIFO(size=16).name("b5127").ctrl(x4823) // x4748 = FIFONew(Const(16))
    val b5128 = FIFO(size=16).name("b5128").ctrl(x4823) // x4748 = FIFONew(Const(16))
    val b5129 = FIFO(size=16).name("b5129").ctrl(x4823) // x4748 = FIFONew(Const(16))
    val b5130 = StreamIn(field="data").name("b5130").ctrl(x4823) // x4749 = StreamInNew(BurstDataBus())
    val x4788 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x4788").ctrl(x4823) // UnitPipe(List(b2653, b2633, b2624, b2619),Block(x4787))
    val x4750 = OpDef(op=FixAdd, inputs=List(b2632, b2652)).name("x4750").ctrl(x4788) // FixAdd(b2632,b2652)
    val x4751 = x4750 // FixConvert(x4750)
    val x4752 = LoadDef(List(x4701_d0), None).name("x4752").ctrl(x4788) // RegRead(x4701)
    val x4753 = OpDef(op=FixMul, inputs=List(x4751, x4752)).name("x4753").ctrl(x4788) // FixMul(x4751,x4752)
    val x4754 = b2623 // FixConvert(b2623)
    val x4755 = OpDef(op=FixAdd, inputs=List(x4753, x4754)).name("x4755").ctrl(x4788) // FixAdd(x4753,x4754)
    val x4756 = OpDef(op=FixSla, inputs=List(x4755, Const(2).ctrl(x4788))).name("x4756").ctrl(x4788) // FixLsh(x4755,Const(2))
    val x4757 = x4756 // x4757 = DataAsBits(x4756)
    val x4758 = OpDef(op=BitAnd, inputs=List(x4757, Const(31))).name("x4758").ctrl(x4788) // VectorSlice(x4757,5,0) strMask=00000000000000000000000000011111
    val x4759 = x4758 // x4759 = BitsAsData(x4758,FixPt[TRUE,_32,_0])
    val x4760 = LoadDef(List(x4732), None).name("x4760").ctrl(x4788) // RegRead(x4732)
    val x4761 = OpDef(op=FixSla, inputs=List(x4760, Const(2).ctrl(x4788))).name("x4761").ctrl(x4788) // FixLsh(x4760,Const(2))
    val x4762 = OpDef(op=FixSub, inputs=List(x4756, x4759)).name("x4762").ctrl(x4788) // FixSub(x4756,x4759)
    val x4763 = OpDef(op=FixAdd, inputs=List(x4756, x4761)).name("x4763").ctrl(x4788) // FixAdd(x4756,x4761)
    val x4764 = x4763 // x4764 = DataAsBits(x4763)
    val x4765 = OpDef(op=BitAnd, inputs=List(x4764, Const(31))).name("x4765").ctrl(x4788) // VectorSlice(x4764,5,0) strMask=00000000000000000000000000011111
    val x4766 = x4765 // x4766 = BitsAsData(x4765,FixPt[TRUE,_32,_0])
    val x4767 = OpDef(op=FixEql, inputs=List(x4766, Const(0).ctrl(x4788))).name("x4767").ctrl(x4788) // FixEql(x4766,Const(0))
    val x4768 = OpDef(op=FixSub, inputs=List(Const(64).ctrl(x4788), x4766)).name("x4768").ctrl(x4788) // FixSub(Const(64),x4766)
    val x4769 = OpDef(op=MuxOp, inputs=List(x4767, Const(0).ctrl(x4788), x4768)).name("x4769").ctrl(x4788) // Mux(x4767,Const(0),x4768)
    val x4770 = OpDef(op=FixSra, inputs=List(x4759, Const(2).ctrl(x4788))).name("x4770").ctrl(x4788) // FixRsh(x4759,Const(2))
    val x4771 = OpDef(op=FixSra, inputs=List(x4769, Const(2).ctrl(x4788))).name("x4771").ctrl(x4788) // FixRsh(x4769,Const(2))
    val x4772 = OpDef(op=FixAdd, inputs=List(x4770, x4760)).name("x4772").ctrl(x4788) // FixAdd(x4770,x4760)
    val x4773 = OpDef(op=FixAdd, inputs=List(x4760, x4770)).name("x4773").ctrl(x4788) // FixAdd(x4760,x4770)
    val x4774 = OpDef(op=FixAdd, inputs=List(x4773, x4771)).name("x4774").ctrl(x4788) // FixAdd(x4773,x4771)
    val x4775 = OpDef(op=FixAdd, inputs=List(x4761, x4759)).name("x4775").ctrl(x4788) // FixAdd(x4761,x4759)
    val x4776 = OpDef(op=FixAdd, inputs=List(x4775, x4769)).name("x4776").ctrl(x4788) // FixAdd(x4775,x4769)
    val x4777 = x4762 // FixConvert(x4762)
    val x4778 = top.dramAddress(x4712).name("x4778").ctrl(x4788) // GetDRAMAddress(x4712)
    val x4779 = OpDef(op=FixAdd, inputs=List(x4777, x4778)).name("x4779").ctrl(x4788) // FixAdd(x4777,x4778)
    val x4780 = x4779 // FixConvert(x4779)
    // x4781 = SimpleStruct(ArrayBuffer((offset,x4780), (size,x4776), (isLoad,Const(true))))
    val x4782 = OpDef(op=BitAnd, inputs=List(b2653, b2633)).name("x4782").ctrl(x4788) // And(b2653,b2633)
    val x4783 = OpDef(op=BitAnd, inputs=List(b2624, b2619)).name("x4783").ctrl(x4788) // And(b2624,b2619)
    val x4784 = OpDef(op=BitAnd, inputs=List(x4782, x4783)).name("x4784").ctrl(x4788) // And(x4782,x4783)
    val b5131 = StoreDef(List(b5125), None, x4780).name("b5131").ctrl(x4788) // StreamWrite(x4747,x4781,x4784)
    val b5132 = StoreDef(List(b5126), None, x4776).name("b5132").ctrl(x4788) // StreamWrite(x4747,x4781,x4784)
    // x4786 = SimpleStruct(ArrayBuffer((size,x4774), (start,x4770), (end,x4772)))
    val b5133 = StoreDef(List(b5127), None, x4774).name("b5133").ctrl(x4788) // FIFOEnq(x4748,x4786,x4784)
    val b5134 = StoreDef(List(b5128), None, x4770).name("b5134").ctrl(x4788) // FIFOEnq(x4748,x4786,x4784)
    val b5135 = StoreDef(List(b5129), None, x4772).name("b5135").ctrl(x4788) // FIFOEnq(x4748,x4786,x4784)
    val x4789 = FringeContainer(x4712,b5125,b5126,b5130).name("x4789").ctrl(x4823) // FringeDenseLoad(x4712,x4747,x4749)
    val x4822 = Controller(style=SeqPipe, level=OuterControl, cchain=CounterChain.unit).name("x4822").ctrl(x4823) // UnitPipe(List(b2653, b2633, b2624, b2619),Block(Const(())))
    val x4790 = Reg(init=0).name("x4790").ctrl(x4822) // x4790 = RegNew(Const(0))
    val x4791 = Reg(init=0).name("x4791").ctrl(x4822) // x4791 = RegNew(Const(0))
    val x4792 = Reg(init=0).name("x4792").ctrl(x4822) // x4792 = RegNew(Const(0))
    val x4803 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x4803").ctrl(x4822) // UnitPipe(List(b2653, b2633, b2624, b2619),Block(x4802))
    val x4793 = OpDef(op=BitAnd, inputs=List(b2653, b2633)).name("x4793").ctrl(x4803) // And(b2653,b2633)
    val x4794 = OpDef(op=BitAnd, inputs=List(b2624, b2619)).name("x4794").ctrl(x4803) // And(b2624,b2619)
    val x4795 = OpDef(op=BitAnd, inputs=List(x4793, x4794)).name("x4795").ctrl(x4803) // And(x4793,x4794)
    val b5136 = LoadDef(List(b5127), None).name("b5136").ctrl(x4803) // FIFODeq(x4748,x4795)
    val b5137 = LoadDef(List(b5128), None).name("b5137").ctrl(x4803) // FIFODeq(x4748,x4795)
    val b5138 = LoadDef(List(b5129), None).name("b5138").ctrl(x4803) // FIFODeq(x4748,x4795)
    val x4797 = b5137 // x4797 = FieldApply(x4796,start)
    val x4798 = StoreDef(List(x4790), None, x4797).name("x4798").ctrl(x4803) // RegWrite(x4790,x4797,x4795)
    val x4799 = b5138 // x4799 = FieldApply(x4796,end)
    val x4800 = StoreDef(List(x4791), None, x4799).name("x4800").ctrl(x4803) // RegWrite(x4791,x4799,x4795)
    val x4801 = b5136 // x4801 = FieldApply(x4796,size)
    val x4802 = StoreDef(List(x4792), None, x4801).name("x4802").ctrl(x4803) // RegWrite(x4792,x4801,x4795)
    val x4804 = LoadDef(List(x4792), None).name("x4804").ctrl(x4822) // RegRead(x4792)
    val x4805 = Counter(min=Const(0).ctrl(x4822), max=x4804, step=Const(1).ctrl(x4822), par=1).name("x4805").ctrl(x4822) // CounterNew(Const(0),x4804,Const(1),Const(1))
    val x4806 = CounterChain(List(x4805)).name("x4806").ctrl(x4822) // CounterChainNew(List(x4805))
    val x4821 = Controller(style=InnerPipe, level=InnerControl, cchain=x4806).name("x4821").ctrl(x4822) // UnrolledForeach(List(b2653, b2633, b2624, b2619),x4806,Block(Const(())),List(List(b2710)),List(List(b2711)))
    val b2710 = IterDef(x4805, None).ctrl(x4821).name("b2710")
    val b2711 = DummyDef().ctrl(x4821).name("b2711")
    val x4807 = LoadDef(List(x4790), None).name("x4807").ctrl(x4821) // RegRead(x4790)
    val x4808 = OpDef(op=FixLeq, inputs=List(x4807, b2710)).name("x4808").ctrl(x4821) // FixLeq(x4807,b2710)
    val x4809 = LoadDef(List(x4791), None).name("x4809").ctrl(x4821) // RegRead(x4791)
    val x4810 = OpDef(op=FixLt, inputs=List(b2710, x4809)).name("x4810").ctrl(x4821) // FixLt(b2710,x4809)
    val x4811 = OpDef(op=BitAnd, inputs=List(x4808, x4810)).name("x4811").ctrl(x4821) // And(x4808,x4810)
    val x4812 = OpDef(op=FixSub, inputs=List(b2710, x4807)).name("x4812").ctrl(x4821) // FixSub(b2710,x4807)
    val x4813 = OpDef(op=BitAnd, inputs=List(b2711, b2653)).name("x4813").ctrl(x4821) // And(b2711,b2653)
    val x4814 = OpDef(op=BitAnd, inputs=List(b2633, b2624)).name("x4814").ctrl(x4821) // And(b2633,b2624)
    val x4815 = OpDef(op=BitAnd, inputs=List(x4813, x4814)).name("x4815").ctrl(x4821) // And(x4813,x4814)
    val x4816 = OpDef(op=BitAnd, inputs=List(x4815, b2619)).name("x4816").ctrl(x4821) // And(x4815,b2619)
    val b5139 = LoadDef(List(b5130), None).name("b5139").ctrl(x4821) // ParStreamRead(x4749,List(x4816))
    val b5140 = b5139 // x4818 = VectorApply(x4817,0)
    val x4819 = OpDef(op=BitAnd, inputs=List(x4811, x4816)).name("x4819").ctrl(x4821) // And(x4811,x4816)
    val x4820 = StoreDef(List(x4730_d0_b0), Some(List(b2652,x4812)), b5140).name("x4820").ctrl(x4821) // ParSRAMStore(x4730,List(List(b2652, x4812)),List(x4818),List(x4819))
    val x4824 = Counter(min=Const(0).ctrl(x4995), max=Const(64).ctrl(x4995), step=Const(1).ctrl(x4995), par=1).name("x4824").ctrl(x4995) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x4825 = CounterChain(List(x4824)).name("x4825").ctrl(x4995) // CounterChainNew(List(x4824))
    val x4977 = Controller(style=MetaPipe, level=OuterControl, cchain=x4825).name("x4977").ctrl(x4995) // UnrolledForeach(List(b2633, b2624, b2619),x4825,Block(Const(())),List(List(b2731)),List(List(b2732)))
    val b2731 = IterDef(x4824, Some(0)).ctrl(x4977).name("b2731")
    val b2732 = DummyDef().ctrl(x4977).name("b2732")
    val x4826_d0_b0 = SRAM(size=16, banking=NoBanking()).name("x4826_d0_b0").ctrl(x4977) // x4826 = SRAMNew(ArrayBuffer(Const(16)))
    val x4827 = Reg(init=0).name("x4827").ctrl(x4977) // x4827 = RegNew(Const(0))
    val x4828 = Reg(init=0).name("x4828").ctrl(x4977) // x4828 = RegNew(Const(0))
    val x4839 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x4839").ctrl(x4977) // UnitPipe(List(b2732, b2633, b2624, b2619),Block(Const(())))
    val x4829 = OpDef(op=FixAdd, inputs=List(b2618, b2731)).name("x4829").ctrl(x4839) // FixAdd(b2618,b2731)
    val x4830 = b2632 // FixConvert(b2632)
    val x4831 = OpDef(op=FixAdd, inputs=List(x4830, Const(16).ctrl(x4839))).name("x4831").ctrl(x4839) // FixAdd(x4830,Const(16))
    val x4832 = OpDef(op=FixAdd, inputs=List(x4829, Const(1).ctrl(x4839))).name("x4832").ctrl(x4839) // FixAdd(x4829,Const(1))
    val x4833 = OpDef(op=FixSub, inputs=List(x4831, b2632)).name("x4833").ctrl(x4839) // FixSub(x4831,b2632)
    val x4834 = OpDef(op=BitAnd, inputs=List(b2732, b2633)).name("x4834").ctrl(x4839) // And(b2732,b2633)
    val x4835 = OpDef(op=BitAnd, inputs=List(b2624, b2619)).name("x4835").ctrl(x4839) // And(b2624,b2619)
    val x4836 = OpDef(op=BitAnd, inputs=List(x4834, x4835)).name("x4836").ctrl(x4839) // And(x4834,x4835)
    val x4837 = StoreDef(List(x4827), None, x4829).name("x4837").ctrl(x4839) // RegWrite(x4827,x4829,x4836)
    val x4838 = StoreDef(List(x4828), None, x4833).name("x4838").ctrl(x4839) // RegWrite(x4828,x4833,x4836)
    val x4840 = Counter(min=Const(0).ctrl(x4977), max=Const(1).ctrl(x4977), step=Const(1).ctrl(x4977), par=1).name("x4840").ctrl(x4977) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x4841 = CounterChain(List(x4840)).name("x4841").ctrl(x4977) // CounterChainNew(List(x4840))
    val x4922 = Controller(style=StreamPipe, level=OuterControl, cchain=x4841).name("x4922").ctrl(x4977) // UnrolledForeach(List(b2732, b2633, b2624, b2619),x4841,Block(Const(())),List(List(b2749)),List(List(b2750)))
    val b2749 = IterDef(x4840, Some(0)).ctrl(x4922).name("b2749")
    val b2750 = DummyDef().ctrl(x4922).name("b2750")
    val b5141 = StreamOut(field="offset").name("b5141").ctrl(x4922) // x4842 = StreamOutNew(BurstCmdBus)
    val b5142 = StreamOut(field="size").name("b5142").ctrl(x4922) // x4842 = StreamOutNew(BurstCmdBus)
    val b5143 = FIFO(size=16).name("b5143").ctrl(x4922) // x4843 = FIFONew(Const(16))
    val b5144 = FIFO(size=16).name("b5144").ctrl(x4922) // x4843 = FIFONew(Const(16))
    val b5145 = FIFO(size=16).name("b5145").ctrl(x4922) // x4843 = FIFONew(Const(16))
    val b5146 = StreamIn(field="data").name("b5146").ctrl(x4922) // x4844 = StreamInNew(BurstDataBus())
    val x4885 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x4885").ctrl(x4922) // UnitPipe(List(b2750, b2732, b2633, b2624, b2619),Block(x4884))
    val x4845 = LoadDef(List(x4827), None).name("x4845").ctrl(x4885) // RegRead(x4827)
    val x4846 = OpDef(op=FixAdd, inputs=List(x4845, b2749)).name("x4846").ctrl(x4885) // FixAdd(x4845,b2749)
    val x4847 = x4846 // FixConvert(x4846)
    val x4848 = LoadDef(List(x4701_d0), None).name("x4848").ctrl(x4885) // RegRead(x4701)
    val x4849 = OpDef(op=FixMul, inputs=List(x4847, x4848)).name("x4849").ctrl(x4885) // FixMul(x4847,x4848)
    val x4850 = b2632 // FixConvert(b2632)
    val x4851 = OpDef(op=FixAdd, inputs=List(x4849, x4850)).name("x4851").ctrl(x4885) // FixAdd(x4849,x4850)
    val x4852 = OpDef(op=FixSla, inputs=List(x4851, Const(2).ctrl(x4885))).name("x4852").ctrl(x4885) // FixLsh(x4851,Const(2))
    val x4853 = x4852 // x4853 = DataAsBits(x4852)
    val x4854 = OpDef(op=BitAnd, inputs=List(x4853, Const(31))).name("x4854").ctrl(x4885) // VectorSlice(x4853,5,0) strMask=00000000000000000000000000011111
    val x4855 = x4854 // x4855 = BitsAsData(x4854,FixPt[TRUE,_32,_0])
    val x4856 = LoadDef(List(x4828), None).name("x4856").ctrl(x4885) // RegRead(x4828)
    val x4857 = OpDef(op=FixSla, inputs=List(x4856, Const(2).ctrl(x4885))).name("x4857").ctrl(x4885) // FixLsh(x4856,Const(2))
    val x4858 = OpDef(op=FixSub, inputs=List(x4852, x4855)).name("x4858").ctrl(x4885) // FixSub(x4852,x4855)
    val x4859 = OpDef(op=FixAdd, inputs=List(x4852, x4857)).name("x4859").ctrl(x4885) // FixAdd(x4852,x4857)
    val x4860 = x4859 // x4860 = DataAsBits(x4859)
    val x4861 = OpDef(op=BitAnd, inputs=List(x4860, Const(31))).name("x4861").ctrl(x4885) // VectorSlice(x4860,5,0) strMask=00000000000000000000000000011111
    val x4862 = x4861 // x4862 = BitsAsData(x4861,FixPt[TRUE,_32,_0])
    val x4863 = OpDef(op=FixEql, inputs=List(x4862, Const(0).ctrl(x4885))).name("x4863").ctrl(x4885) // FixEql(x4862,Const(0))
    val x4864 = OpDef(op=FixSub, inputs=List(Const(64).ctrl(x4885), x4862)).name("x4864").ctrl(x4885) // FixSub(Const(64),x4862)
    val x4865 = OpDef(op=MuxOp, inputs=List(x4863, Const(0).ctrl(x4885), x4864)).name("x4865").ctrl(x4885) // Mux(x4863,Const(0),x4864)
    val x4866 = OpDef(op=FixSra, inputs=List(x4855, Const(2).ctrl(x4885))).name("x4866").ctrl(x4885) // FixRsh(x4855,Const(2))
    val x4867 = OpDef(op=FixSra, inputs=List(x4865, Const(2).ctrl(x4885))).name("x4867").ctrl(x4885) // FixRsh(x4865,Const(2))
    val x4868 = OpDef(op=FixAdd, inputs=List(x4866, x4856)).name("x4868").ctrl(x4885) // FixAdd(x4866,x4856)
    val x4869 = OpDef(op=FixAdd, inputs=List(x4856, x4866)).name("x4869").ctrl(x4885) // FixAdd(x4856,x4866)
    val x4870 = OpDef(op=FixAdd, inputs=List(x4869, x4867)).name("x4870").ctrl(x4885) // FixAdd(x4869,x4867)
    val x4871 = OpDef(op=FixAdd, inputs=List(x4857, x4855)).name("x4871").ctrl(x4885) // FixAdd(x4857,x4855)
    val x4872 = OpDef(op=FixAdd, inputs=List(x4871, x4865)).name("x4872").ctrl(x4885) // FixAdd(x4871,x4865)
    val x4873 = x4858 // FixConvert(x4858)
    val x4874 = top.dramAddress(x4709).name("x4874").ctrl(x4885) // GetDRAMAddress(x4709)
    val x4875 = OpDef(op=FixAdd, inputs=List(x4873, x4874)).name("x4875").ctrl(x4885) // FixAdd(x4873,x4874)
    val x4876 = x4875 // FixConvert(x4875)
    // x4877 = SimpleStruct(ArrayBuffer((offset,x4876), (size,x4872), (isLoad,Const(true))))
    val x4878 = OpDef(op=BitAnd, inputs=List(b2750, b2732)).name("x4878").ctrl(x4885) // And(b2750,b2732)
    val x4879 = OpDef(op=BitAnd, inputs=List(b2633, b2624)).name("x4879").ctrl(x4885) // And(b2633,b2624)
    val x4880 = OpDef(op=BitAnd, inputs=List(x4878, x4879)).name("x4880").ctrl(x4885) // And(x4878,x4879)
    val x4881 = OpDef(op=BitAnd, inputs=List(x4880, b2619)).name("x4881").ctrl(x4885) // And(x4880,b2619)
    val b5147 = StoreDef(List(b5141), None, x4876).name("b5147").ctrl(x4885) // StreamWrite(x4842,x4877,x4881)
    val b5148 = StoreDef(List(b5142), None, x4872).name("b5148").ctrl(x4885) // StreamWrite(x4842,x4877,x4881)
    // x4883 = SimpleStruct(ArrayBuffer((size,x4870), (start,x4866), (end,x4868)))
    val b5149 = StoreDef(List(b5143), None, x4870).name("b5149").ctrl(x4885) // FIFOEnq(x4843,x4883,x4881)
    val b5150 = StoreDef(List(b5144), None, x4866).name("b5150").ctrl(x4885) // FIFOEnq(x4843,x4883,x4881)
    val b5151 = StoreDef(List(b5145), None, x4868).name("b5151").ctrl(x4885) // FIFOEnq(x4843,x4883,x4881)
    val x4886 = FringeContainer(x4709,b5141,b5142,b5146).name("x4886").ctrl(x4922) // FringeDenseLoad(x4709,x4842,x4844)
    val x4921 = Controller(style=SeqPipe, level=OuterControl, cchain=CounterChain.unit).name("x4921").ctrl(x4922) // UnitPipe(List(b2750, b2732, b2633, b2624, b2619),Block(Const(())))
    val x4887 = Reg(init=0).name("x4887").ctrl(x4921) // x4887 = RegNew(Const(0))
    val x4888 = Reg(init=0).name("x4888").ctrl(x4921) // x4888 = RegNew(Const(0))
    val x4889 = Reg(init=0).name("x4889").ctrl(x4921) // x4889 = RegNew(Const(0))
    val x4901 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x4901").ctrl(x4921) // UnitPipe(List(b2750, b2732, b2633, b2624, b2619),Block(x4900))
    val x4890 = OpDef(op=BitAnd, inputs=List(b2750, b2732)).name("x4890").ctrl(x4901) // And(b2750,b2732)
    val x4891 = OpDef(op=BitAnd, inputs=List(b2633, b2624)).name("x4891").ctrl(x4901) // And(b2633,b2624)
    val x4892 = OpDef(op=BitAnd, inputs=List(x4890, x4891)).name("x4892").ctrl(x4901) // And(x4890,x4891)
    val x4893 = OpDef(op=BitAnd, inputs=List(x4892, b2619)).name("x4893").ctrl(x4901) // And(x4892,b2619)
    val b5152 = LoadDef(List(b5143), None).name("b5152").ctrl(x4901) // FIFODeq(x4843,x4893)
    val b5153 = LoadDef(List(b5144), None).name("b5153").ctrl(x4901) // FIFODeq(x4843,x4893)
    val b5154 = LoadDef(List(b5145), None).name("b5154").ctrl(x4901) // FIFODeq(x4843,x4893)
    val x4895 = b5153 // x4895 = FieldApply(x4894,start)
    val x4896 = StoreDef(List(x4887), None, x4895).name("x4896").ctrl(x4901) // RegWrite(x4887,x4895,x4893)
    val x4897 = b5154 // x4897 = FieldApply(x4894,end)
    val x4898 = StoreDef(List(x4888), None, x4897).name("x4898").ctrl(x4901) // RegWrite(x4888,x4897,x4893)
    val x4899 = b5152 // x4899 = FieldApply(x4894,size)
    val x4900 = StoreDef(List(x4889), None, x4899).name("x4900").ctrl(x4901) // RegWrite(x4889,x4899,x4893)
    val x4902 = LoadDef(List(x4889), None).name("x4902").ctrl(x4921) // RegRead(x4889)
    val x4903 = Counter(min=Const(0).ctrl(x4921), max=x4902, step=Const(1).ctrl(x4921), par=1).name("x4903").ctrl(x4921) // CounterNew(Const(0),x4902,Const(1),Const(1))
    val x4904 = CounterChain(List(x4903)).name("x4904").ctrl(x4921) // CounterChainNew(List(x4903))
    val x4920 = Controller(style=InnerPipe, level=InnerControl, cchain=x4904).name("x4920").ctrl(x4921) // UnrolledForeach(List(b2750, b2732, b2633, b2624, b2619),x4904,Block(Const(())),List(List(b2810)),List(List(b2811)))
    val b2810 = IterDef(x4903, None).ctrl(x4920).name("b2810")
    val b2811 = DummyDef().ctrl(x4920).name("b2811")
    val x4905 = LoadDef(List(x4887), None).name("x4905").ctrl(x4920) // RegRead(x4887)
    val x4906 = OpDef(op=FixLeq, inputs=List(x4905, b2810)).name("x4906").ctrl(x4920) // FixLeq(x4905,b2810)
    val x4907 = LoadDef(List(x4888), None).name("x4907").ctrl(x4920) // RegRead(x4888)
    val x4908 = OpDef(op=FixLt, inputs=List(b2810, x4907)).name("x4908").ctrl(x4920) // FixLt(b2810,x4907)
    val x4909 = OpDef(op=BitAnd, inputs=List(x4906, x4908)).name("x4909").ctrl(x4920) // And(x4906,x4908)
    val x4910 = OpDef(op=FixSub, inputs=List(b2810, x4905)).name("x4910").ctrl(x4920) // FixSub(b2810,x4905)
    val x4911 = OpDef(op=BitAnd, inputs=List(b2811, b2750)).name("x4911").ctrl(x4920) // And(b2811,b2750)
    val x4912 = OpDef(op=BitAnd, inputs=List(b2732, b2633)).name("x4912").ctrl(x4920) // And(b2732,b2633)
    val x4913 = OpDef(op=BitAnd, inputs=List(b2624, b2619)).name("x4913").ctrl(x4920) // And(b2624,b2619)
    val x4914 = OpDef(op=BitAnd, inputs=List(x4911, x4912)).name("x4914").ctrl(x4920) // And(x4911,x4912)
    val x4915 = OpDef(op=BitAnd, inputs=List(x4914, x4913)).name("x4915").ctrl(x4920) // And(x4914,x4913)
    val b5155 = LoadDef(List(b5146), None).name("b5155").ctrl(x4920) // ParStreamRead(x4844,List(x4915))
    val b5156 = b5155 // x4917 = VectorApply(x4916,0)
    val x4918 = OpDef(op=BitAnd, inputs=List(x4909, x4915)).name("x4918").ctrl(x4920) // And(x4909,x4915)
    val x4919 = StoreDef(List(x4826_d0_b0), Some(List(x4910)), b5156).name("x4919").ctrl(x4920) // ParSRAMStore(x4826,List(List(x4910)),List(x4917),List(x4918))
    val x4923_d0_b0 = SRAM(size=16, banking=NoBanking()).name("x4923_d0_b0").ctrl(x4977) // x4923 = SRAMNew(ArrayBuffer(Const(16)))
    val x4923_d1_b0 = SRAM(size=16, banking=NoBanking()).name("x4923_d1_b0").ctrl(x4977) // x4923 = SRAMNew(ArrayBuffer(Const(16)))
    val x4924 = Counter(min=Const(0).ctrl(x4977), max=Const(16).ctrl(x4977), step=Const(1).ctrl(x4977), par=1).name("x4924").ctrl(x4977) // CounterNew(Const(0),Const(16),Const(1),Const(1))
    val x4925 = CounterChain(List(x4924)).name("x4925").ctrl(x4977) // CounterChainNew(List(x4924))
    val x4966 = Controller(style=MetaPipe, level=OuterControl, cchain=x4925).name("x4966").ctrl(x4977) // UnrolledReduce(List(b2732, b2633, b2624, b2619),x4925,x4923,Block((x4923) => Const(())),List(List(b2835)),List(List(b2836)))
    val b2835 = IterDef(x4924, Some(0)).ctrl(x4966).name("b2835")
    val b2836 = DummyDef().ctrl(x4966).name("b2836")
    val x4926_d0_b0 = SRAM(size=16, banking=NoBanking()).name("x4926_d0_b0").ctrl(x4966) // x4926 = SRAMNew(ArrayBuffer(Const(16)))
    val x4927 = Reg(init=0.0).name("x4927").ctrl(x4966) // x4927 = RegNew(Const(0))
    val x4934 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x4934").ctrl(x4966) // UnitPipe(List(b2836, b2732, b2633, b2624, b2619),Block(Const(())))
    val x4928 = OpDef(op=BitAnd, inputs=List(b2836, b2732)).name("x4928").ctrl(x4934) // And(b2836,b2732)
    val x4929 = OpDef(op=BitAnd, inputs=List(b2633, b2624)).name("x4929").ctrl(x4934) // And(b2633,b2624)
    val x4930 = OpDef(op=BitAnd, inputs=List(x4928, x4929)).name("x4930").ctrl(x4934) // And(x4928,x4929)
    val x4931 = OpDef(op=BitAnd, inputs=List(x4930, b2619)).name("x4931").ctrl(x4934) // And(x4930,b2619)
    val x4932 = LoadDef(List(x4826_d0_b0), Some(List(b2835))).name("x4932").ctrl(x4934) // SRAMLoad(x4826,ArrayBuffer(Const(16)),List(b2835),Const(0),x4931)
    val x4933 = StoreDef(List(x4927), None, x4932).name("x4933").ctrl(x4934) // RegWrite(x4927,x4932,x4931)
    val x4935 = Counter(min=Const(0).ctrl(x4966), max=Const(16).ctrl(x4966), step=Const(1).ctrl(x4966), par=1).name("x4935").ctrl(x4966) // CounterNew(Const(0),Const(16),Const(1),Const(1))
    val x4936 = CounterChain(List(x4935)).name("x4936").ctrl(x4966) // CounterChainNew(List(x4935))
    val x4947 = Controller(style=InnerPipe, level=InnerControl, cchain=x4936).name("x4947").ctrl(x4966) // UnrolledForeach(List(b2836, b2732, b2633, b2624, b2619),x4936,Block(Const(())),List(List(b2848)),List(List(b2849)))
    val b2848 = IterDef(x4935, None).ctrl(x4947).name("b2848")
    val b2849 = DummyDef().ctrl(x4947).name("b2849")
    val x4937 = OpDef(op=BitAnd, inputs=List(b2849, b2836)).name("x4937").ctrl(x4947) // And(b2849,b2836)
    val x4938 = OpDef(op=BitAnd, inputs=List(b2732, b2633)).name("x4938").ctrl(x4947) // And(b2732,b2633)
    val x4939 = OpDef(op=BitAnd, inputs=List(b2624, b2619)).name("x4939").ctrl(x4947) // And(b2624,b2619)
    val x4940 = OpDef(op=BitAnd, inputs=List(x4937, x4938)).name("x4940").ctrl(x4947) // And(x4937,x4938)
    val x4941 = OpDef(op=BitAnd, inputs=List(x4940, x4939)).name("x4941").ctrl(x4947) // And(x4940,x4939)
    val x4942 = LoadDef(List(x4730_d0_b0), Some(List(b2835,b2848))).name("x4942").ctrl(x4947) // ParSRAMLoad(x4730,List(List(b2835, b2848)),List(x4941))
    val x4943 = x4942 // x4943 = VectorApply(x4942,0)
    val x4944 = LoadDef(List(x4927), None).name("x4944").ctrl(x4947) // RegRead(x4927)
    val x4945 = OpDef(op=FixMul, inputs=List(x4943, x4944)).name("x4945").ctrl(x4947) // FixMul(x4943,x4944)
    val x4946 = StoreDef(List(x4926_d0_b0), Some(List(b2848)), x4945).name("x4946").ctrl(x4947) // ParSRAMStore(x4926,List(List(b2848)),List(x4945),List(x4941))
    val x4948 = Counter(min=Const(0).ctrl(x4966), max=Const(16).ctrl(x4966), step=Const(1).ctrl(x4966), par=1).name("x4948").ctrl(x4966) // CounterNew(Const(0),Const(16),Const(1),Const(1))
    val x4949 = CounterChain(List(x4948)).name("x4949").ctrl(x4966) // CounterChainNew(ArrayBuffer(x4948))
    val x4965 = Controller(style=InnerPipe, level=InnerControl, cchain=x4949).name("x4965").ctrl(x4966) // UnrolledForeach(List(),x4949,Block(Const(())),ArrayBuffer(List(b2861)),ArrayBuffer(List(b2862)))
    val b2861 = IterDef(x4948, None).ctrl(x4965).name("b2861")
    val b2862 = DummyDef().ctrl(x4965).name("b2862")
    val x4950 = OpDef(op=BitAnd, inputs=List(b2862, b2732)).name("x4950").ctrl(x4965) // And(b2862,b2732)
    val x4951 = OpDef(op=BitAnd, inputs=List(b2633, b2624)).name("x4951").ctrl(x4965) // And(b2633,b2624)
    val x4952 = OpDef(op=BitAnd, inputs=List(x4950, x4951)).name("x4952").ctrl(x4965) // And(x4950,x4951)
    val x4953 = OpDef(op=BitAnd, inputs=List(x4952, b2619)).name("x4953").ctrl(x4965) // And(x4952,b2619)
    val x4954 = LoadDef(List(x4926_d0_b0), Some(List(b2861))).name("x4954").ctrl(x4965) // ParSRAMLoad(x4926,List(ArrayBuffer(b2861)),List(x4953))
    val x4955 = x4954 // x4955 = VectorApply(x4954,0)
    val x4956 = LoadDef(List(x4923_d1_b0), Some(List(b2861))).name("x4956").ctrl(x4965) // ParSRAMLoad(x4923,List(ArrayBuffer(b2861)),List(x4953))
    val x4957 = x4956 // x4957 = VectorApply(x4956,0)
    val x4958 = OpDef(op=BitAnd, inputs=List(b2836, b2732)).name("x4958").ctrl(x4965) // And(b2836,b2732)
    val x4959 = OpDef(op=BitAnd, inputs=List(x4958, x4951)).name("x4959").ctrl(x4965) // And(x4958,x4951)
    val x4960 = OpDef(op=BitAnd, inputs=List(x4959, b2619)).name("x4960").ctrl(x4965) // And(x4959,b2619)
    val x4961 = OpDef(op=BitAnd, inputs=List(x4960, x4953)).name("x4961").ctrl(x4965) // And(x4960,x4953)
    val x4962 = OpDef(op=FixEql, inputs=List(b2835, Const(0).ctrl(x4965))).name("x4962").ctrl(x4965) // FixEql(b2835,Const(0))
    val x4963 = AccumDef(op=FixAdd, input=x4955, accum=x4957).name("x4963").ctrl(x4965) // FixAdd(x4955,x4957)
    val x4964 = StoreDef(List(x4923_d0_b0, x4923_d1_b0), Some(List(b2861)), x4963).name("x4964").ctrl(x4965) // ParSRAMStore(x4923,List(ArrayBuffer(b2861)),List(x4963),List(x4953))
    val x4967 = Counter(min=Const(0).ctrl(x4977), max=Const(16).ctrl(x4977), step=Const(1).ctrl(x4977), par=1).name("x4967").ctrl(x4977) // CounterNew(Const(0),Const(16),Const(1),Const(1))
    val x4968 = CounterChain(List(x4967)).name("x4968").ctrl(x4977) // CounterChainNew(List(x4967))
    val x4976 = Controller(style=InnerPipe, level=InnerControl, cchain=x4968).name("x4976").ctrl(x4977) // UnrolledForeach(List(b2732, b2633, b2624, b2619),x4968,Block(Const(())),List(List(b2882)),List(List(b2883)))
    val b2882 = IterDef(x4967, None).ctrl(x4976).name("b2882")
    val b2883 = DummyDef().ctrl(x4976).name("b2883")
    val x4969 = OpDef(op=BitAnd, inputs=List(b2883, b2732)).name("x4969").ctrl(x4976) // And(b2883,b2732)
    val x4970 = OpDef(op=BitAnd, inputs=List(b2633, b2624)).name("x4970").ctrl(x4976) // And(b2633,b2624)
    val x4971 = OpDef(op=BitAnd, inputs=List(x4969, x4970)).name("x4971").ctrl(x4976) // And(x4969,x4970)
    val x4972 = OpDef(op=BitAnd, inputs=List(x4971, b2619)).name("x4972").ctrl(x4976) // And(x4971,b2619)
    val x4973 = LoadDef(List(x4923_d0_b0), Some(List(b2882))).name("x4973").ctrl(x4976) // ParSRAMLoad(x4923,List(List(b2882)),List(x4972))
    val x4974 = x4973 // x4974 = VectorApply(x4973,0)
    val x4975 = StoreDef(List(x4729_d0_b0), Some(List(b2731,b2882)), x4974).name("x4975").ctrl(x4976) // ParSRAMStore(x4729,List(List(b2731, b2882)),List(x4974),List(x4972))
    val x4978 = Counter(min=Const(0).ctrl(x4995), max=Const(16).ctrl(x4995), step=Const(1).ctrl(x4995), par=1).name("x4978").ctrl(x4995) // CounterNew(Const(0),Const(16),Const(1),Const(1))
    val x4979 = Counter(min=Const(0).ctrl(x4995), max=Const(64).ctrl(x4995), step=Const(1).ctrl(x4995), par=1).name("x4979").ctrl(x4995) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x4980 = CounterChain(List(x4979,x4978)).name("x4980").ctrl(x4995) // CounterChainNew(ArrayBuffer(x4979, x4978))
    val x4994 = Controller(style=InnerPipe, level=InnerControl, cchain=x4980).name("x4994").ctrl(x4995) // UnrolledForeach(List(),x4980,Block(Const(())),ArrayBuffer(List(b2893), List(b2894)),ArrayBuffer(List(b2895), List(b2896)))
    val b2893 = IterDef(x4979, Some(0)).ctrl(x4994).name("b2893")
    val b2895 = DummyDef().ctrl(x4994).name("b2895")
    val b2894 = IterDef(x4978, None).ctrl(x4994).name("b2894")
    val b2896 = DummyDef().ctrl(x4994).name("b2896")
    val x4981 = OpDef(op=BitAnd, inputs=List(b2895, b2896)).name("x4981").ctrl(x4994) // And(b2895,b2896)
    val x4982 = OpDef(op=BitAnd, inputs=List(b2624, b2619)).name("x4982").ctrl(x4994) // And(b2624,b2619)
    val x4983 = OpDef(op=BitAnd, inputs=List(x4981, x4982)).name("x4983").ctrl(x4994) // And(x4981,x4982)
    val x4984 = LoadDef(List(x4729_d0_b0), Some(List(b2893,b2894))).name("x4984").ctrl(x4994) // ParSRAMLoad(x4729,List(ArrayBuffer(b2893, b2894)),List(x4983))
    val x4985 = x4984 // x4985 = VectorApply(x4984,0)
    val x4986 = LoadDef(List(x4725_d1_b0), Some(List(b2893,b2894))).name("x4986").ctrl(x4994) // ParSRAMLoad(x4725,List(ArrayBuffer(b2893, b2894)),List(x4983))
    val x4987 = x4986 // x4987 = VectorApply(x4986,0)
    val x4988 = OpDef(op=BitAnd, inputs=List(b2633, b2624)).name("x4988").ctrl(x4994) // And(b2633,b2624)
    val x4989 = OpDef(op=BitAnd, inputs=List(x4988, b2619)).name("x4989").ctrl(x4994) // And(x4988,b2619)
    val x4990 = OpDef(op=BitAnd, inputs=List(x4989, x4983)).name("x4990").ctrl(x4994) // And(x4989,x4983)
    val x4991 = OpDef(op=FixEql, inputs=List(b2632, Const(0).ctrl(x4994))).name("x4991").ctrl(x4994) // FixEql(b2632,Const(0))
    val x4992 = AccumDef(op=FixAdd, input=x4985, accum=x4987).name("x4992").ctrl(x4994) // FixAdd(x4985,x4987)
    val x4993 = StoreDef(List(x4725_d0_b0, x4725_d1_b0), Some(List(b2893,b2894)), x4992).name("x4993").ctrl(x4994) // ParSRAMStore(x4725,List(ArrayBuffer(b2893, b2894)),List(x4992),List(x4983))
    val x4996 = Reg(init=0).name("x4996").ctrl(x5082) // x4996 = RegNew(Const(0))
    val x4997 = Reg(init=0).name("x4997").ctrl(x5082) // x4997 = RegNew(Const(0))
    val x5007 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x5007").ctrl(x5082) // UnitPipe(List(b2624, b2619),Block(Const(())))
    val x4998 = b2618 // FixConvert(b2618)
    val x4999 = OpDef(op=FixAdd, inputs=List(x4998, Const(64).ctrl(x5007))).name("x4999").ctrl(x5007) // FixAdd(x4998,Const(64))
    val x5000 = b2623 // FixConvert(b2623)
    val x5001 = OpDef(op=FixAdd, inputs=List(x5000, Const(16).ctrl(x5007))).name("x5001").ctrl(x5007) // FixAdd(x5000,Const(16))
    val x5002 = OpDef(op=FixSub, inputs=List(x4999, b2618)).name("x5002").ctrl(x5007) // FixSub(x4999,b2618)
    val x5003 = OpDef(op=FixSub, inputs=List(x5001, b2623)).name("x5003").ctrl(x5007) // FixSub(x5001,b2623)
    val x5004 = OpDef(op=BitAnd, inputs=List(b2624, b2619)).name("x5004").ctrl(x5007) // And(b2624,b2619)
    val x5005 = StoreDef(List(x4996), None, x5002).name("x5005").ctrl(x5007) // RegWrite(x4996,x5002,x5004)
    val x5006 = StoreDef(List(x4997), None, x5003).name("x5006").ctrl(x5007) // RegWrite(x4997,x5003,x5004)
    val x5008 = LoadDef(List(x4996), None).name("x5008").ctrl(x5082) // RegRead(x4996)
    val x5009 = Counter(min=Const(0).ctrl(x5082), max=x5008, step=Const(1).ctrl(x5082), par=1).name("x5009").ctrl(x5082) // CounterNew(Const(0),x5008,Const(1),Const(1))
    val x5010 = CounterChain(List(x5009)).name("x5010").ctrl(x5082) // CounterChainNew(List(x5009))
    val x5081 = Controller(style=StreamPipe, level=OuterControl, cchain=x5010).name("x5081").ctrl(x5082) // UnrolledForeach(List(b2624, b2619),x5010,Block(Const(())),List(List(b2927)),List(List(b2928)))
    val b2927 = IterDef(x5009, Some(0)).ctrl(x5081).name("b2927")
    val b2928 = DummyDef().ctrl(x5081).name("b2928")
    val b5157 = StreamOut(field="offset").name("b5157").ctrl(x5081) // x5011 = StreamOutNew(BurstCmdBus)
    val b5158 = StreamOut(field="size").name("b5158").ctrl(x5081) // x5011 = StreamOutNew(BurstCmdBus)
    val b5159 = StreamOut(field="data").name("b5159").ctrl(x5081) // x5012 = StreamOutNew(BurstFullDataBus())
    val b5160 = StreamIn(field="ack").name("b5160").ctrl(x5081) // x5013 = StreamInNew(BurstAckBus)
    val x5075 = Controller(style=SeqPipe, level=OuterControl, cchain=CounterChain.unit).name("x5075").ctrl(x5081) // UnitPipe(List(b2928, b2624, b2619),Block(Const(())))
    val x5014 = Reg(init=0).name("x5014").ctrl(x5075) // x5014 = RegNew(Const(0))
    val x5015 = Reg(init=0).name("x5015").ctrl(x5075) // x5015 = RegNew(Const(0))
    val x5016 = Reg(init=0).name("x5016").ctrl(x5075) // x5016 = RegNew(Const(0))
    val x5055 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x5055").ctrl(x5075) // UnitPipe(List(b2928, b2624, b2619),Block(x5054))
    val x5017 = OpDef(op=FixAdd, inputs=List(b2618, b2927)).name("x5017").ctrl(x5055) // FixAdd(b2618,b2927)
    val x5018 = x5017 // FixConvert(x5017)
    val x5019 = LoadDef(List(x4701_d0), None).name("x5019").ctrl(x5055) // RegRead(x4701)
    val x5020 = OpDef(op=FixMul, inputs=List(x5018, x5019)).name("x5020").ctrl(x5055) // FixMul(x5018,x5019)
    val x5021 = b2623 // FixConvert(b2623)
    val x5022 = OpDef(op=FixAdd, inputs=List(x5020, x5021)).name("x5022").ctrl(x5055) // FixAdd(x5020,x5021)
    val x5023 = OpDef(op=FixSla, inputs=List(x5022, Const(2).ctrl(x5055))).name("x5023").ctrl(x5055) // FixLsh(x5022,Const(2))
    val x5024 = x5023 // x5024 = DataAsBits(x5023)
    val x5025 = OpDef(op=BitAnd, inputs=List(x5024, Const(31))).name("x5025").ctrl(x5055) // VectorSlice(x5024,5,0) strMask=00000000000000000000000000011111
    val x5026 = x5025 // x5026 = BitsAsData(x5025,FixPt[TRUE,_32,_0])
    val x5027 = LoadDef(List(x4997), None).name("x5027").ctrl(x5055) // RegRead(x4997)
    val x5028 = OpDef(op=FixSla, inputs=List(x5027, Const(2).ctrl(x5055))).name("x5028").ctrl(x5055) // FixLsh(x5027,Const(2))
    val x5029 = OpDef(op=FixSub, inputs=List(x5023, x5026)).name("x5029").ctrl(x5055) // FixSub(x5023,x5026)
    val x5030 = OpDef(op=FixAdd, inputs=List(x5023, x5028)).name("x5030").ctrl(x5055) // FixAdd(x5023,x5028)
    val x5031 = x5030 // x5031 = DataAsBits(x5030)
    val x5032 = OpDef(op=BitAnd, inputs=List(x5031, Const(31))).name("x5032").ctrl(x5055) // VectorSlice(x5031,5,0) strMask=00000000000000000000000000011111
    val x5033 = x5032 // x5033 = BitsAsData(x5032,FixPt[TRUE,_32,_0])
    val x5034 = OpDef(op=FixEql, inputs=List(x5033, Const(0).ctrl(x5055))).name("x5034").ctrl(x5055) // FixEql(x5033,Const(0))
    val x5035 = OpDef(op=FixSub, inputs=List(Const(64).ctrl(x5055), x5033)).name("x5035").ctrl(x5055) // FixSub(Const(64),x5033)
    val x5036 = OpDef(op=MuxOp, inputs=List(x5034, Const(0).ctrl(x5055), x5035)).name("x5036").ctrl(x5055) // Mux(x5034,Const(0),x5035)
    val x5037 = OpDef(op=FixSra, inputs=List(x5026, Const(2).ctrl(x5055))).name("x5037").ctrl(x5055) // FixRsh(x5026,Const(2))
    val x5038 = OpDef(op=FixSra, inputs=List(x5036, Const(2).ctrl(x5055))).name("x5038").ctrl(x5055) // FixRsh(x5036,Const(2))
    val x5039 = OpDef(op=FixAdd, inputs=List(x5037, x5027)).name("x5039").ctrl(x5055) // FixAdd(x5037,x5027)
    val x5040 = OpDef(op=FixAdd, inputs=List(x5027, x5037)).name("x5040").ctrl(x5055) // FixAdd(x5027,x5037)
    val x5041 = OpDef(op=FixAdd, inputs=List(x5040, x5038)).name("x5041").ctrl(x5055) // FixAdd(x5040,x5038)
    val x5042 = OpDef(op=FixAdd, inputs=List(x5028, x5026)).name("x5042").ctrl(x5055) // FixAdd(x5028,x5026)
    val x5043 = OpDef(op=FixAdd, inputs=List(x5042, x5036)).name("x5043").ctrl(x5055) // FixAdd(x5042,x5036)
    val x5044 = x5029 // FixConvert(x5029)
    val x5045 = top.dramAddress(x4715).name("x5045").ctrl(x5055) // GetDRAMAddress(x4715)
    val x5046 = OpDef(op=FixAdd, inputs=List(x5044, x5045)).name("x5046").ctrl(x5055) // FixAdd(x5044,x5045)
    val x5047 = x5046 // FixConvert(x5046)
    // x5048 = SimpleStruct(ArrayBuffer((offset,x5047), (size,x5043), (isLoad,Const(false))))
    val x5049 = OpDef(op=BitAnd, inputs=List(b2928, b2624)).name("x5049").ctrl(x5055) // And(b2928,b2624)
    val x5050 = OpDef(op=BitAnd, inputs=List(x5049, b2619)).name("x5050").ctrl(x5055) // And(x5049,b2619)
    val b5161 = StoreDef(List(b5157), None, x5047).name("b5161").ctrl(x5055) // StreamWrite(x5011,x5048,x5050)
    val b5162 = StoreDef(List(b5158), None, x5043).name("b5162").ctrl(x5055) // StreamWrite(x5011,x5048,x5050)
    val x5052 = StoreDef(List(x5014), None, x5037).name("x5052").ctrl(x5055) // RegWrite(x5014,x5037,x5050)
    val x5053 = StoreDef(List(x5015), None, x5039).name("x5053").ctrl(x5055) // RegWrite(x5015,x5039,x5050)
    val x5054 = StoreDef(List(x5016), None, x5041).name("x5054").ctrl(x5055) // RegWrite(x5016,x5041,x5050)
    val x5056 = LoadDef(List(x5016), None).name("x5056").ctrl(x5075) // RegRead(x5016)
    val x5057 = Counter(min=Const(0).ctrl(x5075), max=x5056, step=Const(1).ctrl(x5075), par=1).name("x5057").ctrl(x5075) // CounterNew(Const(0),x5056,Const(1),Const(1))
    val x5058 = CounterChain(List(x5057)).name("x5058").ctrl(x5075) // CounterChainNew(List(x5057))
    val x5074 = Controller(style=InnerPipe, level=InnerControl, cchain=x5058).name("x5074").ctrl(x5075) // UnrolledForeach(List(b2928, b2624, b2619),x5058,Block(Const(())),List(List(b2973)),List(List(b2974)))
    val b2973 = IterDef(x5057, None).ctrl(x5074).name("b2973")
    val b2974 = DummyDef().ctrl(x5074).name("b2974")
    val x5059 = LoadDef(List(x5014), None).name("x5059").ctrl(x5074) // RegRead(x5014)
    val x5060 = OpDef(op=FixLeq, inputs=List(x5059, b2973)).name("x5060").ctrl(x5074) // FixLeq(x5059,b2973)
    val x5061 = LoadDef(List(x5015), None).name("x5061").ctrl(x5074) // RegRead(x5015)
    val x5062 = OpDef(op=FixLt, inputs=List(b2973, x5061)).name("x5062").ctrl(x5074) // FixLt(b2973,x5061)
    val x5063 = OpDef(op=BitAnd, inputs=List(x5060, x5062)).name("x5063").ctrl(x5074) // And(x5060,x5062)
    val x5064 = OpDef(op=FixSub, inputs=List(b2973, x5059)).name("x5064").ctrl(x5074) // FixSub(b2973,x5059)
    val x5065 = OpDef(op=BitAnd, inputs=List(b2974, b2928)).name("x5065").ctrl(x5074) // And(b2974,b2928)
    val x5066 = OpDef(op=BitAnd, inputs=List(b2624, b2619)).name("x5066").ctrl(x5074) // And(b2624,b2619)
    val x5067 = OpDef(op=BitAnd, inputs=List(x5065, x5066)).name("x5067").ctrl(x5074) // And(x5065,x5066)
    val x5068 = OpDef(op=BitAnd, inputs=List(x5063, x5067)).name("x5068").ctrl(x5074) // And(x5063,x5067)
    val x5069 = LoadDef(List(x4725_d0_b0), Some(List(b2927,x5064))).name("x5069").ctrl(x5074) // ParSRAMLoad(x4725,List(List(b2927, x5064)),List(x5068))
    val x5070 = x5069 // x5070 = VectorApply(x5069,0)
    val x5071 = OpDef(op=MuxOp, inputs=List(x5063, x5070, Const(0).ctrl(x5074))).name("x5071").ctrl(x5074) // Mux(x5063,x5070,Const(0))
    // x5072 = SimpleStruct(ArrayBuffer((_1,x5071), (_2,x5063)))
    val b5163 = StoreDef(List(b5159), None, x5071).name("b5163").ctrl(x5074) // ParStreamWrite(x5012,List(x5072),List(x5067))
    val x5076 = FringeContainer(x4715,b5157,b5158,b5159,b5160).name("x5076").ctrl(x5081) // FringeDenseStore(x4715,x5011,x5012,x5013)
    val x5080 = Controller(style=SeqPipe, level=InnerControl, cchain=CounterChain.unit).name("x5080").ctrl(x5081) // UnitPipe(List(b2928, b2624, b2619),Block(Const(())))
    val x5077 = OpDef(op=BitAnd, inputs=List(b2928, b2624)).name("x5077").ctrl(x5080) // And(b2928,b2624)
    val x5078 = OpDef(op=BitAnd, inputs=List(x5077, b2619)).name("x5078").ctrl(x5080) // And(x5077,b2619)
    val b5164 = LoadDef(List(b5160), None).name("b5164").ctrl(x5080) // StreamRead(x5013,x5078)
    
  }
}
