import pir._
import pir.node._
import arch._
import prism.enums._

object GEMM_Blocked extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x3307_d0 = ArgIn(init=0).name("x3307_d0").ctrl(top) // ArgInNew(Const(0))
    boundOf(x3307_d0) = 512
    val x3309 = ReadMem(x3307_d0).name("x3309").ctrl(top) // RegRead(x3307)
    val x3310 = ReadMem(x3307_d0).name("x3310").ctrl(top) // RegRead(x3307)
    val x3311 = DRAM().name("x3311").ctrl(top) // x3311 = DRAMNew(ArrayBuffer(x3310, x3309),Const(0))
    val x3312 = ReadMem(x3307_d0).name("x3312").ctrl(top) // RegRead(x3307)
    val x3313 = ReadMem(x3307_d0).name("x3313").ctrl(top) // RegRead(x3307)
    val x3314 = DRAM().name("x3314").ctrl(top) // x3314 = DRAMNew(ArrayBuffer(x3313, x3312),Const(0))
    val x3315 = ReadMem(x3307_d0).name("x3315").ctrl(top) // RegRead(x3307)
    val x3316 = ReadMem(x3307_d0).name("x3316").ctrl(top) // RegRead(x3307)
    val x3317 = DRAM().name("x3317").ctrl(top) // x3317 = DRAMNew(ArrayBuffer(x3316, x3315),Const(0))
    val x3532 = UnitController(style=SeqPipe, level=OuterControl).name("x3532").ctrl(top) // Hwblock(Block(Const(())),false)
    val x3321 = ReadMem(x3307_d0).name("x3321").ctrl(x3532) // RegRead(x3307)
    val x3322 = Counter(min=Const(0), max=x3321, step=Const(64), par=1).name("x3322").ctrl(x3532) // CounterNew(Const(0),x3321,Const(64),Const(1))
    val x3323 = CounterChain(List(x3322)).name("x3323").ctrl(x3532) // CounterChainNew(List(x3322))
    val x3531 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3323).name("x3531").ctrl(x3532) // UnrolledForeach(List(Const(true)),x3323,Block(Const(())),List(List(b1938)),List(List(b1939)))
    val b1938 = CounterIter(x3322, Some(0)).ctrl(x3531).name("b1938")
    val b1939 = DummyOp().ctrl(x3531).name("b1939")
    val x3324 = ReadMem(x3307_d0).name("x3324").ctrl(x3531) // RegRead(x3307)
    val x3325 = Counter(min=Const(0), max=x3324, step=Const(32), par=1).name("x3325").ctrl(x3531) // CounterNew(Const(0),x3324,Const(32),Const(1))
    val x3326 = CounterChain(List(x3325)).name("x3326").ctrl(x3531) // CounterChainNew(List(x3325))
    val x3530 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3326).name("x3530").ctrl(x3531) // UnrolledForeach(List(b1939),x3326,Block(Const(())),List(List(b1943)),List(List(b1944)))
    val b1943 = CounterIter(x3325, Some(0)).ctrl(x3530).name("b1943")
    val b1944 = DummyOp().ctrl(x3530).name("b1944")
    val x3327_d0_b0 = SRAM(size=128, banking=Strided(banks=16, stride=1)).name("x3327_d0_b0").ctrl(x3530) // x3327 = SRAMNew(ArrayBuffer(Const(64), Const(32)))
    isAccum(x3327_d0_b0) = false
    bufferDepthOf(x3327_d0_b0) = 3
    val x3327_d1_b0 = SRAM(size=2048, banking=NoBanking()).name("x3327_d1_b0").ctrl(x3530) // x3327 = SRAMNew(ArrayBuffer(Const(64), Const(32)))
    isAccum(x3327_d1_b0) = true
    bufferDepthOf(x3327_d1_b0) = 1
    val x3328 = ReadMem(x3307_d0).name("x3328").ctrl(x3530) // RegRead(x3307)
    val x3329 = Counter(min=Const(0), max=x3328, step=Const(32), par=1).name("x3329").ctrl(x3530) // CounterNew(Const(0),x3328,Const(32),Const(1))
    val x3330 = CounterChain(List(x3329)).name("x3330").ctrl(x3530) // CounterChainNew(List(x3329))
    val x3489 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3330).name("x3489").ctrl(x3530) // UnrolledReduce(List(b1944, b1939),x3330,x3327,Block((x3327) => Const(())),List(List(b1952)),List(List(b1953)))
    val b1952 = CounterIter(x3329, Some(0)).ctrl(x3489).name("b1952")
    val b1953 = DummyOp().ctrl(x3489).name("b1953")
    val x3331_d0_b0 = SRAM(size=2048, banking=NoBanking()).name("x3331_d0_b0").ctrl(x3489) // x3331 = SRAMNew(ArrayBuffer(Const(64), Const(32)))
    isAccum(x3331_d0_b0) = false
    bufferDepthOf(x3331_d0_b0) = 2
    val x3332_d0_b0 = SRAM(size=64, banking=Strided(banks=16, stride=1)).name("x3332_d0_b0").ctrl(x3489) // x3332 = SRAMNew(ArrayBuffer(Const(32), Const(32)))
    isAccum(x3332_d0_b0) = false
    bufferDepthOf(x3332_d0_b0) = 2
    val x3335 = UnitController(style=SeqPipe, level=InnerControl).name("x3335").ctrl(x3489) // UnitPipe(List(b1953, b1944, b1939),Block(Const(())))
    val x3333 = OpDef(op=FixAdd, inputs=List(b1952, Const(32))).name("x3333").ctrl(x3335) // FixAdd(b1952,Const(32))
    val x3334 = OpDef(op=FixAdd, inputs=List(b1943, Const(32))).name("x3334").ctrl(x3335) // FixAdd(b1943,Const(32))
    val x3336 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1).name("x3336").ctrl(x3489) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x3337 = CounterChain(List(x3336)).name("x3337").ctrl(x3489) // CounterChainNew(List(x3336))
    val x3368 = LoopController(style=StreamPipe, level=OuterControl, cchain=x3337).name("x3368").ctrl(x3489) // UnrolledForeach(List(b1953, b1944, b1939),x3337,Block(Const(())),List(List(b1961)),List(List(b1962)))
    val b1961 = CounterIter(x3336, Some(0)).ctrl(x3368).name("b1961")
    val b1962 = DummyOp().ctrl(x3368).name("b1962")
    val b3573 = StreamOut(field="offset").name("b3573").ctrl(x3368) // x3338 = StreamOutNew(BurstCmdBus)
    val b3574 = StreamOut(field="size").name("b3574").ctrl(x3368) // x3338 = StreamOutNew(BurstCmdBus)
    val x3339 = StreamIn(field="data").name("x3339").ctrl(x3368) // x3339 = StreamInNew(BurstDataBus())
    val x3356 = UnitController(style=SeqPipe, level=InnerControl).name("x3356").ctrl(x3368) // UnitPipe(List(b1962, b1953, b1944, b1939),Block(x3355))
    val x3340 = OpDef(op=FixAdd, inputs=List(b1952, b1961)).name("x3340").ctrl(x3356) // FixAdd(b1952,b1961)
    val x3341 = x3340 // FixConvert(x3340,TRUE,_32,_0)
    val x3342 = ReadMem(x3307_d0).name("x3342").ctrl(x3356) // RegRead(x3307)
    val x3343 = OpDef(op=FixMul, inputs=List(x3341, x3342)).name("x3343").ctrl(x3356) // FixMul(x3341,x3342)
    val x3344 = b1943 // FixConvert(b1943,TRUE,_32,_0)
    val x3345 = OpDef(op=FixAdd, inputs=List(x3343, x3344)).name("x3345").ctrl(x3356) // FixAdd(x3343,x3344)
    val x3346 = OpDef(op=FixSla, inputs=List(x3345, Const(2))).name("x3346").ctrl(x3356) // FixLsh(x3345,Const(2))
    val x3347 = x3346 // FixConvert(x3346,TRUE,_64,_0)
    val x3348 = DramAddress(x3314).name("x3348").ctrl(x3356) // GetDRAMAddress(x3314)
    val x3349 = OpDef(op=FixAdd, inputs=List(x3347, x3348)).name("x3349").ctrl(x3356) // FixAdd(x3347,x3348)
    val x3351_x3350 = x3349 // FixConvert(x3349,TRUE,_64,_0)
    // x3351 = SimpleStruct(ArrayBuffer((offset,x3350), (size,Const(128)), (isLoad,Const(true))))
    val x3352 = OpDef(op=BitAnd, inputs=List(b1962, b1953)).name("x3352").ctrl(x3356) // And(b1962,b1953)
    val x3353 = OpDef(op=BitAnd, inputs=List(b1944, b1939)).name("x3353").ctrl(x3356) // And(b1944,b1939)
    val x3354 = OpDef(op=BitAnd, inputs=List(x3352, x3353)).name("x3354").ctrl(x3356) // And(x3352,x3353)
    val b3575_b3573 = WriteMem(b3573, x3351_x3350).name("b3575_b3573").ctrl(x3356) // StreamWrite(x3338,x3351,x3354)
    val b3576_b3574 = WriteMem(b3574, Const(128)).name("b3576_b3574").ctrl(x3356) // StreamWrite(x3338,x3351,x3354)
    val x3357 = FringeDenseLoad(dram=List(x3314), cmdStream=List(b3573, b3574), dataStream=List(x3339)).name("x3357").ctrl(x3368) // FringeDenseLoad(x3314,x3338,x3339)
    val x3358 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x3358").ctrl(x3368) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x3359 = CounterChain(List(x3358)).name("x3359").ctrl(x3368) // CounterChainNew(List(x3358))
    val x3367 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3359).name("x3367").ctrl(x3368) // UnrolledForeach(List(b1962, b1953, b1944, b1939),x3359,Block(Const(())),List(List(b1985)),List(List(b1986)))
    val b1985 = CounterIter(x3358, None).ctrl(x3367).name("b1985")
    val b1986 = DummyOp().ctrl(x3367).name("b1986")
    val x3360 = OpDef(op=BitAnd, inputs=List(b1986, b1962)).name("x3360").ctrl(x3367) // And(b1986,b1962)
    val x3361 = OpDef(op=BitAnd, inputs=List(b1953, b1944)).name("x3361").ctrl(x3367) // And(b1953,b1944)
    val x3362 = OpDef(op=BitAnd, inputs=List(x3360, x3361)).name("x3362").ctrl(x3367) // And(x3360,x3361)
    val x3363 = OpDef(op=BitAnd, inputs=List(x3362, b1939)).name("x3363").ctrl(x3367) // And(x3362,b1939)
    val x3364_x3364 = ReadMem(x3339).name("x3364").ctrl(x3367) // ParStreamRead(x3339,List(x3363))
    val x3365_x3365 = x3364_x3364 // x3365 = VectorApply(x3364,0)
    val x3366 = StoreBanks(List(x3332_d0_b0), List(b1961, b1985), x3365_x3365).name("x3366").ctrl(x3367) // ParSRAMStore(x3332,List(List(b1961, b1985)),List(x3365),List(x3363))
    val x3369 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x3369").ctrl(x3489) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x3370 = CounterChain(List(x3369)).name("x3370").ctrl(x3489) // CounterChainNew(List(x3369))
    val x3471 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3370).name("x3471").ctrl(x3489) // UnrolledForeach(List(b1953, b1944, b1939),x3370,Block(Const(())),List(List(b1998)),List(List(b1999)))
    val b1998 = CounterIter(x3369, Some(0)).ctrl(x3471).name("b1998")
    val b1999 = DummyOp().ctrl(x3471).name("b1999")
    val x3371_d0_b0 = SRAM(size=32, banking=NoBanking()).name("x3371_d0_b0").ctrl(x3471) // x3371 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x3371_d0_b0) = false
    bufferDepthOf(x3371_d0_b0) = 2
    val x3372 = Reg(init=Some(0)).name("x3372").ctrl(x3471) // x3372 = RegNew(Const(0))
    isAccum(x3372) = false
    bufferDepthOf(x3372) = 2
    val x3380 = UnitController(style=SeqPipe, level=InnerControl).name("x3380").ctrl(x3471) // UnitPipe(List(b1999, b1953, b1944, b1939),Block(Const(())))
    val x3373 = OpDef(op=FixAdd, inputs=List(b1938, b1998)).name("x3373").ctrl(x3380) // FixAdd(b1938,b1998)
    val x3374 = OpDef(op=FixAdd, inputs=List(b1952, Const(32))).name("x3374").ctrl(x3380) // FixAdd(b1952,Const(32))
    val x3375 = OpDef(op=FixAdd, inputs=List(x3373, Const(1))).name("x3375").ctrl(x3380) // FixAdd(x3373,Const(1))
    val x3376 = OpDef(op=BitAnd, inputs=List(b1999, b1953)).name("x3376").ctrl(x3380) // And(b1999,b1953)
    val x3377 = OpDef(op=BitAnd, inputs=List(b1944, b1939)).name("x3377").ctrl(x3380) // And(b1944,b1939)
    val x3378 = OpDef(op=BitAnd, inputs=List(x3376, x3377)).name("x3378").ctrl(x3380) // And(x3376,x3377)
    val x3379_x3372 = WriteMem(x3372, x3373).name("x3379_x3372").ctrl(x3380) // RegWrite(x3372,x3373,x3378)
    val x3381 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x3381").ctrl(x3471) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x3382 = CounterChain(List(x3381)).name("x3382").ctrl(x3471) // CounterChainNew(List(x3381))
    val x3416 = LoopController(style=StreamPipe, level=OuterControl, cchain=x3382).name("x3416").ctrl(x3471) // UnrolledForeach(List(b1999, b1953, b1944, b1939),x3382,Block(Const(())),List(List(b2012)),List(List(b2013)))
    val b2012 = CounterIter(x3381, Some(0)).ctrl(x3416).name("b2012")
    val b2013 = DummyOp().ctrl(x3416).name("b2013")
    val b3577 = StreamOut(field="offset").name("b3577").ctrl(x3416) // x3383 = StreamOutNew(BurstCmdBus)
    val b3578 = StreamOut(field="size").name("b3578").ctrl(x3416) // x3383 = StreamOutNew(BurstCmdBus)
    val x3384 = StreamIn(field="data").name("x3384").ctrl(x3416) // x3384 = StreamInNew(BurstDataBus())
    val x3403 = UnitController(style=SeqPipe, level=InnerControl).name("x3403").ctrl(x3416) // UnitPipe(List(b2013, b1999, b1953, b1944, b1939),Block(x3402))
    val x3385 = ReadMem(x3372).name("x3385").ctrl(x3403) // RegRead(x3372)
    val x3386 = OpDef(op=FixAdd, inputs=List(x3385, b2012)).name("x3386").ctrl(x3403) // FixAdd(x3385,b2012)
    val x3387 = x3386 // FixConvert(x3386,TRUE,_32,_0)
    val x3388 = ReadMem(x3307_d0).name("x3388").ctrl(x3403) // RegRead(x3307)
    val x3389 = OpDef(op=FixMul, inputs=List(x3387, x3388)).name("x3389").ctrl(x3403) // FixMul(x3387,x3388)
    val x3390 = b1952 // FixConvert(b1952,TRUE,_32,_0)
    val x3391 = OpDef(op=FixAdd, inputs=List(x3389, x3390)).name("x3391").ctrl(x3403) // FixAdd(x3389,x3390)
    val x3392 = OpDef(op=FixSla, inputs=List(x3391, Const(2))).name("x3392").ctrl(x3403) // FixLsh(x3391,Const(2))
    val x3393 = x3392 // FixConvert(x3392,TRUE,_64,_0)
    val x3394 = DramAddress(x3311).name("x3394").ctrl(x3403) // GetDRAMAddress(x3311)
    val x3395 = OpDef(op=FixAdd, inputs=List(x3393, x3394)).name("x3395").ctrl(x3403) // FixAdd(x3393,x3394)
    val x3397_x3396 = x3395 // FixConvert(x3395,TRUE,_64,_0)
    // x3397 = SimpleStruct(ArrayBuffer((offset,x3396), (size,Const(128)), (isLoad,Const(true))))
    val x3398 = OpDef(op=BitAnd, inputs=List(b2013, b1999)).name("x3398").ctrl(x3403) // And(b2013,b1999)
    val x3399 = OpDef(op=BitAnd, inputs=List(b1953, b1944)).name("x3399").ctrl(x3403) // And(b1953,b1944)
    val x3400 = OpDef(op=BitAnd, inputs=List(x3398, x3399)).name("x3400").ctrl(x3403) // And(x3398,x3399)
    val x3401 = OpDef(op=BitAnd, inputs=List(x3400, b1939)).name("x3401").ctrl(x3403) // And(x3400,b1939)
    val b3579_b3577 = WriteMem(b3577, x3397_x3396).name("b3579_b3577").ctrl(x3403) // StreamWrite(x3383,x3397,x3401)
    val b3580_b3578 = WriteMem(b3578, Const(128)).name("b3580_b3578").ctrl(x3403) // StreamWrite(x3383,x3397,x3401)
    val x3404 = FringeDenseLoad(dram=List(x3311), cmdStream=List(b3577, b3578), dataStream=List(x3384)).name("x3404").ctrl(x3416) // FringeDenseLoad(x3311,x3383,x3384)
    val x3405 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1).name("x3405").ctrl(x3416) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x3406 = CounterChain(List(x3405)).name("x3406").ctrl(x3416) // CounterChainNew(List(x3405))
    val x3415 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3406).name("x3415").ctrl(x3416) // UnrolledForeach(List(b2013, b1999, b1953, b1944, b1939),x3406,Block(Const(())),List(List(b2038)),List(List(b2039)))
    val b2038 = CounterIter(x3405, None).ctrl(x3415).name("b2038")
    val b2039 = DummyOp().ctrl(x3415).name("b2039")
    val x3407 = OpDef(op=BitAnd, inputs=List(b2039, b2013)).name("x3407").ctrl(x3415) // And(b2039,b2013)
    val x3408 = OpDef(op=BitAnd, inputs=List(b1999, b1953)).name("x3408").ctrl(x3415) // And(b1999,b1953)
    val x3409 = OpDef(op=BitAnd, inputs=List(b1944, b1939)).name("x3409").ctrl(x3415) // And(b1944,b1939)
    val x3410 = OpDef(op=BitAnd, inputs=List(x3407, x3408)).name("x3410").ctrl(x3415) // And(x3407,x3408)
    val x3411 = OpDef(op=BitAnd, inputs=List(x3410, x3409)).name("x3411").ctrl(x3415) // And(x3410,x3409)
    val x3412_x3412 = ReadMem(x3384).name("x3412").ctrl(x3415) // ParStreamRead(x3384,List(x3411))
    val x3413_x3413 = x3412_x3412 // x3413 = VectorApply(x3412,0)
    val x3414 = StoreBanks(List(x3371_d0_b0), List(b2038), x3413_x3413).name("x3414").ctrl(x3415) // ParSRAMStore(x3371,List(List(b2038)),List(x3413),List(x3411))
    val x3417_d0_b0 = SRAM(size=32, banking=NoBanking()).name("x3417_d0_b0").ctrl(x3471) // x3417 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x3417_d0_b0) = false
    bufferDepthOf(x3417_d0_b0) = 2
    val x3417_d1_b0 = SRAM(size=32, banking=NoBanking()).name("x3417_d1_b0").ctrl(x3471) // x3417 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x3417_d1_b0) = true
    bufferDepthOf(x3417_d1_b0) = 1
    val x3418 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1).name("x3418").ctrl(x3471) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x3419 = CounterChain(List(x3418)).name("x3419").ctrl(x3471) // CounterChainNew(List(x3418))
    val x3460 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3419).name("x3460").ctrl(x3471) // UnrolledReduce(List(b1999, b1953, b1944, b1939),x3419,x3417,Block((x3417) => Const(())),List(List(b2055)),List(List(b2056)))
    val b2055 = CounterIter(x3418, Some(0)).ctrl(x3460).name("b2055")
    val b2056 = DummyOp().ctrl(x3460).name("b2056")
    val x3420_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x3420_d0_b0").ctrl(x3460) // x3420 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x3420_d0_b0) = false
    bufferDepthOf(x3420_d0_b0) = 2
    val x3421 = Reg(init=Some(0.0)).name("x3421").ctrl(x3460) // x3421 = RegNew(Const(0))
    isAccum(x3421) = false
    bufferDepthOf(x3421) = 2
    val x3428 = UnitController(style=SeqPipe, level=InnerControl).name("x3428").ctrl(x3460) // UnitPipe(List(b2056, b1999, b1953, b1944, b1939),Block(Const(())))
    val x3422 = OpDef(op=BitAnd, inputs=List(b2056, b1999)).name("x3422").ctrl(x3428) // And(b2056,b1999)
    val x3423 = OpDef(op=BitAnd, inputs=List(b1953, b1944)).name("x3423").ctrl(x3428) // And(b1953,b1944)
    val x3424 = OpDef(op=BitAnd, inputs=List(x3422, x3423)).name("x3424").ctrl(x3428) // And(x3422,x3423)
    val x3425 = OpDef(op=BitAnd, inputs=List(x3424, b1939)).name("x3425").ctrl(x3428) // And(x3424,b1939)
    val x3426 = LoadBanks(List(x3371_d0_b0), List(b2055)).name("x3426").ctrl(x3428) // SRAMLoad(x3371,ArrayBuffer(Const(32)),List(b2055),Const(0),x3425)
    val x3427_x3421 = WriteMem(x3421, x3426).name("x3427_x3421").ctrl(x3428) // RegWrite(x3421,x3426,x3425)
    val x3429 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x3429").ctrl(x3460) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x3430 = CounterChain(List(x3429)).name("x3430").ctrl(x3460) // CounterChainNew(List(x3429))
    val x3441 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3430).name("x3441").ctrl(x3460) // UnrolledForeach(List(b2056, b1999, b1953, b1944, b1939),x3430,Block(Const(())),List(List(b2068)),List(List(b2069)))
    val b2068 = CounterIter(x3429, None).ctrl(x3441).name("b2068")
    val b2069 = DummyOp().ctrl(x3441).name("b2069")
    val x3431 = OpDef(op=BitAnd, inputs=List(b2069, b2056)).name("x3431").ctrl(x3441) // And(b2069,b2056)
    val x3432 = OpDef(op=BitAnd, inputs=List(b1999, b1953)).name("x3432").ctrl(x3441) // And(b1999,b1953)
    val x3433 = OpDef(op=BitAnd, inputs=List(b1944, b1939)).name("x3433").ctrl(x3441) // And(b1944,b1939)
    val x3434 = OpDef(op=BitAnd, inputs=List(x3431, x3432)).name("x3434").ctrl(x3441) // And(x3431,x3432)
    val x3435 = OpDef(op=BitAnd, inputs=List(x3434, x3433)).name("x3435").ctrl(x3441) // And(x3434,x3433)
    val x3436 = LoadBanks(List(x3332_d0_b0), List(b2055, b2068)).name("x3436").ctrl(x3441) // ParSRAMLoad(x3332,List(List(b2055, b2068)),List(x3435))
    val x3437 = x3436 // x3437 = VectorApply(x3436,0)
    val x3438 = ReadMem(x3421).name("x3438").ctrl(x3441) // RegRead(x3421)
    val x3439 = OpDef(op=FixMul, inputs=List(x3437, x3438)).name("x3439").ctrl(x3441) // FixMul(x3437,x3438)
    val x3440 = StoreBanks(List(x3420_d0_b0), List(b2068), x3439).name("x3440").ctrl(x3441) // ParSRAMStore(x3420,List(List(b2068)),List(x3439),List(x3435))
    val x3442 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1).name("x3442").ctrl(x3460) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x3443 = CounterChain(List(x3442)).name("x3443").ctrl(x3460) // CounterChainNew(ArrayBuffer(x3442))
    val x3459 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3443).name("x3459").ctrl(x3460) // UnrolledForeach(List(),x3443,Block(Const(())),ArrayBuffer(List(b2081)),ArrayBuffer(List(b2082)))
    val b2081 = CounterIter(x3442, None).ctrl(x3459).name("b2081")
    val b2082 = DummyOp().ctrl(x3459).name("b2082")
    val x3444 = OpDef(op=BitAnd, inputs=List(b2082, b1999)).name("x3444").ctrl(x3459) // And(b2082,b1999)
    val x3445 = OpDef(op=BitAnd, inputs=List(b1953, b1944)).name("x3445").ctrl(x3459) // And(b1953,b1944)
    val x3446 = OpDef(op=BitAnd, inputs=List(x3444, x3445)).name("x3446").ctrl(x3459) // And(x3444,x3445)
    val x3447 = OpDef(op=BitAnd, inputs=List(x3446, b1939)).name("x3447").ctrl(x3459) // And(x3446,b1939)
    val x3448 = LoadBanks(List(x3420_d0_b0), List(b2081)).name("x3448").ctrl(x3459) // ParSRAMLoad(x3420,List(ArrayBuffer(b2081)),List(x3447))
    val x3449 = x3448 // x3449 = VectorApply(x3448,0)
    val x3450 = LoadBanks(List(x3417_d1_b0), List(b2081)).name("x3450").ctrl(x3459) // ParSRAMLoad(x3417,List(ArrayBuffer(b2081)),List(x3447))
    val x3451 = x3450 // x3451 = VectorApply(x3450,0)
    val x3452 = OpDef(op=BitAnd, inputs=List(b2056, b1999)).name("x3452").ctrl(x3459) // And(b2056,b1999)
    val x3453 = OpDef(op=BitAnd, inputs=List(x3452, x3445)).name("x3453").ctrl(x3459) // And(x3452,x3445)
    val x3454 = OpDef(op=BitAnd, inputs=List(x3453, b1939)).name("x3454").ctrl(x3459) // And(x3453,b1939)
    val x3455 = OpDef(op=BitAnd, inputs=List(x3454, x3447)).name("x3455").ctrl(x3459) // And(x3454,x3447)
    val x3456 = OpDef(op=FixEql, inputs=List(b2055, Const(0))).name("x3456").ctrl(x3459) // FixEql(b2055,Const(0))
    val x3457 = ReduceAccumOp(op=FixAdd, input=x3449, accum=x3451).name("x3457").ctrl(x3459) // FixAdd(x3449,x3451)
    val x3458 = StoreBanks(List(x3417_d0_b0, x3417_d1_b0), List(b2081), x3457).name("x3458").ctrl(x3459) // ParSRAMStore(x3417,List(ArrayBuffer(b2081)),List(x3457),List(x3447))
    val x3461 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1).name("x3461").ctrl(x3471) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x3462 = CounterChain(List(x3461)).name("x3462").ctrl(x3471) // CounterChainNew(List(x3461))
    val x3470 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3462).name("x3470").ctrl(x3471) // UnrolledForeach(List(b1999, b1953, b1944, b1939),x3462,Block(Const(())),List(List(b2102)),List(List(b2103)))
    val b2102 = CounterIter(x3461, None).ctrl(x3470).name("b2102")
    val b2103 = DummyOp().ctrl(x3470).name("b2103")
    val x3463 = OpDef(op=BitAnd, inputs=List(b2103, b1999)).name("x3463").ctrl(x3470) // And(b2103,b1999)
    val x3464 = OpDef(op=BitAnd, inputs=List(b1953, b1944)).name("x3464").ctrl(x3470) // And(b1953,b1944)
    val x3465 = OpDef(op=BitAnd, inputs=List(x3463, x3464)).name("x3465").ctrl(x3470) // And(x3463,x3464)
    val x3466 = OpDef(op=BitAnd, inputs=List(x3465, b1939)).name("x3466").ctrl(x3470) // And(x3465,b1939)
    val x3467 = LoadBanks(List(x3417_d0_b0), List(b2102)).name("x3467").ctrl(x3470) // ParSRAMLoad(x3417,List(List(b2102)),List(x3466))
    val x3468 = x3467 // x3468 = VectorApply(x3467,0)
    val x3469 = StoreBanks(List(x3331_d0_b0), List(b1998, b2102), x3468).name("x3469").ctrl(x3470) // ParSRAMStore(x3331,List(List(b1998, b2102)),List(x3468),List(x3466))
    val x3472 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1).name("x3472").ctrl(x3489) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x3473 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x3473").ctrl(x3489) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x3474 = CounterChain(List(x3473,x3472)).name("x3474").ctrl(x3489) // CounterChainNew(ArrayBuffer(x3473, x3472))
    val x3488 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3474).name("x3488").ctrl(x3489) // UnrolledForeach(List(),x3474,Block(Const(())),ArrayBuffer(List(b2113), List(b2114)),ArrayBuffer(List(b2115), List(b2116)))
    val b2113 = CounterIter(x3473, Some(0)).ctrl(x3488).name("b2113")
    val b2115 = DummyOp().ctrl(x3488).name("b2115")
    val b2114 = CounterIter(x3472, None).ctrl(x3488).name("b2114")
    val b2116 = DummyOp().ctrl(x3488).name("b2116")
    val x3475 = OpDef(op=BitAnd, inputs=List(b2115, b2116)).name("x3475").ctrl(x3488) // And(b2115,b2116)
    val x3476 = OpDef(op=BitAnd, inputs=List(b1944, b1939)).name("x3476").ctrl(x3488) // And(b1944,b1939)
    val x3477 = OpDef(op=BitAnd, inputs=List(x3475, x3476)).name("x3477").ctrl(x3488) // And(x3475,x3476)
    val x3478 = LoadBanks(List(x3331_d0_b0), List(b2113, b2114)).name("x3478").ctrl(x3488) // ParSRAMLoad(x3331,List(ArrayBuffer(b2113, b2114)),List(x3477))
    val x3479 = x3478 // x3479 = VectorApply(x3478,0)
    val x3480 = LoadBanks(List(x3327_d1_b0), List(b2113, b2114)).name("x3480").ctrl(x3488) // ParSRAMLoad(x3327,List(ArrayBuffer(b2113, b2114)),List(x3477))
    val x3481 = x3480 // x3481 = VectorApply(x3480,0)
    val x3482 = OpDef(op=BitAnd, inputs=List(b1953, b1944)).name("x3482").ctrl(x3488) // And(b1953,b1944)
    val x3483 = OpDef(op=BitAnd, inputs=List(x3482, b1939)).name("x3483").ctrl(x3488) // And(x3482,b1939)
    val x3484 = OpDef(op=BitAnd, inputs=List(x3483, x3477)).name("x3484").ctrl(x3488) // And(x3483,x3477)
    val x3485 = OpDef(op=FixEql, inputs=List(b1952, Const(0))).name("x3485").ctrl(x3488) // FixEql(b1952,Const(0))
    val x3486 = ReduceAccumOp(op=FixAdd, input=x3479, accum=x3481).name("x3486").ctrl(x3488) // FixAdd(x3479,x3481)
    val x3487 = StoreBanks(List(x3327_d0_b0, x3327_d1_b0), List(b2113, b2114), x3486).name("x3487").ctrl(x3488) // ParSRAMStore(x3327,List(ArrayBuffer(b2113, b2114)),List(x3486),List(x3477))
    val x3492 = UnitController(style=SeqPipe, level=InnerControl).name("x3492").ctrl(x3530) // UnitPipe(List(b1944, b1939),Block(Const(())))
    val x3490 = OpDef(op=FixAdd, inputs=List(b1938, Const(64))).name("x3490").ctrl(x3492) // FixAdd(b1938,Const(64))
    val x3491 = OpDef(op=FixAdd, inputs=List(b1943, Const(32))).name("x3491").ctrl(x3492) // FixAdd(b1943,Const(32))
    val x3493 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x3493").ctrl(x3530) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x3494 = CounterChain(List(x3493)).name("x3494").ctrl(x3530) // CounterChainNew(List(x3493))
    val x3529 = LoopController(style=StreamPipe, level=OuterControl, cchain=x3494).name("x3529").ctrl(x3530) // UnrolledForeach(List(b1944, b1939),x3494,Block(Const(())),List(List(b2137)),List(List(b2138)))
    val b2137 = CounterIter(x3493, Some(0)).ctrl(x3529).name("b2137")
    val b2138 = DummyOp().ctrl(x3529).name("b2138")
    val b3581 = StreamOut(field="offset").name("b3581").ctrl(x3529) // x3495 = StreamOutNew(BurstCmdBus)
    val b3582 = StreamOut(field="size").name("b3582").ctrl(x3529) // x3495 = StreamOutNew(BurstCmdBus)
    val x3496 = StreamOut(field="data").name("x3496").ctrl(x3529) // x3496 = StreamOutNew(BurstFullDataBus())
    val x3497 = StreamIn(field="ack").name("x3497").ctrl(x3529) // x3497 = StreamInNew(BurstAckBus)
    val x3513 = UnitController(style=SeqPipe, level=InnerControl).name("x3513").ctrl(x3529) // UnitPipe(List(b2138, b1944, b1939),Block(x3512))
    val x3498 = OpDef(op=FixAdd, inputs=List(b1938, b2137)).name("x3498").ctrl(x3513) // FixAdd(b1938,b2137)
    val x3499 = x3498 // FixConvert(x3498,TRUE,_32,_0)
    val x3500 = ReadMem(x3307_d0).name("x3500").ctrl(x3513) // RegRead(x3307)
    val x3501 = OpDef(op=FixMul, inputs=List(x3499, x3500)).name("x3501").ctrl(x3513) // FixMul(x3499,x3500)
    val x3502 = b1943 // FixConvert(b1943,TRUE,_32,_0)
    val x3503 = OpDef(op=FixAdd, inputs=List(x3501, x3502)).name("x3503").ctrl(x3513) // FixAdd(x3501,x3502)
    val x3504 = OpDef(op=FixSla, inputs=List(x3503, Const(2))).name("x3504").ctrl(x3513) // FixLsh(x3503,Const(2))
    val x3505 = x3504 // FixConvert(x3504,TRUE,_64,_0)
    val x3506 = DramAddress(x3317).name("x3506").ctrl(x3513) // GetDRAMAddress(x3317)
    val x3507 = OpDef(op=FixAdd, inputs=List(x3505, x3506)).name("x3507").ctrl(x3513) // FixAdd(x3505,x3506)
    val x3509_x3508 = x3507 // FixConvert(x3507,TRUE,_64,_0)
    // x3509 = SimpleStruct(ArrayBuffer((offset,x3508), (size,Const(128)), (isLoad,Const(false))))
    val x3510 = OpDef(op=BitAnd, inputs=List(b2138, b1944)).name("x3510").ctrl(x3513) // And(b2138,b1944)
    val x3511 = OpDef(op=BitAnd, inputs=List(x3510, b1939)).name("x3511").ctrl(x3513) // And(x3510,b1939)
    val b3583_b3581 = WriteMem(b3581, x3509_x3508).name("b3583_b3581").ctrl(x3513) // StreamWrite(x3495,x3509,x3511)
    val b3584_b3582 = WriteMem(b3582, Const(128)).name("b3584_b3582").ctrl(x3513) // StreamWrite(x3495,x3509,x3511)
    val x3514 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x3514").ctrl(x3529) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x3515 = CounterChain(List(x3514)).name("x3515").ctrl(x3529) // CounterChainNew(List(x3514))
    val x3523 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3515).name("x3523").ctrl(x3529) // UnrolledForeach(List(b2138, b1944, b1939),x3515,Block(Const(())),List(List(b2160)),List(List(b2161)))
    val b2160 = CounterIter(x3514, None).ctrl(x3523).name("b2160")
    val b2161 = DummyOp().ctrl(x3523).name("b2161")
    val x3516 = OpDef(op=BitAnd, inputs=List(b2161, b2138)).name("x3516").ctrl(x3523) // And(b2161,b2138)
    val x3517 = OpDef(op=BitAnd, inputs=List(b1944, b1939)).name("x3517").ctrl(x3523) // And(b1944,b1939)
    val x3518 = OpDef(op=BitAnd, inputs=List(x3516, x3517)).name("x3518").ctrl(x3523) // And(x3516,x3517)
    val x3519 = LoadBanks(List(x3327_d0_b0), List(b2137, b2160)).name("x3519").ctrl(x3523) // ParSRAMLoad(x3327,List(List(b2137, b2160)),List(x3518))
    val x3521_x3520 = x3519 // x3520 = VectorApply(x3519,0)
    // x3521 = SimpleStruct(ArrayBuffer((_1,x3520), (_2,Const(true))))
    val x3522_x3496 = WriteMem(x3496, x3521_x3520).name("x3522_x3496").ctrl(x3523) // ParStreamWrite(x3496,List(x3521),List(x3518))
    val x3524 = FringeDenseStore(dram=List(x3317), cmdStream=List(b3581, b3582), dataStream=List(x3496), ackStream=List(x3497)).name("x3524").ctrl(x3529) // FringeDenseStore(x3317,x3495,x3496,x3497)
    val x3528 = UnitController(style=SeqPipe, level=InnerControl).name("x3528").ctrl(x3529) // UnitPipe(List(b2138, b1944, b1939),Block(Const(())))
    val x3525 = OpDef(op=BitAnd, inputs=List(b2138, b1944)).name("x3525").ctrl(x3528) // And(b2138,b1944)
    val x3526 = OpDef(op=BitAnd, inputs=List(x3525, b1939)).name("x3526").ctrl(x3528) // And(x3525,b1939)
    val x3527_x3527 = ReadMem(x3497).name("x3527").ctrl(x3528) // StreamRead(x3497,x3526)
    
  }
}
