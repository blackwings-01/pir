import pir._
import pir.node._
import arch._
import pirc.enums._

object GDA extends PIRApp {
  def main(top:Top) = {
      import top.metadata._
    val x4038_d0 = top.argFringe.argIn(init=0).name("x4038_d0").ctrl(top) // ArgInNew(Const(0))
    val x4040 = ReadMem(x4038_d0).name("x4040").ctrl(top) // RegRead(x4038)
    val x4041 = DRAM().name("x4041").ctrl(top) // x4041 = DRAMNew(ArrayBuffer(x4040, Const(96)),Const(0))
    val x4042 = ReadMem(x4038_d0).name("x4042").ctrl(top) // RegRead(x4038)
    val x4043 = DRAM().name("x4043").ctrl(top) // x4043 = DRAMNew(ArrayBuffer(x4042),Const(0))
    val x4044 = DRAM().name("x4044").ctrl(top) // x4044 = DRAMNew(ArrayBuffer(Const(96)),Const(0))
    val x4045 = DRAM().name("x4045").ctrl(top) // x4045 = DRAMNew(ArrayBuffer(Const(96)),Const(0))
    val x4046 = DRAM().name("x4046").ctrl(top) // x4046 = DRAMNew(ArrayBuffer(Const(96), Const(96)),Const(0))
    val x4360 = UnitController(style=SeqPipe, level=OuterControl).name("x4360").ctrl(top) // Hwblock(Block(Const(())),false)
    val x4051_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4051_d0_b0").ctrl(x4360) // x4051 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4051_d0_b0) = false
    val x4051_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4051_d1_b0").ctrl(x4360) // x4051 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4051_d1_b0) = false
    val x4052_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4052_d0_b0").ctrl(x4360) // x4052 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4052_d0_b0) = false
    val x4052_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4052_d1_b0").ctrl(x4360) // x4052 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4052_d1_b0) = false
    val x4071 = UnitController(style=StreamPipe, level=OuterControl).name("x4071").ctrl(x4360) // UnitPipe(List(Const(true)),Block(Const(())))
    val b4412 = StreamOut(field="offset").name("b4412").ctrl(x4071) // x4053 = StreamOutNew(BurstCmdBus)
    val b4413 = StreamOut(field="size").name("b4413").ctrl(x4071) // x4053 = StreamOutNew(BurstCmdBus)
    val x4054 = StreamIn(field="data").name("x4054").ctrl(x4071) // x4054 = StreamInNew(BurstDataBus())
    val x4063 = UnitController(style=SeqPipe, level=InnerControl).name("x4063").ctrl(x4071) // UnitPipe(List(Const(true)),Block(x4062))
    val x4055 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4056 = OpDef(op=FixSla, inputs=List(x4055, Const(2))).name("x4056").ctrl(x4063) // FixLsh(x4055,Const(2))
    val x4057 = x4056 // FixConvert(x4056,TRUE,_64,_0)
    val x4058 = top.argFringe.dramAddress(x4044).name("x4058").ctrl(x4063) // GetDRAMAddress(x4044)
    val x4059 = OpDef(op=FixAdd, inputs=List(x4057, x4058)).name("x4059").ctrl(x4063) // FixAdd(x4057,x4058)
    val x4060 = x4059 // FixConvert(x4059,TRUE,_64,_0)
    // x4061 = SimpleStruct(ArrayBuffer((offset,x4060), (size,Const(384)), (isLoad,Const(true))))
    val b4414_b4412 = WriteMem(b4412, x4060).name("b4414_b4412").ctrl(x4063) // StreamWrite(x4053,x4061,Const(true))
    val b4415_b4413 = WriteMem(b4413, Const(384)).name("b4415_b4413").ctrl(x4063) // StreamWrite(x4053,x4061,Const(true))
    val x4064 = FringeContainer(x4044,b4412,b4413,x4054).name("x4064").ctrl(x4071) // FringeDenseLoad(x4044,x4053,x4054)
    val x4065 = Counter(min=Const(0).ctrl(x4071), max=Const(96).ctrl(x4071), step=Const(1).ctrl(x4071), par=16).name("x4065").ctrl(x4071) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4066 = CounterChain(List(x4065)).name("x4066").ctrl(x4071) // CounterChainNew(List(x4065))
    val x4070 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4066).name("x4070").ctrl(x4071) // UnrolledForeach(List(Const(true)),x4066,Block(Const(())),List(List(b2102)),List(List(b2103)))
    val b2102 = CounterIter(x4065, None).ctrl(x4070).name("b2102")
    val b2103 = DummyOp().ctrl(x4070).name("b2103")
    val x4067 = ReadMem(x4054).name("x4067").ctrl(x4070) // ParStreamRead(x4054,List(b2103))
    val x4068 = x4067 // x4068 = VectorApply(x4067,0)
    val x4069 = StoreBanks(List(x4051_d0_b0, x4051_d1_b0), List(b2102), x4068).name("x4069").ctrl(x4070) // ParSRAMStore(x4051,List(List(b2102)),List(x4068),List(b2103))
    val x4090 = UnitController(style=StreamPipe, level=OuterControl).name("x4090").ctrl(x4360) // UnitPipe(List(Const(true)),Block(Const(())))
    val b4416 = StreamOut(field="offset").name("b4416").ctrl(x4090) // x4072 = StreamOutNew(BurstCmdBus)
    val b4417 = StreamOut(field="size").name("b4417").ctrl(x4090) // x4072 = StreamOutNew(BurstCmdBus)
    val x4073 = StreamIn(field="data").name("x4073").ctrl(x4090) // x4073 = StreamInNew(BurstDataBus())
    val x4082 = UnitController(style=SeqPipe, level=InnerControl).name("x4082").ctrl(x4090) // UnitPipe(List(Const(true)),Block(x4081))
    val x4074 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4075 = OpDef(op=FixSla, inputs=List(x4074, Const(2))).name("x4075").ctrl(x4082) // FixLsh(x4074,Const(2))
    val x4076 = x4075 // FixConvert(x4075,TRUE,_64,_0)
    val x4077 = top.argFringe.dramAddress(x4045).name("x4077").ctrl(x4082) // GetDRAMAddress(x4045)
    val x4078 = OpDef(op=FixAdd, inputs=List(x4076, x4077)).name("x4078").ctrl(x4082) // FixAdd(x4076,x4077)
    val x4079 = x4078 // FixConvert(x4078,TRUE,_64,_0)
    // x4080 = SimpleStruct(ArrayBuffer((offset,x4079), (size,Const(384)), (isLoad,Const(true))))
    val b4418_b4416 = WriteMem(b4416, x4079).name("b4418_b4416").ctrl(x4082) // StreamWrite(x4072,x4080,Const(true))
    val b4419_b4417 = WriteMem(b4417, Const(384)).name("b4419_b4417").ctrl(x4082) // StreamWrite(x4072,x4080,Const(true))
    val x4083 = FringeContainer(x4045,b4416,b4417,x4073).name("x4083").ctrl(x4090) // FringeDenseLoad(x4045,x4072,x4073)
    val x4084 = Counter(min=Const(0).ctrl(x4090), max=Const(96).ctrl(x4090), step=Const(1).ctrl(x4090), par=16).name("x4084").ctrl(x4090) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4085 = CounterChain(List(x4084)).name("x4085").ctrl(x4090) // CounterChainNew(List(x4084))
    val x4089 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4085).name("x4089").ctrl(x4090) // UnrolledForeach(List(Const(true)),x4085,Block(Const(())),List(List(b2123)),List(List(b2124)))
    val b2123 = CounterIter(x4084, None).ctrl(x4089).name("b2123")
    val b2124 = DummyOp().ctrl(x4089).name("b2124")
    val x4086 = ReadMem(x4073).name("x4086").ctrl(x4089) // ParStreamRead(x4073,List(b2124))
    val x4087 = x4086 // x4087 = VectorApply(x4086,0)
    val x4088 = StoreBanks(List(x4052_d0_b0, x4052_d1_b0), List(b2123), x4087).name("x4088").ctrl(x4089) // ParSRAMStore(x4052,List(List(b2123)),List(x4087),List(b2124))
    val x4091_d0_b0 = SRAM(size=576, banking=Strided(banks=16, stride=1)).name("x4091_d0_b0").ctrl(x4360) // x4091 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4091_d0_b0) = false
    val x4091_d1_b0 = SRAM(size=9216, banking=NoBanking()).name("x4091_d1_b0").ctrl(x4360) // x4091 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4091_d1_b0) = true
    val x4092 = ReadMem(x4038_d0).name("x4092").ctrl(x4360) // RegRead(x4038)
    val x4093 = Counter(min=Const(0).ctrl(x4360), max=x4092, step=Const(20).ctrl(x4360), par=2).name("x4093").ctrl(x4360) // CounterNew(Const(0),x4092,Const(20),Const(2))
    val x4094 = CounterChain(List(x4093)).name("x4094").ctrl(x4360) // CounterChainNew(List(x4093))
    val x4330 = LoopController(style=MetaPipe, level=OuterControl, cchain=x4094).name("x4330").ctrl(x4360) // UnrolledReduce(List(Const(true)),x4094,x4091,Block((x4091) => Const(())),List(List(b2138, b2139)),List(List(b2140, b2141)))
    val b2138 = CounterIter(x4093, Some(0)).ctrl(x4330).name("b2138")
    val b2140 = DummyOp().ctrl(x4330).name("b2140")
    val b2139 = CounterIter(x4093, Some(1)).ctrl(x4330).name("b2139")
    val b2141 = DummyOp().ctrl(x4330).name("b2141")
    val x4095_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x4095_d0_b0").ctrl(x4330) // x4095 = SRAMNew(ArrayBuffer(Const(20)))
    isAccum(x4095_d0_b0) = false
    val x4096_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x4096_d0_b0").ctrl(x4330) // x4096 = SRAMNew(ArrayBuffer(Const(20)))
    isAccum(x4096_d0_b0) = false
    val x4097_d0_b0 = SRAM(size=120, banking=Strided(banks=16, stride=1)).name("x4097_d0_b0").ctrl(x4330) // x4097 = SRAMNew(ArrayBuffer(Const(20), Const(96)))
    isAccum(x4097_d0_b0) = false
    val x4098_d0_b0 = SRAM(size=120, banking=Strided(banks=16, stride=1)).name("x4098_d0_b0").ctrl(x4330) // x4098 = SRAMNew(ArrayBuffer(Const(20), Const(96)))
    isAccum(x4098_d0_b0) = false
    val x4099 = Reg(init=0).name("x4099").ctrl(x4330) // x4099 = RegNew(Const(0))
    isAccum(x4099) = false
    val x4100 = Reg(init=0).name("x4100").ctrl(x4330) // x4100 = RegNew(Const(0))
    isAccum(x4100) = false
    val x4102 = UnitController(style=SeqPipe, level=InnerControl).name("x4102").ctrl(x4330) // UnitPipe(List(b2140),Block(Const(())))
    val x4101 = OpDef(op=FixAdd, inputs=List(b2138, Const(20))).name("x4101").ctrl(x4102) // FixAdd(b2138,Const(20))
    val x4122 = UnitController(style=StreamPipe, level=OuterControl).name("x4122").ctrl(x4330) // UnitPipe(List(b2140),Block(Const(())))
    val b4420 = StreamOut(field="offset").name("b4420").ctrl(x4122) // x4103 = StreamOutNew(BurstCmdBus)
    val b4421 = StreamOut(field="size").name("b4421").ctrl(x4122) // x4103 = StreamOutNew(BurstCmdBus)
    val x4104 = StreamIn(field="data").name("x4104").ctrl(x4122) // x4104 = StreamInNew(BurstDataBus())
    val x4113 = UnitController(style=SeqPipe, level=InnerControl).name("x4113").ctrl(x4122) // UnitPipe(List(b2140),Block(x4112))
    val x4105 = b2138 // FixConvert(b2138,TRUE,_32,_0)
    val x4106 = OpDef(op=FixSla, inputs=List(x4105, Const(2))).name("x4106").ctrl(x4113) // FixLsh(x4105,Const(2))
    val x4107 = x4106 // FixConvert(x4106,TRUE,_64,_0)
    val x4108 = top.argFringe.dramAddress(x4043).name("x4108").ctrl(x4113) // GetDRAMAddress(x4043)
    val x4109 = OpDef(op=FixAdd, inputs=List(x4107, x4108)).name("x4109").ctrl(x4113) // FixAdd(x4107,x4108)
    val x4110 = x4109 // FixConvert(x4109,TRUE,_64,_0)
    // x4111 = SimpleStruct(ArrayBuffer((offset,x4110), (size,Const(80)), (isLoad,Const(true))))
    val b4422_b4420 = WriteMem(b4420, x4110).name("b4422_b4420").ctrl(x4113) // StreamWrite(x4103,x4111,b2140)
    val b4423_b4421 = WriteMem(b4421, Const(80)).name("b4423_b4421").ctrl(x4113) // StreamWrite(x4103,x4111,b2140)
    val x4114 = FringeContainer(x4043,b4420,b4421,x4104).name("x4114").ctrl(x4122) // FringeDenseLoad(x4043,x4103,x4104)
    val x4115 = Counter(min=Const(0).ctrl(x4122), max=Const(20).ctrl(x4122), step=Const(1).ctrl(x4122), par=16).name("x4115").ctrl(x4122) // CounterNew(Const(0),Const(20),Const(1),Const(16))
    val x4116 = CounterChain(List(x4115)).name("x4116").ctrl(x4122) // CounterChainNew(List(x4115))
    val x4121 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4116).name("x4121").ctrl(x4122) // UnrolledForeach(List(b2140),x4116,Block(Const(())),List(List(b2164)),List(List(b2165)))
    val b2164 = CounterIter(x4115, None).ctrl(x4121).name("b2164")
    val b2165 = DummyOp().ctrl(x4121).name("b2165")
    val x4117 = OpDef(op=BitAnd, inputs=List(b2165, b2140)).name("x4117").ctrl(x4121) // And(b2165,b2140)
    val x4118 = ReadMem(x4104).name("x4118").ctrl(x4121) // ParStreamRead(x4104,List(x4117))
    val x4119 = x4118 // x4119 = VectorApply(x4118,0)
    val x4120 = StoreBanks(List(x4095_d0_b0), List(b2164), x4119).name("x4120").ctrl(x4121) // ParSRAMStore(x4095,List(List(b2164)),List(x4119),List(x4117))
    val x4123 = Counter(min=Const(0).ctrl(x4330), max=Const(20).ctrl(x4330), step=Const(1).ctrl(x4330), par=1).name("x4123").ctrl(x4330) // CounterNew(Const(0),Const(20),Const(1),Const(1))
    val x4124 = CounterChain(List(x4123)).name("x4124").ctrl(x4330) // CounterChainNew(List(x4123))
    val x4150 = LoopController(style=StreamPipe, level=OuterControl, cchain=x4124).name("x4150").ctrl(x4330) // UnrolledForeach(List(b2140),x4124,Block(Const(())),List(List(b2174)),List(List(b2175)))
    val b2174 = CounterIter(x4123, Some(0)).ctrl(x4150).name("b2174")
    val b2175 = DummyOp().ctrl(x4150).name("b2175")
    val b4424 = StreamOut(field="offset").name("b4424").ctrl(x4150) // x4125 = StreamOutNew(BurstCmdBus)
    val b4425 = StreamOut(field="size").name("b4425").ctrl(x4150) // x4125 = StreamOutNew(BurstCmdBus)
    val x4126 = StreamIn(field="data").name("x4126").ctrl(x4150) // x4126 = StreamInNew(BurstDataBus())
    val x4140 = UnitController(style=SeqPipe, level=InnerControl).name("x4140").ctrl(x4150) // UnitPipe(List(b2175, b2140),Block(x4139))
    val x4127 = OpDef(op=FixAdd, inputs=List(b2138, b2174)).name("x4127").ctrl(x4140) // FixAdd(b2138,b2174)
    val x4128 = x4127 // FixConvert(x4127,TRUE,_32,_0)
    val x4129 = OpDef(op=FixMul, inputs=List(x4128, Const(96))).name("x4129").ctrl(x4140) // FixMul(x4128,Const(96))
    val x4130 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4131 = OpDef(op=FixAdd, inputs=List(x4129, x4130)).name("x4131").ctrl(x4140) // FixAdd(x4129,x4130)
    val x4132 = OpDef(op=FixSla, inputs=List(x4131, Const(2))).name("x4132").ctrl(x4140) // FixLsh(x4131,Const(2))
    val x4133 = x4132 // FixConvert(x4132,TRUE,_64,_0)
    val x4134 = top.argFringe.dramAddress(x4041).name("x4134").ctrl(x4140) // GetDRAMAddress(x4041)
    val x4135 = OpDef(op=FixAdd, inputs=List(x4133, x4134)).name("x4135").ctrl(x4140) // FixAdd(x4133,x4134)
    val x4136 = x4135 // FixConvert(x4135,TRUE,_64,_0)
    // x4137 = SimpleStruct(ArrayBuffer((offset,x4136), (size,Const(384)), (isLoad,Const(true))))
    val x4138 = OpDef(op=BitAnd, inputs=List(b2175, b2140)).name("x4138").ctrl(x4140) // And(b2175,b2140)
    val b4426_b4424 = WriteMem(b4424, x4136).name("b4426_b4424").ctrl(x4140) // StreamWrite(x4125,x4137,x4138)
    val b4427_b4425 = WriteMem(b4425, Const(384)).name("b4427_b4425").ctrl(x4140) // StreamWrite(x4125,x4137,x4138)
    val x4141 = FringeContainer(x4041,b4424,b4425,x4126).name("x4141").ctrl(x4150) // FringeDenseLoad(x4041,x4125,x4126)
    val x4142 = Counter(min=Const(0).ctrl(x4150), max=Const(96).ctrl(x4150), step=Const(1).ctrl(x4150), par=16).name("x4142").ctrl(x4150) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4143 = CounterChain(List(x4142)).name("x4143").ctrl(x4150) // CounterChainNew(List(x4142))
    val x4149 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4143).name("x4149").ctrl(x4150) // UnrolledForeach(List(b2175, b2140),x4143,Block(Const(())),List(List(b2195)),List(List(b2196)))
    val b2195 = CounterIter(x4142, None).ctrl(x4149).name("b2195")
    val b2196 = DummyOp().ctrl(x4149).name("b2196")
    val x4144 = OpDef(op=BitAnd, inputs=List(b2196, b2175)).name("x4144").ctrl(x4149) // And(b2196,b2175)
    val x4145 = OpDef(op=BitAnd, inputs=List(x4144, b2140)).name("x4145").ctrl(x4149) // And(x4144,b2140)
    val x4146 = ReadMem(x4126).name("x4146").ctrl(x4149) // ParStreamRead(x4126,List(x4145))
    val x4147 = x4146 // x4147 = VectorApply(x4146,0)
    val x4148 = StoreBanks(List(x4097_d0_b0), List(b2174, b2195), x4147).name("x4148").ctrl(x4149) // ParSRAMStore(x4097,List(List(b2174, b2195)),List(x4147),List(x4145))
    val x4155 = UnitController(style=SeqPipe, level=InnerControl).name("x4155").ctrl(x4330) // UnitPipe(List(b2140),Block(x4154))
    val x4151 = ReadMem(x4038_d0).name("x4151").ctrl(x4155) // RegRead(x4038)
    val x4152 = OpDef(op=FixSub, inputs=List(x4151, b2138)).name("x4152").ctrl(x4155) // FixSub(x4151,b2138)
    val x4153 = OpDef(op=FixMin, inputs=List(x4152, Const(20))).name("x4153").ctrl(x4155) // Min(x4152,Const(20))
    val x4154_x4099 = WriteMem(x4099, x4153).name("x4154_x4099").ctrl(x4155) // RegWrite(x4099,x4153,b2140)
    val x4157 = UnitController(style=SeqPipe, level=InnerControl).name("x4157").ctrl(x4330) // UnitPipe(List(b2141),Block(Const(())))
    val x4156 = OpDef(op=FixAdd, inputs=List(b2139, Const(20))).name("x4156").ctrl(x4157) // FixAdd(b2139,Const(20))
    val x4177 = UnitController(style=StreamPipe, level=OuterControl).name("x4177").ctrl(x4330) // UnitPipe(List(b2141),Block(Const(())))
    val b4428 = StreamOut(field="offset").name("b4428").ctrl(x4177) // x4158 = StreamOutNew(BurstCmdBus)
    val b4429 = StreamOut(field="size").name("b4429").ctrl(x4177) // x4158 = StreamOutNew(BurstCmdBus)
    val x4159 = StreamIn(field="data").name("x4159").ctrl(x4177) // x4159 = StreamInNew(BurstDataBus())
    val x4168 = UnitController(style=SeqPipe, level=InnerControl).name("x4168").ctrl(x4177) // UnitPipe(List(b2141),Block(x4167))
    val x4160 = b2139 // FixConvert(b2139,TRUE,_32,_0)
    val x4161 = OpDef(op=FixSla, inputs=List(x4160, Const(2))).name("x4161").ctrl(x4168) // FixLsh(x4160,Const(2))
    val x4162 = x4161 // FixConvert(x4161,TRUE,_64,_0)
    val x4163 = top.argFringe.dramAddress(x4043).name("x4163").ctrl(x4168) // GetDRAMAddress(x4043)
    val x4164 = OpDef(op=FixAdd, inputs=List(x4162, x4163)).name("x4164").ctrl(x4168) // FixAdd(x4162,x4163)
    val x4165 = x4164 // FixConvert(x4164,TRUE,_64,_0)
    // x4166 = SimpleStruct(ArrayBuffer((offset,x4165), (size,Const(80)), (isLoad,Const(true))))
    val b4430_b4428 = WriteMem(b4428, x4165).name("b4430_b4428").ctrl(x4168) // StreamWrite(x4158,x4166,b2141)
    val b4431_b4429 = WriteMem(b4429, Const(80)).name("b4431_b4429").ctrl(x4168) // StreamWrite(x4158,x4166,b2141)
    val x4169 = FringeContainer(x4043,b4428,b4429,x4159).name("x4169").ctrl(x4177) // FringeDenseLoad(x4043,x4158,x4159)
    val x4170 = Counter(min=Const(0).ctrl(x4177), max=Const(20).ctrl(x4177), step=Const(1).ctrl(x4177), par=16).name("x4170").ctrl(x4177) // CounterNew(Const(0),Const(20),Const(1),Const(16))
    val x4171 = CounterChain(List(x4170)).name("x4171").ctrl(x4177) // CounterChainNew(List(x4170))
    val x4176 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4171).name("x4176").ctrl(x4177) // UnrolledForeach(List(b2141),x4171,Block(Const(())),List(List(b2226)),List(List(b2227)))
    val b2226 = CounterIter(x4170, None).ctrl(x4176).name("b2226")
    val b2227 = DummyOp().ctrl(x4176).name("b2227")
    val x4172 = OpDef(op=BitAnd, inputs=List(b2227, b2141)).name("x4172").ctrl(x4176) // And(b2227,b2141)
    val x4173 = ReadMem(x4159).name("x4173").ctrl(x4176) // ParStreamRead(x4159,List(x4172))
    val x4174 = x4173 // x4174 = VectorApply(x4173,0)
    val x4175 = StoreBanks(List(x4096_d0_b0), List(b2226), x4174).name("x4175").ctrl(x4176) // ParSRAMStore(x4096,List(List(b2226)),List(x4174),List(x4172))
    val x4178 = Counter(min=Const(0).ctrl(x4330), max=Const(20).ctrl(x4330), step=Const(1).ctrl(x4330), par=1).name("x4178").ctrl(x4330) // CounterNew(Const(0),Const(20),Const(1),Const(1))
    val x4179 = CounterChain(List(x4178)).name("x4179").ctrl(x4330) // CounterChainNew(List(x4178))
    val x4205 = LoopController(style=StreamPipe, level=OuterControl, cchain=x4179).name("x4205").ctrl(x4330) // UnrolledForeach(List(b2141),x4179,Block(Const(())),List(List(b2236)),List(List(b2237)))
    val b2236 = CounterIter(x4178, Some(0)).ctrl(x4205).name("b2236")
    val b2237 = DummyOp().ctrl(x4205).name("b2237")
    val b4432 = StreamOut(field="offset").name("b4432").ctrl(x4205) // x4180 = StreamOutNew(BurstCmdBus)
    val b4433 = StreamOut(field="size").name("b4433").ctrl(x4205) // x4180 = StreamOutNew(BurstCmdBus)
    val x4181 = StreamIn(field="data").name("x4181").ctrl(x4205) // x4181 = StreamInNew(BurstDataBus())
    val x4195 = UnitController(style=SeqPipe, level=InnerControl).name("x4195").ctrl(x4205) // UnitPipe(List(b2237, b2141),Block(x4194))
    val x4182 = OpDef(op=FixAdd, inputs=List(b2139, b2236)).name("x4182").ctrl(x4195) // FixAdd(b2139,b2236)
    val x4183 = x4182 // FixConvert(x4182,TRUE,_32,_0)
    val x4184 = OpDef(op=FixMul, inputs=List(x4183, Const(96))).name("x4184").ctrl(x4195) // FixMul(x4183,Const(96))
    val x4185 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4186 = OpDef(op=FixAdd, inputs=List(x4184, x4185)).name("x4186").ctrl(x4195) // FixAdd(x4184,x4185)
    val x4187 = OpDef(op=FixSla, inputs=List(x4186, Const(2))).name("x4187").ctrl(x4195) // FixLsh(x4186,Const(2))
    val x4188 = x4187 // FixConvert(x4187,TRUE,_64,_0)
    val x4189 = top.argFringe.dramAddress(x4041).name("x4189").ctrl(x4195) // GetDRAMAddress(x4041)
    val x4190 = OpDef(op=FixAdd, inputs=List(x4188, x4189)).name("x4190").ctrl(x4195) // FixAdd(x4188,x4189)
    val x4191 = x4190 // FixConvert(x4190,TRUE,_64,_0)
    // x4192 = SimpleStruct(ArrayBuffer((offset,x4191), (size,Const(384)), (isLoad,Const(true))))
    val x4193 = OpDef(op=BitAnd, inputs=List(b2237, b2141)).name("x4193").ctrl(x4195) // And(b2237,b2141)
    val b4434_b4432 = WriteMem(b4432, x4191).name("b4434_b4432").ctrl(x4195) // StreamWrite(x4180,x4192,x4193)
    val b4435_b4433 = WriteMem(b4433, Const(384)).name("b4435_b4433").ctrl(x4195) // StreamWrite(x4180,x4192,x4193)
    val x4196 = FringeContainer(x4041,b4432,b4433,x4181).name("x4196").ctrl(x4205) // FringeDenseLoad(x4041,x4180,x4181)
    val x4197 = Counter(min=Const(0).ctrl(x4205), max=Const(96).ctrl(x4205), step=Const(1).ctrl(x4205), par=16).name("x4197").ctrl(x4205) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4198 = CounterChain(List(x4197)).name("x4198").ctrl(x4205) // CounterChainNew(List(x4197))
    val x4204 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4198).name("x4204").ctrl(x4205) // UnrolledForeach(List(b2237, b2141),x4198,Block(Const(())),List(List(b2257)),List(List(b2258)))
    val b2257 = CounterIter(x4197, None).ctrl(x4204).name("b2257")
    val b2258 = DummyOp().ctrl(x4204).name("b2258")
    val x4199 = OpDef(op=BitAnd, inputs=List(b2258, b2237)).name("x4199").ctrl(x4204) // And(b2258,b2237)
    val x4200 = OpDef(op=BitAnd, inputs=List(x4199, b2141)).name("x4200").ctrl(x4204) // And(x4199,b2141)
    val x4201 = ReadMem(x4181).name("x4201").ctrl(x4204) // ParStreamRead(x4181,List(x4200))
    val x4202 = x4201 // x4202 = VectorApply(x4201,0)
    val x4203 = StoreBanks(List(x4098_d0_b0), List(b2236, b2257), x4202).name("x4203").ctrl(x4204) // ParSRAMStore(x4098,List(List(b2236, b2257)),List(x4202),List(x4200))
    val x4210 = UnitController(style=SeqPipe, level=InnerControl).name("x4210").ctrl(x4330) // UnitPipe(List(b2141),Block(x4209))
    val x4206 = ReadMem(x4038_d0).name("x4206").ctrl(x4210) // RegRead(x4038)
    val x4207 = OpDef(op=FixSub, inputs=List(x4206, b2139)).name("x4207").ctrl(x4210) // FixSub(x4206,b2139)
    val x4208 = OpDef(op=FixMin, inputs=List(x4207, Const(20))).name("x4208").ctrl(x4210) // Min(x4207,Const(20))
    val x4209_x4100 = WriteMem(x4100, x4208).name("x4209_x4100").ctrl(x4210) // RegWrite(x4100,x4208,b2141)
    val x4211_d0_b0 = SRAM(size=9216, banking=NoBanking()).name("x4211_d0_b0").ctrl(x4330) // x4211 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4211_d0_b0) = false
    val x4211_d1_b0 = SRAM(size=9216, banking=NoBanking()).name("x4211_d1_b0").ctrl(x4330) // x4211 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4211_d1_b0) = true
    val x4212_d0_b0 = SRAM(size=9216, banking=NoBanking()).name("x4212_d0_b0").ctrl(x4330) // x4212 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4212_d0_b0) = false
    val x4212_d1_b0 = SRAM(size=9216, banking=NoBanking()).name("x4212_d1_b0").ctrl(x4330) // x4212 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4212_d1_b0) = true
    val x4213 = ReadMem(x4099).name("x4213").ctrl(x4330) // RegRead(x4099)
    val x4214 = Counter(min=Const(0).ctrl(x4330), max=x4213, step=Const(1).ctrl(x4330), par=1).name("x4214").ctrl(x4330) // CounterNew(Const(0),x4213,Const(1),Const(1))
    val x4215 = CounterChain(List(x4214)).name("x4215").ctrl(x4330) // CounterChainNew(List(x4214))
    val x4261 = LoopController(style=MetaPipe, level=OuterControl, cchain=x4215).name("x4261").ctrl(x4330) // UnrolledReduce(List(b2140),x4215,x4211,Block((x4211) => Const(())),List(List(b2287)),List(List(b2288)))
    val b2287 = CounterIter(x4214, Some(0)).ctrl(x4261).name("b2287")
    val b2288 = DummyOp().ctrl(x4261).name("b2288")
    val x4216_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4216_d0_b0").ctrl(x4261) // x4216 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4216_d0_b0) = false
    val x4216_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4216_d1_b0").ctrl(x4261) // x4216 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4216_d1_b0) = false
    val x4217_d0_b0 = SRAM(size=576, banking=Strided(banks=16, stride=1)).name("x4217_d0_b0").ctrl(x4261) // x4217 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4217_d0_b0) = false
    val x4218 = Counter(min=Const(0).ctrl(x4261), max=Const(96).ctrl(x4261), step=Const(1).ctrl(x4261), par=16).name("x4218").ctrl(x4261) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4219 = CounterChain(List(x4218)).name("x4219").ctrl(x4261) // CounterChainNew(List(x4218))
    val x4233 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4219).name("x4233").ctrl(x4261) // UnrolledForeach(List(b2288, b2140),x4219,Block(Const(())),List(List(b2293)),List(List(b2294)))
    val b2293 = CounterIter(x4218, None).ctrl(x4233).name("b2293")
    val b2294 = DummyOp().ctrl(x4233).name("b2294")
    val x4220 = OpDef(op=BitAnd, inputs=List(b2294, b2288)).name("x4220").ctrl(x4233) // And(b2294,b2288)
    val x4221 = OpDef(op=BitAnd, inputs=List(x4220, b2140)).name("x4221").ctrl(x4233) // And(x4220,b2140)
    val x4222 = LoadBanks(List(x4097_d0_b0), List(b2287, b2293)).name("x4222").ctrl(x4233) // ParSRAMLoad(x4097,List(List(b2287, b2293)),List(x4221))
    val x4223 = x4222 // x4223 = VectorApply(x4222,0)
    val x4224 = LoadBanks(List(x4095_d0_b0), List(b2287)).name("x4224").ctrl(x4233) // SRAMLoad(x4095,ArrayBuffer(Const(20)),List(b2287),Const(0),x4221)
    val x4225 = OpDef(op=FixEql, inputs=List(x4224, Const(1))).name("x4225").ctrl(x4233) // FixEql(x4224,Const(1))
    val x4226 = LoadBanks(List(x4052_d0_b0), List(b2293)).name("x4226").ctrl(x4233) // ParSRAMLoad(x4052,List(List(b2293)),List(x4221))
    val x4227 = x4226 // x4227 = VectorApply(x4226,0)
    val x4228 = LoadBanks(List(x4051_d0_b0), List(b2293)).name("x4228").ctrl(x4233) // ParSRAMLoad(x4051,List(List(b2293)),List(x4221))
    val x4229 = x4228 // x4229 = VectorApply(x4228,0)
    val x4230 = OpDef(op=MuxOp, inputs=List(x4225, x4227, x4229)).name("x4230").ctrl(x4233) // Mux(x4225,x4227,x4229)
    val x4231 = OpDef(op=FixSub, inputs=List(x4223, x4230)).name("x4231").ctrl(x4233) // FixSub(x4223,x4230)
    val x4232 = StoreBanks(List(x4216_d0_b0, x4216_d1_b0), List(b2293), x4231).name("x4232").ctrl(x4233) // ParSRAMStore(x4216,List(List(b2293)),List(x4231),List(x4221))
    val x4234 = Counter(min=Const(0).ctrl(x4261), max=Const(96).ctrl(x4261), step=Const(1).ctrl(x4261), par=16).name("x4234").ctrl(x4261) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4235 = Counter(min=Const(0).ctrl(x4261), max=Const(96).ctrl(x4261), step=Const(1).ctrl(x4261), par=1).name("x4235").ctrl(x4261) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4236 = CounterChain(List(x4235,x4234)).name("x4236").ctrl(x4261) // CounterChainNew(List(x4235, x4234))
    val x4245 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4236).name("x4245").ctrl(x4261) // UnrolledForeach(List(b2288, b2140),x4236,Block(Const(())),List(List(b2312), List(b2313)),List(List(b2314), List(b2315)))
    val b2312 = CounterIter(x4235, Some(0)).ctrl(x4245).name("b2312")
    val b2314 = DummyOp().ctrl(x4245).name("b2314")
    val b2313 = CounterIter(x4234, None).ctrl(x4245).name("b2313")
    val b2315 = DummyOp().ctrl(x4245).name("b2315")
    val x4237 = OpDef(op=BitAnd, inputs=List(b2314, b2315)).name("x4237").ctrl(x4245) // And(b2314,b2315)
    val x4238 = OpDef(op=BitAnd, inputs=List(b2288, b2140)).name("x4238").ctrl(x4245) // And(b2288,b2140)
    val x4239 = OpDef(op=BitAnd, inputs=List(x4237, x4238)).name("x4239").ctrl(x4245) // And(x4237,x4238)
    val x4240 = LoadBanks(List(x4216_d1_b0), List(b2312)).name("x4240").ctrl(x4245) // SRAMLoad(x4216,ArrayBuffer(Const(96)),List(b2312),Const(0),x4239)
    val x4241 = LoadBanks(List(x4216_d0_b0), List(b2313)).name("x4241").ctrl(x4245) // ParSRAMLoad(x4216,List(List(b2313)),List(x4239))
    val x4242 = x4241 // x4242 = VectorApply(x4241,0)
    val x4243 = OpDef(op=FixMul, inputs=List(x4240, x4242)).name("x4243").ctrl(x4245) // FixMul(x4240,x4242)
    val x4244 = StoreBanks(List(x4217_d0_b0), List(b2312, b2313), x4243).name("x4244").ctrl(x4245) // ParSRAMStore(x4217,List(List(b2312, b2313)),List(x4243),List(x4239))
    val x4246 = Counter(min=Const(0).ctrl(x4261), max=Const(96).ctrl(x4261), step=Const(1).ctrl(x4261), par=1).name("x4246").ctrl(x4261) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4247 = Counter(min=Const(0).ctrl(x4261), max=Const(96).ctrl(x4261), step=Const(1).ctrl(x4261), par=1).name("x4247").ctrl(x4261) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4248 = CounterChain(List(x4247,x4246)).name("x4248").ctrl(x4261) // CounterChainNew(ArrayBuffer(x4247, x4246))
    val x4260 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4248).name("x4260").ctrl(x4261) // UnrolledForeach(List(),x4248,Block(Const(())),ArrayBuffer(List(b2325), List(b2326)),ArrayBuffer(List(b2327), List(b2328)))
    val b2325 = CounterIter(x4247, Some(0)).ctrl(x4260).name("b2325")
    val b2327 = DummyOp().ctrl(x4260).name("b2327")
    val b2326 = CounterIter(x4246, None).ctrl(x4260).name("b2326")
    val b2328 = DummyOp().ctrl(x4260).name("b2328")
    val x4249 = OpDef(op=BitAnd, inputs=List(b2327, b2328)).name("x4249").ctrl(x4260) // And(b2327,b2328)
    val x4250 = OpDef(op=BitAnd, inputs=List(x4249, b2140)).name("x4250").ctrl(x4260) // And(x4249,b2140)
    val x4251 = LoadBanks(List(x4217_d0_b0), List(b2325, b2326)).name("x4251").ctrl(x4260) // ParSRAMLoad(x4217,List(ArrayBuffer(b2325, b2326)),List(x4250))
    val x4252 = x4251 // x4252 = VectorApply(x4251,0)
    val x4253 = LoadBanks(List(x4211_d1_b0), List(b2325, b2326)).name("x4253").ctrl(x4260) // ParSRAMLoad(x4211,List(ArrayBuffer(b2325, b2326)),List(x4250))
    val x4254 = x4253 // x4254 = VectorApply(x4253,0)
    val x4255 = OpDef(op=BitAnd, inputs=List(b2288, b2140)).name("x4255").ctrl(x4260) // And(b2288,b2140)
    val x4256 = OpDef(op=BitAnd, inputs=List(x4255, x4250)).name("x4256").ctrl(x4260) // And(x4255,x4250)
    val x4257 = OpDef(op=FixEql, inputs=List(b2287, Const(0))).name("x4257").ctrl(x4260) // FixEql(b2287,Const(0))
    val x4258 = ReduceAccumOp(op=FixAdd, input=x4252, accum=x4254).name("x4258").ctrl(x4260) // FixAdd(x4252,x4254)
    val x4259 = StoreBanks(List(x4211_d0_b0, x4211_d1_b0), List(b2325, b2326), x4258).name("x4259").ctrl(x4260) // ParSRAMStore(x4211,List(ArrayBuffer(b2325, b2326)),List(x4258),List(x4250))
    val x4262 = ReadMem(x4100).name("x4262").ctrl(x4330) // RegRead(x4100)
    val x4263 = Counter(min=Const(0).ctrl(x4330), max=x4262, step=Const(1).ctrl(x4330), par=1).name("x4263").ctrl(x4330) // CounterNew(Const(0),x4262,Const(1),Const(1))
    val x4264 = CounterChain(List(x4263)).name("x4264").ctrl(x4330) // CounterChainNew(List(x4263))
    val x4310 = LoopController(style=MetaPipe, level=OuterControl, cchain=x4264).name("x4310").ctrl(x4330) // UnrolledReduce(List(b2141),x4264,x4212,Block((x4212) => Const(())),List(List(b2342)),List(List(b2343)))
    val b2342 = CounterIter(x4263, Some(0)).ctrl(x4310).name("b2342")
    val b2343 = DummyOp().ctrl(x4310).name("b2343")
    val x4265_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4265_d0_b0").ctrl(x4310) // x4265 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4265_d0_b0) = false
    val x4265_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4265_d1_b0").ctrl(x4310) // x4265 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4265_d1_b0) = false
    val x4266_d0_b0 = SRAM(size=576, banking=Strided(banks=16, stride=1)).name("x4266_d0_b0").ctrl(x4310) // x4266 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4266_d0_b0) = false
    val x4267 = Counter(min=Const(0).ctrl(x4310), max=Const(96).ctrl(x4310), step=Const(1).ctrl(x4310), par=16).name("x4267").ctrl(x4310) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4268 = CounterChain(List(x4267)).name("x4268").ctrl(x4310) // CounterChainNew(List(x4267))
    val x4282 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4268).name("x4282").ctrl(x4310) // UnrolledForeach(List(b2343, b2141),x4268,Block(Const(())),List(List(b2348)),List(List(b2349)))
    val b2348 = CounterIter(x4267, None).ctrl(x4282).name("b2348")
    val b2349 = DummyOp().ctrl(x4282).name("b2349")
    val x4269 = OpDef(op=BitAnd, inputs=List(b2349, b2343)).name("x4269").ctrl(x4282) // And(b2349,b2343)
    val x4270 = OpDef(op=BitAnd, inputs=List(x4269, b2141)).name("x4270").ctrl(x4282) // And(x4269,b2141)
    val x4271 = LoadBanks(List(x4098_d0_b0), List(b2342, b2348)).name("x4271").ctrl(x4282) // ParSRAMLoad(x4098,List(List(b2342, b2348)),List(x4270))
    val x4272 = x4271 // x4272 = VectorApply(x4271,0)
    val x4273 = LoadBanks(List(x4096_d0_b0), List(b2342)).name("x4273").ctrl(x4282) // SRAMLoad(x4096,ArrayBuffer(Const(20)),List(b2342),Const(0),x4270)
    val x4274 = OpDef(op=FixEql, inputs=List(x4273, Const(1))).name("x4274").ctrl(x4282) // FixEql(x4273,Const(1))
    val x4275 = LoadBanks(List(x4052_d1_b0), List(b2348)).name("x4275").ctrl(x4282) // ParSRAMLoad(x4052,List(List(b2348)),List(x4270))
    val x4276 = x4275 // x4276 = VectorApply(x4275,0)
    val x4277 = LoadBanks(List(x4051_d1_b0), List(b2348)).name("x4277").ctrl(x4282) // ParSRAMLoad(x4051,List(List(b2348)),List(x4270))
    val x4278 = x4277 // x4278 = VectorApply(x4277,0)
    val x4279 = OpDef(op=MuxOp, inputs=List(x4274, x4276, x4278)).name("x4279").ctrl(x4282) // Mux(x4274,x4276,x4278)
    val x4280 = OpDef(op=FixSub, inputs=List(x4272, x4279)).name("x4280").ctrl(x4282) // FixSub(x4272,x4279)
    val x4281 = StoreBanks(List(x4265_d0_b0, x4265_d1_b0), List(b2348), x4280).name("x4281").ctrl(x4282) // ParSRAMStore(x4265,List(List(b2348)),List(x4280),List(x4270))
    val x4283 = Counter(min=Const(0).ctrl(x4310), max=Const(96).ctrl(x4310), step=Const(1).ctrl(x4310), par=16).name("x4283").ctrl(x4310) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4284 = Counter(min=Const(0).ctrl(x4310), max=Const(96).ctrl(x4310), step=Const(1).ctrl(x4310), par=1).name("x4284").ctrl(x4310) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4285 = CounterChain(List(x4284,x4283)).name("x4285").ctrl(x4310) // CounterChainNew(List(x4284, x4283))
    val x4294 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4285).name("x4294").ctrl(x4310) // UnrolledForeach(List(b2343, b2141),x4285,Block(Const(())),List(List(b2367), List(b2368)),List(List(b2369), List(b2370)))
    val b2367 = CounterIter(x4284, Some(0)).ctrl(x4294).name("b2367")
    val b2369 = DummyOp().ctrl(x4294).name("b2369")
    val b2368 = CounterIter(x4283, None).ctrl(x4294).name("b2368")
    val b2370 = DummyOp().ctrl(x4294).name("b2370")
    val x4286 = OpDef(op=BitAnd, inputs=List(b2369, b2370)).name("x4286").ctrl(x4294) // And(b2369,b2370)
    val x4287 = OpDef(op=BitAnd, inputs=List(b2343, b2141)).name("x4287").ctrl(x4294) // And(b2343,b2141)
    val x4288 = OpDef(op=BitAnd, inputs=List(x4286, x4287)).name("x4288").ctrl(x4294) // And(x4286,x4287)
    val x4289 = LoadBanks(List(x4265_d1_b0), List(b2367)).name("x4289").ctrl(x4294) // SRAMLoad(x4265,ArrayBuffer(Const(96)),List(b2367),Const(0),x4288)
    val x4290 = LoadBanks(List(x4265_d0_b0), List(b2368)).name("x4290").ctrl(x4294) // ParSRAMLoad(x4265,List(List(b2368)),List(x4288))
    val x4291 = x4290 // x4291 = VectorApply(x4290,0)
    val x4292 = OpDef(op=FixMul, inputs=List(x4289, x4291)).name("x4292").ctrl(x4294) // FixMul(x4289,x4291)
    val x4293 = StoreBanks(List(x4266_d0_b0), List(b2367, b2368), x4292).name("x4293").ctrl(x4294) // ParSRAMStore(x4266,List(List(b2367, b2368)),List(x4292),List(x4288))
    val x4295 = Counter(min=Const(0).ctrl(x4310), max=Const(96).ctrl(x4310), step=Const(1).ctrl(x4310), par=1).name("x4295").ctrl(x4310) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4296 = Counter(min=Const(0).ctrl(x4310), max=Const(96).ctrl(x4310), step=Const(1).ctrl(x4310), par=1).name("x4296").ctrl(x4310) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4297 = CounterChain(List(x4296,x4295)).name("x4297").ctrl(x4310) // CounterChainNew(ArrayBuffer(x4296, x4295))
    val x4309 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4297).name("x4309").ctrl(x4310) // UnrolledForeach(List(),x4297,Block(Const(())),ArrayBuffer(List(b2380), List(b2381)),ArrayBuffer(List(b2382), List(b2383)))
    val b2380 = CounterIter(x4296, Some(0)).ctrl(x4309).name("b2380")
    val b2382 = DummyOp().ctrl(x4309).name("b2382")
    val b2381 = CounterIter(x4295, None).ctrl(x4309).name("b2381")
    val b2383 = DummyOp().ctrl(x4309).name("b2383")
    val x4298 = OpDef(op=BitAnd, inputs=List(b2382, b2383)).name("x4298").ctrl(x4309) // And(b2382,b2383)
    val x4299 = OpDef(op=BitAnd, inputs=List(x4298, b2141)).name("x4299").ctrl(x4309) // And(x4298,b2141)
    val x4300 = LoadBanks(List(x4266_d0_b0), List(b2380, b2381)).name("x4300").ctrl(x4309) // ParSRAMLoad(x4266,List(ArrayBuffer(b2380, b2381)),List(x4299))
    val x4301 = x4300 // x4301 = VectorApply(x4300,0)
    val x4302 = LoadBanks(List(x4212_d1_b0), List(b2380, b2381)).name("x4302").ctrl(x4309) // ParSRAMLoad(x4212,List(ArrayBuffer(b2380, b2381)),List(x4299))
    val x4303 = x4302 // x4303 = VectorApply(x4302,0)
    val x4304 = OpDef(op=BitAnd, inputs=List(b2343, b2141)).name("x4304").ctrl(x4309) // And(b2343,b2141)
    val x4305 = OpDef(op=BitAnd, inputs=List(x4304, x4299)).name("x4305").ctrl(x4309) // And(x4304,x4299)
    val x4306 = OpDef(op=FixEql, inputs=List(b2342, Const(0))).name("x4306").ctrl(x4309) // FixEql(b2342,Const(0))
    val x4307 = ReduceAccumOp(op=FixAdd, input=x4301, accum=x4303).name("x4307").ctrl(x4309) // FixAdd(x4301,x4303)
    val x4308 = StoreBanks(List(x4212_d0_b0, x4212_d1_b0), List(b2380, b2381), x4307).name("x4308").ctrl(x4309) // ParSRAMStore(x4212,List(ArrayBuffer(b2380, b2381)),List(x4307),List(x4299))
    val x4311 = Counter(min=Const(0).ctrl(x4330), max=Const(96).ctrl(x4330), step=Const(1).ctrl(x4330), par=1).name("x4311").ctrl(x4330) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4312 = Counter(min=Const(0).ctrl(x4330), max=Const(96).ctrl(x4330), step=Const(1).ctrl(x4330), par=1).name("x4312").ctrl(x4330) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4313 = CounterChain(List(x4312,x4311)).name("x4313").ctrl(x4330) // CounterChainNew(ArrayBuffer(x4312, x4311))
    val x4329 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4313).name("x4329").ctrl(x4330) // UnrolledForeach(List(),x4313,Block(Const(())),ArrayBuffer(List(b2398), List(b2399)),ArrayBuffer(List(b2400), List(b2401)))
    val b2398 = CounterIter(x4312, Some(0)).ctrl(x4329).name("b2398")
    val b2400 = DummyOp().ctrl(x4329).name("b2400")
    val b2399 = CounterIter(x4311, None).ctrl(x4329).name("b2399")
    val b2401 = DummyOp().ctrl(x4329).name("b2401")
    val x4314 = OpDef(op=BitAnd, inputs=List(b2400, b2401)).name("x4314").ctrl(x4329) // And(b2400,b2401)
    val x4315 = LoadBanks(List(x4211_d0_b0), List(b2398, b2399)).name("x4315").ctrl(x4329) // ParSRAMLoad(x4211,List(ArrayBuffer(b2398, b2399)),List(x4314))
    val x4316 = x4315 // x4316 = VectorApply(x4315,0)
    val x4317 = LoadBanks(List(x4212_d0_b0), List(b2398, b2399)).name("x4317").ctrl(x4329) // ParSRAMLoad(x4212,List(ArrayBuffer(b2398, b2399)),List(x4314))
    val x4318 = x4317 // x4318 = VectorApply(x4317,0)
    val x4319 = LoadBanks(List(x4091_d1_b0), List(b2398, b2399)).name("x4319").ctrl(x4329) // ParSRAMLoad(x4091,List(ArrayBuffer(b2398, b2399)),List(x4314))
    val x4320 = x4319 // x4320 = VectorApply(x4319,0)
    val x4321 = OpDef(op=BitAnd, inputs=List(b2140, x4314)).name("x4321").ctrl(x4329) // And(b2140,x4314)
    val x4322 = OpDef(op=BitAnd, inputs=List(b2141, x4314)).name("x4322").ctrl(x4329) // And(b2141,x4314)
    val x4323 = OpDef(op=FixAdd, inputs=List(x4316, x4318)).name("x4323").ctrl(x4329) // FixAdd(x4316,x4318)
    val x4324 = OpDef(op=MuxOp, inputs=List(x4322, x4323, x4316)).name("x4324").ctrl(x4329) // Mux(x4322,x4323,x4316)
    val x4325 = OpDef(op=BitOr, inputs=List(x4321, x4322)).name("x4325").ctrl(x4329) // Or(x4321,x4322)
    val x4326 = OpDef(op=FixEql, inputs=List(b2138, Const(0))).name("x4326").ctrl(x4329) // FixEql(b2138,Const(0))
    val x4327 = ReduceAccumOp(op=FixAdd, input=x4324, accum=x4320).name("x4327").ctrl(x4329) // FixAdd(x4324,x4320)
    val x4328 = StoreBanks(List(x4091_d0_b0, x4091_d1_b0), List(b2398, b2399), x4327).name("x4328").ctrl(x4329) // ParSRAMStore(x4091,List(ArrayBuffer(b2398, b2399)),List(x4327),List(x4314))
    val x4331 = Counter(min=Const(0).ctrl(x4360), max=Const(96).ctrl(x4360), step=Const(1).ctrl(x4360), par=1).name("x4331").ctrl(x4360) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4332 = CounterChain(List(x4331)).name("x4332").ctrl(x4360) // CounterChainNew(List(x4331))
    val x4359 = LoopController(style=StreamPipe, level=OuterControl, cchain=x4332).name("x4359").ctrl(x4360) // UnrolledForeach(List(Const(true)),x4332,Block(Const(())),List(List(b2421)),List(List(b2422)))
    val b2421 = CounterIter(x4331, Some(0)).ctrl(x4359).name("b2421")
    val b2422 = DummyOp().ctrl(x4359).name("b2422")
    val b4436 = StreamOut(field="offset").name("b4436").ctrl(x4359) // x4333 = StreamOutNew(BurstCmdBus)
    val b4437 = StreamOut(field="size").name("b4437").ctrl(x4359) // x4333 = StreamOutNew(BurstCmdBus)
    val x4334 = StreamOut(field="data").name("x4334").ctrl(x4359) // x4334 = StreamOutNew(BurstFullDataBus())
    val x4335 = StreamIn(field="ack").name("x4335").ctrl(x4359) // x4335 = StreamInNew(BurstAckBus)
    val x4347 = UnitController(style=SeqPipe, level=InnerControl).name("x4347").ctrl(x4359) // UnitPipe(List(b2422),Block(x4346))
    val x4336 = b2421 // FixConvert(b2421,TRUE,_32,_0)
    val x4337 = OpDef(op=FixMul, inputs=List(x4336, Const(96))).name("x4337").ctrl(x4347) // FixMul(x4336,Const(96))
    val x4338 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4339 = OpDef(op=FixAdd, inputs=List(x4337, x4338)).name("x4339").ctrl(x4347) // FixAdd(x4337,x4338)
    val x4340 = OpDef(op=FixSla, inputs=List(x4339, Const(2))).name("x4340").ctrl(x4347) // FixLsh(x4339,Const(2))
    val x4341 = x4340 // FixConvert(x4340,TRUE,_64,_0)
    val x4342 = top.argFringe.dramAddress(x4046).name("x4342").ctrl(x4347) // GetDRAMAddress(x4046)
    val x4343 = OpDef(op=FixAdd, inputs=List(x4341, x4342)).name("x4343").ctrl(x4347) // FixAdd(x4341,x4342)
    val x4344 = x4343 // FixConvert(x4343,TRUE,_64,_0)
    // x4345 = SimpleStruct(ArrayBuffer((offset,x4344), (size,Const(384)), (isLoad,Const(false))))
    val b4438_b4436 = WriteMem(b4436, x4344).name("b4438_b4436").ctrl(x4347) // StreamWrite(x4333,x4345,b2422)
    val b4439_b4437 = WriteMem(b4437, Const(384)).name("b4439_b4437").ctrl(x4347) // StreamWrite(x4333,x4345,b2422)
    val x4348 = Counter(min=Const(0).ctrl(x4359), max=Const(96).ctrl(x4359), step=Const(1).ctrl(x4359), par=16).name("x4348").ctrl(x4359) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4349 = CounterChain(List(x4348)).name("x4349").ctrl(x4359) // CounterChainNew(List(x4348))
    val x4355 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4349).name("x4355").ctrl(x4359) // UnrolledForeach(List(b2422),x4349,Block(Const(())),List(List(b2440)),List(List(b2441)))
    val b2440 = CounterIter(x4348, None).ctrl(x4355).name("b2440")
    val b2441 = DummyOp().ctrl(x4355).name("b2441")
    val x4350 = OpDef(op=BitAnd, inputs=List(b2441, b2422)).name("x4350").ctrl(x4355) // And(b2441,b2422)
    val x4351 = LoadBanks(List(x4091_d0_b0), List(b2421, b2440)).name("x4351").ctrl(x4355) // ParSRAMLoad(x4091,List(List(b2421, b2440)),List(x4350))
    val x4352 = x4351 // x4352 = VectorApply(x4351,0)
    // x4353 = SimpleStruct(ArrayBuffer((_1,x4352), (_2,Const(true))))
    val x4354_x4334 = WriteMem(x4334, x4352).name("x4354_x4334").ctrl(x4355) // ParStreamWrite(x4334,List(x4353),List(x4350))
    val x4356 = FringeContainer(x4046,b4436,b4437,x4334,x4335).name("x4356").ctrl(x4359) // FringeDenseStore(x4046,x4333,x4334,x4335)
    val x4358 = UnitController(style=SeqPipe, level=InnerControl).name("x4358").ctrl(x4359) // UnitPipe(List(b2422),Block(Const(())))
    val x4357 = ReadMem(x4335).name("x4357").ctrl(x4358) // StreamRead(x4335,b2422)
    
  }
}
