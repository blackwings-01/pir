import pir._
import pir.node._
import arch._
import prism.enums._

object GDA extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x4036_d0 = top.argFringe.argIn(init=0).name("x4036_d0").ctrl(top) // ArgInNew(Const(0))
    boundOf(x4036_d0) = 1024
    val x4038 = ReadMem(x4036_d0).name("x4038").ctrl(top) // RegRead(x4036)
    val x4039 = DRAM().name("x4039").ctrl(top) // x4039 = DRAMNew(ArrayBuffer(x4038, Const(96)),Const(0))
    val x4040 = ReadMem(x4036_d0).name("x4040").ctrl(top) // RegRead(x4036)
    val x4041 = DRAM().name("x4041").ctrl(top) // x4041 = DRAMNew(ArrayBuffer(x4040),Const(0))
    val x4042 = DRAM().name("x4042").ctrl(top) // x4042 = DRAMNew(ArrayBuffer(Const(96)),Const(0))
    val x4043 = DRAM().name("x4043").ctrl(top) // x4043 = DRAMNew(ArrayBuffer(Const(96)),Const(0))
    val x4044 = DRAM().name("x4044").ctrl(top) // x4044 = DRAMNew(ArrayBuffer(Const(96), Const(96)),Const(0))
    val x4358 = UnitController(style=SeqPipe, level=OuterControl).name("x4358").ctrl(top) // Hwblock(Block(Const(())),false)
    val x4049_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4049_d0_b0").ctrl(x4358) // x4049 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4049_d0_b0) = false
    bufferDepthOf(x4049_d0_b0) = 1
    val x4049_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4049_d1_b0").ctrl(x4358) // x4049 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4049_d1_b0) = false
    bufferDepthOf(x4049_d1_b0) = 1
    val x4050_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4050_d0_b0").ctrl(x4358) // x4050 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4050_d0_b0) = false
    bufferDepthOf(x4050_d0_b0) = 1
    val x4050_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4050_d1_b0").ctrl(x4358) // x4050 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4050_d1_b0) = false
    bufferDepthOf(x4050_d1_b0) = 1
    val x4069 = UnitController(style=StreamPipe, level=OuterControl).name("x4069").ctrl(x4358) // UnitPipe(List(Const(true)),Block(Const(())))
    val b4410 = StreamOut(field="offset").name("b4410").ctrl(x4069) // x4051 = StreamOutNew(BurstCmdBus)
    val b4411 = StreamOut(field="size").name("b4411").ctrl(x4069) // x4051 = StreamOutNew(BurstCmdBus)
    val x4052 = StreamIn(field="data").name("x4052").ctrl(x4069) // x4052 = StreamInNew(BurstDataBus())
    val x4061 = UnitController(style=SeqPipe, level=InnerControl).name("x4061").ctrl(x4069) // UnitPipe(List(Const(true)),Block(x4060))
    val x4053 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4054 = OpDef(op=FixSla, inputs=List(x4053, Const(2))).name("x4054").ctrl(x4061) // FixLsh(x4053,Const(2))
    val x4055 = x4054 // FixConvert(x4054,TRUE,_64,_0)
    val x4056 = top.argFringe.dramAddress(x4042).name("x4056").ctrl(x4061) // GetDRAMAddress(x4042)
    val x4057 = OpDef(op=FixAdd, inputs=List(x4055, x4056)).name("x4057").ctrl(x4061) // FixAdd(x4055,x4056)
    val x4059_x4058 = x4057 // FixConvert(x4057,TRUE,_64,_0)
    // x4059 = SimpleStruct(ArrayBuffer((offset,x4058), (size,Const(384)), (isLoad,Const(true))))
    val b4412_b4410 = WriteMem(b4410, x4059_x4058).name("b4412_b4410").ctrl(x4061) // StreamWrite(x4051,x4059,Const(true))
    val b4413_b4411 = WriteMem(b4411, Const(384)).name("b4413_b4411").ctrl(x4061) // StreamWrite(x4051,x4059,Const(true))
    val x4062 = FringeContainer(x4042,b4410,b4411,x4052).name("x4062").ctrl(x4069) // FringeDenseLoad(x4042,x4051,x4052)
    val x4063 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4063").ctrl(x4069) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4064 = CounterChain(List(x4063)).name("x4064").ctrl(x4069) // CounterChainNew(List(x4063))
    val x4068 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4064).name("x4068").ctrl(x4069) // UnrolledForeach(List(Const(true)),x4064,Block(Const(())),List(List(b2100)),List(List(b2101)))
    val b2100 = CounterIter(x4063, None).ctrl(x4068).name("b2100")
    val b2101 = DummyOp().ctrl(x4068).name("b2101")
    val x4065_x4065 = ReadMem(x4052).name("x4065").ctrl(x4068) // ParStreamRead(x4052,List(b2101))
    val x4066_x4066 = x4065_x4065 // x4066 = VectorApply(x4065,0)
    val x4067 = StoreBanks(List(x4049_d0_b0, x4049_d1_b0), List(b2100), x4066_x4066).name("x4067").ctrl(x4068) // ParSRAMStore(x4049,List(List(b2100)),List(x4066),List(b2101))
    val x4088 = UnitController(style=StreamPipe, level=OuterControl).name("x4088").ctrl(x4358) // UnitPipe(List(Const(true)),Block(Const(())))
    val b4414 = StreamOut(field="offset").name("b4414").ctrl(x4088) // x4070 = StreamOutNew(BurstCmdBus)
    val b4415 = StreamOut(field="size").name("b4415").ctrl(x4088) // x4070 = StreamOutNew(BurstCmdBus)
    val x4071 = StreamIn(field="data").name("x4071").ctrl(x4088) // x4071 = StreamInNew(BurstDataBus())
    val x4080 = UnitController(style=SeqPipe, level=InnerControl).name("x4080").ctrl(x4088) // UnitPipe(List(Const(true)),Block(x4079))
    val x4072 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4073 = OpDef(op=FixSla, inputs=List(x4072, Const(2))).name("x4073").ctrl(x4080) // FixLsh(x4072,Const(2))
    val x4074 = x4073 // FixConvert(x4073,TRUE,_64,_0)
    val x4075 = top.argFringe.dramAddress(x4043).name("x4075").ctrl(x4080) // GetDRAMAddress(x4043)
    val x4076 = OpDef(op=FixAdd, inputs=List(x4074, x4075)).name("x4076").ctrl(x4080) // FixAdd(x4074,x4075)
    val x4078_x4077 = x4076 // FixConvert(x4076,TRUE,_64,_0)
    // x4078 = SimpleStruct(ArrayBuffer((offset,x4077), (size,Const(384)), (isLoad,Const(true))))
    val b4416_b4414 = WriteMem(b4414, x4078_x4077).name("b4416_b4414").ctrl(x4080) // StreamWrite(x4070,x4078,Const(true))
    val b4417_b4415 = WriteMem(b4415, Const(384)).name("b4417_b4415").ctrl(x4080) // StreamWrite(x4070,x4078,Const(true))
    val x4081 = FringeContainer(x4043,b4414,b4415,x4071).name("x4081").ctrl(x4088) // FringeDenseLoad(x4043,x4070,x4071)
    val x4082 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4082").ctrl(x4088) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4083 = CounterChain(List(x4082)).name("x4083").ctrl(x4088) // CounterChainNew(List(x4082))
    val x4087 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4083).name("x4087").ctrl(x4088) // UnrolledForeach(List(Const(true)),x4083,Block(Const(())),List(List(b2121)),List(List(b2122)))
    val b2121 = CounterIter(x4082, None).ctrl(x4087).name("b2121")
    val b2122 = DummyOp().ctrl(x4087).name("b2122")
    val x4084_x4084 = ReadMem(x4071).name("x4084").ctrl(x4087) // ParStreamRead(x4071,List(b2122))
    val x4085_x4085 = x4084_x4084 // x4085 = VectorApply(x4084,0)
    val x4086 = StoreBanks(List(x4050_d0_b0, x4050_d1_b0), List(b2121), x4085_x4085).name("x4086").ctrl(x4087) // ParSRAMStore(x4050,List(List(b2121)),List(x4085),List(b2122))
    val x4089_d0_b0 = SRAM(size=576, banking=Strided(banks=16, stride=1)).name("x4089_d0_b0").ctrl(x4358) // x4089 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4089_d0_b0) = false
    bufferDepthOf(x4089_d0_b0) = 1
    val x4089_d1_b0 = SRAM(size=9216, banking=NoBanking()).name("x4089_d1_b0").ctrl(x4358) // x4089 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4089_d1_b0) = true
    bufferDepthOf(x4089_d1_b0) = 1
    val x4090 = ReadMem(x4036_d0).name("x4090").ctrl(x4358) // RegRead(x4036)
    val x4091 = Counter(min=Const(0), max=x4090, step=Const(20), par=2).name("x4091").ctrl(x4358) // CounterNew(Const(0),x4090,Const(20),Const(2))
    val x4092 = CounterChain(List(x4091)).name("x4092").ctrl(x4358) // CounterChainNew(List(x4091))
    val x4328 = LoopController(style=MetaPipe, level=OuterControl, cchain=x4092).name("x4328").ctrl(x4358) // UnrolledReduce(List(Const(true)),x4092,x4089,Block((x4089) => Const(())),List(List(b2136, b2137)),List(List(b2138, b2139)))
    val b2136 = CounterIter(x4091, Some(0)).ctrl(x4328).name("b2136")
    val b2138 = DummyOp().ctrl(x4328).name("b2138")
    val b2137 = CounterIter(x4091, Some(1)).ctrl(x4328).name("b2137")
    val b2139 = DummyOp().ctrl(x4328).name("b2139")
    val x4093_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x4093_d0_b0").ctrl(x4328) // x4093 = SRAMNew(ArrayBuffer(Const(20)))
    isAccum(x4093_d0_b0) = false
    bufferDepthOf(x4093_d0_b0) = 2
    val x4094_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x4094_d0_b0").ctrl(x4328) // x4094 = SRAMNew(ArrayBuffer(Const(20)))
    isAccum(x4094_d0_b0) = false
    bufferDepthOf(x4094_d0_b0) = 2
    val x4095_d0_b0 = SRAM(size=120, banking=Strided(banks=16, stride=1)).name("x4095_d0_b0").ctrl(x4328) // x4095 = SRAMNew(ArrayBuffer(Const(20), Const(96)))
    isAccum(x4095_d0_b0) = false
    bufferDepthOf(x4095_d0_b0) = 2
    val x4096_d0_b0 = SRAM(size=120, banking=Strided(banks=16, stride=1)).name("x4096_d0_b0").ctrl(x4328) // x4096 = SRAMNew(ArrayBuffer(Const(20), Const(96)))
    isAccum(x4096_d0_b0) = false
    bufferDepthOf(x4096_d0_b0) = 2
    val x4097 = Reg(init=Some(0)).name("x4097").ctrl(x4328) // x4097 = RegNew(Const(0))
    isAccum(x4097) = false
    bufferDepthOf(x4097) = 2
    val x4098 = Reg(init=Some(0)).name("x4098").ctrl(x4328) // x4098 = RegNew(Const(0))
    isAccum(x4098) = false
    bufferDepthOf(x4098) = 2
    val x4100 = UnitController(style=SeqPipe, level=InnerControl).name("x4100").ctrl(x4328) // UnitPipe(List(b2138),Block(Const(())))
    val x4099 = OpDef(op=FixAdd, inputs=List(b2136, Const(20))).name("x4099").ctrl(x4100) // FixAdd(b2136,Const(20))
    val x4120 = UnitController(style=StreamPipe, level=OuterControl).name("x4120").ctrl(x4328) // UnitPipe(List(b2138),Block(Const(())))
    val b4418 = StreamOut(field="offset").name("b4418").ctrl(x4120) // x4101 = StreamOutNew(BurstCmdBus)
    val b4419 = StreamOut(field="size").name("b4419").ctrl(x4120) // x4101 = StreamOutNew(BurstCmdBus)
    val x4102 = StreamIn(field="data").name("x4102").ctrl(x4120) // x4102 = StreamInNew(BurstDataBus())
    val x4111 = UnitController(style=SeqPipe, level=InnerControl).name("x4111").ctrl(x4120) // UnitPipe(List(b2138),Block(x4110))
    val x4103 = b2136 // FixConvert(b2136,TRUE,_32,_0)
    val x4104 = OpDef(op=FixSla, inputs=List(x4103, Const(2))).name("x4104").ctrl(x4111) // FixLsh(x4103,Const(2))
    val x4105 = x4104 // FixConvert(x4104,TRUE,_64,_0)
    val x4106 = top.argFringe.dramAddress(x4041).name("x4106").ctrl(x4111) // GetDRAMAddress(x4041)
    val x4107 = OpDef(op=FixAdd, inputs=List(x4105, x4106)).name("x4107").ctrl(x4111) // FixAdd(x4105,x4106)
    val x4109_x4108 = x4107 // FixConvert(x4107,TRUE,_64,_0)
    // x4109 = SimpleStruct(ArrayBuffer((offset,x4108), (size,Const(80)), (isLoad,Const(true))))
    val b4420_b4418 = WriteMem(b4418, x4109_x4108).name("b4420_b4418").ctrl(x4111) // StreamWrite(x4101,x4109,b2138)
    val b4421_b4419 = WriteMem(b4419, Const(80)).name("b4421_b4419").ctrl(x4111) // StreamWrite(x4101,x4109,b2138)
    val x4112 = FringeContainer(x4041,b4418,b4419,x4102).name("x4112").ctrl(x4120) // FringeDenseLoad(x4041,x4101,x4102)
    val x4113 = Counter(min=Const(0), max=Const(20), step=Const(1), par=16).name("x4113").ctrl(x4120) // CounterNew(Const(0),Const(20),Const(1),Const(16))
    val x4114 = CounterChain(List(x4113)).name("x4114").ctrl(x4120) // CounterChainNew(List(x4113))
    val x4119 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4114).name("x4119").ctrl(x4120) // UnrolledForeach(List(b2138),x4114,Block(Const(())),List(List(b2162)),List(List(b2163)))
    val b2162 = CounterIter(x4113, None).ctrl(x4119).name("b2162")
    val b2163 = DummyOp().ctrl(x4119).name("b2163")
    val x4115 = OpDef(op=BitAnd, inputs=List(b2163, b2138)).name("x4115").ctrl(x4119) // And(b2163,b2138)
    val x4116_x4116 = ReadMem(x4102).name("x4116").ctrl(x4119) // ParStreamRead(x4102,List(x4115))
    val x4117_x4117 = x4116_x4116 // x4117 = VectorApply(x4116,0)
    val x4118 = StoreBanks(List(x4093_d0_b0), List(b2162), x4117_x4117).name("x4118").ctrl(x4119) // ParSRAMStore(x4093,List(List(b2162)),List(x4117),List(x4115))
    val x4121 = Counter(min=Const(0), max=Const(20), step=Const(1), par=1).name("x4121").ctrl(x4328) // CounterNew(Const(0),Const(20),Const(1),Const(1))
    val x4122 = CounterChain(List(x4121)).name("x4122").ctrl(x4328) // CounterChainNew(List(x4121))
    val x4148 = LoopController(style=StreamPipe, level=OuterControl, cchain=x4122).name("x4148").ctrl(x4328) // UnrolledForeach(List(b2138),x4122,Block(Const(())),List(List(b2172)),List(List(b2173)))
    val b2172 = CounterIter(x4121, Some(0)).ctrl(x4148).name("b2172")
    val b2173 = DummyOp().ctrl(x4148).name("b2173")
    val b4422 = StreamOut(field="offset").name("b4422").ctrl(x4148) // x4123 = StreamOutNew(BurstCmdBus)
    val b4423 = StreamOut(field="size").name("b4423").ctrl(x4148) // x4123 = StreamOutNew(BurstCmdBus)
    val x4124 = StreamIn(field="data").name("x4124").ctrl(x4148) // x4124 = StreamInNew(BurstDataBus())
    val x4138 = UnitController(style=SeqPipe, level=InnerControl).name("x4138").ctrl(x4148) // UnitPipe(List(b2173, b2138),Block(x4137))
    val x4125 = OpDef(op=FixAdd, inputs=List(b2136, b2172)).name("x4125").ctrl(x4138) // FixAdd(b2136,b2172)
    val x4126 = x4125 // FixConvert(x4125,TRUE,_32,_0)
    val x4127 = OpDef(op=FixMul, inputs=List(x4126, Const(96))).name("x4127").ctrl(x4138) // FixMul(x4126,Const(96))
    val x4128 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4129 = OpDef(op=FixAdd, inputs=List(x4127, x4128)).name("x4129").ctrl(x4138) // FixAdd(x4127,x4128)
    val x4130 = OpDef(op=FixSla, inputs=List(x4129, Const(2))).name("x4130").ctrl(x4138) // FixLsh(x4129,Const(2))
    val x4131 = x4130 // FixConvert(x4130,TRUE,_64,_0)
    val x4132 = top.argFringe.dramAddress(x4039).name("x4132").ctrl(x4138) // GetDRAMAddress(x4039)
    val x4133 = OpDef(op=FixAdd, inputs=List(x4131, x4132)).name("x4133").ctrl(x4138) // FixAdd(x4131,x4132)
    val x4135_x4134 = x4133 // FixConvert(x4133,TRUE,_64,_0)
    // x4135 = SimpleStruct(ArrayBuffer((offset,x4134), (size,Const(384)), (isLoad,Const(true))))
    val x4136 = OpDef(op=BitAnd, inputs=List(b2173, b2138)).name("x4136").ctrl(x4138) // And(b2173,b2138)
    val b4424_b4422 = WriteMem(b4422, x4135_x4134).name("b4424_b4422").ctrl(x4138) // StreamWrite(x4123,x4135,x4136)
    val b4425_b4423 = WriteMem(b4423, Const(384)).name("b4425_b4423").ctrl(x4138) // StreamWrite(x4123,x4135,x4136)
    val x4139 = FringeContainer(x4039,b4422,b4423,x4124).name("x4139").ctrl(x4148) // FringeDenseLoad(x4039,x4123,x4124)
    val x4140 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4140").ctrl(x4148) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4141 = CounterChain(List(x4140)).name("x4141").ctrl(x4148) // CounterChainNew(List(x4140))
    val x4147 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4141).name("x4147").ctrl(x4148) // UnrolledForeach(List(b2173, b2138),x4141,Block(Const(())),List(List(b2193)),List(List(b2194)))
    val b2193 = CounterIter(x4140, None).ctrl(x4147).name("b2193")
    val b2194 = DummyOp().ctrl(x4147).name("b2194")
    val x4142 = OpDef(op=BitAnd, inputs=List(b2194, b2173)).name("x4142").ctrl(x4147) // And(b2194,b2173)
    val x4143 = OpDef(op=BitAnd, inputs=List(x4142, b2138)).name("x4143").ctrl(x4147) // And(x4142,b2138)
    val x4144_x4144 = ReadMem(x4124).name("x4144").ctrl(x4147) // ParStreamRead(x4124,List(x4143))
    val x4145_x4145 = x4144_x4144 // x4145 = VectorApply(x4144,0)
    val x4146 = StoreBanks(List(x4095_d0_b0), List(b2172, b2193), x4145_x4145).name("x4146").ctrl(x4147) // ParSRAMStore(x4095,List(List(b2172, b2193)),List(x4145),List(x4143))
    val x4153 = UnitController(style=SeqPipe, level=InnerControl).name("x4153").ctrl(x4328) // UnitPipe(List(b2138),Block(x4152))
    val x4149 = ReadMem(x4036_d0).name("x4149").ctrl(x4153) // RegRead(x4036)
    val x4150 = OpDef(op=FixSub, inputs=List(x4149, b2136)).name("x4150").ctrl(x4153) // FixSub(x4149,b2136)
    val x4151 = OpDef(op=FixMin, inputs=List(x4150, Const(20))).name("x4151").ctrl(x4153) // Min(x4150,Const(20))
    val x4152_x4097 = WriteMem(x4097, x4151).name("x4152_x4097").ctrl(x4153) // RegWrite(x4097,x4151,b2138)
    val x4155 = UnitController(style=SeqPipe, level=InnerControl).name("x4155").ctrl(x4328) // UnitPipe(List(b2139),Block(Const(())))
    val x4154 = OpDef(op=FixAdd, inputs=List(b2137, Const(20))).name("x4154").ctrl(x4155) // FixAdd(b2137,Const(20))
    val x4175 = UnitController(style=StreamPipe, level=OuterControl).name("x4175").ctrl(x4328) // UnitPipe(List(b2139),Block(Const(())))
    val b4426 = StreamOut(field="offset").name("b4426").ctrl(x4175) // x4156 = StreamOutNew(BurstCmdBus)
    val b4427 = StreamOut(field="size").name("b4427").ctrl(x4175) // x4156 = StreamOutNew(BurstCmdBus)
    val x4157 = StreamIn(field="data").name("x4157").ctrl(x4175) // x4157 = StreamInNew(BurstDataBus())
    val x4166 = UnitController(style=SeqPipe, level=InnerControl).name("x4166").ctrl(x4175) // UnitPipe(List(b2139),Block(x4165))
    val x4158 = b2137 // FixConvert(b2137,TRUE,_32,_0)
    val x4159 = OpDef(op=FixSla, inputs=List(x4158, Const(2))).name("x4159").ctrl(x4166) // FixLsh(x4158,Const(2))
    val x4160 = x4159 // FixConvert(x4159,TRUE,_64,_0)
    val x4161 = top.argFringe.dramAddress(x4041).name("x4161").ctrl(x4166) // GetDRAMAddress(x4041)
    val x4162 = OpDef(op=FixAdd, inputs=List(x4160, x4161)).name("x4162").ctrl(x4166) // FixAdd(x4160,x4161)
    val x4164_x4163 = x4162 // FixConvert(x4162,TRUE,_64,_0)
    // x4164 = SimpleStruct(ArrayBuffer((offset,x4163), (size,Const(80)), (isLoad,Const(true))))
    val b4428_b4426 = WriteMem(b4426, x4164_x4163).name("b4428_b4426").ctrl(x4166) // StreamWrite(x4156,x4164,b2139)
    val b4429_b4427 = WriteMem(b4427, Const(80)).name("b4429_b4427").ctrl(x4166) // StreamWrite(x4156,x4164,b2139)
    val x4167 = FringeContainer(x4041,b4426,b4427,x4157).name("x4167").ctrl(x4175) // FringeDenseLoad(x4041,x4156,x4157)
    val x4168 = Counter(min=Const(0), max=Const(20), step=Const(1), par=16).name("x4168").ctrl(x4175) // CounterNew(Const(0),Const(20),Const(1),Const(16))
    val x4169 = CounterChain(List(x4168)).name("x4169").ctrl(x4175) // CounterChainNew(List(x4168))
    val x4174 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4169).name("x4174").ctrl(x4175) // UnrolledForeach(List(b2139),x4169,Block(Const(())),List(List(b2224)),List(List(b2225)))
    val b2224 = CounterIter(x4168, None).ctrl(x4174).name("b2224")
    val b2225 = DummyOp().ctrl(x4174).name("b2225")
    val x4170 = OpDef(op=BitAnd, inputs=List(b2225, b2139)).name("x4170").ctrl(x4174) // And(b2225,b2139)
    val x4171_x4171 = ReadMem(x4157).name("x4171").ctrl(x4174) // ParStreamRead(x4157,List(x4170))
    val x4172_x4172 = x4171_x4171 // x4172 = VectorApply(x4171,0)
    val x4173 = StoreBanks(List(x4094_d0_b0), List(b2224), x4172_x4172).name("x4173").ctrl(x4174) // ParSRAMStore(x4094,List(List(b2224)),List(x4172),List(x4170))
    val x4176 = Counter(min=Const(0), max=Const(20), step=Const(1), par=1).name("x4176").ctrl(x4328) // CounterNew(Const(0),Const(20),Const(1),Const(1))
    val x4177 = CounterChain(List(x4176)).name("x4177").ctrl(x4328) // CounterChainNew(List(x4176))
    val x4203 = LoopController(style=StreamPipe, level=OuterControl, cchain=x4177).name("x4203").ctrl(x4328) // UnrolledForeach(List(b2139),x4177,Block(Const(())),List(List(b2234)),List(List(b2235)))
    val b2234 = CounterIter(x4176, Some(0)).ctrl(x4203).name("b2234")
    val b2235 = DummyOp().ctrl(x4203).name("b2235")
    val b4430 = StreamOut(field="offset").name("b4430").ctrl(x4203) // x4178 = StreamOutNew(BurstCmdBus)
    val b4431 = StreamOut(field="size").name("b4431").ctrl(x4203) // x4178 = StreamOutNew(BurstCmdBus)
    val x4179 = StreamIn(field="data").name("x4179").ctrl(x4203) // x4179 = StreamInNew(BurstDataBus())
    val x4193 = UnitController(style=SeqPipe, level=InnerControl).name("x4193").ctrl(x4203) // UnitPipe(List(b2235, b2139),Block(x4192))
    val x4180 = OpDef(op=FixAdd, inputs=List(b2137, b2234)).name("x4180").ctrl(x4193) // FixAdd(b2137,b2234)
    val x4181 = x4180 // FixConvert(x4180,TRUE,_32,_0)
    val x4182 = OpDef(op=FixMul, inputs=List(x4181, Const(96))).name("x4182").ctrl(x4193) // FixMul(x4181,Const(96))
    val x4183 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4184 = OpDef(op=FixAdd, inputs=List(x4182, x4183)).name("x4184").ctrl(x4193) // FixAdd(x4182,x4183)
    val x4185 = OpDef(op=FixSla, inputs=List(x4184, Const(2))).name("x4185").ctrl(x4193) // FixLsh(x4184,Const(2))
    val x4186 = x4185 // FixConvert(x4185,TRUE,_64,_0)
    val x4187 = top.argFringe.dramAddress(x4039).name("x4187").ctrl(x4193) // GetDRAMAddress(x4039)
    val x4188 = OpDef(op=FixAdd, inputs=List(x4186, x4187)).name("x4188").ctrl(x4193) // FixAdd(x4186,x4187)
    val x4190_x4189 = x4188 // FixConvert(x4188,TRUE,_64,_0)
    // x4190 = SimpleStruct(ArrayBuffer((offset,x4189), (size,Const(384)), (isLoad,Const(true))))
    val x4191 = OpDef(op=BitAnd, inputs=List(b2235, b2139)).name("x4191").ctrl(x4193) // And(b2235,b2139)
    val b4432_b4430 = WriteMem(b4430, x4190_x4189).name("b4432_b4430").ctrl(x4193) // StreamWrite(x4178,x4190,x4191)
    val b4433_b4431 = WriteMem(b4431, Const(384)).name("b4433_b4431").ctrl(x4193) // StreamWrite(x4178,x4190,x4191)
    val x4194 = FringeContainer(x4039,b4430,b4431,x4179).name("x4194").ctrl(x4203) // FringeDenseLoad(x4039,x4178,x4179)
    val x4195 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4195").ctrl(x4203) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4196 = CounterChain(List(x4195)).name("x4196").ctrl(x4203) // CounterChainNew(List(x4195))
    val x4202 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4196).name("x4202").ctrl(x4203) // UnrolledForeach(List(b2235, b2139),x4196,Block(Const(())),List(List(b2255)),List(List(b2256)))
    val b2255 = CounterIter(x4195, None).ctrl(x4202).name("b2255")
    val b2256 = DummyOp().ctrl(x4202).name("b2256")
    val x4197 = OpDef(op=BitAnd, inputs=List(b2256, b2235)).name("x4197").ctrl(x4202) // And(b2256,b2235)
    val x4198 = OpDef(op=BitAnd, inputs=List(x4197, b2139)).name("x4198").ctrl(x4202) // And(x4197,b2139)
    val x4199_x4199 = ReadMem(x4179).name("x4199").ctrl(x4202) // ParStreamRead(x4179,List(x4198))
    val x4200_x4200 = x4199_x4199 // x4200 = VectorApply(x4199,0)
    val x4201 = StoreBanks(List(x4096_d0_b0), List(b2234, b2255), x4200_x4200).name("x4201").ctrl(x4202) // ParSRAMStore(x4096,List(List(b2234, b2255)),List(x4200),List(x4198))
    val x4208 = UnitController(style=SeqPipe, level=InnerControl).name("x4208").ctrl(x4328) // UnitPipe(List(b2139),Block(x4207))
    val x4204 = ReadMem(x4036_d0).name("x4204").ctrl(x4208) // RegRead(x4036)
    val x4205 = OpDef(op=FixSub, inputs=List(x4204, b2137)).name("x4205").ctrl(x4208) // FixSub(x4204,b2137)
    val x4206 = OpDef(op=FixMin, inputs=List(x4205, Const(20))).name("x4206").ctrl(x4208) // Min(x4205,Const(20))
    val x4207_x4098 = WriteMem(x4098, x4206).name("x4207_x4098").ctrl(x4208) // RegWrite(x4098,x4206,b2139)
    val x4209_d0_b0 = SRAM(size=9216, banking=NoBanking()).name("x4209_d0_b0").ctrl(x4328) // x4209 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4209_d0_b0) = false
    bufferDepthOf(x4209_d0_b0) = 2
    val x4209_d1_b0 = SRAM(size=9216, banking=NoBanking()).name("x4209_d1_b0").ctrl(x4328) // x4209 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4209_d1_b0) = true
    bufferDepthOf(x4209_d1_b0) = 1
    val x4210_d0_b0 = SRAM(size=9216, banking=NoBanking()).name("x4210_d0_b0").ctrl(x4328) // x4210 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4210_d0_b0) = false
    bufferDepthOf(x4210_d0_b0) = 2
    val x4210_d1_b0 = SRAM(size=9216, banking=NoBanking()).name("x4210_d1_b0").ctrl(x4328) // x4210 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4210_d1_b0) = true
    bufferDepthOf(x4210_d1_b0) = 1
    val x4211 = ReadMem(x4097).name("x4211").ctrl(x4328) // RegRead(x4097)
    val x4212 = Counter(min=Const(0), max=x4211, step=Const(1), par=1).name("x4212").ctrl(x4328) // CounterNew(Const(0),x4211,Const(1),Const(1))
    val x4213 = CounterChain(List(x4212)).name("x4213").ctrl(x4328) // CounterChainNew(List(x4212))
    val x4259 = LoopController(style=MetaPipe, level=OuterControl, cchain=x4213).name("x4259").ctrl(x4328) // UnrolledReduce(List(b2138),x4213,x4209,Block((x4209) => Const(())),List(List(b2285)),List(List(b2286)))
    val b2285 = CounterIter(x4212, Some(0)).ctrl(x4259).name("b2285")
    val b2286 = DummyOp().ctrl(x4259).name("b2286")
    val x4214_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4214_d0_b0").ctrl(x4259) // x4214 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4214_d0_b0) = false
    bufferDepthOf(x4214_d0_b0) = 2
    val x4214_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4214_d1_b0").ctrl(x4259) // x4214 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4214_d1_b0) = false
    bufferDepthOf(x4214_d1_b0) = 2
    val x4215_d0_b0 = SRAM(size=576, banking=Strided(banks=16, stride=1)).name("x4215_d0_b0").ctrl(x4259) // x4215 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4215_d0_b0) = false
    bufferDepthOf(x4215_d0_b0) = 2
    val x4216 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4216").ctrl(x4259) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4217 = CounterChain(List(x4216)).name("x4217").ctrl(x4259) // CounterChainNew(List(x4216))
    val x4231 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4217).name("x4231").ctrl(x4259) // UnrolledForeach(List(b2286, b2138),x4217,Block(Const(())),List(List(b2291)),List(List(b2292)))
    val b2291 = CounterIter(x4216, None).ctrl(x4231).name("b2291")
    val b2292 = DummyOp().ctrl(x4231).name("b2292")
    val x4218 = OpDef(op=BitAnd, inputs=List(b2292, b2286)).name("x4218").ctrl(x4231) // And(b2292,b2286)
    val x4219 = OpDef(op=BitAnd, inputs=List(x4218, b2138)).name("x4219").ctrl(x4231) // And(x4218,b2138)
    val x4220 = LoadBanks(List(x4095_d0_b0), List(b2285, b2291)).name("x4220").ctrl(x4231) // ParSRAMLoad(x4095,List(List(b2285, b2291)),List(x4219))
    val x4221 = x4220 // x4221 = VectorApply(x4220,0)
    val x4222 = LoadBanks(List(x4093_d0_b0), List(b2285)).name("x4222").ctrl(x4231) // SRAMLoad(x4093,ArrayBuffer(Const(20)),List(b2285),Const(0),x4219)
    val x4223 = OpDef(op=FixEql, inputs=List(x4222, Const(1))).name("x4223").ctrl(x4231) // FixEql(x4222,Const(1))
    val x4224 = LoadBanks(List(x4050_d0_b0), List(b2291)).name("x4224").ctrl(x4231) // ParSRAMLoad(x4050,List(List(b2291)),List(x4219))
    val x4225 = x4224 // x4225 = VectorApply(x4224,0)
    val x4226 = LoadBanks(List(x4049_d0_b0), List(b2291)).name("x4226").ctrl(x4231) // ParSRAMLoad(x4049,List(List(b2291)),List(x4219))
    val x4227 = x4226 // x4227 = VectorApply(x4226,0)
    val x4228 = OpDef(op=MuxOp, inputs=List(x4223, x4225, x4227)).name("x4228").ctrl(x4231) // Mux(x4223,x4225,x4227)
    val x4229 = OpDef(op=FixSub, inputs=List(x4221, x4228)).name("x4229").ctrl(x4231) // FixSub(x4221,x4228)
    val x4230 = StoreBanks(List(x4214_d0_b0, x4214_d1_b0), List(b2291), x4229).name("x4230").ctrl(x4231) // ParSRAMStore(x4214,List(List(b2291)),List(x4229),List(x4219))
    val x4232 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4232").ctrl(x4259) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4233 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4233").ctrl(x4259) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4234 = CounterChain(List(x4233,x4232)).name("x4234").ctrl(x4259) // CounterChainNew(List(x4233, x4232))
    val x4243 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4234).name("x4243").ctrl(x4259) // UnrolledForeach(List(b2286, b2138),x4234,Block(Const(())),List(List(b2310), List(b2311)),List(List(b2312), List(b2313)))
    val b2310 = CounterIter(x4233, Some(0)).ctrl(x4243).name("b2310")
    val b2312 = DummyOp().ctrl(x4243).name("b2312")
    val b2311 = CounterIter(x4232, None).ctrl(x4243).name("b2311")
    val b2313 = DummyOp().ctrl(x4243).name("b2313")
    val x4235 = OpDef(op=BitAnd, inputs=List(b2312, b2313)).name("x4235").ctrl(x4243) // And(b2312,b2313)
    val x4236 = OpDef(op=BitAnd, inputs=List(b2286, b2138)).name("x4236").ctrl(x4243) // And(b2286,b2138)
    val x4237 = OpDef(op=BitAnd, inputs=List(x4235, x4236)).name("x4237").ctrl(x4243) // And(x4235,x4236)
    val x4238 = LoadBanks(List(x4214_d1_b0), List(b2310)).name("x4238").ctrl(x4243) // SRAMLoad(x4214,ArrayBuffer(Const(96)),List(b2310),Const(0),x4237)
    val x4239 = LoadBanks(List(x4214_d0_b0), List(b2311)).name("x4239").ctrl(x4243) // ParSRAMLoad(x4214,List(List(b2311)),List(x4237))
    val x4240 = x4239 // x4240 = VectorApply(x4239,0)
    val x4241 = OpDef(op=FixMul, inputs=List(x4238, x4240)).name("x4241").ctrl(x4243) // FixMul(x4238,x4240)
    val x4242 = StoreBanks(List(x4215_d0_b0), List(b2310, b2311), x4241).name("x4242").ctrl(x4243) // ParSRAMStore(x4215,List(List(b2310, b2311)),List(x4241),List(x4237))
    val x4244 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4244").ctrl(x4259) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4245 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4245").ctrl(x4259) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4246 = CounterChain(List(x4245,x4244)).name("x4246").ctrl(x4259) // CounterChainNew(ArrayBuffer(x4245, x4244))
    val x4258 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4246).name("x4258").ctrl(x4259) // UnrolledForeach(List(),x4246,Block(Const(())),ArrayBuffer(List(b2323), List(b2324)),ArrayBuffer(List(b2325), List(b2326)))
    val b2323 = CounterIter(x4245, Some(0)).ctrl(x4258).name("b2323")
    val b2325 = DummyOp().ctrl(x4258).name("b2325")
    val b2324 = CounterIter(x4244, None).ctrl(x4258).name("b2324")
    val b2326 = DummyOp().ctrl(x4258).name("b2326")
    val x4247 = OpDef(op=BitAnd, inputs=List(b2325, b2326)).name("x4247").ctrl(x4258) // And(b2325,b2326)
    val x4248 = OpDef(op=BitAnd, inputs=List(x4247, b2138)).name("x4248").ctrl(x4258) // And(x4247,b2138)
    val x4249 = LoadBanks(List(x4215_d0_b0), List(b2323, b2324)).name("x4249").ctrl(x4258) // ParSRAMLoad(x4215,List(ArrayBuffer(b2323, b2324)),List(x4248))
    val x4250 = x4249 // x4250 = VectorApply(x4249,0)
    val x4251 = LoadBanks(List(x4209_d1_b0), List(b2323, b2324)).name("x4251").ctrl(x4258) // ParSRAMLoad(x4209,List(ArrayBuffer(b2323, b2324)),List(x4248))
    val x4252 = x4251 // x4252 = VectorApply(x4251,0)
    val x4253 = OpDef(op=BitAnd, inputs=List(b2286, b2138)).name("x4253").ctrl(x4258) // And(b2286,b2138)
    val x4254 = OpDef(op=BitAnd, inputs=List(x4253, x4248)).name("x4254").ctrl(x4258) // And(x4253,x4248)
    val x4255 = OpDef(op=FixEql, inputs=List(b2285, Const(0))).name("x4255").ctrl(x4258) // FixEql(b2285,Const(0))
    val x4256 = ReduceAccumOp(op=FixAdd, input=x4250, accum=x4252).name("x4256").ctrl(x4258) // FixAdd(x4250,x4252)
    val x4257 = StoreBanks(List(x4209_d0_b0, x4209_d1_b0), List(b2323, b2324), x4256).name("x4257").ctrl(x4258) // ParSRAMStore(x4209,List(ArrayBuffer(b2323, b2324)),List(x4256),List(x4248))
    val x4260 = ReadMem(x4098).name("x4260").ctrl(x4328) // RegRead(x4098)
    val x4261 = Counter(min=Const(0), max=x4260, step=Const(1), par=1).name("x4261").ctrl(x4328) // CounterNew(Const(0),x4260,Const(1),Const(1))
    val x4262 = CounterChain(List(x4261)).name("x4262").ctrl(x4328) // CounterChainNew(List(x4261))
    val x4308 = LoopController(style=MetaPipe, level=OuterControl, cchain=x4262).name("x4308").ctrl(x4328) // UnrolledReduce(List(b2139),x4262,x4210,Block((x4210) => Const(())),List(List(b2340)),List(List(b2341)))
    val b2340 = CounterIter(x4261, Some(0)).ctrl(x4308).name("b2340")
    val b2341 = DummyOp().ctrl(x4308).name("b2341")
    val x4263_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4263_d0_b0").ctrl(x4308) // x4263 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4263_d0_b0) = false
    bufferDepthOf(x4263_d0_b0) = 2
    val x4263_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x4263_d1_b0").ctrl(x4308) // x4263 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x4263_d1_b0) = false
    bufferDepthOf(x4263_d1_b0) = 2
    val x4264_d0_b0 = SRAM(size=576, banking=Strided(banks=16, stride=1)).name("x4264_d0_b0").ctrl(x4308) // x4264 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x4264_d0_b0) = false
    bufferDepthOf(x4264_d0_b0) = 2
    val x4265 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4265").ctrl(x4308) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4266 = CounterChain(List(x4265)).name("x4266").ctrl(x4308) // CounterChainNew(List(x4265))
    val x4280 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4266).name("x4280").ctrl(x4308) // UnrolledForeach(List(b2341, b2139),x4266,Block(Const(())),List(List(b2346)),List(List(b2347)))
    val b2346 = CounterIter(x4265, None).ctrl(x4280).name("b2346")
    val b2347 = DummyOp().ctrl(x4280).name("b2347")
    val x4267 = OpDef(op=BitAnd, inputs=List(b2347, b2341)).name("x4267").ctrl(x4280) // And(b2347,b2341)
    val x4268 = OpDef(op=BitAnd, inputs=List(x4267, b2139)).name("x4268").ctrl(x4280) // And(x4267,b2139)
    val x4269 = LoadBanks(List(x4096_d0_b0), List(b2340, b2346)).name("x4269").ctrl(x4280) // ParSRAMLoad(x4096,List(List(b2340, b2346)),List(x4268))
    val x4270 = x4269 // x4270 = VectorApply(x4269,0)
    val x4271 = LoadBanks(List(x4094_d0_b0), List(b2340)).name("x4271").ctrl(x4280) // SRAMLoad(x4094,ArrayBuffer(Const(20)),List(b2340),Const(0),x4268)
    val x4272 = OpDef(op=FixEql, inputs=List(x4271, Const(1))).name("x4272").ctrl(x4280) // FixEql(x4271,Const(1))
    val x4273 = LoadBanks(List(x4050_d1_b0), List(b2346)).name("x4273").ctrl(x4280) // ParSRAMLoad(x4050,List(List(b2346)),List(x4268))
    val x4274 = x4273 // x4274 = VectorApply(x4273,0)
    val x4275 = LoadBanks(List(x4049_d1_b0), List(b2346)).name("x4275").ctrl(x4280) // ParSRAMLoad(x4049,List(List(b2346)),List(x4268))
    val x4276 = x4275 // x4276 = VectorApply(x4275,0)
    val x4277 = OpDef(op=MuxOp, inputs=List(x4272, x4274, x4276)).name("x4277").ctrl(x4280) // Mux(x4272,x4274,x4276)
    val x4278 = OpDef(op=FixSub, inputs=List(x4270, x4277)).name("x4278").ctrl(x4280) // FixSub(x4270,x4277)
    val x4279 = StoreBanks(List(x4263_d0_b0, x4263_d1_b0), List(b2346), x4278).name("x4279").ctrl(x4280) // ParSRAMStore(x4263,List(List(b2346)),List(x4278),List(x4268))
    val x4281 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4281").ctrl(x4308) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4282 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4282").ctrl(x4308) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4283 = CounterChain(List(x4282,x4281)).name("x4283").ctrl(x4308) // CounterChainNew(List(x4282, x4281))
    val x4292 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4283).name("x4292").ctrl(x4308) // UnrolledForeach(List(b2341, b2139),x4283,Block(Const(())),List(List(b2365), List(b2366)),List(List(b2367), List(b2368)))
    val b2365 = CounterIter(x4282, Some(0)).ctrl(x4292).name("b2365")
    val b2367 = DummyOp().ctrl(x4292).name("b2367")
    val b2366 = CounterIter(x4281, None).ctrl(x4292).name("b2366")
    val b2368 = DummyOp().ctrl(x4292).name("b2368")
    val x4284 = OpDef(op=BitAnd, inputs=List(b2367, b2368)).name("x4284").ctrl(x4292) // And(b2367,b2368)
    val x4285 = OpDef(op=BitAnd, inputs=List(b2341, b2139)).name("x4285").ctrl(x4292) // And(b2341,b2139)
    val x4286 = OpDef(op=BitAnd, inputs=List(x4284, x4285)).name("x4286").ctrl(x4292) // And(x4284,x4285)
    val x4287 = LoadBanks(List(x4263_d1_b0), List(b2365)).name("x4287").ctrl(x4292) // SRAMLoad(x4263,ArrayBuffer(Const(96)),List(b2365),Const(0),x4286)
    val x4288 = LoadBanks(List(x4263_d0_b0), List(b2366)).name("x4288").ctrl(x4292) // ParSRAMLoad(x4263,List(List(b2366)),List(x4286))
    val x4289 = x4288 // x4289 = VectorApply(x4288,0)
    val x4290 = OpDef(op=FixMul, inputs=List(x4287, x4289)).name("x4290").ctrl(x4292) // FixMul(x4287,x4289)
    val x4291 = StoreBanks(List(x4264_d0_b0), List(b2365, b2366), x4290).name("x4291").ctrl(x4292) // ParSRAMStore(x4264,List(List(b2365, b2366)),List(x4290),List(x4286))
    val x4293 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4293").ctrl(x4308) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4294 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4294").ctrl(x4308) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4295 = CounterChain(List(x4294,x4293)).name("x4295").ctrl(x4308) // CounterChainNew(ArrayBuffer(x4294, x4293))
    val x4307 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4295).name("x4307").ctrl(x4308) // UnrolledForeach(List(),x4295,Block(Const(())),ArrayBuffer(List(b2378), List(b2379)),ArrayBuffer(List(b2380), List(b2381)))
    val b2378 = CounterIter(x4294, Some(0)).ctrl(x4307).name("b2378")
    val b2380 = DummyOp().ctrl(x4307).name("b2380")
    val b2379 = CounterIter(x4293, None).ctrl(x4307).name("b2379")
    val b2381 = DummyOp().ctrl(x4307).name("b2381")
    val x4296 = OpDef(op=BitAnd, inputs=List(b2380, b2381)).name("x4296").ctrl(x4307) // And(b2380,b2381)
    val x4297 = OpDef(op=BitAnd, inputs=List(x4296, b2139)).name("x4297").ctrl(x4307) // And(x4296,b2139)
    val x4298 = LoadBanks(List(x4264_d0_b0), List(b2378, b2379)).name("x4298").ctrl(x4307) // ParSRAMLoad(x4264,List(ArrayBuffer(b2378, b2379)),List(x4297))
    val x4299 = x4298 // x4299 = VectorApply(x4298,0)
    val x4300 = LoadBanks(List(x4210_d1_b0), List(b2378, b2379)).name("x4300").ctrl(x4307) // ParSRAMLoad(x4210,List(ArrayBuffer(b2378, b2379)),List(x4297))
    val x4301 = x4300 // x4301 = VectorApply(x4300,0)
    val x4302 = OpDef(op=BitAnd, inputs=List(b2341, b2139)).name("x4302").ctrl(x4307) // And(b2341,b2139)
    val x4303 = OpDef(op=BitAnd, inputs=List(x4302, x4297)).name("x4303").ctrl(x4307) // And(x4302,x4297)
    val x4304 = OpDef(op=FixEql, inputs=List(b2340, Const(0))).name("x4304").ctrl(x4307) // FixEql(b2340,Const(0))
    val x4305 = ReduceAccumOp(op=FixAdd, input=x4299, accum=x4301).name("x4305").ctrl(x4307) // FixAdd(x4299,x4301)
    val x4306 = StoreBanks(List(x4210_d0_b0, x4210_d1_b0), List(b2378, b2379), x4305).name("x4306").ctrl(x4307) // ParSRAMStore(x4210,List(ArrayBuffer(b2378, b2379)),List(x4305),List(x4297))
    val x4309 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4309").ctrl(x4328) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4310 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4310").ctrl(x4328) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4311 = CounterChain(List(x4310,x4309)).name("x4311").ctrl(x4328) // CounterChainNew(ArrayBuffer(x4310, x4309))
    val x4327 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4311).name("x4327").ctrl(x4328) // UnrolledForeach(List(),x4311,Block(Const(())),ArrayBuffer(List(b2396), List(b2397)),ArrayBuffer(List(b2398), List(b2399)))
    val b2396 = CounterIter(x4310, Some(0)).ctrl(x4327).name("b2396")
    val b2398 = DummyOp().ctrl(x4327).name("b2398")
    val b2397 = CounterIter(x4309, None).ctrl(x4327).name("b2397")
    val b2399 = DummyOp().ctrl(x4327).name("b2399")
    val x4312 = OpDef(op=BitAnd, inputs=List(b2398, b2399)).name("x4312").ctrl(x4327) // And(b2398,b2399)
    val x4313 = LoadBanks(List(x4209_d0_b0), List(b2396, b2397)).name("x4313").ctrl(x4327) // ParSRAMLoad(x4209,List(ArrayBuffer(b2396, b2397)),List(x4312))
    val x4314 = x4313 // x4314 = VectorApply(x4313,0)
    val x4315 = LoadBanks(List(x4210_d0_b0), List(b2396, b2397)).name("x4315").ctrl(x4327) // ParSRAMLoad(x4210,List(ArrayBuffer(b2396, b2397)),List(x4312))
    val x4316 = x4315 // x4316 = VectorApply(x4315,0)
    val x4317 = LoadBanks(List(x4089_d1_b0), List(b2396, b2397)).name("x4317").ctrl(x4327) // ParSRAMLoad(x4089,List(ArrayBuffer(b2396, b2397)),List(x4312))
    val x4318 = x4317 // x4318 = VectorApply(x4317,0)
    val x4319 = OpDef(op=BitAnd, inputs=List(b2138, x4312)).name("x4319").ctrl(x4327) // And(b2138,x4312)
    val x4320 = OpDef(op=BitAnd, inputs=List(b2139, x4312)).name("x4320").ctrl(x4327) // And(b2139,x4312)
    val x4321 = OpDef(op=FixAdd, inputs=List(x4314, x4316)).name("x4321").ctrl(x4327) // FixAdd(x4314,x4316)
    val x4322 = OpDef(op=MuxOp, inputs=List(x4320, x4321, x4314)).name("x4322").ctrl(x4327) // Mux(x4320,x4321,x4314)
    val x4323 = OpDef(op=BitOr, inputs=List(x4319, x4320)).name("x4323").ctrl(x4327) // Or(x4319,x4320)
    val x4324 = OpDef(op=FixEql, inputs=List(b2136, Const(0))).name("x4324").ctrl(x4327) // FixEql(b2136,Const(0))
    val x4325 = ReduceAccumOp(op=FixAdd, input=x4322, accum=x4318).name("x4325").ctrl(x4327) // FixAdd(x4322,x4318)
    val x4326 = StoreBanks(List(x4089_d0_b0, x4089_d1_b0), List(b2396, b2397), x4325).name("x4326").ctrl(x4327) // ParSRAMStore(x4089,List(ArrayBuffer(b2396, b2397)),List(x4325),List(x4312))
    val x4329 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x4329").ctrl(x4358) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x4330 = CounterChain(List(x4329)).name("x4330").ctrl(x4358) // CounterChainNew(List(x4329))
    val x4357 = LoopController(style=StreamPipe, level=OuterControl, cchain=x4330).name("x4357").ctrl(x4358) // UnrolledForeach(List(Const(true)),x4330,Block(Const(())),List(List(b2419)),List(List(b2420)))
    val b2419 = CounterIter(x4329, Some(0)).ctrl(x4357).name("b2419")
    val b2420 = DummyOp().ctrl(x4357).name("b2420")
    val b4434 = StreamOut(field="offset").name("b4434").ctrl(x4357) // x4331 = StreamOutNew(BurstCmdBus)
    val b4435 = StreamOut(field="size").name("b4435").ctrl(x4357) // x4331 = StreamOutNew(BurstCmdBus)
    val x4332 = StreamOut(field="data").name("x4332").ctrl(x4357) // x4332 = StreamOutNew(BurstFullDataBus())
    val x4333 = StreamIn(field="ack").name("x4333").ctrl(x4357) // x4333 = StreamInNew(BurstAckBus)
    val x4345 = UnitController(style=SeqPipe, level=InnerControl).name("x4345").ctrl(x4357) // UnitPipe(List(b2420),Block(x4344))
    val x4334 = b2419 // FixConvert(b2419,TRUE,_32,_0)
    val x4335 = OpDef(op=FixMul, inputs=List(x4334, Const(96))).name("x4335").ctrl(x4345) // FixMul(x4334,Const(96))
    val x4336 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x4337 = OpDef(op=FixAdd, inputs=List(x4335, x4336)).name("x4337").ctrl(x4345) // FixAdd(x4335,x4336)
    val x4338 = OpDef(op=FixSla, inputs=List(x4337, Const(2))).name("x4338").ctrl(x4345) // FixLsh(x4337,Const(2))
    val x4339 = x4338 // FixConvert(x4338,TRUE,_64,_0)
    val x4340 = top.argFringe.dramAddress(x4044).name("x4340").ctrl(x4345) // GetDRAMAddress(x4044)
    val x4341 = OpDef(op=FixAdd, inputs=List(x4339, x4340)).name("x4341").ctrl(x4345) // FixAdd(x4339,x4340)
    val x4343_x4342 = x4341 // FixConvert(x4341,TRUE,_64,_0)
    // x4343 = SimpleStruct(ArrayBuffer((offset,x4342), (size,Const(384)), (isLoad,Const(false))))
    val b4436_b4434 = WriteMem(b4434, x4343_x4342).name("b4436_b4434").ctrl(x4345) // StreamWrite(x4331,x4343,b2420)
    val b4437_b4435 = WriteMem(b4435, Const(384)).name("b4437_b4435").ctrl(x4345) // StreamWrite(x4331,x4343,b2420)
    val x4346 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x4346").ctrl(x4357) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x4347 = CounterChain(List(x4346)).name("x4347").ctrl(x4357) // CounterChainNew(List(x4346))
    val x4353 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4347).name("x4353").ctrl(x4357) // UnrolledForeach(List(b2420),x4347,Block(Const(())),List(List(b2438)),List(List(b2439)))
    val b2438 = CounterIter(x4346, None).ctrl(x4353).name("b2438")
    val b2439 = DummyOp().ctrl(x4353).name("b2439")
    val x4348 = OpDef(op=BitAnd, inputs=List(b2439, b2420)).name("x4348").ctrl(x4353) // And(b2439,b2420)
    val x4349 = LoadBanks(List(x4089_d0_b0), List(b2419, b2438)).name("x4349").ctrl(x4353) // ParSRAMLoad(x4089,List(List(b2419, b2438)),List(x4348))
    val x4351_x4350 = x4349 // x4350 = VectorApply(x4349,0)
    // x4351 = SimpleStruct(ArrayBuffer((_1,x4350), (_2,Const(true))))
    val x4352_x4332 = WriteMem(x4332, x4351_x4350).name("x4352_x4332").ctrl(x4353) // ParStreamWrite(x4332,List(x4351),List(x4348))
    val x4354 = FringeContainer(x4044,b4434,b4435,x4332,x4333).name("x4354").ctrl(x4357) // FringeDenseStore(x4044,x4331,x4332,x4333)
    val x4356 = UnitController(style=SeqPipe, level=InnerControl).name("x4356").ctrl(x4357) // UnitPipe(List(b2420),Block(Const(())))
    val x4355_x4355 = ReadMem(x4333).name("x4355").ctrl(x4356) // StreamRead(x4333,b2420)
    
  }
}
