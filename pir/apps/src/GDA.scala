import pir._
import pir.node._
import arch._
import prism.enums._

object GDA extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x3433_d0 = top.argFringe.argIn(init=0).name("x3433_d0").ctrl(top) // ArgInNew(Const(0))
    boundOf(x3433_d0) = 1024
    val x3435 = ReadMem(x3433_d0).name("x3435").ctrl(top) // RegRead(x3433)
    val x3436 = DRAM().name("x3436").ctrl(top) // x3436 = DRAMNew(ArrayBuffer(x3435, Const(96)),Const(0))
    val x3437 = ReadMem(x3433_d0).name("x3437").ctrl(top) // RegRead(x3433)
    val x3438 = DRAM().name("x3438").ctrl(top) // x3438 = DRAMNew(ArrayBuffer(x3437),Const(0))
    val x3439 = DRAM().name("x3439").ctrl(top) // x3439 = DRAMNew(ArrayBuffer(Const(96)),Const(0))
    val x3440 = DRAM().name("x3440").ctrl(top) // x3440 = DRAMNew(ArrayBuffer(Const(96)),Const(0))
    val x3441 = DRAM().name("x3441").ctrl(top) // x3441 = DRAMNew(ArrayBuffer(Const(96), Const(96)),Const(0))
    val x3641 = UnitController(style=SeqPipe, level=OuterControl).name("x3641").ctrl(top) // Hwblock(Block(Const(())),false)
    val x3446_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x3446_d0_b0").ctrl(x3641) // x3446 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x3446_d0_b0) = false
    bufferDepthOf(x3446_d0_b0) = 1
    val x3447_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x3447_d0_b0").ctrl(x3641) // x3447 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x3447_d0_b0) = false
    bufferDepthOf(x3447_d0_b0) = 1
    val x3466 = UnitController(style=StreamPipe, level=OuterControl).name("x3466").ctrl(x3641) // UnitPipe(List(Const(true)),Block(Const(())))
    val b3693 = StreamOut(field="offset").name("b3693").ctrl(x3466) // x3448 = StreamOutNew(BurstCmdBus)
    val b3694 = StreamOut(field="size").name("b3694").ctrl(x3466) // x3448 = StreamOutNew(BurstCmdBus)
    val x3449 = StreamIn(field="data").name("x3449").ctrl(x3466) // x3449 = StreamInNew(BurstDataBus())
    val x3458 = UnitController(style=SeqPipe, level=InnerControl).name("x3458").ctrl(x3466) // UnitPipe(List(Const(true)),Block(x3457))
    val x3450 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x3451 = OpDef(op=FixSla, inputs=List(x3450, Const(2))).name("x3451").ctrl(x3458) // FixLsh(x3450,Const(2))
    val x3452 = x3451 // FixConvert(x3451,TRUE,_64,_0)
    val x3453 = top.argFringe.dramAddress(x3439).name("x3453").ctrl(x3458) // GetDRAMAddress(x3439)
    val x3454 = OpDef(op=FixAdd, inputs=List(x3452, x3453)).name("x3454").ctrl(x3458) // FixAdd(x3452,x3453)
    val x3456_x3455 = x3454 // FixConvert(x3454,TRUE,_64,_0)
    // x3456 = SimpleStruct(ArrayBuffer((offset,x3455), (size,Const(384)), (isLoad,Const(true))))
    val b3695_b3693 = WriteMem(b3693, x3456_x3455).name("b3695_b3693").ctrl(x3458) // StreamWrite(x3448,x3456,Const(true))
    val b3696_b3694 = WriteMem(b3694, Const(384)).name("b3696_b3694").ctrl(x3458) // StreamWrite(x3448,x3456,Const(true))
    val x3459 = FringeContainer(x3439,b3693,b3694,x3449).name("x3459").ctrl(x3466) // FringeDenseLoad(x3439,x3448,x3449)
    val x3460 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x3460").ctrl(x3466) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x3461 = CounterChain(List(x3460)).name("x3461").ctrl(x3466) // CounterChainNew(List(x3460))
    val x3465 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3461).name("x3465").ctrl(x3466) // UnrolledForeach(List(Const(true)),x3461,Block(Const(())),List(List(b2099)),List(List(b2100)))
    val b2099 = CounterIter(x3460, None).ctrl(x3465).name("b2099")
    val b2100 = DummyOp().ctrl(x3465).name("b2100")
    val x3462_x3462 = ReadMem(x3449).name("x3462").ctrl(x3465) // ParStreamRead(x3449,List(b2100))
    val x3463_x3463 = x3462_x3462 // x3463 = VectorApply(x3462,0)
    val x3464 = StoreBanks(List(x3446_d0_b0), List(b2099), x3463_x3463).name("x3464").ctrl(x3465) // ParSRAMStore(x3446,List(List(b2099)),List(x3463),List(b2100))
    val x3485 = UnitController(style=StreamPipe, level=OuterControl).name("x3485").ctrl(x3641) // UnitPipe(List(Const(true)),Block(Const(())))
    val b3697 = StreamOut(field="offset").name("b3697").ctrl(x3485) // x3467 = StreamOutNew(BurstCmdBus)
    val b3698 = StreamOut(field="size").name("b3698").ctrl(x3485) // x3467 = StreamOutNew(BurstCmdBus)
    val x3468 = StreamIn(field="data").name("x3468").ctrl(x3485) // x3468 = StreamInNew(BurstDataBus())
    val x3477 = UnitController(style=SeqPipe, level=InnerControl).name("x3477").ctrl(x3485) // UnitPipe(List(Const(true)),Block(x3476))
    val x3469 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x3470 = OpDef(op=FixSla, inputs=List(x3469, Const(2))).name("x3470").ctrl(x3477) // FixLsh(x3469,Const(2))
    val x3471 = x3470 // FixConvert(x3470,TRUE,_64,_0)
    val x3472 = top.argFringe.dramAddress(x3440).name("x3472").ctrl(x3477) // GetDRAMAddress(x3440)
    val x3473 = OpDef(op=FixAdd, inputs=List(x3471, x3472)).name("x3473").ctrl(x3477) // FixAdd(x3471,x3472)
    val x3475_x3474 = x3473 // FixConvert(x3473,TRUE,_64,_0)
    // x3475 = SimpleStruct(ArrayBuffer((offset,x3474), (size,Const(384)), (isLoad,Const(true))))
    val b3699_b3697 = WriteMem(b3697, x3475_x3474).name("b3699_b3697").ctrl(x3477) // StreamWrite(x3467,x3475,Const(true))
    val b3700_b3698 = WriteMem(b3698, Const(384)).name("b3700_b3698").ctrl(x3477) // StreamWrite(x3467,x3475,Const(true))
    val x3478 = FringeContainer(x3440,b3697,b3698,x3468).name("x3478").ctrl(x3485) // FringeDenseLoad(x3440,x3467,x3468)
    val x3479 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x3479").ctrl(x3485) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x3480 = CounterChain(List(x3479)).name("x3480").ctrl(x3485) // CounterChainNew(List(x3479))
    val x3484 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3480).name("x3484").ctrl(x3485) // UnrolledForeach(List(Const(true)),x3480,Block(Const(())),List(List(b2120)),List(List(b2121)))
    val b2120 = CounterIter(x3479, None).ctrl(x3484).name("b2120")
    val b2121 = DummyOp().ctrl(x3484).name("b2121")
    val x3481_x3481 = ReadMem(x3468).name("x3481").ctrl(x3484) // ParStreamRead(x3468,List(b2121))
    val x3482_x3482 = x3481_x3481 // x3482 = VectorApply(x3481,0)
    val x3483 = StoreBanks(List(x3447_d0_b0), List(b2120), x3482_x3482).name("x3483").ctrl(x3484) // ParSRAMStore(x3447,List(List(b2120)),List(x3482),List(b2121))
    val x3486_d0_b0 = SRAM(size=576, banking=Strided(banks=16, stride=1)).name("x3486_d0_b0").ctrl(x3641) // x3486 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x3486_d0_b0) = false
    bufferDepthOf(x3486_d0_b0) = 1
    val x3486_d1_b0 = SRAM(size=9216, banking=NoBanking()).name("x3486_d1_b0").ctrl(x3641) // x3486 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x3486_d1_b0) = true
    bufferDepthOf(x3486_d1_b0) = 1
    val x3487 = ReadMem(x3433_d0).name("x3487").ctrl(x3641) // RegRead(x3433)
    val x3488 = Counter(min=Const(0), max=x3487, step=Const(32), par=1).name("x3488").ctrl(x3641) // CounterNew(Const(0),x3487,Const(32),Const(1))
    val x3489 = CounterChain(List(x3488)).name("x3489").ctrl(x3641) // CounterChainNew(List(x3488))
    val x3611 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3489).name("x3611").ctrl(x3641) // UnrolledReduce(List(Const(true)),x3489,x3486,Block((x3486) => Const(())),List(List(b2135)),List(List(b2136)))
    val b2135 = CounterIter(x3488, Some(0)).ctrl(x3611).name("b2135")
    val b2136 = DummyOp().ctrl(x3611).name("b2136")
    val x3490_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x3490_d0_b0").ctrl(x3611) // x3490 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x3490_d0_b0) = false
    bufferDepthOf(x3490_d0_b0) = 2
    val x3491_d0_b0 = SRAM(size=192, banking=Strided(banks=16, stride=1)).name("x3491_d0_b0").ctrl(x3611) // x3491 = SRAMNew(ArrayBuffer(Const(32), Const(96)))
    isAccum(x3491_d0_b0) = false
    bufferDepthOf(x3491_d0_b0) = 2
    val x3492 = Reg(init=Some(0)).name("x3492").ctrl(x3611) // x3492 = RegNew(Const(0))
    isAccum(x3492) = false
    bufferDepthOf(x3492) = 2
    val x3494 = UnitController(style=SeqPipe, level=InnerControl).name("x3494").ctrl(x3611) // UnitPipe(List(b2136),Block(Const(())))
    val x3493 = OpDef(op=FixAdd, inputs=List(b2135, Const(32))).name("x3493").ctrl(x3494) // FixAdd(b2135,Const(32))
    val x3514 = UnitController(style=StreamPipe, level=OuterControl).name("x3514").ctrl(x3611) // UnitPipe(List(b2136),Block(Const(())))
    val b3701 = StreamOut(field="offset").name("b3701").ctrl(x3514) // x3495 = StreamOutNew(BurstCmdBus)
    val b3702 = StreamOut(field="size").name("b3702").ctrl(x3514) // x3495 = StreamOutNew(BurstCmdBus)
    val x3496 = StreamIn(field="data").name("x3496").ctrl(x3514) // x3496 = StreamInNew(BurstDataBus())
    val x3505 = UnitController(style=SeqPipe, level=InnerControl).name("x3505").ctrl(x3514) // UnitPipe(List(b2136),Block(x3504))
    val x3497 = b2135 // FixConvert(b2135,TRUE,_32,_0)
    val x3498 = OpDef(op=FixSla, inputs=List(x3497, Const(2))).name("x3498").ctrl(x3505) // FixLsh(x3497,Const(2))
    val x3499 = x3498 // FixConvert(x3498,TRUE,_64,_0)
    val x3500 = top.argFringe.dramAddress(x3438).name("x3500").ctrl(x3505) // GetDRAMAddress(x3438)
    val x3501 = OpDef(op=FixAdd, inputs=List(x3499, x3500)).name("x3501").ctrl(x3505) // FixAdd(x3499,x3500)
    val x3503_x3502 = x3501 // FixConvert(x3501,TRUE,_64,_0)
    // x3503 = SimpleStruct(ArrayBuffer((offset,x3502), (size,Const(128)), (isLoad,Const(true))))
    val b3703_b3701 = WriteMem(b3701, x3503_x3502).name("b3703_b3701").ctrl(x3505) // StreamWrite(x3495,x3503,b2136)
    val b3704_b3702 = WriteMem(b3702, Const(128)).name("b3704_b3702").ctrl(x3505) // StreamWrite(x3495,x3503,b2136)
    val x3506 = FringeContainer(x3438,b3701,b3702,x3496).name("x3506").ctrl(x3514) // FringeDenseLoad(x3438,x3495,x3496)
    val x3507 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x3507").ctrl(x3514) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x3508 = CounterChain(List(x3507)).name("x3508").ctrl(x3514) // CounterChainNew(List(x3507))
    val x3513 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3508).name("x3513").ctrl(x3514) // UnrolledForeach(List(b2136),x3508,Block(Const(())),List(List(b2156)),List(List(b2157)))
    val b2156 = CounterIter(x3507, None).ctrl(x3513).name("b2156")
    val b2157 = DummyOp().ctrl(x3513).name("b2157")
    val x3509 = OpDef(op=BitAnd, inputs=List(b2157, b2136)).name("x3509").ctrl(x3513) // And(b2157,b2136)
    val x3510_x3510 = ReadMem(x3496).name("x3510").ctrl(x3513) // ParStreamRead(x3496,List(x3509))
    val x3511_x3511 = x3510_x3510 // x3511 = VectorApply(x3510,0)
    val x3512 = StoreBanks(List(x3490_d0_b0), List(b2156), x3511_x3511).name("x3512").ctrl(x3513) // ParSRAMStore(x3490,List(List(b2156)),List(x3511),List(x3509))
    val x3515 = Counter(min=Const(0), max=Const(32), step=Const(1), par=1).name("x3515").ctrl(x3611) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x3516 = CounterChain(List(x3515)).name("x3516").ctrl(x3611) // CounterChainNew(List(x3515))
    val x3542 = LoopController(style=StreamPipe, level=OuterControl, cchain=x3516).name("x3542").ctrl(x3611) // UnrolledForeach(List(b2136),x3516,Block(Const(())),List(List(b2166)),List(List(b2167)))
    val b2166 = CounterIter(x3515, Some(0)).ctrl(x3542).name("b2166")
    val b2167 = DummyOp().ctrl(x3542).name("b2167")
    val b3705 = StreamOut(field="offset").name("b3705").ctrl(x3542) // x3517 = StreamOutNew(BurstCmdBus)
    val b3706 = StreamOut(field="size").name("b3706").ctrl(x3542) // x3517 = StreamOutNew(BurstCmdBus)
    val x3518 = StreamIn(field="data").name("x3518").ctrl(x3542) // x3518 = StreamInNew(BurstDataBus())
    val x3532 = UnitController(style=SeqPipe, level=InnerControl).name("x3532").ctrl(x3542) // UnitPipe(List(b2167, b2136),Block(x3531))
    val x3519 = OpDef(op=FixAdd, inputs=List(b2135, b2166)).name("x3519").ctrl(x3532) // FixAdd(b2135,b2166)
    val x3520 = x3519 // FixConvert(x3519,TRUE,_32,_0)
    val x3521 = OpDef(op=FixMul, inputs=List(x3520, Const(96))).name("x3521").ctrl(x3532) // FixMul(x3520,Const(96))
    val x3522 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x3523 = OpDef(op=FixAdd, inputs=List(x3521, x3522)).name("x3523").ctrl(x3532) // FixAdd(x3521,x3522)
    val x3524 = OpDef(op=FixSla, inputs=List(x3523, Const(2))).name("x3524").ctrl(x3532) // FixLsh(x3523,Const(2))
    val x3525 = x3524 // FixConvert(x3524,TRUE,_64,_0)
    val x3526 = top.argFringe.dramAddress(x3436).name("x3526").ctrl(x3532) // GetDRAMAddress(x3436)
    val x3527 = OpDef(op=FixAdd, inputs=List(x3525, x3526)).name("x3527").ctrl(x3532) // FixAdd(x3525,x3526)
    val x3529_x3528 = x3527 // FixConvert(x3527,TRUE,_64,_0)
    // x3529 = SimpleStruct(ArrayBuffer((offset,x3528), (size,Const(384)), (isLoad,Const(true))))
    val x3530 = OpDef(op=BitAnd, inputs=List(b2167, b2136)).name("x3530").ctrl(x3532) // And(b2167,b2136)
    val b3707_b3705 = WriteMem(b3705, x3529_x3528).name("b3707_b3705").ctrl(x3532) // StreamWrite(x3517,x3529,x3530)
    val b3708_b3706 = WriteMem(b3706, Const(384)).name("b3708_b3706").ctrl(x3532) // StreamWrite(x3517,x3529,x3530)
    val x3533 = FringeContainer(x3436,b3705,b3706,x3518).name("x3533").ctrl(x3542) // FringeDenseLoad(x3436,x3517,x3518)
    val x3534 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x3534").ctrl(x3542) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x3535 = CounterChain(List(x3534)).name("x3535").ctrl(x3542) // CounterChainNew(List(x3534))
    val x3541 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3535).name("x3541").ctrl(x3542) // UnrolledForeach(List(b2167, b2136),x3535,Block(Const(())),List(List(b2187)),List(List(b2188)))
    val b2187 = CounterIter(x3534, None).ctrl(x3541).name("b2187")
    val b2188 = DummyOp().ctrl(x3541).name("b2188")
    val x3536 = OpDef(op=BitAnd, inputs=List(b2188, b2167)).name("x3536").ctrl(x3541) // And(b2188,b2167)
    val x3537 = OpDef(op=BitAnd, inputs=List(x3536, b2136)).name("x3537").ctrl(x3541) // And(x3536,b2136)
    val x3538_x3538 = ReadMem(x3518).name("x3538").ctrl(x3541) // ParStreamRead(x3518,List(x3537))
    val x3539_x3539 = x3538_x3538 // x3539 = VectorApply(x3538,0)
    val x3540 = StoreBanks(List(x3491_d0_b0), List(b2166, b2187), x3539_x3539).name("x3540").ctrl(x3541) // ParSRAMStore(x3491,List(List(b2166, b2187)),List(x3539),List(x3537))
    val x3547 = UnitController(style=SeqPipe, level=InnerControl).name("x3547").ctrl(x3611) // UnitPipe(List(b2136),Block(x3546))
    val x3543 = ReadMem(x3433_d0).name("x3543").ctrl(x3547) // RegRead(x3433)
    val x3544 = OpDef(op=FixSub, inputs=List(x3543, b2135)).name("x3544").ctrl(x3547) // FixSub(x3543,b2135)
    val x3545 = OpDef(op=FixMin, inputs=List(x3544, Const(32))).name("x3545").ctrl(x3547) // Min(x3544,Const(32))
    val x3546_x3492 = WriteMem(x3492, x3545).name("x3546_x3492").ctrl(x3547) // RegWrite(x3492,x3545,b2136)
    val x3548_d0_b0 = SRAM(size=9216, banking=NoBanking()).name("x3548_d0_b0").ctrl(x3611) // x3548 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x3548_d0_b0) = false
    bufferDepthOf(x3548_d0_b0) = 2
    val x3548_d1_b0 = SRAM(size=9216, banking=NoBanking()).name("x3548_d1_b0").ctrl(x3611) // x3548 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x3548_d1_b0) = true
    bufferDepthOf(x3548_d1_b0) = 1
    val x3549 = ReadMem(x3492).name("x3549").ctrl(x3611) // RegRead(x3492)
    val x3550 = Counter(min=Const(0), max=x3549, step=Const(1), par=1).name("x3550").ctrl(x3611) // CounterNew(Const(0),x3549,Const(1),Const(1))
    val x3551 = CounterChain(List(x3550)).name("x3551").ctrl(x3611) // CounterChainNew(List(x3550))
    val x3597 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3551).name("x3597").ctrl(x3611) // UnrolledReduce(List(b2136),x3551,x3548,Block((x3548) => Const(())),List(List(b2209)),List(List(b2210)))
    val b2209 = CounterIter(x3550, Some(0)).ctrl(x3597).name("b2209")
    val b2210 = DummyOp().ctrl(x3597).name("b2210")
    val x3552_d0_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x3552_d0_b0").ctrl(x3597) // x3552 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x3552_d0_b0) = false
    bufferDepthOf(x3552_d0_b0) = 2
    val x3552_d1_b0 = SRAM(size=6, banking=Strided(banks=16, stride=1)).name("x3552_d1_b0").ctrl(x3597) // x3552 = SRAMNew(ArrayBuffer(Const(96)))
    isAccum(x3552_d1_b0) = false
    bufferDepthOf(x3552_d1_b0) = 2
    val x3553_d0_b0 = SRAM(size=576, banking=Strided(banks=16, stride=1)).name("x3553_d0_b0").ctrl(x3597) // x3553 = SRAMNew(ArrayBuffer(Const(96), Const(96)))
    isAccum(x3553_d0_b0) = false
    bufferDepthOf(x3553_d0_b0) = 2
    val x3554 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x3554").ctrl(x3597) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x3555 = CounterChain(List(x3554)).name("x3555").ctrl(x3597) // CounterChainNew(List(x3554))
    val x3569 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3555).name("x3569").ctrl(x3597) // UnrolledForeach(List(b2210, b2136),x3555,Block(Const(())),List(List(b2215)),List(List(b2216)))
    val b2215 = CounterIter(x3554, None).ctrl(x3569).name("b2215")
    val b2216 = DummyOp().ctrl(x3569).name("b2216")
    val x3556 = OpDef(op=BitAnd, inputs=List(b2216, b2210)).name("x3556").ctrl(x3569) // And(b2216,b2210)
    val x3557 = OpDef(op=BitAnd, inputs=List(x3556, b2136)).name("x3557").ctrl(x3569) // And(x3556,b2136)
    val x3558 = LoadBanks(List(x3491_d0_b0), List(b2209, b2215)).name("x3558").ctrl(x3569) // ParSRAMLoad(x3491,List(List(b2209, b2215)),List(x3557))
    val x3559 = x3558 // x3559 = VectorApply(x3558,0)
    val x3560 = LoadBanks(List(x3490_d0_b0), List(b2209)).name("x3560").ctrl(x3569) // SRAMLoad(x3490,ArrayBuffer(Const(32)),List(b2209),Const(0),x3557)
    val x3561 = OpDef(op=FixEql, inputs=List(x3560, Const(1))).name("x3561").ctrl(x3569) // FixEql(x3560,Const(1))
    val x3562 = LoadBanks(List(x3447_d0_b0), List(b2215)).name("x3562").ctrl(x3569) // ParSRAMLoad(x3447,List(List(b2215)),List(x3557))
    val x3563 = x3562 // x3563 = VectorApply(x3562,0)
    val x3564 = LoadBanks(List(x3446_d0_b0), List(b2215)).name("x3564").ctrl(x3569) // ParSRAMLoad(x3446,List(List(b2215)),List(x3557))
    val x3565 = x3564 // x3565 = VectorApply(x3564,0)
    val x3566 = OpDef(op=MuxOp, inputs=List(x3561, x3563, x3565)).name("x3566").ctrl(x3569) // Mux(x3561,x3563,x3565)
    val x3567 = OpDef(op=FixSub, inputs=List(x3559, x3566)).name("x3567").ctrl(x3569) // FixSub(x3559,x3566)
    val x3568 = StoreBanks(List(x3552_d0_b0, x3552_d1_b0), List(b2215), x3567).name("x3568").ctrl(x3569) // ParSRAMStore(x3552,List(List(b2215)),List(x3567),List(x3557))
    val x3570 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x3570").ctrl(x3597) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x3571 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x3571").ctrl(x3597) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x3572 = CounterChain(List(x3571,x3570)).name("x3572").ctrl(x3597) // CounterChainNew(List(x3571, x3570))
    val x3581 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3572).name("x3581").ctrl(x3597) // UnrolledForeach(List(b2210, b2136),x3572,Block(Const(())),List(List(b2234), List(b2235)),List(List(b2236), List(b2237)))
    val b2234 = CounterIter(x3571, Some(0)).ctrl(x3581).name("b2234")
    val b2236 = DummyOp().ctrl(x3581).name("b2236")
    val b2235 = CounterIter(x3570, None).ctrl(x3581).name("b2235")
    val b2237 = DummyOp().ctrl(x3581).name("b2237")
    val x3573 = OpDef(op=BitAnd, inputs=List(b2236, b2237)).name("x3573").ctrl(x3581) // And(b2236,b2237)
    val x3574 = OpDef(op=BitAnd, inputs=List(b2210, b2136)).name("x3574").ctrl(x3581) // And(b2210,b2136)
    val x3575 = OpDef(op=BitAnd, inputs=List(x3573, x3574)).name("x3575").ctrl(x3581) // And(x3573,x3574)
    val x3576 = LoadBanks(List(x3552_d1_b0), List(b2234)).name("x3576").ctrl(x3581) // SRAMLoad(x3552,ArrayBuffer(Const(96)),List(b2234),Const(0),x3575)
    val x3577 = LoadBanks(List(x3552_d0_b0), List(b2235)).name("x3577").ctrl(x3581) // ParSRAMLoad(x3552,List(List(b2235)),List(x3575))
    val x3578 = x3577 // x3578 = VectorApply(x3577,0)
    val x3579 = OpDef(op=FixMul, inputs=List(x3576, x3578)).name("x3579").ctrl(x3581) // FixMul(x3576,x3578)
    val x3580 = StoreBanks(List(x3553_d0_b0), List(b2234, b2235), x3579).name("x3580").ctrl(x3581) // ParSRAMStore(x3553,List(List(b2234, b2235)),List(x3579),List(x3575))
    val x3582 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x3582").ctrl(x3597) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x3583 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x3583").ctrl(x3597) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x3584 = CounterChain(List(x3583,x3582)).name("x3584").ctrl(x3597) // CounterChainNew(ArrayBuffer(x3583, x3582))
    val x3596 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3584).name("x3596").ctrl(x3597) // UnrolledForeach(List(),x3584,Block(Const(())),ArrayBuffer(List(b2247), List(b2248)),ArrayBuffer(List(b2249), List(b2250)))
    val b2247 = CounterIter(x3583, Some(0)).ctrl(x3596).name("b2247")
    val b2249 = DummyOp().ctrl(x3596).name("b2249")
    val b2248 = CounterIter(x3582, None).ctrl(x3596).name("b2248")
    val b2250 = DummyOp().ctrl(x3596).name("b2250")
    val x3585 = OpDef(op=BitAnd, inputs=List(b2249, b2250)).name("x3585").ctrl(x3596) // And(b2249,b2250)
    val x3586 = OpDef(op=BitAnd, inputs=List(x3585, b2136)).name("x3586").ctrl(x3596) // And(x3585,b2136)
    val x3587 = LoadBanks(List(x3553_d0_b0), List(b2247, b2248)).name("x3587").ctrl(x3596) // ParSRAMLoad(x3553,List(ArrayBuffer(b2247, b2248)),List(x3586))
    val x3588 = x3587 // x3588 = VectorApply(x3587,0)
    val x3589 = LoadBanks(List(x3548_d1_b0), List(b2247, b2248)).name("x3589").ctrl(x3596) // ParSRAMLoad(x3548,List(ArrayBuffer(b2247, b2248)),List(x3586))
    val x3590 = x3589 // x3590 = VectorApply(x3589,0)
    val x3591 = OpDef(op=BitAnd, inputs=List(b2210, b2136)).name("x3591").ctrl(x3596) // And(b2210,b2136)
    val x3592 = OpDef(op=BitAnd, inputs=List(x3591, x3586)).name("x3592").ctrl(x3596) // And(x3591,x3586)
    val x3593 = OpDef(op=FixEql, inputs=List(b2209, Const(0))).name("x3593").ctrl(x3596) // FixEql(b2209,Const(0))
    val x3594 = ReduceAccumOp(op=FixAdd, input=x3588, accum=x3590).name("x3594").ctrl(x3596) // FixAdd(x3588,x3590)
    val x3595 = StoreBanks(List(x3548_d0_b0, x3548_d1_b0), List(b2247, b2248), x3594).name("x3595").ctrl(x3596) // ParSRAMStore(x3548,List(ArrayBuffer(b2247, b2248)),List(x3594),List(x3586))
    val x3598 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x3598").ctrl(x3611) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x3599 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x3599").ctrl(x3611) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x3600 = CounterChain(List(x3599,x3598)).name("x3600").ctrl(x3611) // CounterChainNew(ArrayBuffer(x3599, x3598))
    val x3610 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3600).name("x3610").ctrl(x3611) // UnrolledForeach(List(),x3600,Block(Const(())),ArrayBuffer(List(b2264), List(b2265)),ArrayBuffer(List(b2266), List(b2267)))
    val b2264 = CounterIter(x3599, Some(0)).ctrl(x3610).name("b2264")
    val b2266 = DummyOp().ctrl(x3610).name("b2266")
    val b2265 = CounterIter(x3598, None).ctrl(x3610).name("b2265")
    val b2267 = DummyOp().ctrl(x3610).name("b2267")
    val x3601 = OpDef(op=BitAnd, inputs=List(b2266, b2267)).name("x3601").ctrl(x3610) // And(b2266,b2267)
    val x3602 = LoadBanks(List(x3548_d0_b0), List(b2264, b2265)).name("x3602").ctrl(x3610) // ParSRAMLoad(x3548,List(ArrayBuffer(b2264, b2265)),List(x3601))
    val x3603 = x3602 // x3603 = VectorApply(x3602,0)
    val x3604 = LoadBanks(List(x3486_d1_b0), List(b2264, b2265)).name("x3604").ctrl(x3610) // ParSRAMLoad(x3486,List(ArrayBuffer(b2264, b2265)),List(x3601))
    val x3605 = x3604 // x3605 = VectorApply(x3604,0)
    val x3606 = OpDef(op=BitAnd, inputs=List(b2136, x3601)).name("x3606").ctrl(x3610) // And(b2136,x3601)
    val x3607 = OpDef(op=FixEql, inputs=List(b2135, Const(0))).name("x3607").ctrl(x3610) // FixEql(b2135,Const(0))
    val x3608 = ReduceAccumOp(op=FixAdd, input=x3603, accum=x3605).name("x3608").ctrl(x3610) // FixAdd(x3603,x3605)
    val x3609 = StoreBanks(List(x3486_d0_b0, x3486_d1_b0), List(b2264, b2265), x3608).name("x3609").ctrl(x3610) // ParSRAMStore(x3486,List(ArrayBuffer(b2264, b2265)),List(x3608),List(x3601))
    val x3612 = Counter(min=Const(0), max=Const(96), step=Const(1), par=1).name("x3612").ctrl(x3641) // CounterNew(Const(0),Const(96),Const(1),Const(1))
    val x3613 = CounterChain(List(x3612)).name("x3613").ctrl(x3641) // CounterChainNew(List(x3612))
    val x3640 = LoopController(style=StreamPipe, level=OuterControl, cchain=x3613).name("x3640").ctrl(x3641) // UnrolledForeach(List(Const(true)),x3613,Block(Const(())),List(List(b2281)),List(List(b2282)))
    val b2281 = CounterIter(x3612, Some(0)).ctrl(x3640).name("b2281")
    val b2282 = DummyOp().ctrl(x3640).name("b2282")
    val b3709 = StreamOut(field="offset").name("b3709").ctrl(x3640) // x3614 = StreamOutNew(BurstCmdBus)
    val b3710 = StreamOut(field="size").name("b3710").ctrl(x3640) // x3614 = StreamOutNew(BurstCmdBus)
    val x3615 = StreamOut(field="data").name("x3615").ctrl(x3640) // x3615 = StreamOutNew(BurstFullDataBus())
    val x3616 = StreamIn(field="ack").name("x3616").ctrl(x3640) // x3616 = StreamInNew(BurstAckBus)
    val x3628 = UnitController(style=SeqPipe, level=InnerControl).name("x3628").ctrl(x3640) // UnitPipe(List(b2282),Block(x3627))
    val x3617 = b2281 // FixConvert(b2281,TRUE,_32,_0)
    val x3618 = OpDef(op=FixMul, inputs=List(x3617, Const(96))).name("x3618").ctrl(x3628) // FixMul(x3617,Const(96))
    val x3619 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x3620 = OpDef(op=FixAdd, inputs=List(x3618, x3619)).name("x3620").ctrl(x3628) // FixAdd(x3618,x3619)
    val x3621 = OpDef(op=FixSla, inputs=List(x3620, Const(2))).name("x3621").ctrl(x3628) // FixLsh(x3620,Const(2))
    val x3622 = x3621 // FixConvert(x3621,TRUE,_64,_0)
    val x3623 = top.argFringe.dramAddress(x3441).name("x3623").ctrl(x3628) // GetDRAMAddress(x3441)
    val x3624 = OpDef(op=FixAdd, inputs=List(x3622, x3623)).name("x3624").ctrl(x3628) // FixAdd(x3622,x3623)
    val x3626_x3625 = x3624 // FixConvert(x3624,TRUE,_64,_0)
    // x3626 = SimpleStruct(ArrayBuffer((offset,x3625), (size,Const(384)), (isLoad,Const(false))))
    val b3711_b3709 = WriteMem(b3709, x3626_x3625).name("b3711_b3709").ctrl(x3628) // StreamWrite(x3614,x3626,b2282)
    val b3712_b3710 = WriteMem(b3710, Const(384)).name("b3712_b3710").ctrl(x3628) // StreamWrite(x3614,x3626,b2282)
    val x3629 = Counter(min=Const(0), max=Const(96), step=Const(1), par=16).name("x3629").ctrl(x3640) // CounterNew(Const(0),Const(96),Const(1),Const(16))
    val x3630 = CounterChain(List(x3629)).name("x3630").ctrl(x3640) // CounterChainNew(List(x3629))
    val x3636 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3630).name("x3636").ctrl(x3640) // UnrolledForeach(List(b2282),x3630,Block(Const(())),List(List(b2300)),List(List(b2301)))
    val b2300 = CounterIter(x3629, None).ctrl(x3636).name("b2300")
    val b2301 = DummyOp().ctrl(x3636).name("b2301")
    val x3631 = OpDef(op=BitAnd, inputs=List(b2301, b2282)).name("x3631").ctrl(x3636) // And(b2301,b2282)
    val x3632 = LoadBanks(List(x3486_d0_b0), List(b2281, b2300)).name("x3632").ctrl(x3636) // ParSRAMLoad(x3486,List(List(b2281, b2300)),List(x3631))
    val x3634_x3633 = x3632 // x3633 = VectorApply(x3632,0)
    // x3634 = SimpleStruct(ArrayBuffer((_1,x3633), (_2,Const(true))))
    val x3635_x3615 = WriteMem(x3615, x3634_x3633).name("x3635_x3615").ctrl(x3636) // ParStreamWrite(x3615,List(x3634),List(x3631))
    val x3637 = FringeContainer(x3441,b3709,b3710,x3615,x3616).name("x3637").ctrl(x3640) // FringeDenseStore(x3441,x3614,x3615,x3616)
    val x3639 = UnitController(style=SeqPipe, level=InnerControl).name("x3639").ctrl(x3640) // UnitPipe(List(b2282),Block(Const(())))
    val x3638_x3638 = ReadMem(x3616).name("x3638").ctrl(x3639) // StreamRead(x3616,b2282)
    
  }
}
