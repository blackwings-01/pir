import pir._
import pir.node._
import arch._
import pirc.enums._

object SPMV_CRS extends PIRApp {
  def main(top:Top) = {
    val x5022 = DRAM().name("x5022").ctrl(top) // x5022 = DRAMNew(ArrayBuffer(Const(1666)),Const(0))
    val x5023 = DRAM().name("x5023").ctrl(top) // x5023 = DRAMNew(ArrayBuffer(Const(1666)),Const(0))
    val x5024 = DRAM().name("x5024").ctrl(top) // x5024 = DRAMNew(ArrayBuffer(Const(495)),Const(0))
    val x5025 = DRAM().name("x5025").ctrl(top) // x5025 = DRAMNew(ArrayBuffer(Const(494)),Const(0))
    val x5026 = DRAM().name("x5026").ctrl(top) // x5026 = DRAMNew(ArrayBuffer(Const(494)),Const(0))
    val x5434 = UnitController(style=SeqPipe, level=OuterControl).name("x5434").ctrl(top) // Hwblock(Block(Const(())),false)
    val x5043 = Counter(min=Const(0).ctrl(x5434), max=Const(1).ctrl(x5434), step=Const(1).ctrl(x5434), par=1).name("x5043").ctrl(x5434) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x5044 = CounterChain(List(x5043)).name("x5044").ctrl(x5434) // CounterChainNew(List(x5043))
    val x5433 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5044).name("x5433").ctrl(x5434) // UnrolledForeach(List(Const(true)),x5044,Block(Const(())),List(List(b2790)),List(List(b2791)))
    val b2790 = CounterIter(x5043, Some(0)).ctrl(x5433).name("b2790")
    val b2791 = DummyOp().ctrl(x5433).name("b2791")
    val x5045_d0_b0 = SRAM(size=30, banking=Strided(banks=16, stride=1)).name("x5045_d0_b0").ctrl(x5433) // x5045 = SRAMNew(ArrayBuffer(Const(495)))
    val x5045_d1_b0 = SRAM(size=30, banking=Strided(banks=16, stride=1)).name("x5045_d1_b0").ctrl(x5433) // x5045 = SRAMNew(ArrayBuffer(Const(495)))
    val x5046_d0_b0 = SRAM(size=494, banking=NoBanking()).name("x5046_d0_b0").ctrl(x5433) // x5046 = SRAMNew(ArrayBuffer(Const(494)))
    val x5047 = Reg(init=0).name("x5047").ctrl(x5433) // x5047 = RegNew(Const(0))
    val x5048 = Reg(init=0).name("x5048").ctrl(x5433) // x5048 = RegNew(Const(0))
    val x5049 = Reg(init=0).name("x5049").ctrl(x5433) // x5049 = RegNew(Const(0))
    val x5057 = UnitController(style=SeqPipe, level=InnerControl).name("x5057").ctrl(x5433) // UnitPipe(List(b2791),Block(Const(())))
    val x5050 = OpDef(op=FixMul, inputs=List(b2790, Const(495).ctrl(x5057))).name("x5050").ctrl(x5057) // FixMul(b2790,Const(495))
    val x5051 = OpDef(op=FixAdd, inputs=List(b2790, Const(1).ctrl(x5057))).name("x5051").ctrl(x5057) // FixAdd(b2790,Const(1))
    val x5052 = OpDef(op=FixMul, inputs=List(x5051, Const(495).ctrl(x5057))).name("x5052").ctrl(x5057) // FixMul(x5051,Const(495))
    val x5053 = OpDef(op=FixSub, inputs=List(x5052, x5050)).name("x5053").ctrl(x5057) // FixSub(x5052,x5050)
    val x5054 = WriteMems(List(x5047), x5050).name("x5054").ctrl(x5057) // RegWrite(x5047,x5050,b2791)
    val x5055 = WriteMems(List(x5048), x5051).name("x5055").ctrl(x5057) // RegWrite(x5048,x5051,b2791)
    val x5056 = WriteMems(List(x5049), x5053).name("x5056").ctrl(x5057) // RegWrite(x5049,x5053,b2791)
    val x5121 = UnitController(style=StreamPipe, level=OuterControl).name("x5121").ctrl(x5433) // UnitPipe(List(b2791),Block(Const(())))
    val b5471 = StreamOut(field="offset").name("b5471").ctrl(x5121) // x5058 = StreamOutNew(BurstCmdBus)
    val b5472 = StreamOut(field="size").name("b5472").ctrl(x5121) // x5058 = StreamOutNew(BurstCmdBus)
    val b5473 = FIFO(size=16).name("b5473").ctrl(x5121) // x5059 = FIFONew(Const(16))
    val b5474 = FIFO(size=16).name("b5474").ctrl(x5121) // x5059 = FIFONew(Const(16))
    val b5475 = FIFO(size=16).name("b5475").ctrl(x5121) // x5059 = FIFONew(Const(16))
    val b5476 = StreamIn(field="data").name("b5476").ctrl(x5121) // x5060 = StreamInNew(BurstDataBus())
    val x5092 = UnitController(style=SeqPipe, level=InnerControl).name("x5092").ctrl(x5121) // UnitPipe(List(b2791),Block(x5091))
    val x5061 = ReadMem(x5047).name("x5061").ctrl(x5092) // RegRead(x5047)
    val x5062 = OpDef(op=FixConvert, inputs=List(x5061)).name("x5062").ctrl(x5092) // FixConvert(x5061,TRUE,_32,_0)
    val x5063 = OpDef(op=FixSla, inputs=List(x5062, Const(2).ctrl(x5092))).name("x5063").ctrl(x5092) // FixLsh(x5062,Const(2))
    val x5064 = x5063 // x5064 = DataAsBits(x5063)
    val x5065 = OpDef(op=BitAnd, inputs=List(x5064, Const(31))).name("x5065").ctrl(x5092) // VectorSlice(x5064,5,0) strMask=00000000000000000000000000011111
    val x5066 = x5065 // x5066 = BitsAsData(x5065,FixPt[TRUE,_32,_0])
    val x5067 = ReadMem(x5049).name("x5067").ctrl(x5092) // RegRead(x5049)
    val x5068 = OpDef(op=FixSla, inputs=List(x5067, Const(2).ctrl(x5092))).name("x5068").ctrl(x5092) // FixLsh(x5067,Const(2))
    val x5069 = OpDef(op=FixSub, inputs=List(x5063, x5066)).name("x5069").ctrl(x5092) // FixSub(x5063,x5066)
    val x5070 = OpDef(op=FixAdd, inputs=List(x5063, x5068)).name("x5070").ctrl(x5092) // FixAdd(x5063,x5068)
    val x5071 = x5070 // x5071 = DataAsBits(x5070)
    val x5072 = OpDef(op=BitAnd, inputs=List(x5071, Const(31))).name("x5072").ctrl(x5092) // VectorSlice(x5071,5,0) strMask=00000000000000000000000000011111
    val x5073 = x5072 // x5073 = BitsAsData(x5072,FixPt[TRUE,_32,_0])
    val x5074 = OpDef(op=FixEql, inputs=List(x5073, Const(0).ctrl(x5092))).name("x5074").ctrl(x5092) // FixEql(x5073,Const(0))
    val x5075 = OpDef(op=FixSub, inputs=List(Const(64).ctrl(x5092), x5073)).name("x5075").ctrl(x5092) // FixSub(Const(64),x5073)
    val x5076 = OpDef(op=MuxOp, inputs=List(x5074, Const(0).ctrl(x5092), x5075)).name("x5076").ctrl(x5092) // Mux(x5074,Const(0),x5075)
    val x5077 = OpDef(op=FixSra, inputs=List(x5066, Const(2).ctrl(x5092))).name("x5077").ctrl(x5092) // FixRsh(x5066,Const(2))
    val x5078 = OpDef(op=FixSra, inputs=List(x5076, Const(2).ctrl(x5092))).name("x5078").ctrl(x5092) // FixRsh(x5076,Const(2))
    val x5079 = OpDef(op=FixAdd, inputs=List(x5077, x5067)).name("x5079").ctrl(x5092) // FixAdd(x5077,x5067)
    val x5080 = OpDef(op=FixAdd, inputs=List(x5067, x5077)).name("x5080").ctrl(x5092) // FixAdd(x5067,x5077)
    val x5081 = OpDef(op=FixAdd, inputs=List(x5080, x5078)).name("x5081").ctrl(x5092) // FixAdd(x5080,x5078)
    val x5082 = OpDef(op=FixAdd, inputs=List(x5068, x5066)).name("x5082").ctrl(x5092) // FixAdd(x5068,x5066)
    val x5083 = OpDef(op=FixAdd, inputs=List(x5082, x5076)).name("x5083").ctrl(x5092) // FixAdd(x5082,x5076)
    val x5084 = OpDef(op=FixConvert, inputs=List(x5069)).name("x5084").ctrl(x5092) // FixConvert(x5069,TRUE,_64,_0)
    val x5085 = top.dramAddress(x5024).name("x5085").ctrl(x5092) // GetDRAMAddress(x5024)
    val x5086 = OpDef(op=FixAdd, inputs=List(x5084, x5085)).name("x5086").ctrl(x5092) // FixAdd(x5084,x5085)
    val x5087 = OpDef(op=FixConvert, inputs=List(x5086)).name("x5087").ctrl(x5092) // FixConvert(x5086,TRUE,_64,_0)
    // x5088 = SimpleStruct(ArrayBuffer((offset,x5087), (size,x5083), (isLoad,Const(true))))
    val b5477 = WriteMems(List(b5471), x5087).name("b5477").ctrl(x5092) // StreamWrite(x5058,x5088,b2791)
    val b5478 = WriteMems(List(b5472), x5083).name("b5478").ctrl(x5092) // StreamWrite(x5058,x5088,b2791)
    // x5090 = SimpleStruct(ArrayBuffer((size,x5081), (start,x5077), (end,x5079)))
    val b5479 = WriteMems(List(b5473), x5081).name("b5479").ctrl(x5092) // FIFOEnq(x5059,x5090,b2791)
    val b5480 = WriteMems(List(b5474), x5077).name("b5480").ctrl(x5092) // FIFOEnq(x5059,x5090,b2791)
    val b5481 = WriteMems(List(b5475), x5079).name("b5481").ctrl(x5092) // FIFOEnq(x5059,x5090,b2791)
    val x5093 = FringeContainer(x5024,b5471,b5472,b5476).name("x5093").ctrl(x5121) // FringeDenseLoad(x5024,x5058,x5060)
    val x5120 = UnitController(style=SeqPipe, level=OuterControl).name("x5120").ctrl(x5121) // UnitPipe(List(b2791),Block(Const(())))
    val x5094 = Reg(init=0).name("x5094").ctrl(x5120) // x5094 = RegNew(Const(0))
    val x5095 = Reg(init=0).name("x5095").ctrl(x5120) // x5095 = RegNew(Const(0))
    val x5096 = Reg(init=0).name("x5096").ctrl(x5120) // x5096 = RegNew(Const(0))
    val x5104 = UnitController(style=SeqPipe, level=InnerControl).name("x5104").ctrl(x5120) // UnitPipe(List(b2791),Block(x5103))
    val b5482 = ReadMem(b5473).name("b5482").ctrl(x5104) // FIFODeq(x5059,b2791)
    val b5483 = ReadMem(b5474).name("b5483").ctrl(x5104) // FIFODeq(x5059,b2791)
    val b5484 = ReadMem(b5475).name("b5484").ctrl(x5104) // FIFODeq(x5059,b2791)
    val x5098 = b5483 // x5098 = FieldApply(x5097,start)
    val x5099 = WriteMems(List(x5094), x5098).name("x5099").ctrl(x5104) // RegWrite(x5094,x5098,b2791)
    val x5100 = b5484 // x5100 = FieldApply(x5097,end)
    val x5101 = WriteMems(List(x5095), x5100).name("x5101").ctrl(x5104) // RegWrite(x5095,x5100,b2791)
    val x5102 = b5482 // x5102 = FieldApply(x5097,size)
    val x5103 = WriteMems(List(x5096), x5102).name("x5103").ctrl(x5104) // RegWrite(x5096,x5102,b2791)
    val x5105 = ReadMem(x5096).name("x5105").ctrl(x5120) // RegRead(x5096)
    val x5106 = Counter(min=Const(0).ctrl(x5120), max=x5105, step=Const(1).ctrl(x5120), par=16).name("x5106").ctrl(x5120) // CounterNew(Const(0),x5105,Const(1),Const(16))
    val x5107 = CounterChain(List(x5106)).name("x5107").ctrl(x5120) // CounterChainNew(List(x5106))
    val x5119 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5107).name("x5119").ctrl(x5120) // UnrolledForeach(List(b2791),x5107,Block(Const(())),List(List(b2851)),List(List(b2852)))
    val b2851 = CounterIter(x5106, None).ctrl(x5119).name("b2851")
    val b2852 = DummyOp().ctrl(x5119).name("b2852")
    val x5108 = ReadMem(x5094).name("x5108").ctrl(x5119) // RegRead(x5094)
    val x5109 = OpDef(op=FixLeq, inputs=List(x5108, b2851)).name("x5109").ctrl(x5119) // FixLeq(x5108,b2851)
    val x5110 = ReadMem(x5095).name("x5110").ctrl(x5119) // RegRead(x5095)
    val x5111 = OpDef(op=FixLt, inputs=List(b2851, x5110)).name("x5111").ctrl(x5119) // FixLt(b2851,x5110)
    val x5112 = OpDef(op=BitAnd, inputs=List(x5109, x5111)).name("x5112").ctrl(x5119) // And(x5109,x5111)
    val x5113 = OpDef(op=FixSub, inputs=List(b2851, x5108)).name("x5113").ctrl(x5119) // FixSub(b2851,x5108)
    val x5114 = OpDef(op=BitAnd, inputs=List(b2852, b2791)).name("x5114").ctrl(x5119) // And(b2852,b2791)
    val b5485 = ReadMem(b5476).name("b5485").ctrl(x5119) // ParStreamRead(x5060,List(x5114))
    val b5486 = b5485 // x5116 = VectorApply(x5115,0)
    val x5117 = OpDef(op=BitAnd, inputs=List(x5112, x5114)).name("x5117").ctrl(x5119) // And(x5112,x5114)
    val x5118 = StoreBanks(List(x5045_d0_b0, x5045_d1_b0), List(x5113), b5486).name("x5118").ctrl(x5119) // ParSRAMStore(x5045,List(List(x5113)),List(x5116),List(x5117))
    val x5122 = Counter(min=Const(0).ctrl(x5433), max=Const(494).ctrl(x5433), step=Const(1).ctrl(x5433), par=1).name("x5122").ctrl(x5433) // CounterNew(Const(0),Const(494),Const(1),Const(1))
    val x5123 = CounterChain(List(x5122)).name("x5123").ctrl(x5433) // CounterChainNew(List(x5122))
    val x5362 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5123).name("x5362").ctrl(x5433) // UnrolledForeach(List(b2791),x5123,Block(Const(())),List(List(b2869)),List(List(b2870)))
    val b2869 = CounterIter(x5122, Some(0)).ctrl(x5362).name("b2869")
    val b2870 = DummyOp().ctrl(x5362).name("b2870")
    val x5124_d0_b0 = SRAM(size=494, banking=NoBanking()).name("x5124_d0_b0").ctrl(x5362) // x5124 = SRAMNew(ArrayBuffer(Const(494)))
    val x5125_d0_b0 = SRAM(size=247, banking=Strided(banks=2, stride=1)).name("x5125_d0_b0").ctrl(x5362) // x5125 = SRAMNew(ArrayBuffer(Const(494)))
    val x5126_d0_b0 = SRAM(size=247, banking=Strided(banks=2, stride=1)).name("x5126_d0_b0").ctrl(x5362) // x5126 = SRAMNew(ArrayBuffer(Const(494)))
    val x5127_d0 = Reg(init=0).name("x5127_d0").ctrl(x5362) // x5127 = RegNew(Const(0))
    val x5127_d1 = Reg(init=0).name("x5127_d1").ctrl(x5362) // x5127 = RegNew(Const(0))
    val x5127_d2 = Reg(init=0).name("x5127_d2").ctrl(x5362) // x5127 = RegNew(Const(0))
    val x5127_d3 = Reg(init=0).name("x5127_d3").ctrl(x5362) // x5127 = RegNew(Const(0))
    val x5128_d0 = Reg(init=0).name("x5128_d0").ctrl(x5362) // x5128 = RegNew(Const(0))
    val x5128_d1 = Reg(init=0).name("x5128_d1").ctrl(x5362) // x5128 = RegNew(Const(0))
    val x5135 = UnitController(style=SeqPipe, level=InnerControl).name("x5135").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val x5129 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5129").ctrl(x5135) // And(b2870,b2791)
    val x5130 = LoadBanks(List(x5045_d1_b0), List(b2869)).name("x5130").ctrl(x5135) // SRAMLoad(x5045,ArrayBuffer(Const(495)),List(b2869),Const(0),x5129)
    val x5131 = OpDef(op=FixAdd, inputs=List(b2869, Const(1).ctrl(x5135))).name("x5131").ctrl(x5135) // FixAdd(b2869,Const(1))
    val x5132 = LoadBanks(List(x5045_d0_b0), List(x5131)).name("x5132").ctrl(x5135) // SRAMLoad(x5045,ArrayBuffer(Const(495)),List(x5131),Const(0),x5129)
    val x5133 = WriteMems(List(x5127_d0, x5127_d1, x5127_d2, x5127_d3), x5130).name("x5133").ctrl(x5135) // RegWrite(x5127,x5130,x5129)
    val x5134 = WriteMems(List(x5128_d0, x5128_d1), x5132).name("x5134").ctrl(x5135) // RegWrite(x5128,x5132,x5129)
    val x5136_d0 = Reg(init=0).name("x5136_d0").ctrl(x5362) // x5136 = RegNew(Const(0))
    val x5136_d1 = Reg(init=0).name("x5136_d1").ctrl(x5362) // x5136 = RegNew(Const(0))
    val x5142 = UnitController(style=SeqPipe, level=InnerControl).name("x5142").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val x5137 = ReadMem(x5128_d1).name("x5137").ctrl(x5142) // RegRead(x5128)
    val x5138 = ReadMem(x5127_d3).name("x5138").ctrl(x5142) // RegRead(x5127)
    val x5139 = OpDef(op=FixSub, inputs=List(x5137, x5138)).name("x5139").ctrl(x5142) // FixSub(x5137,x5138)
    val x5140 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5140").ctrl(x5142) // And(b2870,b2791)
    val x5141 = WriteMems(List(x5136_d0, x5136_d1), x5139).name("x5141").ctrl(x5142) // RegWrite(x5136,x5139,x5140)
    val x5209 = UnitController(style=StreamPipe, level=OuterControl).name("x5209").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val b5487 = StreamOut(field="offset").name("b5487").ctrl(x5209) // x5143 = StreamOutNew(BurstCmdBus)
    val b5488 = StreamOut(field="size").name("b5488").ctrl(x5209) // x5143 = StreamOutNew(BurstCmdBus)
    val b5489 = FIFO(size=16).name("b5489").ctrl(x5209) // x5144 = FIFONew(Const(16))
    val b5490 = FIFO(size=16).name("b5490").ctrl(x5209) // x5144 = FIFONew(Const(16))
    val b5491 = FIFO(size=16).name("b5491").ctrl(x5209) // x5144 = FIFONew(Const(16))
    val b5492 = StreamIn(field="data").name("b5492").ctrl(x5209) // x5145 = StreamInNew(BurstDataBus())
    val x5178 = UnitController(style=SeqPipe, level=InnerControl).name("x5178").ctrl(x5209) // UnitPipe(List(b2870, b2791),Block(x5177))
    val x5146 = ReadMem(x5127_d2).name("x5146").ctrl(x5178) // RegRead(x5127)
    val x5147 = OpDef(op=FixConvert, inputs=List(x5146)).name("x5147").ctrl(x5178) // FixConvert(x5146,TRUE,_32,_0)
    val x5148 = OpDef(op=FixSla, inputs=List(x5147, Const(2).ctrl(x5178))).name("x5148").ctrl(x5178) // FixLsh(x5147,Const(2))
    val x5149 = x5148 // x5149 = DataAsBits(x5148)
    val x5150 = OpDef(op=BitAnd, inputs=List(x5149, Const(31))).name("x5150").ctrl(x5178) // VectorSlice(x5149,5,0) strMask=00000000000000000000000000011111
    val x5151 = x5150 // x5151 = BitsAsData(x5150,FixPt[TRUE,_32,_0])
    val x5152 = ReadMem(x5136_d1).name("x5152").ctrl(x5178) // RegRead(x5136)
    val x5153 = OpDef(op=FixSla, inputs=List(x5152, Const(2).ctrl(x5178))).name("x5153").ctrl(x5178) // FixLsh(x5152,Const(2))
    val x5154 = OpDef(op=FixSub, inputs=List(x5148, x5151)).name("x5154").ctrl(x5178) // FixSub(x5148,x5151)
    val x5155 = OpDef(op=FixAdd, inputs=List(x5148, x5153)).name("x5155").ctrl(x5178) // FixAdd(x5148,x5153)
    val x5156 = x5155 // x5156 = DataAsBits(x5155)
    val x5157 = OpDef(op=BitAnd, inputs=List(x5156, Const(31))).name("x5157").ctrl(x5178) // VectorSlice(x5156,5,0) strMask=00000000000000000000000000011111
    val x5158 = x5157 // x5158 = BitsAsData(x5157,FixPt[TRUE,_32,_0])
    val x5159 = OpDef(op=FixEql, inputs=List(x5158, Const(0).ctrl(x5178))).name("x5159").ctrl(x5178) // FixEql(x5158,Const(0))
    val x5160 = OpDef(op=FixSub, inputs=List(Const(64).ctrl(x5178), x5158)).name("x5160").ctrl(x5178) // FixSub(Const(64),x5158)
    val x5161 = OpDef(op=MuxOp, inputs=List(x5159, Const(0).ctrl(x5178), x5160)).name("x5161").ctrl(x5178) // Mux(x5159,Const(0),x5160)
    val x5162 = OpDef(op=FixSra, inputs=List(x5151, Const(2).ctrl(x5178))).name("x5162").ctrl(x5178) // FixRsh(x5151,Const(2))
    val x5163 = OpDef(op=FixSra, inputs=List(x5161, Const(2).ctrl(x5178))).name("x5163").ctrl(x5178) // FixRsh(x5161,Const(2))
    val x5164 = OpDef(op=FixAdd, inputs=List(x5162, x5152)).name("x5164").ctrl(x5178) // FixAdd(x5162,x5152)
    val x5165 = OpDef(op=FixAdd, inputs=List(x5152, x5162)).name("x5165").ctrl(x5178) // FixAdd(x5152,x5162)
    val x5166 = OpDef(op=FixAdd, inputs=List(x5165, x5163)).name("x5166").ctrl(x5178) // FixAdd(x5165,x5163)
    val x5167 = OpDef(op=FixAdd, inputs=List(x5153, x5151)).name("x5167").ctrl(x5178) // FixAdd(x5153,x5151)
    val x5168 = OpDef(op=FixAdd, inputs=List(x5167, x5161)).name("x5168").ctrl(x5178) // FixAdd(x5167,x5161)
    val x5169 = OpDef(op=FixConvert, inputs=List(x5154)).name("x5169").ctrl(x5178) // FixConvert(x5154,TRUE,_64,_0)
    val x5170 = top.dramAddress(x5023).name("x5170").ctrl(x5178) // GetDRAMAddress(x5023)
    val x5171 = OpDef(op=FixAdd, inputs=List(x5169, x5170)).name("x5171").ctrl(x5178) // FixAdd(x5169,x5170)
    val x5172 = OpDef(op=FixConvert, inputs=List(x5171)).name("x5172").ctrl(x5178) // FixConvert(x5171,TRUE,_64,_0)
    // x5173 = SimpleStruct(ArrayBuffer((offset,x5172), (size,x5168), (isLoad,Const(true))))
    val x5174 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5174").ctrl(x5178) // And(b2870,b2791)
    val b5493 = WriteMems(List(b5487), x5172).name("b5493").ctrl(x5178) // StreamWrite(x5143,x5173,x5174)
    val b5494 = WriteMems(List(b5488), x5168).name("b5494").ctrl(x5178) // StreamWrite(x5143,x5173,x5174)
    // x5176 = SimpleStruct(ArrayBuffer((size,x5166), (start,x5162), (end,x5164)))
    val b5495 = WriteMems(List(b5489), x5166).name("b5495").ctrl(x5178) // FIFOEnq(x5144,x5176,x5174)
    val b5496 = WriteMems(List(b5490), x5162).name("b5496").ctrl(x5178) // FIFOEnq(x5144,x5176,x5174)
    val b5497 = WriteMems(List(b5491), x5164).name("b5497").ctrl(x5178) // FIFOEnq(x5144,x5176,x5174)
    val x5179 = FringeContainer(x5023,b5487,b5488,b5492).name("x5179").ctrl(x5209) // FringeDenseLoad(x5023,x5143,x5145)
    val x5208 = UnitController(style=SeqPipe, level=OuterControl).name("x5208").ctrl(x5209) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val x5180 = Reg(init=0).name("x5180").ctrl(x5208) // x5180 = RegNew(Const(0))
    val x5181 = Reg(init=0).name("x5181").ctrl(x5208) // x5181 = RegNew(Const(0))
    val x5182 = Reg(init=0).name("x5182").ctrl(x5208) // x5182 = RegNew(Const(0))
    val x5191 = UnitController(style=SeqPipe, level=InnerControl).name("x5191").ctrl(x5208) // UnitPipe(List(b2870, b2791),Block(x5190))
    val x5183 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5183").ctrl(x5191) // And(b2870,b2791)
    val b5498 = ReadMem(b5489).name("b5498").ctrl(x5191) // FIFODeq(x5144,x5183)
    val b5499 = ReadMem(b5490).name("b5499").ctrl(x5191) // FIFODeq(x5144,x5183)
    val b5500 = ReadMem(b5491).name("b5500").ctrl(x5191) // FIFODeq(x5144,x5183)
    val x5185 = b5499 // x5185 = FieldApply(x5184,start)
    val x5186 = WriteMems(List(x5180), x5185).name("x5186").ctrl(x5191) // RegWrite(x5180,x5185,x5183)
    val x5187 = b5500 // x5187 = FieldApply(x5184,end)
    val x5188 = WriteMems(List(x5181), x5187).name("x5188").ctrl(x5191) // RegWrite(x5181,x5187,x5183)
    val x5189 = b5498 // x5189 = FieldApply(x5184,size)
    val x5190 = WriteMems(List(x5182), x5189).name("x5190").ctrl(x5191) // RegWrite(x5182,x5189,x5183)
    val x5192 = ReadMem(x5182).name("x5192").ctrl(x5208) // RegRead(x5182)
    val x5193 = Counter(min=Const(0).ctrl(x5208), max=x5192, step=Const(1).ctrl(x5208), par=1).name("x5193").ctrl(x5208) // CounterNew(Const(0),x5192,Const(1),Const(1))
    val x5194 = CounterChain(List(x5193)).name("x5194").ctrl(x5208) // CounterChainNew(List(x5193))
    val x5207 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5194).name("x5207").ctrl(x5208) // UnrolledForeach(List(b2870, b2791),x5194,Block(Const(())),List(List(b2938)),List(List(b2939)))
    val b2938 = CounterIter(x5193, None).ctrl(x5207).name("b2938")
    val b2939 = DummyOp().ctrl(x5207).name("b2939")
    val x5195 = ReadMem(x5180).name("x5195").ctrl(x5207) // RegRead(x5180)
    val x5196 = OpDef(op=FixLeq, inputs=List(x5195, b2938)).name("x5196").ctrl(x5207) // FixLeq(x5195,b2938)
    val x5197 = ReadMem(x5181).name("x5197").ctrl(x5207) // RegRead(x5181)
    val x5198 = OpDef(op=FixLt, inputs=List(b2938, x5197)).name("x5198").ctrl(x5207) // FixLt(b2938,x5197)
    val x5199 = OpDef(op=BitAnd, inputs=List(x5196, x5198)).name("x5199").ctrl(x5207) // And(x5196,x5198)
    val x5200 = OpDef(op=FixSub, inputs=List(b2938, x5195)).name("x5200").ctrl(x5207) // FixSub(b2938,x5195)
    val x5201 = OpDef(op=BitAnd, inputs=List(b2939, b2870)).name("x5201").ctrl(x5207) // And(b2939,b2870)
    val x5202 = OpDef(op=BitAnd, inputs=List(x5201, b2791)).name("x5202").ctrl(x5207) // And(x5201,b2791)
    val b5501 = ReadMem(b5492).name("b5501").ctrl(x5207) // ParStreamRead(x5145,List(x5202))
    val b5502 = b5501 // x5204 = VectorApply(x5203,0)
    val x5205 = OpDef(op=BitAnd, inputs=List(x5199, x5202)).name("x5205").ctrl(x5207) // And(x5199,x5202)
    val x5206 = StoreBanks(List(x5124_d0_b0), List(x5200), b5502).name("x5206").ctrl(x5207) // ParSRAMStore(x5124,List(List(x5200)),List(x5204),List(x5205))
    val x5276 = UnitController(style=StreamPipe, level=OuterControl).name("x5276").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val b5503 = StreamOut(field="offset").name("b5503").ctrl(x5276) // x5210 = StreamOutNew(BurstCmdBus)
    val b5504 = StreamOut(field="size").name("b5504").ctrl(x5276) // x5210 = StreamOutNew(BurstCmdBus)
    val b5505 = FIFO(size=16).name("b5505").ctrl(x5276) // x5211 = FIFONew(Const(16))
    val b5506 = FIFO(size=16).name("b5506").ctrl(x5276) // x5211 = FIFONew(Const(16))
    val b5507 = FIFO(size=16).name("b5507").ctrl(x5276) // x5211 = FIFONew(Const(16))
    val b5508 = StreamIn(field="data").name("b5508").ctrl(x5276) // x5212 = StreamInNew(BurstDataBus())
    val x5245 = UnitController(style=SeqPipe, level=InnerControl).name("x5245").ctrl(x5276) // UnitPipe(List(b2870, b2791),Block(x5244))
    val x5213 = ReadMem(x5127_d1).name("x5213").ctrl(x5245) // RegRead(x5127)
    val x5214 = OpDef(op=FixConvert, inputs=List(x5213)).name("x5214").ctrl(x5245) // FixConvert(x5213,TRUE,_32,_0)
    val x5215 = OpDef(op=FixSla, inputs=List(x5214, Const(2).ctrl(x5245))).name("x5215").ctrl(x5245) // FixLsh(x5214,Const(2))
    val x5216 = x5215 // x5216 = DataAsBits(x5215)
    val x5217 = OpDef(op=BitAnd, inputs=List(x5216, Const(31))).name("x5217").ctrl(x5245) // VectorSlice(x5216,5,0) strMask=00000000000000000000000000011111
    val x5218 = x5217 // x5218 = BitsAsData(x5217,FixPt[TRUE,_32,_0])
    val x5219 = ReadMem(x5136_d0).name("x5219").ctrl(x5245) // RegRead(x5136)
    val x5220 = OpDef(op=FixSla, inputs=List(x5219, Const(2).ctrl(x5245))).name("x5220").ctrl(x5245) // FixLsh(x5219,Const(2))
    val x5221 = OpDef(op=FixSub, inputs=List(x5215, x5218)).name("x5221").ctrl(x5245) // FixSub(x5215,x5218)
    val x5222 = OpDef(op=FixAdd, inputs=List(x5215, x5220)).name("x5222").ctrl(x5245) // FixAdd(x5215,x5220)
    val x5223 = x5222 // x5223 = DataAsBits(x5222)
    val x5224 = OpDef(op=BitAnd, inputs=List(x5223, Const(31))).name("x5224").ctrl(x5245) // VectorSlice(x5223,5,0) strMask=00000000000000000000000000011111
    val x5225 = x5224 // x5225 = BitsAsData(x5224,FixPt[TRUE,_32,_0])
    val x5226 = OpDef(op=FixEql, inputs=List(x5225, Const(0).ctrl(x5245))).name("x5226").ctrl(x5245) // FixEql(x5225,Const(0))
    val x5227 = OpDef(op=FixSub, inputs=List(Const(64).ctrl(x5245), x5225)).name("x5227").ctrl(x5245) // FixSub(Const(64),x5225)
    val x5228 = OpDef(op=MuxOp, inputs=List(x5226, Const(0).ctrl(x5245), x5227)).name("x5228").ctrl(x5245) // Mux(x5226,Const(0),x5227)
    val x5229 = OpDef(op=FixSra, inputs=List(x5218, Const(2).ctrl(x5245))).name("x5229").ctrl(x5245) // FixRsh(x5218,Const(2))
    val x5230 = OpDef(op=FixSra, inputs=List(x5228, Const(2).ctrl(x5245))).name("x5230").ctrl(x5245) // FixRsh(x5228,Const(2))
    val x5231 = OpDef(op=FixAdd, inputs=List(x5229, x5219)).name("x5231").ctrl(x5245) // FixAdd(x5229,x5219)
    val x5232 = OpDef(op=FixAdd, inputs=List(x5219, x5229)).name("x5232").ctrl(x5245) // FixAdd(x5219,x5229)
    val x5233 = OpDef(op=FixAdd, inputs=List(x5232, x5230)).name("x5233").ctrl(x5245) // FixAdd(x5232,x5230)
    val x5234 = OpDef(op=FixAdd, inputs=List(x5220, x5218)).name("x5234").ctrl(x5245) // FixAdd(x5220,x5218)
    val x5235 = OpDef(op=FixAdd, inputs=List(x5234, x5228)).name("x5235").ctrl(x5245) // FixAdd(x5234,x5228)
    val x5236 = OpDef(op=FixConvert, inputs=List(x5221)).name("x5236").ctrl(x5245) // FixConvert(x5221,TRUE,_64,_0)
    val x5237 = top.dramAddress(x5022).name("x5237").ctrl(x5245) // GetDRAMAddress(x5022)
    val x5238 = OpDef(op=FixAdd, inputs=List(x5236, x5237)).name("x5238").ctrl(x5245) // FixAdd(x5236,x5237)
    val x5239 = OpDef(op=FixConvert, inputs=List(x5238)).name("x5239").ctrl(x5245) // FixConvert(x5238,TRUE,_64,_0)
    // x5240 = SimpleStruct(ArrayBuffer((offset,x5239), (size,x5235), (isLoad,Const(true))))
    val x5241 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5241").ctrl(x5245) // And(b2870,b2791)
    val b5509 = WriteMems(List(b5503), x5239).name("b5509").ctrl(x5245) // StreamWrite(x5210,x5240,x5241)
    val b5510 = WriteMems(List(b5504), x5235).name("b5510").ctrl(x5245) // StreamWrite(x5210,x5240,x5241)
    // x5243 = SimpleStruct(ArrayBuffer((size,x5233), (start,x5229), (end,x5231)))
    val b5511 = WriteMems(List(b5505), x5233).name("b5511").ctrl(x5245) // FIFOEnq(x5211,x5243,x5241)
    val b5512 = WriteMems(List(b5506), x5229).name("b5512").ctrl(x5245) // FIFOEnq(x5211,x5243,x5241)
    val b5513 = WriteMems(List(b5507), x5231).name("b5513").ctrl(x5245) // FIFOEnq(x5211,x5243,x5241)
    val x5246 = FringeContainer(x5022,b5503,b5504,b5508).name("x5246").ctrl(x5276) // FringeDenseLoad(x5022,x5210,x5212)
    val x5275 = UnitController(style=SeqPipe, level=OuterControl).name("x5275").ctrl(x5276) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val x5247 = Reg(init=0).name("x5247").ctrl(x5275) // x5247 = RegNew(Const(0))
    val x5248 = Reg(init=0).name("x5248").ctrl(x5275) // x5248 = RegNew(Const(0))
    val x5249 = Reg(init=0).name("x5249").ctrl(x5275) // x5249 = RegNew(Const(0))
    val x5258 = UnitController(style=SeqPipe, level=InnerControl).name("x5258").ctrl(x5275) // UnitPipe(List(b2870, b2791),Block(x5257))
    val x5250 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5250").ctrl(x5258) // And(b2870,b2791)
    val b5514 = ReadMem(b5505).name("b5514").ctrl(x5258) // FIFODeq(x5211,x5250)
    val b5515 = ReadMem(b5506).name("b5515").ctrl(x5258) // FIFODeq(x5211,x5250)
    val b5516 = ReadMem(b5507).name("b5516").ctrl(x5258) // FIFODeq(x5211,x5250)
    val x5252 = b5515 // x5252 = FieldApply(x5251,start)
    val x5253 = WriteMems(List(x5247), x5252).name("x5253").ctrl(x5258) // RegWrite(x5247,x5252,x5250)
    val x5254 = b5516 // x5254 = FieldApply(x5251,end)
    val x5255 = WriteMems(List(x5248), x5254).name("x5255").ctrl(x5258) // RegWrite(x5248,x5254,x5250)
    val x5256 = b5514 // x5256 = FieldApply(x5251,size)
    val x5257 = WriteMems(List(x5249), x5256).name("x5257").ctrl(x5258) // RegWrite(x5249,x5256,x5250)
    val x5259 = ReadMem(x5249).name("x5259").ctrl(x5275) // RegRead(x5249)
    val x5260 = Counter(min=Const(0).ctrl(x5275), max=x5259, step=Const(1).ctrl(x5275), par=1).name("x5260").ctrl(x5275) // CounterNew(Const(0),x5259,Const(1),Const(1))
    val x5261 = CounterChain(List(x5260)).name("x5261").ctrl(x5275) // CounterChainNew(List(x5260))
    val x5274 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5261).name("x5274").ctrl(x5275) // UnrolledForeach(List(b2870, b2791),x5261,Block(Const(())),List(List(b3003)),List(List(b3004)))
    val b3003 = CounterIter(x5260, None).ctrl(x5274).name("b3003")
    val b3004 = DummyOp().ctrl(x5274).name("b3004")
    val x5262 = ReadMem(x5247).name("x5262").ctrl(x5274) // RegRead(x5247)
    val x5263 = OpDef(op=FixLeq, inputs=List(x5262, b3003)).name("x5263").ctrl(x5274) // FixLeq(x5262,b3003)
    val x5264 = ReadMem(x5248).name("x5264").ctrl(x5274) // RegRead(x5248)
    val x5265 = OpDef(op=FixLt, inputs=List(b3003, x5264)).name("x5265").ctrl(x5274) // FixLt(b3003,x5264)
    val x5266 = OpDef(op=BitAnd, inputs=List(x5263, x5265)).name("x5266").ctrl(x5274) // And(x5263,x5265)
    val x5267 = OpDef(op=FixSub, inputs=List(b3003, x5262)).name("x5267").ctrl(x5274) // FixSub(b3003,x5262)
    val x5268 = OpDef(op=BitAnd, inputs=List(b3004, b2870)).name("x5268").ctrl(x5274) // And(b3004,b2870)
    val x5269 = OpDef(op=BitAnd, inputs=List(x5268, b2791)).name("x5269").ctrl(x5274) // And(x5268,b2791)
    val b5517 = ReadMem(b5508).name("b5517").ctrl(x5274) // ParStreamRead(x5212,List(x5269))
    val b5518 = b5517 // x5271 = VectorApply(x5270,0)
    val x5272 = OpDef(op=BitAnd, inputs=List(x5266, x5269)).name("x5272").ctrl(x5274) // And(x5266,x5269)
    val x5273 = StoreBanks(List(x5125_d0_b0), List(x5267), b5518).name("x5273").ctrl(x5274) // ParSRAMStore(x5125,List(List(x5267)),List(x5271),List(x5272))
    val x5277_d0 = Reg(init=0).name("x5277_d0").ctrl(x5362) // x5277 = RegNew(Const(0))
    val x5277_d1 = Reg(init=0).name("x5277_d1").ctrl(x5362) // x5277 = RegNew(Const(0))
    val x5277_d2 = Reg(init=0).name("x5277_d2").ctrl(x5362) // x5277 = RegNew(Const(0))
    val x5277_d3 = Reg(init=0).name("x5277_d3").ctrl(x5362) // x5277 = RegNew(Const(0))
    val x5283 = UnitController(style=SeqPipe, level=InnerControl).name("x5283").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val x5278 = ReadMem(x5128_d0).name("x5278").ctrl(x5283) // RegRead(x5128)
    val x5279 = ReadMem(x5127_d0).name("x5279").ctrl(x5283) // RegRead(x5127)
    val x5280 = OpDef(op=FixSub, inputs=List(x5278, x5279)).name("x5280").ctrl(x5283) // FixSub(x5278,x5279)
    val x5281 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5281").ctrl(x5283) // And(b2870,b2791)
    val x5282 = WriteMems(List(x5277_d0, x5277_d1, x5277_d2, x5277_d3), x5280).name("x5282").ctrl(x5283) // RegWrite(x5277,x5280,x5281)
    val x5284_d0 = Reg(init=0).name("x5284_d0").ctrl(x5362) // x5284 = RegNew(Const(0))
    val x5284_d1 = Reg(init=0).name("x5284_d1").ctrl(x5362) // x5284 = RegNew(Const(0))
    val x5297 = UnitController(style=SeqPipe, level=InnerControl).name("x5297").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(x5296))
    val x5285 = ReadMem(x5277_d3).name("x5285").ctrl(x5297) // RegRead(x5277)
    val x5286 = OpDef(op=FixLt, inputs=List(x5285, Const(16).ctrl(x5297))).name("x5286").ctrl(x5297) // FixLt(x5285,Const(16))
    val x5287 = x5285 // x5287 = DataAsBits(x5285)
    val x5288 = OpDef(op=BitAnd, inputs=List(x5287, Const(7))).name("x5288").ctrl(x5297) // VectorSlice(x5287,3,0) strMask=00000000000000000000000000000111
    val x5289 = x5288 // x5289 = BitsAsData(x5288,FixPt[TRUE,_32,_0])
    val x5290 = OpDef(op=FixEql, inputs=List(x5289, Const(0).ctrl(x5297))).name("x5290").ctrl(x5297) // FixEql(x5289,Const(0))
    val x5291 = OpDef(op=FixAdd, inputs=List(x5285, Const(16).ctrl(x5297))).name("x5291").ctrl(x5297) // FixAdd(x5285,Const(16))
    val x5292 = OpDef(op=FixSub, inputs=List(x5291, x5289)).name("x5292").ctrl(x5297) // FixSub(x5291,x5289)
    val x5293 = OpDef(op=MuxOp, inputs=List(x5290, x5285, x5292)).name("x5293").ctrl(x5297) // Mux(x5290,x5285,x5292)
    val x5294 = OpDef(op=MuxOp, inputs=List(x5286, Const(16).ctrl(x5297), x5293)).name("x5294").ctrl(x5297) // Mux(x5286,Const(16),x5293)
    val x5295 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5295").ctrl(x5297) // And(b2870,b2791)
    val x5296 = WriteMems(List(x5284_d0, x5284_d1), x5294).name("x5296").ctrl(x5297) // RegWrite(x5284,x5294,x5295)
    val x5330 = UnitController(style=StreamPipe, level=OuterControl).name("x5330").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val b5519 = StreamOut(field="addr").name("b5519").ctrl(x5330) // x5298 = StreamOutNew(GatherAddrBus)
    val b5520 = StreamIn(field="data").name("b5520").ctrl(x5330) // x5299 = StreamInNew(GatherDataBus())
    val x5300 = ReadMem(x5284_d1).name("x5300").ctrl(x5330) // RegRead(x5284)
    val x5301 = Counter(min=Const(0).ctrl(x5330), max=x5300, step=Const(1).ctrl(x5330), par=1).name("x5301").ctrl(x5330) // CounterNew(Const(0),x5300,Const(1),Const(1))
    val x5302 = CounterChain(List(x5301)).name("x5302").ctrl(x5330) // CounterChainNew(List(x5301))
    val x5316 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5302).name("x5316").ctrl(x5330) // UnrolledForeach(List(b2870, b2791),x5302,Block(Const(())),List(List(b3045)),List(List(b3046)))
    val b3045 = CounterIter(x5301, None).ctrl(x5316).name("b3045")
    val b3046 = DummyOp().ctrl(x5316).name("b3046")
    val x5303 = ReadMem(x5277_d2).name("x5303").ctrl(x5316) // RegRead(x5277)
    val x5304 = OpDef(op=FixLeq, inputs=List(x5303, b3045)).name("x5304").ctrl(x5316) // FixLeq(x5303,b3045)
    val x5305 = top.dramAddress(x5025).name("x5305").ctrl(x5316) // GetDRAMAddress(x5025)
    val x5306 = OpDef(op=FixConvert, inputs=List(x5305)).name("x5306").ctrl(x5316) // FixConvert(x5305,TRUE,_64,_0)
    val x5307 = OpDef(op=BitAnd, inputs=List(b3046, b2870)).name("x5307").ctrl(x5316) // And(b3046,b2870)
    val x5308 = OpDef(op=BitAnd, inputs=List(x5307, b2791)).name("x5308").ctrl(x5316) // And(x5307,b2791)
    val x5309 = LoadBanks(List(x5124_d0_b0), List(b3045)).name("x5309").ctrl(x5316) // ParSRAMLoad(x5124,List(List(b3045)),List(x5308))
    val x5310 = x5309 // x5310 = VectorApply(x5309,0)
    val x5311 = OpDef(op=FixSla, inputs=List(x5310, Const(2).ctrl(x5316))).name("x5311").ctrl(x5316) // FixLsh(x5310,Const(2))
    val x5312 = OpDef(op=FixConvert, inputs=List(x5311)).name("x5312").ctrl(x5316) // FixConvert(x5311,TRUE,_64,_0)
    val x5313 = OpDef(op=FixAdd, inputs=List(x5312, x5305)).name("x5313").ctrl(x5316) // FixAdd(x5312,x5305)
    val x5314 = OpDef(op=MuxOp, inputs=List(x5304, x5306, x5313)).name("x5314").ctrl(x5316) // Mux(x5304,x5306,x5313)
    val b5521 = WriteMems(List(b5519), x5314).name("b5521").ctrl(x5316) // ParStreamWrite(x5298,List(x5314),List(x5308))
    val x5317 = FringeContainer(x5025,b5519,b5520).name("x5317").ctrl(x5330) // FringeSparseLoad(x5025,x5298,x5299)
    val x5318 = ReadMem(x5284_d0).name("x5318").ctrl(x5330) // RegRead(x5284)
    val x5319 = Counter(min=Const(0).ctrl(x5330), max=x5318, step=Const(1).ctrl(x5330), par=1).name("x5319").ctrl(x5330) // CounterNew(Const(0),x5318,Const(1),Const(1))
    val x5320 = CounterChain(List(x5319)).name("x5320").ctrl(x5330) // CounterChainNew(List(x5319))
    val x5329 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5320).name("x5329").ctrl(x5330) // UnrolledForeach(List(b2870, b2791),x5320,Block(Const(())),List(List(b3065)),List(List(b3066)))
    val b3065 = CounterIter(x5319, None).ctrl(x5329).name("b3065")
    val b3066 = DummyOp().ctrl(x5329).name("b3066")
    val x5321 = OpDef(op=BitAnd, inputs=List(b3066, b2870)).name("x5321").ctrl(x5329) // And(b3066,b2870)
    val x5322 = OpDef(op=BitAnd, inputs=List(x5321, b2791)).name("x5322").ctrl(x5329) // And(x5321,b2791)
    val b5522 = ReadMem(b5520).name("b5522").ctrl(x5329) // ParStreamRead(x5299,List(x5322))
    val b5523 = b5522 // x5324 = VectorApply(x5323,0)
    val x5325 = ReadMem(x5277_d1).name("x5325").ctrl(x5329) // RegRead(x5277)
    val x5326 = OpDef(op=FixLt, inputs=List(b3065, x5325)).name("x5326").ctrl(x5329) // FixLt(b3065,x5325)
    val x5327 = OpDef(op=BitAnd, inputs=List(x5326, x5322)).name("x5327").ctrl(x5329) // And(x5326,x5322)
    val x5328 = StoreBanks(List(x5126_d0_b0), List(b3065), b5523).name("x5328").ctrl(x5329) // ParSRAMStore(x5126,List(List(b3065)),List(x5324),List(x5327))
    val x5333_d0 = Reg(init=0.0).name("x5333_d0").ctrl(x5362) // x5333 = RegNew(Const(0))
    val x5333_d1 = Reg(init=0.0).name("x5333_d1").ctrl(x5362) // x5333 = RegNew(Const(0))
    val x5341 = UnitController(style=SeqPipe, level=InnerControl).name("x5341").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val x5334 = OpDef(op=FixAdd, inputs=List(b2869, b2790)).name("x5334").ctrl(x5341) // FixAdd(b2869,b2790)
    val x5337 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5337").ctrl(x5341) // And(b2870,b2791)
    val x5342 = ReadMem(x5277_d0).name("x5342").ctrl(x5362) // RegRead(x5277)
    val x5343 = Counter(min=Const(0).ctrl(x5362), max=x5342, step=Const(1).ctrl(x5362), par=2).name("x5343").ctrl(x5362) // CounterNew(Const(0),x5342,Const(1),Const(2))
    val x5344 = CounterChain(List(x5343)).name("x5344").ctrl(x5362) // CounterChainNew(List(x5343))
    val x5357 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5344).name("x5357").ctrl(x5362) // UnrolledReduce(List(b2870, b2791),x5344,x5333,Block((x5333) => Const(())),List(List(b3091)),List(List(b3092)))
    val b3091 = CounterIter(x5343, None).ctrl(x5357).name("b3091")
    val b3092 = DummyOp().ctrl(x5357).name("b3092")
    val x5345 = OpDef(op=BitAnd, inputs=List(b3092, b2870)).name("x5345").ctrl(x5357) // And(b3092,b2870)
    val x5346 = OpDef(op=BitAnd, inputs=List(x5345, b2791)).name("x5346").ctrl(x5357) // And(x5345,b2791)
    val x5347 = LoadBanks(List(x5125_d0_b0), List(b3091)).name("x5347").ctrl(x5357) // ParSRAMLoad(x5125,List(List(b3091)),List(x5346))
    val x5348 = x5347 // x5348 = VectorApply(x5347,0)
    val x5349 = LoadBanks(List(x5126_d0_b0), List(b3091)).name("x5349").ctrl(x5357) // ParSRAMLoad(x5126,List(List(b3091)),List(x5346))
    val x5350 = x5349 // x5350 = VectorApply(x5349,0)
    val x5351 = OpDef(op=FixMul, inputs=List(x5348, x5350)).name("x5351").ctrl(x5357) // FixMul(x5348,x5350)
    val x5352 = ReadMem(x5333_d1).name("x5352").ctrl(x5357) // RegRead(x5333)
    val x5353 = OpDef(op=FixEql, inputs=List(b3091, Const(0).ctrl(x5357))).name("x5353").ctrl(x5357) // FixEql(b3091,Const(0))
    val x5354 = OpDef(op=FixAdd, inputs=List(x5351, x5352)).name("x5354").ctrl(x5357) // FixAdd(x5351,x5352)
    val x5355 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5355").ctrl(x5357) // And(b2870,b2791)
    val x5356 = WriteMems(List(x5333_d0, x5333_d1), x5354).name("x5356").ctrl(x5357) // RegWrite(x5333,x5354,x5355)
    val x5361 = UnitController(style=SeqPipe, level=InnerControl).name("x5361").ctrl(x5362) // UnitPipe(List(b2870, b2791),Block(Const(())))
    val x5358 = ReadMem(x5333_d0).name("x5358").ctrl(x5361) // RegRead(x5333)
    val x5359 = OpDef(op=BitAnd, inputs=List(b2870, b2791)).name("x5359").ctrl(x5361) // And(b2870,b2791)
    val x5360 = StoreBanks(List(x5046_d0_b0), List(b2869), x5358).name("x5360").ctrl(x5361) // SRAMStore(x5046,ArrayBuffer(Const(494)),List(b2869),Const(0),x5358,x5359)
    val x5363 = Reg(init=0).name("x5363").ctrl(x5433) // x5363 = RegNew(Const(0))
    val x5364 = Reg(init=0).name("x5364").ctrl(x5433) // x5364 = RegNew(Const(0))
    val x5371 = UnitController(style=SeqPipe, level=InnerControl).name("x5371").ctrl(x5433) // UnitPipe(List(b2791),Block(Const(())))
    val x5365 = OpDef(op=FixMul, inputs=List(b2790, Const(494).ctrl(x5371))).name("x5365").ctrl(x5371) // FixMul(b2790,Const(494))
    val x5366 = ReadMem(x5048).name("x5366").ctrl(x5371) // RegRead(x5048)
    val x5367 = OpDef(op=FixMul, inputs=List(x5366, Const(494).ctrl(x5371))).name("x5367").ctrl(x5371) // FixMul(x5366,Const(494))
    val x5368 = OpDef(op=FixSub, inputs=List(x5367, x5365)).name("x5368").ctrl(x5371) // FixSub(x5367,x5365)
    val x5369 = WriteMems(List(x5363), x5365).name("x5369").ctrl(x5371) // RegWrite(x5363,x5365,b2791)
    val x5370 = WriteMems(List(x5364), x5368).name("x5370").ctrl(x5371) // RegWrite(x5364,x5368,b2791)
    val x5432 = UnitController(style=StreamPipe, level=OuterControl).name("x5432").ctrl(x5433) // UnitPipe(List(b2791),Block(Const(())))
    val b5524 = StreamOut(field="offset").name("b5524").ctrl(x5432) // x5372 = StreamOutNew(BurstCmdBus)
    val b5525 = StreamOut(field="size").name("b5525").ctrl(x5432) // x5372 = StreamOutNew(BurstCmdBus)
    val b5526 = StreamOut(field="data").name("b5526").ctrl(x5432) // x5373 = StreamOutNew(BurstFullDataBus())
    val b5527 = StreamIn(field="ack").name("b5527").ctrl(x5432) // x5374 = StreamInNew(BurstAckBus)
    val x5428 = UnitController(style=SeqPipe, level=OuterControl).name("x5428").ctrl(x5432) // UnitPipe(List(b2791),Block(Const(())))
    val x5375 = Reg(init=0).name("x5375").ctrl(x5428) // x5375 = RegNew(Const(0))
    val x5376 = Reg(init=0).name("x5376").ctrl(x5428) // x5376 = RegNew(Const(0))
    val x5377 = Reg(init=0).name("x5377").ctrl(x5428) // x5377 = RegNew(Const(0))
    val x5410 = UnitController(style=SeqPipe, level=InnerControl).name("x5410").ctrl(x5428) // UnitPipe(List(b2791),Block(x5409))
    val x5378 = ReadMem(x5363).name("x5378").ctrl(x5410) // RegRead(x5363)
    val x5379 = OpDef(op=FixConvert, inputs=List(x5378)).name("x5379").ctrl(x5410) // FixConvert(x5378,TRUE,_32,_0)
    val x5380 = OpDef(op=FixSla, inputs=List(x5379, Const(2).ctrl(x5410))).name("x5380").ctrl(x5410) // FixLsh(x5379,Const(2))
    val x5381 = x5380 // x5381 = DataAsBits(x5380)
    val x5382 = OpDef(op=BitAnd, inputs=List(x5381, Const(31))).name("x5382").ctrl(x5410) // VectorSlice(x5381,5,0) strMask=00000000000000000000000000011111
    val x5383 = x5382 // x5383 = BitsAsData(x5382,FixPt[TRUE,_32,_0])
    val x5384 = ReadMem(x5364).name("x5384").ctrl(x5410) // RegRead(x5364)
    val x5385 = OpDef(op=FixSla, inputs=List(x5384, Const(2).ctrl(x5410))).name("x5385").ctrl(x5410) // FixLsh(x5384,Const(2))
    val x5386 = OpDef(op=FixSub, inputs=List(x5380, x5383)).name("x5386").ctrl(x5410) // FixSub(x5380,x5383)
    val x5387 = OpDef(op=FixAdd, inputs=List(x5380, x5385)).name("x5387").ctrl(x5410) // FixAdd(x5380,x5385)
    val x5388 = x5387 // x5388 = DataAsBits(x5387)
    val x5389 = OpDef(op=BitAnd, inputs=List(x5388, Const(31))).name("x5389").ctrl(x5410) // VectorSlice(x5388,5,0) strMask=00000000000000000000000000011111
    val x5390 = x5389 // x5390 = BitsAsData(x5389,FixPt[TRUE,_32,_0])
    val x5391 = OpDef(op=FixEql, inputs=List(x5390, Const(0).ctrl(x5410))).name("x5391").ctrl(x5410) // FixEql(x5390,Const(0))
    val x5392 = OpDef(op=FixSub, inputs=List(Const(64).ctrl(x5410), x5390)).name("x5392").ctrl(x5410) // FixSub(Const(64),x5390)
    val x5393 = OpDef(op=MuxOp, inputs=List(x5391, Const(0).ctrl(x5410), x5392)).name("x5393").ctrl(x5410) // Mux(x5391,Const(0),x5392)
    val x5394 = OpDef(op=FixSra, inputs=List(x5383, Const(2).ctrl(x5410))).name("x5394").ctrl(x5410) // FixRsh(x5383,Const(2))
    val x5395 = OpDef(op=FixSra, inputs=List(x5393, Const(2).ctrl(x5410))).name("x5395").ctrl(x5410) // FixRsh(x5393,Const(2))
    val x5396 = OpDef(op=FixAdd, inputs=List(x5394, x5384)).name("x5396").ctrl(x5410) // FixAdd(x5394,x5384)
    val x5397 = OpDef(op=FixAdd, inputs=List(x5384, x5394)).name("x5397").ctrl(x5410) // FixAdd(x5384,x5394)
    val x5398 = OpDef(op=FixAdd, inputs=List(x5397, x5395)).name("x5398").ctrl(x5410) // FixAdd(x5397,x5395)
    val x5399 = OpDef(op=FixAdd, inputs=List(x5385, x5383)).name("x5399").ctrl(x5410) // FixAdd(x5385,x5383)
    val x5400 = OpDef(op=FixAdd, inputs=List(x5399, x5393)).name("x5400").ctrl(x5410) // FixAdd(x5399,x5393)
    val x5401 = OpDef(op=FixConvert, inputs=List(x5386)).name("x5401").ctrl(x5410) // FixConvert(x5386,TRUE,_64,_0)
    val x5402 = top.dramAddress(x5026).name("x5402").ctrl(x5410) // GetDRAMAddress(x5026)
    val x5403 = OpDef(op=FixAdd, inputs=List(x5401, x5402)).name("x5403").ctrl(x5410) // FixAdd(x5401,x5402)
    val x5404 = OpDef(op=FixConvert, inputs=List(x5403)).name("x5404").ctrl(x5410) // FixConvert(x5403,TRUE,_64,_0)
    // x5405 = SimpleStruct(ArrayBuffer((offset,x5404), (size,x5400), (isLoad,Const(false))))
    val b5528 = WriteMems(List(b5524), x5404).name("b5528").ctrl(x5410) // StreamWrite(x5372,x5405,b2791)
    val b5529 = WriteMems(List(b5525), x5400).name("b5529").ctrl(x5410) // StreamWrite(x5372,x5405,b2791)
    val x5407 = WriteMems(List(x5375), x5394).name("x5407").ctrl(x5410) // RegWrite(x5375,x5394,b2791)
    val x5408 = WriteMems(List(x5376), x5396).name("x5408").ctrl(x5410) // RegWrite(x5376,x5396,b2791)
    val x5409 = WriteMems(List(x5377), x5398).name("x5409").ctrl(x5410) // RegWrite(x5377,x5398,b2791)
    val x5411 = ReadMem(x5377).name("x5411").ctrl(x5428) // RegRead(x5377)
    val x5412 = Counter(min=Const(0).ctrl(x5428), max=x5411, step=Const(1).ctrl(x5428), par=1).name("x5412").ctrl(x5428) // CounterNew(Const(0),x5411,Const(1),Const(1))
    val x5413 = CounterChain(List(x5412)).name("x5413").ctrl(x5428) // CounterChainNew(List(x5412))
    val x5427 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5413).name("x5427").ctrl(x5428) // UnrolledForeach(List(b2791),x5413,Block(Const(())),List(List(b3158)),List(List(b3159)))
    val b3158 = CounterIter(x5412, None).ctrl(x5427).name("b3158")
    val b3159 = DummyOp().ctrl(x5427).name("b3159")
    val x5414 = ReadMem(x5375).name("x5414").ctrl(x5427) // RegRead(x5375)
    val x5415 = OpDef(op=FixLeq, inputs=List(x5414, b3158)).name("x5415").ctrl(x5427) // FixLeq(x5414,b3158)
    val x5416 = ReadMem(x5376).name("x5416").ctrl(x5427) // RegRead(x5376)
    val x5417 = OpDef(op=FixLt, inputs=List(b3158, x5416)).name("x5417").ctrl(x5427) // FixLt(b3158,x5416)
    val x5418 = OpDef(op=BitAnd, inputs=List(x5415, x5417)).name("x5418").ctrl(x5427) // And(x5415,x5417)
    val x5419 = OpDef(op=FixSub, inputs=List(b3158, x5414)).name("x5419").ctrl(x5427) // FixSub(b3158,x5414)
    val x5420 = OpDef(op=BitAnd, inputs=List(b3159, b2791)).name("x5420").ctrl(x5427) // And(b3159,b2791)
    val x5421 = OpDef(op=BitAnd, inputs=List(x5418, x5420)).name("x5421").ctrl(x5427) // And(x5418,x5420)
    val x5422 = LoadBanks(List(x5046_d0_b0), List(x5419)).name("x5422").ctrl(x5427) // ParSRAMLoad(x5046,List(List(x5419)),List(x5421))
    val x5423 = x5422 // x5423 = VectorApply(x5422,0)
    val x5424 = OpDef(op=MuxOp, inputs=List(x5418, x5423, Const(0).ctrl(x5427))).name("x5424").ctrl(x5427) // Mux(x5418,x5423,Const(0))
    // x5425 = SimpleStruct(ArrayBuffer((_1,x5424), (_2,x5418)))
    val b5530 = WriteMems(List(b5526), x5424).name("b5530").ctrl(x5427) // ParStreamWrite(x5373,List(x5425),List(x5420))
    val x5429 = FringeContainer(x5026,b5524,b5525,b5526,b5527).name("x5429").ctrl(x5432) // FringeDenseStore(x5026,x5372,x5373,x5374)
    val x5431 = UnitController(style=SeqPipe, level=InnerControl).name("x5431").ctrl(x5432) // UnitPipe(List(b2791),Block(Const(())))
    val b5531 = ReadMem(b5527).name("b5531").ctrl(x5431) // StreamRead(x5374,b2791)
    
  }
}
