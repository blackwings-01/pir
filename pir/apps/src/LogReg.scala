import pir._
import pir.node._
import arch._
import prism.enums._

object LogReg extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x3379 = ArgIn(init=0).name("x3379").ctrl(top) // ArgInNew(Const(0))
    boundOf(x3379) = 1
    val x3380 = ArgIn(init=0).name("x3380").ctrl(top) // ArgInNew(Const(0))
    boundOf(x3380) = 1024
    val x3383 = ReadMem(x3380).name("x3383").ctrl(top) // RegRead(x3380)
    val x3384 = DRAM().name("x3384").ctrl(top) // x3384 = DRAMNew(ArrayBuffer(x3383, Const(192)),Const(0.0))
    val x3385 = ReadMem(x3380).name("x3385").ctrl(top) // RegRead(x3380)
    val x3386 = DRAM().name("x3386").ctrl(top) // x3386 = DRAMNew(ArrayBuffer(x3385),Const(0.0))
    val x3387 = DRAM().name("x3387").ctrl(top) // x3387 = DRAMNew(ArrayBuffer(Const(192)),Const(0.0))
    val x3568 = UnitController(style=SeqPipe, level=OuterControl).name("x3568").ctrl(top) // Hwblock(Block(Const(())),false)
    val x3393_d0_b0 = SRAM(size=12, banking=Strided(banks=16, stride=1)).name("x3393_d0_b0").ctrl(x3568) // x3393 = SRAMNew(ArrayBuffer(Const(192)))
    isAccum(x3393_d0_b0) = false
    bufferDepthOf(x3393_d0_b0) = 1
    val x3393_d1_b0 = SRAM(size=192, banking=NoBanking()).name("x3393_d1_b0").ctrl(x3568) // x3393 = SRAMNew(ArrayBuffer(Const(192)))
    isAccum(x3393_d1_b0) = true
    bufferDepthOf(x3393_d1_b0) = 1
    val x3393_d2_b0 = SRAM(size=12, banking=Strided(banks=16, stride=1)).name("x3393_d2_b0").ctrl(x3568) // x3393 = SRAMNew(ArrayBuffer(Const(192)))
    isAccum(x3393_d2_b0) = false
    bufferDepthOf(x3393_d2_b0) = 1
    val x3394 = ReadMem(x3379).name("x3394").ctrl(x3568) // RegRead(x3379)
    val x3395 = Counter(min=Const(0), max=x3394, step=Const(1), par=1).name("x3395").ctrl(x3568) // CounterNew(Const(0),x3394,Const(1),Const(1))
    val x3396 = CounterChain(List(x3395)).name("x3396").ctrl(x3568) // CounterChainNew(List(x3395))
    val x3544 = LoopController(style=SeqPipe, level=OuterControl, cchain=x3396).name("x3544").ctrl(x3568) // UnrolledForeach(List(Const(true)),x3396,Block(Const(())),List(List(b2094)),List(List(b2095)))
    val b2094 = CounterIter(x3395, Some(0)).ctrl(x3544).name("b2094")
    val b2095 = DummyOp().ctrl(x3544).name("b2095")
    val x3397 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x3397").ctrl(x3544) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x3398 = CounterChain(List(x3397)).name("x3398").ctrl(x3544) // CounterChainNew(List(x3397))
    val x3543 = LoopController(style=SeqPipe, level=OuterControl, cchain=x3398).name("x3543").ctrl(x3544) // UnrolledReduce(List(b2095),x3398,x3393,Block((x3393) => Const(())),List(List(b2100)),List(List(b2101)))
    val b2100 = CounterIter(x3397, Some(0)).ctrl(x3543).name("b2100")
    val b2101 = DummyOp().ctrl(x3543).name("b2101")
    val x3399_d0_b0 = SRAM(size=192, banking=NoBanking()).name("x3399_d0_b0").ctrl(x3543) // x3399 = SRAMNew(ArrayBuffer(Const(192)))
    isAccum(x3399_d0_b0) = false
    bufferDepthOf(x3399_d0_b0) = 1
    val x3399_d1_b0 = SRAM(size=192, banking=NoBanking()).name("x3399_d1_b0").ctrl(x3543) // x3399 = SRAMNew(ArrayBuffer(Const(192)))
    isAccum(x3399_d1_b0) = true
    bufferDepthOf(x3399_d1_b0) = 1
    val x3400 = ReadMem(x3380).name("x3400").ctrl(x3543) // RegRead(x3380)
    val x3401 = Counter(min=Const(0), max=x3400, step=Const(64), par=1).name("x3401").ctrl(x3543) // CounterNew(Const(0),x3400,Const(64),Const(1))
    val x3402 = CounterChain(List(x3401)).name("x3402").ctrl(x3543) // CounterChainNew(List(x3401))
    val x3528 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3402).name("x3528").ctrl(x3543) // UnrolledForeach(List(b2101, b2095),x3402,Block(Const(())),List(List(b2106)),List(List(b2107)))
    val b2106 = CounterIter(x3401, Some(0)).ctrl(x3528).name("b2106")
    val b2107 = DummyOp().ctrl(x3528).name("b2107")
    val x3403_d0_b0 = SRAM(size=768, banking=Strided(banks=16, stride=1)).name("x3403_d0_b0").ctrl(x3528) // x3403 = SRAMNew(ArrayBuffer(Const(64), Const(192)))
    isAccum(x3403_d0_b0) = false
    bufferDepthOf(x3403_d0_b0) = 2
    val x3403_d1_b0 = SRAM(size=768, banking=Strided(banks=16, stride=1)).name("x3403_d1_b0").ctrl(x3528) // x3403 = SRAMNew(ArrayBuffer(Const(64), Const(192)))
    isAccum(x3403_d1_b0) = false
    bufferDepthOf(x3403_d1_b0) = 2
    val x3404_d0_b0 = SRAM(size=4, banking=Strided(banks=16, stride=1)).name("x3404_d0_b0").ctrl(x3528) // x3404 = SRAMNew(ArrayBuffer(Const(64)))
    isAccum(x3404_d0_b0) = false
    bufferDepthOf(x3404_d0_b0) = 2
    val x3406 = UnitController(style=SeqPipe, level=InnerControl).name("x3406").ctrl(x3528) // UnitPipe(List(b2107, b2101, b2095),Block(Const(())))
    val x3405 = OpDef(op=FixAdd, inputs=List(b2106, Const(64))).name("x3405").ctrl(x3406) // FixAdd(b2106,Const(64))
    val x3407 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x3407").ctrl(x3528) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x3408 = CounterChain(List(x3407)).name("x3408").ctrl(x3528) // CounterChainNew(List(x3407))
    val x3438 = LoopController(style=StreamPipe, level=OuterControl, cchain=x3408).name("x3438").ctrl(x3528) // UnrolledForeach(List(b2107, b2101, b2095),x3408,Block(Const(())),List(List(b2114)),List(List(b2115)))
    val b2114 = CounterIter(x3407, Some(0)).ctrl(x3438).name("b2114")
    val b2115 = DummyOp().ctrl(x3438).name("b2115")
    val b3629 = StreamOut(field="offset").name("b3629").ctrl(x3438) // x3409 = StreamOutNew(BurstCmdBus)
    val b3630 = StreamOut(field="size").name("b3630").ctrl(x3438) // x3409 = StreamOutNew(BurstCmdBus)
    val x3410 = StreamIn(field="data").name("x3410").ctrl(x3438) // x3410 = StreamInNew(BurstDataBus())
    val x3426 = UnitController(style=SeqPipe, level=InnerControl).name("x3426").ctrl(x3438) // UnitPipe(List(b2115, b2107, b2101, b2095),Block(x3425))
    val x3411 = OpDef(op=FixAdd, inputs=List(b2106, b2114)).name("x3411").ctrl(x3426) // FixAdd(b2106,b2114)
    val x3412 = x3411 // FixConvert(x3411,TRUE,_32,_0)
    val x3413 = OpDef(op=FixMul, inputs=List(x3412, Const(192))).name("x3413").ctrl(x3426) // FixMul(x3412,Const(192))
    val x3414 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x3415 = OpDef(op=FixAdd, inputs=List(x3413, x3414)).name("x3415").ctrl(x3426) // FixAdd(x3413,x3414)
    val x3416 = OpDef(op=FixSla, inputs=List(x3415, Const(2))).name("x3416").ctrl(x3426) // FixLsh(x3415,Const(2))
    val x3417 = x3416 // FixConvert(x3416,TRUE,_64,_0)
    val x3418 = DramAddress(x3384).name("x3418").ctrl(x3426) // GetDRAMAddress(x3384)
    val x3419 = OpDef(op=FixAdd, inputs=List(x3417, x3418)).name("x3419").ctrl(x3426) // FixAdd(x3417,x3418)
    val x3421_x3420 = x3419 // FixConvert(x3419,TRUE,_64,_0)
    // x3421 = SimpleStruct(ArrayBuffer((offset,x3420), (size,Const(768)), (isLoad,Const(true))))
    val x3422 = OpDef(op=BitAnd, inputs=List(b2115, b2107)).name("x3422").ctrl(x3426) // And(b2115,b2107)
    val x3423 = OpDef(op=BitAnd, inputs=List(b2101, b2095)).name("x3423").ctrl(x3426) // And(b2101,b2095)
    val x3424 = OpDef(op=BitAnd, inputs=List(x3422, x3423)).name("x3424").ctrl(x3426) // And(x3422,x3423)
    val b3631_b3629 = WriteMem(b3629, x3421_x3420).name("b3631_b3629").ctrl(x3426) // StreamWrite(x3409,x3421,x3424)
    val b3632_b3630 = WriteMem(b3630, Const(768)).name("b3632_b3630").ctrl(x3426) // StreamWrite(x3409,x3421,x3424)
    val x3427 = FringeDenseLoad(dram=List(x3384), cmdStream=List(b3629, b3630), dataStream=List(x3410)).name("x3427").ctrl(x3438) // FringeDenseLoad(x3384,x3409,x3410)
    val x3428 = Counter(min=Const(0), max=Const(192), step=Const(1), par=16).name("x3428").ctrl(x3438) // CounterNew(Const(0),Const(192),Const(1),Const(16))
    val x3429 = CounterChain(List(x3428)).name("x3429").ctrl(x3438) // CounterChainNew(List(x3428))
    val x3437 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3429).name("x3437").ctrl(x3438) // UnrolledForeach(List(b2115, b2107, b2101, b2095),x3429,Block(Const(())),List(List(b2137)),List(List(b2138)))
    val b2137 = CounterIter(x3428, None).ctrl(x3437).name("b2137")
    val b2138 = DummyOp().ctrl(x3437).name("b2138")
    val x3430 = OpDef(op=BitAnd, inputs=List(b2138, b2115)).name("x3430").ctrl(x3437) // And(b2138,b2115)
    val x3431 = OpDef(op=BitAnd, inputs=List(b2107, b2101)).name("x3431").ctrl(x3437) // And(b2107,b2101)
    val x3432 = OpDef(op=BitAnd, inputs=List(x3430, x3431)).name("x3432").ctrl(x3437) // And(x3430,x3431)
    val x3433 = OpDef(op=BitAnd, inputs=List(x3432, b2095)).name("x3433").ctrl(x3437) // And(x3432,b2095)
    val x3434_x3434 = ReadMem(x3410).name("x3434").ctrl(x3437) // ParStreamRead(x3410,List(x3433))
    val x3435_x3435 = x3434_x3434 // x3435 = VectorApply(x3434,0)
    val x3436 = StoreBanks(List(x3403_d0_b0, x3403_d1_b0), List(b2114, b2137), x3435_x3435).name("x3436").ctrl(x3437) // ParSRAMStore(x3403,List(List(b2114, b2137)),List(x3435),List(x3433))
    val x3462 = UnitController(style=StreamPipe, level=OuterControl).name("x3462").ctrl(x3528) // UnitPipe(List(b2107, b2101, b2095),Block(Const(())))
    val b3633 = StreamOut(field="offset").name("b3633").ctrl(x3462) // x3439 = StreamOutNew(BurstCmdBus)
    val b3634 = StreamOut(field="size").name("b3634").ctrl(x3462) // x3439 = StreamOutNew(BurstCmdBus)
    val x3440 = StreamIn(field="data").name("x3440").ctrl(x3462) // x3440 = StreamInNew(BurstDataBus())
    val x3451 = UnitController(style=SeqPipe, level=InnerControl).name("x3451").ctrl(x3462) // UnitPipe(List(b2107, b2101, b2095),Block(x3450))
    val x3441 = b2106 // FixConvert(b2106,TRUE,_32,_0)
    val x3442 = OpDef(op=FixSla, inputs=List(x3441, Const(2))).name("x3442").ctrl(x3451) // FixLsh(x3441,Const(2))
    val x3443 = x3442 // FixConvert(x3442,TRUE,_64,_0)
    val x3444 = DramAddress(x3386).name("x3444").ctrl(x3451) // GetDRAMAddress(x3386)
    val x3445 = OpDef(op=FixAdd, inputs=List(x3443, x3444)).name("x3445").ctrl(x3451) // FixAdd(x3443,x3444)
    val x3447_x3446 = x3445 // FixConvert(x3445,TRUE,_64,_0)
    // x3447 = SimpleStruct(ArrayBuffer((offset,x3446), (size,Const(256)), (isLoad,Const(true))))
    val x3448 = OpDef(op=BitAnd, inputs=List(b2107, b2101)).name("x3448").ctrl(x3451) // And(b2107,b2101)
    val x3449 = OpDef(op=BitAnd, inputs=List(x3448, b2095)).name("x3449").ctrl(x3451) // And(x3448,b2095)
    val b3635_b3633 = WriteMem(b3633, x3447_x3446).name("b3635_b3633").ctrl(x3451) // StreamWrite(x3439,x3447,x3449)
    val b3636_b3634 = WriteMem(b3634, Const(256)).name("b3636_b3634").ctrl(x3451) // StreamWrite(x3439,x3447,x3449)
    val x3452 = FringeDenseLoad(dram=List(x3386), cmdStream=List(b3633, b3634), dataStream=List(x3440)).name("x3452").ctrl(x3462) // FringeDenseLoad(x3386,x3439,x3440)
    val x3453 = Counter(min=Const(0), max=Const(64), step=Const(1), par=16).name("x3453").ctrl(x3462) // CounterNew(Const(0),Const(64),Const(1),Const(16))
    val x3454 = CounterChain(List(x3453)).name("x3454").ctrl(x3462) // CounterChainNew(List(x3453))
    val x3461 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3454).name("x3461").ctrl(x3462) // UnrolledForeach(List(b2107, b2101, b2095),x3454,Block(Const(())),List(List(b2164)),List(List(b2165)))
    val b2164 = CounterIter(x3453, None).ctrl(x3461).name("b2164")
    val b2165 = DummyOp().ctrl(x3461).name("b2165")
    val x3455 = OpDef(op=BitAnd, inputs=List(b2165, b2107)).name("x3455").ctrl(x3461) // And(b2165,b2107)
    val x3456 = OpDef(op=BitAnd, inputs=List(b2101, b2095)).name("x3456").ctrl(x3461) // And(b2101,b2095)
    val x3457 = OpDef(op=BitAnd, inputs=List(x3455, x3456)).name("x3457").ctrl(x3461) // And(x3455,x3456)
    val x3458_x3458 = ReadMem(x3440).name("x3458").ctrl(x3461) // ParStreamRead(x3440,List(x3457))
    val x3459_x3459 = x3458_x3458 // x3459 = VectorApply(x3458,0)
    val x3460 = StoreBanks(List(x3404_d0_b0), List(b2164), x3459_x3459).name("x3460").ctrl(x3461) // ParSRAMStore(x3404,List(List(b2164)),List(x3459),List(x3457))
    val x3463 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x3463").ctrl(x3528) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x3464 = CounterChain(List(x3463)).name("x3464").ctrl(x3528) // CounterChainNew(List(x3463))
    val x3527 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3464).name("x3527").ctrl(x3528) // UnrolledReduce(List(b2107, b2101, b2095),x3464,x3399,Block((x3399) => Const(())),List(List(b2179)),List(List(b2180)))
    val b2179 = CounterIter(x3463, Some(0)).ctrl(x3527).name("b2179")
    val b2180 = DummyOp().ctrl(x3527).name("b2180")
    val x3465 = Reg(init=Some(0.0)).name("x3465").ctrl(x3527) // x3465 = RegNew(Const(0.0))
    isAccum(x3465) = false
    bufferDepthOf(x3465) = 2
    val x3466_d0_b0 = SRAM(size=12, banking=Strided(banks=16, stride=1)).name("x3466_d0_b0").ctrl(x3527) // x3466 = SRAMNew(ArrayBuffer(Const(192)))
    isAccum(x3466_d0_b0) = false
    bufferDepthOf(x3466_d0_b0) = 2
    val x3467_d0 = Reg(init=Some(0.0)).name("x3467_d0").ctrl(x3527) // x3467 = RegNew(Const(0.0))
    isAccum(x3467_d0) = false
    bufferDepthOf(x3467_d0) = 2
    val x3467_d1 = Reg(init=Some(0.0)).name("x3467_d1").ctrl(x3527) // x3467 = RegNew(Const(0.0))
    isAccum(x3467_d1) = true
    bufferDepthOf(x3467_d1) = 1
    val x3468 = Counter(min=Const(0), max=Const(192), step=Const(1), par=16).name("x3468").ctrl(x3527) // CounterNew(Const(0),Const(192),Const(1),Const(16))
    val x3469 = CounterChain(List(x3468)).name("x3469").ctrl(x3527) // CounterChainNew(List(x3468))
    val x3486 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3469).name("x3486").ctrl(x3527) // UnrolledReduce(List(b2180, b2107, b2101, b2095),x3469,x3467,Block((x3467) => Const(())),List(List(b2186)),List(List(b2187)))
    val b2186 = CounterIter(x3468, None).ctrl(x3486).name("b2186")
    val b2187 = DummyOp().ctrl(x3486).name("b2187")
    val x3470 = OpDef(op=BitAnd, inputs=List(b2187, b2180)).name("x3470").ctrl(x3486) // And(b2187,b2180)
    val x3471 = OpDef(op=BitAnd, inputs=List(b2107, b2101)).name("x3471").ctrl(x3486) // And(b2107,b2101)
    val x3472 = OpDef(op=BitAnd, inputs=List(x3470, x3471)).name("x3472").ctrl(x3486) // And(x3470,x3471)
    val x3473 = OpDef(op=BitAnd, inputs=List(x3472, b2095)).name("x3473").ctrl(x3486) // And(x3472,b2095)
    val x3474 = LoadBanks(List(x3403_d1_b0), List(b2179, b2186)).name("x3474").ctrl(x3486) // ParSRAMLoad(x3403,List(List(b2179, b2186)),List(x3473))
    val x3475 = x3474 // x3475 = VectorApply(x3474,0)
    val x3476 = LoadBanks(List(x3393_d2_b0), List(b2186)).name("x3476").ctrl(x3486) // ParSRAMLoad(x3393,List(List(b2186)),List(x3473))
    val x3477 = x3476 // x3477 = VectorApply(x3476,0)
    val x3478 = OpDef(op=FltMul, inputs=List(x3475, x3477)).name("x3478").ctrl(x3486) // FltMul(x3475,x3477)
    val x3479 = ReadMem(x3467_d1).name("x3479").ctrl(x3486) // RegRead(x3467)
    val x3480 = OpDef(op=FixEql, inputs=List(b2186, Const(0))).name("x3480").ctrl(x3486) // FixEql(b2186,Const(0))
    val x3481 = ReduceAccumOp(op=FltAdd, input=x3478, accum=x3479).name("x3481").ctrl(x3486) // FltAdd(x3478,x3479)
    val x3482 = OpDef(op=BitAnd, inputs=List(b2180, b2107)).name("x3482").ctrl(x3486) // And(b2180,b2107)
    val x3483 = OpDef(op=BitAnd, inputs=List(b2101, b2095)).name("x3483").ctrl(x3486) // And(b2101,b2095)
    val x3484 = OpDef(op=BitAnd, inputs=List(x3482, x3483)).name("x3484").ctrl(x3486) // And(x3482,x3483)
    val x3485_x3467_d0 = WriteMem(x3467_d0, x3481).name("x3485_x3467_d0").ctrl(x3486) // RegWrite(x3467,x3481,x3484)
    val x3485_x3467_d1 = WriteMem(x3467_d1, x3481).name("x3485_x3467_d1").ctrl(x3486) // RegWrite(x3467,x3481,x3484)
    val x3498 = UnitController(style=SeqPipe, level=InnerControl).name("x3498").ctrl(x3527) // UnitPipe(List(b2180, b2107, b2101, b2095),Block(x3497))
    val x3487 = OpDef(op=BitAnd, inputs=List(b2180, b2107)).name("x3487").ctrl(x3498) // And(b2180,b2107)
    val x3488 = OpDef(op=BitAnd, inputs=List(b2101, b2095)).name("x3488").ctrl(x3498) // And(b2101,b2095)
    val x3489 = OpDef(op=BitAnd, inputs=List(x3487, x3488)).name("x3489").ctrl(x3498) // And(x3487,x3488)
    val x3490 = LoadBanks(List(x3404_d0_b0), List(b2179)).name("x3490").ctrl(x3498) // SRAMLoad(x3404,ArrayBuffer(Const(64)),List(b2179),Const(0),x3489)
    val x3491 = ReadMem(x3467_d0).name("x3491").ctrl(x3498) // RegRead(x3467)
    val x3492 = OpDef(op=FltNeg, inputs=List(x3491)).name("x3492").ctrl(x3498) // FltNeg(x3491)
    val x3493 = OpDef(op=FltExp, inputs=List(x3492)).name("x3493").ctrl(x3498) // FltExp(x3492)
    val x3494 = OpDef(op=FltAdd, inputs=List(x3493, Const(1.0))).name("x3494").ctrl(x3498) // FltAdd(x3493,Const(1))
    val x3495 = OpDef(op=FltDiv, inputs=List(Const(1.0), x3494)).name("x3495").ctrl(x3498) // FltDiv(Const(1),x3494)
    val x3496 = OpDef(op=FltSub, inputs=List(x3490, x3495)).name("x3496").ctrl(x3498) // FltSub(x3490,x3495)
    val x3497_x3465 = WriteMem(x3465, x3496).name("x3497_x3465").ctrl(x3498) // RegWrite(x3465,x3496,x3489)
    val x3499 = Counter(min=Const(0), max=Const(192), step=Const(1), par=16).name("x3499").ctrl(x3527) // CounterNew(Const(0),Const(192),Const(1),Const(16))
    val x3500 = CounterChain(List(x3499)).name("x3500").ctrl(x3527) // CounterChainNew(List(x3499))
    val x3510 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3500).name("x3510").ctrl(x3527) // UnrolledForeach(List(b2180, b2107, b2101, b2095),x3500,Block(Const(())),List(List(b2219)),List(List(b2220)))
    val b2219 = CounterIter(x3499, None).ctrl(x3510).name("b2219")
    val b2220 = DummyOp().ctrl(x3510).name("b2220")
    val x3501 = OpDef(op=BitAnd, inputs=List(b2220, b2180)).name("x3501").ctrl(x3510) // And(b2220,b2180)
    val x3502 = OpDef(op=BitAnd, inputs=List(b2107, b2101)).name("x3502").ctrl(x3510) // And(b2107,b2101)
    val x3503 = OpDef(op=BitAnd, inputs=List(x3501, x3502)).name("x3503").ctrl(x3510) // And(x3501,x3502)
    val x3504 = OpDef(op=BitAnd, inputs=List(x3503, b2095)).name("x3504").ctrl(x3510) // And(x3503,b2095)
    val x3505 = LoadBanks(List(x3403_d0_b0), List(b2179, b2219)).name("x3505").ctrl(x3510) // ParSRAMLoad(x3403,List(List(b2179, b2219)),List(x3504))
    val x3506 = x3505 // x3506 = VectorApply(x3505,0)
    val x3507 = ReadMem(x3465).name("x3507").ctrl(x3510) // RegRead(x3465)
    val x3508 = OpDef(op=FltSub, inputs=List(x3506, x3507)).name("x3508").ctrl(x3510) // FltSub(x3506,x3507)
    val x3509 = StoreBanks(List(x3466_d0_b0), List(b2219), x3508).name("x3509").ctrl(x3510) // ParSRAMStore(x3466,List(List(b2219)),List(x3508),List(x3504))
    val x3511 = Counter(min=Const(0), max=Const(192), step=Const(1), par=1).name("x3511").ctrl(x3527) // CounterNew(Const(0),Const(192),Const(1),Const(1))
    val x3512 = CounterChain(List(x3511)).name("x3512").ctrl(x3527) // CounterChainNew(ArrayBuffer(x3511))
    val x3526 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3512).name("x3526").ctrl(x3527) // UnrolledForeach(List(),x3512,Block(Const(())),ArrayBuffer(List(b2231)),ArrayBuffer(List(b2232)))
    val b2231 = CounterIter(x3511, None).ctrl(x3526).name("b2231")
    val b2232 = DummyOp().ctrl(x3526).name("b2232")
    val x3513 = OpDef(op=BitAnd, inputs=List(b2232, b2107)).name("x3513").ctrl(x3526) // And(b2232,b2107)
    val x3514 = OpDef(op=BitAnd, inputs=List(b2101, b2095)).name("x3514").ctrl(x3526) // And(b2101,b2095)
    val x3515 = OpDef(op=BitAnd, inputs=List(x3513, x3514)).name("x3515").ctrl(x3526) // And(x3513,x3514)
    val x3516 = LoadBanks(List(x3466_d0_b0), List(b2231)).name("x3516").ctrl(x3526) // ParSRAMLoad(x3466,List(ArrayBuffer(b2231)),List(x3515))
    val x3517 = x3516 // x3517 = VectorApply(x3516,0)
    val x3518 = LoadBanks(List(x3399_d1_b0), List(b2231)).name("x3518").ctrl(x3526) // ParSRAMLoad(x3399,List(ArrayBuffer(b2231)),List(x3515))
    val x3519 = x3518 // x3519 = VectorApply(x3518,0)
    val x3520 = OpDef(op=BitAnd, inputs=List(b2180, b2107)).name("x3520").ctrl(x3526) // And(b2180,b2107)
    val x3521 = OpDef(op=BitAnd, inputs=List(x3520, x3514)).name("x3521").ctrl(x3526) // And(x3520,x3514)
    val x3522 = OpDef(op=BitAnd, inputs=List(x3521, x3515)).name("x3522").ctrl(x3526) // And(x3521,x3515)
    val x3523 = OpDef(op=FixEql, inputs=List(b2179, Const(0))).name("x3523").ctrl(x3526) // FixEql(b2179,Const(0))
    val x3524 = ReduceAccumOp(op=FltAdd, input=x3517, accum=x3519).name("x3524").ctrl(x3526) // FltAdd(x3517,x3519)
    val x3525 = StoreBanks(List(x3399_d0_b0, x3399_d1_b0), List(b2231), x3524).name("x3525").ctrl(x3526) // ParSRAMStore(x3399,List(ArrayBuffer(b2231)),List(x3524),List(x3515))
    val x3529 = Counter(min=Const(0), max=Const(192), step=Const(1), par=1).name("x3529").ctrl(x3543) // CounterNew(Const(0),Const(192),Const(1),Const(1))
    val x3530 = CounterChain(List(x3529)).name("x3530").ctrl(x3543) // CounterChainNew(ArrayBuffer(x3529))
    val x3542 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3530).name("x3542").ctrl(x3543) // UnrolledForeach(List(),x3530,Block(Const(())),ArrayBuffer(List(b2249)),ArrayBuffer(List(b2250)))
    val b2249 = CounterIter(x3529, None).ctrl(x3542).name("b2249")
    val b2250 = DummyOp().ctrl(x3542).name("b2250")
    val x3531 = OpDef(op=BitAnd, inputs=List(b2250, b2095)).name("x3531").ctrl(x3542) // And(b2250,b2095)
    val x3532 = LoadBanks(List(x3399_d0_b0), List(b2249)).name("x3532").ctrl(x3542) // ParSRAMLoad(x3399,List(ArrayBuffer(b2249)),List(x3531))
    val x3533 = x3532 // x3533 = VectorApply(x3532,0)
    val x3534 = LoadBanks(List(x3393_d1_b0), List(b2249)).name("x3534").ctrl(x3542) // ParSRAMLoad(x3393,List(ArrayBuffer(b2249)),List(x3531))
    val x3535 = x3534 // x3535 = VectorApply(x3534,0)
    val x3536 = OpDef(op=BitAnd, inputs=List(b2101, b2095)).name("x3536").ctrl(x3542) // And(b2101,b2095)
    val x3537 = OpDef(op=BitAnd, inputs=List(x3536, x3531)).name("x3537").ctrl(x3542) // And(x3536,x3531)
    val x3538 = OpDef(op=FixEql, inputs=List(b2100, Const(0))).name("x3538").ctrl(x3542) // FixEql(b2100,Const(0))
    val x3539 = ReduceAccumOp(op=FltMul, input=Const(1.0), accum=x3535).name("x3539").ctrl(x3542) // FltMul(x3535,Const(1))
    val x3540 = OpDef(op=FltAdd, inputs=List(x3533, x3539)).name("x3540").ctrl(x3542) // FltAdd(x3533,x3539)
    val x3541 = StoreBanks(List(x3393_d0_b0, x3393_d1_b0, x3393_d2_b0), List(b2249), x3540).name("x3541").ctrl(x3542) // ParSRAMStore(x3393,List(ArrayBuffer(b2249)),List(x3540),List(x3531))
    val x3567 = UnitController(style=StreamPipe, level=OuterControl).name("x3567").ctrl(x3568) // UnitPipe(List(Const(true)),Block(Const(())))
    val b3637 = StreamOut(field="offset").name("b3637").ctrl(x3567) // x3545 = StreamOutNew(BurstCmdBus)
    val b3638 = StreamOut(field="size").name("b3638").ctrl(x3567) // x3545 = StreamOutNew(BurstCmdBus)
    val x3546 = StreamOut(field="data").name("x3546").ctrl(x3567) // x3546 = StreamOutNew(BurstFullDataBus())
    val x3547 = StreamIn(field="ack").name("x3547").ctrl(x3567) // x3547 = StreamInNew(BurstAckBus)
    val x3556 = UnitController(style=SeqPipe, level=InnerControl).name("x3556").ctrl(x3567) // UnitPipe(List(Const(true)),Block(x3555))
    val x3548 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x3549 = OpDef(op=FixSla, inputs=List(x3548, Const(2))).name("x3549").ctrl(x3556) // FixLsh(x3548,Const(2))
    val x3550 = x3549 // FixConvert(x3549,TRUE,_64,_0)
    val x3551 = DramAddress(x3387).name("x3551").ctrl(x3556) // GetDRAMAddress(x3387)
    val x3552 = OpDef(op=FixAdd, inputs=List(x3550, x3551)).name("x3552").ctrl(x3556) // FixAdd(x3550,x3551)
    val x3554_x3553 = x3552 // FixConvert(x3552,TRUE,_64,_0)
    // x3554 = SimpleStruct(ArrayBuffer((offset,x3553), (size,Const(768)), (isLoad,Const(false))))
    val b3639_b3637 = WriteMem(b3637, x3554_x3553).name("b3639_b3637").ctrl(x3556) // StreamWrite(x3545,x3554,Const(true))
    val b3640_b3638 = WriteMem(b3638, Const(768)).name("b3640_b3638").ctrl(x3556) // StreamWrite(x3545,x3554,Const(true))
    val x3557 = Counter(min=Const(0), max=Const(192), step=Const(1), par=16).name("x3557").ctrl(x3567) // CounterNew(Const(0),Const(192),Const(1),Const(16))
    val x3558 = CounterChain(List(x3557)).name("x3558").ctrl(x3567) // CounterChainNew(List(x3557))
    val x3563 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3558).name("x3563").ctrl(x3567) // UnrolledForeach(List(Const(true)),x3558,Block(Const(())),List(List(b2279)),List(List(b2280)))
    val b2279 = CounterIter(x3557, None).ctrl(x3563).name("b2279")
    val b2280 = DummyOp().ctrl(x3563).name("b2280")
    val x3559 = LoadBanks(List(x3393_d0_b0), List(b2279)).name("x3559").ctrl(x3563) // ParSRAMLoad(x3393,List(List(b2279)),List(b2280))
    val x3561_x3560 = x3559 // x3560 = VectorApply(x3559,0)
    // x3561 = SimpleStruct(ArrayBuffer((_1,x3560), (_2,Const(true))))
    val x3562_x3546 = WriteMem(x3546, x3561_x3560).name("x3562_x3546").ctrl(x3563) // ParStreamWrite(x3546,List(x3561),List(b2280))
    val x3564 = FringeDenseStore(dram=List(x3387), cmdStream=List(b3637, b3638), dataStream=List(x3546), ackStream=List(x3547)).name("x3564").ctrl(x3567) // FringeDenseStore(x3387,x3545,x3546,x3547)
    val x3566 = UnitController(style=SeqPipe, level=InnerControl).name("x3566").ctrl(x3567) // UnitPipe(List(Const(true)),Block(Const(())))
    val x3565_x3565 = ReadMem(x3547).name("x3565").ctrl(x3566) // StreamRead(x3547,Const(true))
    
  }
}
