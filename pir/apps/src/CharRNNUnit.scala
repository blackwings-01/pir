import pir._
import pir.node._
import arch._
import prism.enums._

object CharRNNUnit extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x9546 = DRAM().name("x9546").ctrl(top) // x9546 = DRAMNew(ArrayBuffer(Const(64), Const(512)),Const(0))
    val x9547 = DRAM().name("x9547").ctrl(top) // x9547 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x9548 = DRAM().name("x9548").ctrl(top) // x9548 = DRAMNew(ArrayBuffer(Const(128), Const(512)),Const(0))
    val x9549 = DRAM().name("x9549").ctrl(top) // x9549 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x9550 = DRAM().name("x9550").ctrl(top) // x9550 = DRAMNew(ArrayBuffer(Const(128), Const(512)),Const(0))
    val x9551 = DRAM().name("x9551").ctrl(top) // x9551 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x9552 = DRAM().name("x9552").ctrl(top) // x9552 = DRAMNew(ArrayBuffer(Const(128), Const(512)),Const(0))
    val x9553 = DRAM().name("x9553").ctrl(top) // x9553 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x9554 = DRAM().name("x9554").ctrl(top) // x9554 = DRAMNew(ArrayBuffer(Const(128), Const(64)),Const(0))
    val x9555 = DRAM().name("x9555").ctrl(top) // x9555 = DRAMNew(ArrayBuffer(Const(64)),Const(0))
    val x9556 = DRAM().name("x9556").ctrl(top) // x9556 = DRAMNew(ArrayBuffer(Const(1), Const(128)),Const(0))
    val x9557 = DRAM().name("x9557").ctrl(top) // x9557 = DRAMNew(ArrayBuffer(Const(1), Const(128)),Const(0))
    val x9558 = DRAM().name("x9558").ctrl(top) // x9558 = DRAMNew(ArrayBuffer(Const(3), Const(1), Const(64)),Const(0))
    val x9658 = DRAM().name("x9658").ctrl(top) // x9658 = DRAMNew(ArrayBuffer(Const(3), Const(64), Const(1)),Const(0))
    val x10333 = UnitController(style=SeqPipe, level=OuterControl).name("x10333").ctrl(top) // Hwblock(Block(Const(())),false)
    val x9659_d0_b0 = SRAM(size=32768, banking=Strided(banks=1, stride=512)).name("x9659_d0_b0").ctrl(x10333) // x9659 = SRAMNew(ArrayBuffer(Const(64), Const(512)))
    isAccum(x9659_d0_b0) = false
    bufferDepthOf(x9659_d0_b0) = 1
    val x9660_d0_b0 = SRAM(size=512, banking=Strided(banks=1, stride=1)).name("x9660_d0_b0").ctrl(x10333) // x9660 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x9660_d0_b0) = false
    bufferDepthOf(x9660_d0_b0) = 1
    val x9661_d0_b0 = SRAM(size=65536, banking=Strided(banks=1, stride=512)).name("x9661_d0_b0").ctrl(x10333) // x9661 = SRAMNew(ArrayBuffer(Const(128), Const(512)))
    isAccum(x9661_d0_b0) = false
    bufferDepthOf(x9661_d0_b0) = 1
    val x9662_d0_b0 = SRAM(size=512, banking=Strided(banks=1, stride=1)).name("x9662_d0_b0").ctrl(x10333) // x9662 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x9662_d0_b0) = false
    bufferDepthOf(x9662_d0_b0) = 1
    val x9663_d0_b0 = SRAM(size=65536, banking=Strided(banks=1, stride=512)).name("x9663_d0_b0").ctrl(x10333) // x9663 = SRAMNew(ArrayBuffer(Const(128), Const(512)))
    isAccum(x9663_d0_b0) = false
    bufferDepthOf(x9663_d0_b0) = 1
    val x9664_d0_b0 = SRAM(size=512, banking=Strided(banks=1, stride=1)).name("x9664_d0_b0").ctrl(x10333) // x9664 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x9664_d0_b0) = false
    bufferDepthOf(x9664_d0_b0) = 1
    val x9665_d0_b0 = SRAM(size=65536, banking=Strided(banks=1, stride=512)).name("x9665_d0_b0").ctrl(x10333) // x9665 = SRAMNew(ArrayBuffer(Const(128), Const(512)))
    isAccum(x9665_d0_b0) = false
    bufferDepthOf(x9665_d0_b0) = 1
    val x9666_d0_b0 = SRAM(size=512, banking=Strided(banks=1, stride=1)).name("x9666_d0_b0").ctrl(x10333) // x9666 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x9666_d0_b0) = false
    bufferDepthOf(x9666_d0_b0) = 1
    val x9667_d0_b0 = SRAM(size=8192, banking=Strided(banks=1, stride=64)).name("x9667_d0_b0").ctrl(x10333) // x9667 = SRAMNew(ArrayBuffer(Const(128), Const(64)))
    isAccum(x9667_d0_b0) = false
    bufferDepthOf(x9667_d0_b0) = 1
    val x9668_d0_b0 = SRAM(size=64, banking=Strided(banks=1, stride=1)).name("x9668_d0_b0").ctrl(x10333) // x9668 = SRAMNew(ArrayBuffer(Const(64)))
    isAccum(x9668_d0_b0) = false
    bufferDepthOf(x9668_d0_b0) = 1
    val x9669_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9669_d0_b0").ctrl(x10333) // x9669 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9669_d0_b0) = false
    bufferDepthOf(x9669_d0_b0) = 1
    val x9669_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9669_d1_b0").ctrl(x10333) // x9669 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9669_d1_b0) = true
    bufferDepthOf(x9669_d1_b0) = 1
    val x9669_d2_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9669_d2_b0").ctrl(x10333) // x9669 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9669_d2_b0) = false
    bufferDepthOf(x9669_d2_b0) = 1
    val x9669_d3_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9669_d3_b0").ctrl(x10333) // x9669 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9669_d3_b0) = true
    bufferDepthOf(x9669_d3_b0) = 1
    val x9670_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9670_d0_b0").ctrl(x10333) // x9670 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9670_d0_b0) = false
    bufferDepthOf(x9670_d0_b0) = 1
    val x9670_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9670_d1_b0").ctrl(x10333) // x9670 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9670_d1_b0) = false
    bufferDepthOf(x9670_d1_b0) = 2
    val x9670_d2_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9670_d2_b0").ctrl(x10333) // x9670 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9670_d2_b0) = false
    bufferDepthOf(x9670_d2_b0) = 1
    val x9670_d3_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9670_d3_b0").ctrl(x10333) // x9670 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9670_d3_b0) = false
    bufferDepthOf(x9670_d3_b0) = 1
    val x9671_d0_b0 = SRAM(size=64, banking=Strided(banks=1, stride=64)).name("x9671_d0_b0").ctrl(x10333) // x9671 = SRAMNew(ArrayBuffer(Const(1), Const(64)))
    isAccum(x9671_d0_b0) = false
    bufferDepthOf(x9671_d0_b0) = 1
    val x9671_d1_b0 = SRAM(size=64, banking=Strided(banks=1, stride=64)).name("x9671_d1_b0").ctrl(x10333) // x9671 = SRAMNew(ArrayBuffer(Const(1), Const(64)))
    isAccum(x9671_d1_b0) = false
    bufferDepthOf(x9671_d1_b0) = 1
    val x9672_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9672_d0_b0").ctrl(x10333) // x9672 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9672_d0_b0) = false
    bufferDepthOf(x9672_d0_b0) = 1
    val x9672_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9672_d1_b0").ctrl(x10333) // x9672 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9672_d1_b0) = false
    bufferDepthOf(x9672_d1_b0) = 1
    val x9673_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9673_d0_b0").ctrl(x10333) // x9673 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9673_d0_b0) = false
    bufferDepthOf(x9673_d0_b0) = 1
    val x9673_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9673_d1_b0").ctrl(x10333) // x9673 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9673_d1_b0) = false
    bufferDepthOf(x9673_d1_b0) = 1
    val x9674_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9674_d0_b0").ctrl(x10333) // x9674 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9674_d0_b0) = false
    bufferDepthOf(x9674_d0_b0) = 1
    val x9674_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9674_d1_b0").ctrl(x10333) // x9674 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9674_d1_b0) = false
    bufferDepthOf(x9674_d1_b0) = 1
    val x9675_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9675_d0_b0").ctrl(x10333) // x9675 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9675_d0_b0) = false
    bufferDepthOf(x9675_d0_b0) = 1
    val x9675_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9675_d1_b0").ctrl(x10333) // x9675 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9675_d1_b0) = false
    bufferDepthOf(x9675_d1_b0) = 1
    val x9676 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x9676").ctrl(x10333) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x9677 = CounterChain(List(x9676)).name("x9677").ctrl(x10333) // CounterChainNew(List(x9676))
    val x9700 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9677).name("x9700").ctrl(x10333) // UnrolledForeach(List(Const(true)),x9677,Block(Const(())),List(List(b5616)),List(List(b5617)))
    val b5616 = CounterIter(x9676, Some(0)).ctrl(x9700).name("b5616")
    val b5617 = Const(true).ctrl(x9700).name("b5617")
    val b10342 = StreamOut(field="offset").name("b10342").ctrl(x9700) // x9678 = StreamOutNew(BurstCmdBus)
    val b10343 = StreamOut(field="size").name("b10343").ctrl(x9700) // x9678 = StreamOutNew(BurstCmdBus)
    val x9679 = StreamIn(field="data").name("x9679").ctrl(x9700) // x9679 = StreamInNew(BurstDataBus())
    val x9691 = UnitController(style=SeqPipe, level=InnerControl).name("x9691").ctrl(x9700) // UnitPipe(List(b5617),Block(x9690))
    val x9680 = b5616 // FixConvert(b5616,TRUE,_32,_0)
    val x9681 = OpDef(op=FixSla, inputs=List(x9680, Const(9))).name("x9681").ctrl(x9691) // FixLsh(x9680,Const(9))
    val x9682 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9683 = OpDef(op=FixAdd, inputs=List(x9681, x9682)).name("x9683").ctrl(x9691) // FixAdd(x9681,x9682)
    val x9684 = OpDef(op=FixSla, inputs=List(x9683, Const(2))).name("x9684").ctrl(x9691) // FixLsh(x9683,Const(2))
    val x9685 = x9684 // FixConvert(x9684,TRUE,_64,_0)
    val x9686 = DramAddress(x9546).name("x9686").ctrl(x9691) // GetDRAMAddress(x9546)
    val x9687 = OpDef(op=FixAdd, inputs=List(x9685, x9686)).name("x9687").ctrl(x9691) // FixAdd(x9685,x9686)
    val x9689_x9688 = x9687 // FixConvert(x9687,TRUE,_64,_0)
    // x9689 = SimpleStruct(ArrayBuffer((offset,x9688), (size,Const(2048)), (isLoad,Const(true))))
    val b10344_b10342 = WriteMem(b10342, x9689_x9688).name("b10344_b10342").ctrl(x9691) // StreamWrite(x9678,x9689,b5617)
    val b10345_b10343 = WriteMem(b10343, Const(2048)).name("b10345_b10343").ctrl(x9691) // StreamWrite(x9678,x9689,b5617)
    val x9692 = FringeDenseLoad(dram=List(x9546), cmdStream=List(b10342, b10343), dataStream=List(x9679)).name("x9692").ctrl(x9700) // FringeDenseLoad(x9546,x9678,x9679)
    val x9693 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9693").ctrl(x9700) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9694 = CounterChain(List(x9693)).name("x9694").ctrl(x9700) // CounterChainNew(List(x9693))
    val x9699 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9694).name("x9699").ctrl(x9700) // UnrolledForeach(List(b5617),x9694,Block(Const(())),List(List(b5635)),List(List(b5636)))
    val b5635 = CounterIter(x9693, None).ctrl(x9699).name("b5635")
    val b5636 = Const(true).ctrl(x9699).name("b5636")
    val x9695 = OpDef(op=BitAnd, inputs=List(b5636, b5617)).name("x9695").ctrl(x9699) // And(b5636,b5617)
    val x9696_x9696 = ReadMem(x9679).name("x9696").ctrl(x9699) // ParStreamRead(x9679,List(x9695))
    val x9697_x9697 = x9696_x9696 // x9697 = VectorApply(x9696,0)
    val x9698 = StoreBanks(List(x9659_d0_b0), List(b5616, b5635), x9697_x9697).name("x9698").ctrl(x9699) // ParSRAMStore(x9659,List(List(b5616, b5635)),List(x9697),List(x9695))
    val x9719 = UnitController(style=StreamPipe, level=OuterControl).name("x9719").ctrl(x10333) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10346 = StreamOut(field="offset").name("b10346").ctrl(x9719) // x9701 = StreamOutNew(BurstCmdBus)
    val b10347 = StreamOut(field="size").name("b10347").ctrl(x9719) // x9701 = StreamOutNew(BurstCmdBus)
    val x9702 = StreamIn(field="data").name("x9702").ctrl(x9719) // x9702 = StreamInNew(BurstDataBus())
    val x9711 = UnitController(style=SeqPipe, level=InnerControl).name("x9711").ctrl(x9719) // UnitPipe(List(Const(true)),Block(x9710))
    val x9703 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9704 = OpDef(op=FixSla, inputs=List(x9703, Const(2))).name("x9704").ctrl(x9711) // FixLsh(x9703,Const(2))
    val x9705 = x9704 // FixConvert(x9704,TRUE,_64,_0)
    val x9706 = DramAddress(x9547).name("x9706").ctrl(x9711) // GetDRAMAddress(x9547)
    val x9707 = OpDef(op=FixAdd, inputs=List(x9705, x9706)).name("x9707").ctrl(x9711) // FixAdd(x9705,x9706)
    val x9709_x9708 = x9707 // FixConvert(x9707,TRUE,_64,_0)
    // x9709 = SimpleStruct(ArrayBuffer((offset,x9708), (size,Const(2048)), (isLoad,Const(true))))
    val b10348_b10346 = WriteMem(b10346, x9709_x9708).name("b10348_b10346").ctrl(x9711) // StreamWrite(x9701,x9709,Const(true))
    val b10349_b10347 = WriteMem(b10347, Const(2048)).name("b10349_b10347").ctrl(x9711) // StreamWrite(x9701,x9709,Const(true))
    val x9712 = FringeDenseLoad(dram=List(x9547), cmdStream=List(b10346, b10347), dataStream=List(x9702)).name("x9712").ctrl(x9719) // FringeDenseLoad(x9547,x9701,x9702)
    val x9713 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9713").ctrl(x9719) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9714 = CounterChain(List(x9713)).name("x9714").ctrl(x9719) // CounterChainNew(List(x9713))
    val x9718 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9714).name("x9718").ctrl(x9719) // UnrolledForeach(List(Const(true)),x9714,Block(Const(())),List(List(b5657)),List(List(b5658)))
    val b5657 = CounterIter(x9713, None).ctrl(x9718).name("b5657")
    val b5658 = Const(true).ctrl(x9718).name("b5658")
    val x9715_x9715 = ReadMem(x9702).name("x9715").ctrl(x9718) // ParStreamRead(x9702,List(b5658))
    val x9716_x9716 = x9715_x9715 // x9716 = VectorApply(x9715,0)
    val x9717 = StoreBanks(List(x9660_d0_b0), List(b5657), x9716_x9716).name("x9717").ctrl(x9718) // ParSRAMStore(x9660,List(List(b5657)),List(x9716),List(b5658))
    val x9720 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x9720").ctrl(x10333) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x9721 = CounterChain(List(x9720)).name("x9721").ctrl(x10333) // CounterChainNew(List(x9720))
    val x9744 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9721).name("x9744").ctrl(x10333) // UnrolledForeach(List(Const(true)),x9721,Block(Const(())),List(List(b5666)),List(List(b5667)))
    val b5666 = CounterIter(x9720, Some(0)).ctrl(x9744).name("b5666")
    val b5667 = Const(true).ctrl(x9744).name("b5667")
    val b10350 = StreamOut(field="offset").name("b10350").ctrl(x9744) // x9722 = StreamOutNew(BurstCmdBus)
    val b10351 = StreamOut(field="size").name("b10351").ctrl(x9744) // x9722 = StreamOutNew(BurstCmdBus)
    val x9723 = StreamIn(field="data").name("x9723").ctrl(x9744) // x9723 = StreamInNew(BurstDataBus())
    val x9735 = UnitController(style=SeqPipe, level=InnerControl).name("x9735").ctrl(x9744) // UnitPipe(List(b5667),Block(x9734))
    val x9724 = b5666 // FixConvert(b5666,TRUE,_32,_0)
    val x9725 = OpDef(op=FixSla, inputs=List(x9724, Const(9))).name("x9725").ctrl(x9735) // FixLsh(x9724,Const(9))
    val x9726 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9727 = OpDef(op=FixAdd, inputs=List(x9725, x9726)).name("x9727").ctrl(x9735) // FixAdd(x9725,x9726)
    val x9728 = OpDef(op=FixSla, inputs=List(x9727, Const(2))).name("x9728").ctrl(x9735) // FixLsh(x9727,Const(2))
    val x9729 = x9728 // FixConvert(x9728,TRUE,_64,_0)
    val x9730 = DramAddress(x9550).name("x9730").ctrl(x9735) // GetDRAMAddress(x9550)
    val x9731 = OpDef(op=FixAdd, inputs=List(x9729, x9730)).name("x9731").ctrl(x9735) // FixAdd(x9729,x9730)
    val x9733_x9732 = x9731 // FixConvert(x9731,TRUE,_64,_0)
    // x9733 = SimpleStruct(ArrayBuffer((offset,x9732), (size,Const(2048)), (isLoad,Const(true))))
    val b10352_b10350 = WriteMem(b10350, x9733_x9732).name("b10352_b10350").ctrl(x9735) // StreamWrite(x9722,x9733,b5667)
    val b10353_b10351 = WriteMem(b10351, Const(2048)).name("b10353_b10351").ctrl(x9735) // StreamWrite(x9722,x9733,b5667)
    val x9736 = FringeDenseLoad(dram=List(x9550), cmdStream=List(b10350, b10351), dataStream=List(x9723)).name("x9736").ctrl(x9744) // FringeDenseLoad(x9550,x9722,x9723)
    val x9737 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9737").ctrl(x9744) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9738 = CounterChain(List(x9737)).name("x9738").ctrl(x9744) // CounterChainNew(List(x9737))
    val x9743 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9738).name("x9743").ctrl(x9744) // UnrolledForeach(List(b5667),x9738,Block(Const(())),List(List(b5685)),List(List(b5686)))
    val b5685 = CounterIter(x9737, None).ctrl(x9743).name("b5685")
    val b5686 = Const(true).ctrl(x9743).name("b5686")
    val x9739 = OpDef(op=BitAnd, inputs=List(b5686, b5667)).name("x9739").ctrl(x9743) // And(b5686,b5667)
    val x9740_x9740 = ReadMem(x9723).name("x9740").ctrl(x9743) // ParStreamRead(x9723,List(x9739))
    val x9741_x9741 = x9740_x9740 // x9741 = VectorApply(x9740,0)
    val x9742 = StoreBanks(List(x9661_d0_b0), List(b5666, b5685), x9741_x9741).name("x9742").ctrl(x9743) // ParSRAMStore(x9661,List(List(b5666, b5685)),List(x9741),List(x9739))
    val x9763 = UnitController(style=StreamPipe, level=OuterControl).name("x9763").ctrl(x10333) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10354 = StreamOut(field="offset").name("b10354").ctrl(x9763) // x9745 = StreamOutNew(BurstCmdBus)
    val b10355 = StreamOut(field="size").name("b10355").ctrl(x9763) // x9745 = StreamOutNew(BurstCmdBus)
    val x9746 = StreamIn(field="data").name("x9746").ctrl(x9763) // x9746 = StreamInNew(BurstDataBus())
    val x9755 = UnitController(style=SeqPipe, level=InnerControl).name("x9755").ctrl(x9763) // UnitPipe(List(Const(true)),Block(x9754))
    val x9747 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9748 = OpDef(op=FixSla, inputs=List(x9747, Const(2))).name("x9748").ctrl(x9755) // FixLsh(x9747,Const(2))
    val x9749 = x9748 // FixConvert(x9748,TRUE,_64,_0)
    val x9750 = DramAddress(x9551).name("x9750").ctrl(x9755) // GetDRAMAddress(x9551)
    val x9751 = OpDef(op=FixAdd, inputs=List(x9749, x9750)).name("x9751").ctrl(x9755) // FixAdd(x9749,x9750)
    val x9753_x9752 = x9751 // FixConvert(x9751,TRUE,_64,_0)
    // x9753 = SimpleStruct(ArrayBuffer((offset,x9752), (size,Const(2048)), (isLoad,Const(true))))
    val b10356_b10354 = WriteMem(b10354, x9753_x9752).name("b10356_b10354").ctrl(x9755) // StreamWrite(x9745,x9753,Const(true))
    val b10357_b10355 = WriteMem(b10355, Const(2048)).name("b10357_b10355").ctrl(x9755) // StreamWrite(x9745,x9753,Const(true))
    val x9756 = FringeDenseLoad(dram=List(x9551), cmdStream=List(b10354, b10355), dataStream=List(x9746)).name("x9756").ctrl(x9763) // FringeDenseLoad(x9551,x9745,x9746)
    val x9757 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9757").ctrl(x9763) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9758 = CounterChain(List(x9757)).name("x9758").ctrl(x9763) // CounterChainNew(List(x9757))
    val x9762 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9758).name("x9762").ctrl(x9763) // UnrolledForeach(List(Const(true)),x9758,Block(Const(())),List(List(b5707)),List(List(b5708)))
    val b5707 = CounterIter(x9757, None).ctrl(x9762).name("b5707")
    val b5708 = Const(true).ctrl(x9762).name("b5708")
    val x9759_x9759 = ReadMem(x9746).name("x9759").ctrl(x9762) // ParStreamRead(x9746,List(b5708))
    val x9760_x9760 = x9759_x9759 // x9760 = VectorApply(x9759,0)
    val x9761 = StoreBanks(List(x9662_d0_b0), List(b5707), x9760_x9760).name("x9761").ctrl(x9762) // ParSRAMStore(x9662,List(List(b5707)),List(x9760),List(b5708))
    val x9764 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x9764").ctrl(x10333) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x9765 = CounterChain(List(x9764)).name("x9765").ctrl(x10333) // CounterChainNew(List(x9764))
    val x9788 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9765).name("x9788").ctrl(x10333) // UnrolledForeach(List(Const(true)),x9765,Block(Const(())),List(List(b5716)),List(List(b5717)))
    val b5716 = CounterIter(x9764, Some(0)).ctrl(x9788).name("b5716")
    val b5717 = Const(true).ctrl(x9788).name("b5717")
    val b10358 = StreamOut(field="offset").name("b10358").ctrl(x9788) // x9766 = StreamOutNew(BurstCmdBus)
    val b10359 = StreamOut(field="size").name("b10359").ctrl(x9788) // x9766 = StreamOutNew(BurstCmdBus)
    val x9767 = StreamIn(field="data").name("x9767").ctrl(x9788) // x9767 = StreamInNew(BurstDataBus())
    val x9779 = UnitController(style=SeqPipe, level=InnerControl).name("x9779").ctrl(x9788) // UnitPipe(List(b5717),Block(x9778))
    val x9768 = b5716 // FixConvert(b5716,TRUE,_32,_0)
    val x9769 = OpDef(op=FixSla, inputs=List(x9768, Const(9))).name("x9769").ctrl(x9779) // FixLsh(x9768,Const(9))
    val x9770 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9771 = OpDef(op=FixAdd, inputs=List(x9769, x9770)).name("x9771").ctrl(x9779) // FixAdd(x9769,x9770)
    val x9772 = OpDef(op=FixSla, inputs=List(x9771, Const(2))).name("x9772").ctrl(x9779) // FixLsh(x9771,Const(2))
    val x9773 = x9772 // FixConvert(x9772,TRUE,_64,_0)
    val x9774 = DramAddress(x9548).name("x9774").ctrl(x9779) // GetDRAMAddress(x9548)
    val x9775 = OpDef(op=FixAdd, inputs=List(x9773, x9774)).name("x9775").ctrl(x9779) // FixAdd(x9773,x9774)
    val x9777_x9776 = x9775 // FixConvert(x9775,TRUE,_64,_0)
    // x9777 = SimpleStruct(ArrayBuffer((offset,x9776), (size,Const(2048)), (isLoad,Const(true))))
    val b10360_b10358 = WriteMem(b10358, x9777_x9776).name("b10360_b10358").ctrl(x9779) // StreamWrite(x9766,x9777,b5717)
    val b10361_b10359 = WriteMem(b10359, Const(2048)).name("b10361_b10359").ctrl(x9779) // StreamWrite(x9766,x9777,b5717)
    val x9780 = FringeDenseLoad(dram=List(x9548), cmdStream=List(b10358, b10359), dataStream=List(x9767)).name("x9780").ctrl(x9788) // FringeDenseLoad(x9548,x9766,x9767)
    val x9781 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9781").ctrl(x9788) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9782 = CounterChain(List(x9781)).name("x9782").ctrl(x9788) // CounterChainNew(List(x9781))
    val x9787 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9782).name("x9787").ctrl(x9788) // UnrolledForeach(List(b5717),x9782,Block(Const(())),List(List(b5735)),List(List(b5736)))
    val b5735 = CounterIter(x9781, None).ctrl(x9787).name("b5735")
    val b5736 = Const(true).ctrl(x9787).name("b5736")
    val x9783 = OpDef(op=BitAnd, inputs=List(b5736, b5717)).name("x9783").ctrl(x9787) // And(b5736,b5717)
    val x9784_x9784 = ReadMem(x9767).name("x9784").ctrl(x9787) // ParStreamRead(x9767,List(x9783))
    val x9785_x9785 = x9784_x9784 // x9785 = VectorApply(x9784,0)
    val x9786 = StoreBanks(List(x9663_d0_b0), List(b5716, b5735), x9785_x9785).name("x9786").ctrl(x9787) // ParSRAMStore(x9663,List(List(b5716, b5735)),List(x9785),List(x9783))
    val x9807 = UnitController(style=StreamPipe, level=OuterControl).name("x9807").ctrl(x10333) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10362 = StreamOut(field="offset").name("b10362").ctrl(x9807) // x9789 = StreamOutNew(BurstCmdBus)
    val b10363 = StreamOut(field="size").name("b10363").ctrl(x9807) // x9789 = StreamOutNew(BurstCmdBus)
    val x9790 = StreamIn(field="data").name("x9790").ctrl(x9807) // x9790 = StreamInNew(BurstDataBus())
    val x9799 = UnitController(style=SeqPipe, level=InnerControl).name("x9799").ctrl(x9807) // UnitPipe(List(Const(true)),Block(x9798))
    val x9791 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9792 = OpDef(op=FixSla, inputs=List(x9791, Const(2))).name("x9792").ctrl(x9799) // FixLsh(x9791,Const(2))
    val x9793 = x9792 // FixConvert(x9792,TRUE,_64,_0)
    val x9794 = DramAddress(x9549).name("x9794").ctrl(x9799) // GetDRAMAddress(x9549)
    val x9795 = OpDef(op=FixAdd, inputs=List(x9793, x9794)).name("x9795").ctrl(x9799) // FixAdd(x9793,x9794)
    val x9797_x9796 = x9795 // FixConvert(x9795,TRUE,_64,_0)
    // x9797 = SimpleStruct(ArrayBuffer((offset,x9796), (size,Const(2048)), (isLoad,Const(true))))
    val b10364_b10362 = WriteMem(b10362, x9797_x9796).name("b10364_b10362").ctrl(x9799) // StreamWrite(x9789,x9797,Const(true))
    val b10365_b10363 = WriteMem(b10363, Const(2048)).name("b10365_b10363").ctrl(x9799) // StreamWrite(x9789,x9797,Const(true))
    val x9800 = FringeDenseLoad(dram=List(x9549), cmdStream=List(b10362, b10363), dataStream=List(x9790)).name("x9800").ctrl(x9807) // FringeDenseLoad(x9549,x9789,x9790)
    val x9801 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9801").ctrl(x9807) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9802 = CounterChain(List(x9801)).name("x9802").ctrl(x9807) // CounterChainNew(List(x9801))
    val x9806 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9802).name("x9806").ctrl(x9807) // UnrolledForeach(List(Const(true)),x9802,Block(Const(())),List(List(b5757)),List(List(b5758)))
    val b5757 = CounterIter(x9801, None).ctrl(x9806).name("b5757")
    val b5758 = Const(true).ctrl(x9806).name("b5758")
    val x9803_x9803 = ReadMem(x9790).name("x9803").ctrl(x9806) // ParStreamRead(x9790,List(b5758))
    val x9804_x9804 = x9803_x9803 // x9804 = VectorApply(x9803,0)
    val x9805 = StoreBanks(List(x9664_d0_b0), List(b5757), x9804_x9804).name("x9805").ctrl(x9806) // ParSRAMStore(x9664,List(List(b5757)),List(x9804),List(b5758))
    val x9808 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x9808").ctrl(x10333) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x9809 = CounterChain(List(x9808)).name("x9809").ctrl(x10333) // CounterChainNew(List(x9808))
    val x9832 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9809).name("x9832").ctrl(x10333) // UnrolledForeach(List(Const(true)),x9809,Block(Const(())),List(List(b5766)),List(List(b5767)))
    val b5766 = CounterIter(x9808, Some(0)).ctrl(x9832).name("b5766")
    val b5767 = Const(true).ctrl(x9832).name("b5767")
    val b10366 = StreamOut(field="offset").name("b10366").ctrl(x9832) // x9810 = StreamOutNew(BurstCmdBus)
    val b10367 = StreamOut(field="size").name("b10367").ctrl(x9832) // x9810 = StreamOutNew(BurstCmdBus)
    val x9811 = StreamIn(field="data").name("x9811").ctrl(x9832) // x9811 = StreamInNew(BurstDataBus())
    val x9823 = UnitController(style=SeqPipe, level=InnerControl).name("x9823").ctrl(x9832) // UnitPipe(List(b5767),Block(x9822))
    val x9812 = b5766 // FixConvert(b5766,TRUE,_32,_0)
    val x9813 = OpDef(op=FixSla, inputs=List(x9812, Const(9))).name("x9813").ctrl(x9823) // FixLsh(x9812,Const(9))
    val x9814 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9815 = OpDef(op=FixAdd, inputs=List(x9813, x9814)).name("x9815").ctrl(x9823) // FixAdd(x9813,x9814)
    val x9816 = OpDef(op=FixSla, inputs=List(x9815, Const(2))).name("x9816").ctrl(x9823) // FixLsh(x9815,Const(2))
    val x9817 = x9816 // FixConvert(x9816,TRUE,_64,_0)
    val x9818 = DramAddress(x9552).name("x9818").ctrl(x9823) // GetDRAMAddress(x9552)
    val x9819 = OpDef(op=FixAdd, inputs=List(x9817, x9818)).name("x9819").ctrl(x9823) // FixAdd(x9817,x9818)
    val x9821_x9820 = x9819 // FixConvert(x9819,TRUE,_64,_0)
    // x9821 = SimpleStruct(ArrayBuffer((offset,x9820), (size,Const(2048)), (isLoad,Const(true))))
    val b10368_b10366 = WriteMem(b10366, x9821_x9820).name("b10368_b10366").ctrl(x9823) // StreamWrite(x9810,x9821,b5767)
    val b10369_b10367 = WriteMem(b10367, Const(2048)).name("b10369_b10367").ctrl(x9823) // StreamWrite(x9810,x9821,b5767)
    val x9824 = FringeDenseLoad(dram=List(x9552), cmdStream=List(b10366, b10367), dataStream=List(x9811)).name("x9824").ctrl(x9832) // FringeDenseLoad(x9552,x9810,x9811)
    val x9825 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9825").ctrl(x9832) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9826 = CounterChain(List(x9825)).name("x9826").ctrl(x9832) // CounterChainNew(List(x9825))
    val x9831 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9826).name("x9831").ctrl(x9832) // UnrolledForeach(List(b5767),x9826,Block(Const(())),List(List(b5785)),List(List(b5786)))
    val b5785 = CounterIter(x9825, None).ctrl(x9831).name("b5785")
    val b5786 = Const(true).ctrl(x9831).name("b5786")
    val x9827 = OpDef(op=BitAnd, inputs=List(b5786, b5767)).name("x9827").ctrl(x9831) // And(b5786,b5767)
    val x9828_x9828 = ReadMem(x9811).name("x9828").ctrl(x9831) // ParStreamRead(x9811,List(x9827))
    val x9829_x9829 = x9828_x9828 // x9829 = VectorApply(x9828,0)
    val x9830 = StoreBanks(List(x9665_d0_b0), List(b5766, b5785), x9829_x9829).name("x9830").ctrl(x9831) // ParSRAMStore(x9665,List(List(b5766, b5785)),List(x9829),List(x9827))
    val x9851 = UnitController(style=StreamPipe, level=OuterControl).name("x9851").ctrl(x10333) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10370 = StreamOut(field="offset").name("b10370").ctrl(x9851) // x9833 = StreamOutNew(BurstCmdBus)
    val b10371 = StreamOut(field="size").name("b10371").ctrl(x9851) // x9833 = StreamOutNew(BurstCmdBus)
    val x9834 = StreamIn(field="data").name("x9834").ctrl(x9851) // x9834 = StreamInNew(BurstDataBus())
    val x9843 = UnitController(style=SeqPipe, level=InnerControl).name("x9843").ctrl(x9851) // UnitPipe(List(Const(true)),Block(x9842))
    val x9835 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9836 = OpDef(op=FixSla, inputs=List(x9835, Const(2))).name("x9836").ctrl(x9843) // FixLsh(x9835,Const(2))
    val x9837 = x9836 // FixConvert(x9836,TRUE,_64,_0)
    val x9838 = DramAddress(x9553).name("x9838").ctrl(x9843) // GetDRAMAddress(x9553)
    val x9839 = OpDef(op=FixAdd, inputs=List(x9837, x9838)).name("x9839").ctrl(x9843) // FixAdd(x9837,x9838)
    val x9841_x9840 = x9839 // FixConvert(x9839,TRUE,_64,_0)
    // x9841 = SimpleStruct(ArrayBuffer((offset,x9840), (size,Const(2048)), (isLoad,Const(true))))
    val b10372_b10370 = WriteMem(b10370, x9841_x9840).name("b10372_b10370").ctrl(x9843) // StreamWrite(x9833,x9841,Const(true))
    val b10373_b10371 = WriteMem(b10371, Const(2048)).name("b10373_b10371").ctrl(x9843) // StreamWrite(x9833,x9841,Const(true))
    val x9844 = FringeDenseLoad(dram=List(x9553), cmdStream=List(b10370, b10371), dataStream=List(x9834)).name("x9844").ctrl(x9851) // FringeDenseLoad(x9553,x9833,x9834)
    val x9845 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9845").ctrl(x9851) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9846 = CounterChain(List(x9845)).name("x9846").ctrl(x9851) // CounterChainNew(List(x9845))
    val x9850 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9846).name("x9850").ctrl(x9851) // UnrolledForeach(List(Const(true)),x9846,Block(Const(())),List(List(b5807)),List(List(b5808)))
    val b5807 = CounterIter(x9845, None).ctrl(x9850).name("b5807")
    val b5808 = Const(true).ctrl(x9850).name("b5808")
    val x9847_x9847 = ReadMem(x9834).name("x9847").ctrl(x9850) // ParStreamRead(x9834,List(b5808))
    val x9848_x9848 = x9847_x9847 // x9848 = VectorApply(x9847,0)
    val x9849 = StoreBanks(List(x9666_d0_b0), List(b5807), x9848_x9848).name("x9849").ctrl(x9850) // ParSRAMStore(x9666,List(List(b5807)),List(x9848),List(b5808))
    val x9852 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x9852").ctrl(x10333) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x9853 = CounterChain(List(x9852)).name("x9853").ctrl(x10333) // CounterChainNew(List(x9852))
    val x9876 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9853).name("x9876").ctrl(x10333) // UnrolledForeach(List(Const(true)),x9853,Block(Const(())),List(List(b5816)),List(List(b5817)))
    val b5816 = CounterIter(x9852, Some(0)).ctrl(x9876).name("b5816")
    val b5817 = Const(true).ctrl(x9876).name("b5817")
    val b10374 = StreamOut(field="offset").name("b10374").ctrl(x9876) // x9854 = StreamOutNew(BurstCmdBus)
    val b10375 = StreamOut(field="size").name("b10375").ctrl(x9876) // x9854 = StreamOutNew(BurstCmdBus)
    val x9855 = StreamIn(field="data").name("x9855").ctrl(x9876) // x9855 = StreamInNew(BurstDataBus())
    val x9867 = UnitController(style=SeqPipe, level=InnerControl).name("x9867").ctrl(x9876) // UnitPipe(List(b5817),Block(x9866))
    val x9856 = b5816 // FixConvert(b5816,TRUE,_32,_0)
    val x9857 = OpDef(op=FixSla, inputs=List(x9856, Const(6))).name("x9857").ctrl(x9867) // FixLsh(x9856,Const(6))
    val x9858 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9859 = OpDef(op=FixAdd, inputs=List(x9857, x9858)).name("x9859").ctrl(x9867) // FixAdd(x9857,x9858)
    val x9860 = OpDef(op=FixSla, inputs=List(x9859, Const(2))).name("x9860").ctrl(x9867) // FixLsh(x9859,Const(2))
    val x9861 = x9860 // FixConvert(x9860,TRUE,_64,_0)
    val x9862 = DramAddress(x9554).name("x9862").ctrl(x9867) // GetDRAMAddress(x9554)
    val x9863 = OpDef(op=FixAdd, inputs=List(x9861, x9862)).name("x9863").ctrl(x9867) // FixAdd(x9861,x9862)
    val x9865_x9864 = x9863 // FixConvert(x9863,TRUE,_64,_0)
    // x9865 = SimpleStruct(ArrayBuffer((offset,x9864), (size,Const(2048)), (isLoad,Const(true))))
    val b10376_b10374 = WriteMem(b10374, x9865_x9864).name("b10376_b10374").ctrl(x9867) // StreamWrite(x9854,x9865,b5817)
    val b10377_b10375 = WriteMem(b10375, Const(2048)).name("b10377_b10375").ctrl(x9867) // StreamWrite(x9854,x9865,b5817)
    val x9868 = FringeDenseLoad(dram=List(x9554), cmdStream=List(b10374, b10375), dataStream=List(x9855)).name("x9868").ctrl(x9876) // FringeDenseLoad(x9554,x9854,x9855)
    val x9869 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9869").ctrl(x9876) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9870 = CounterChain(List(x9869)).name("x9870").ctrl(x9876) // CounterChainNew(List(x9869))
    val x9875 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9870).name("x9875").ctrl(x9876) // UnrolledForeach(List(b5817),x9870,Block(Const(())),List(List(b5835)),List(List(b5836)))
    val b5835 = CounterIter(x9869, None).ctrl(x9875).name("b5835")
    val b5836 = Const(true).ctrl(x9875).name("b5836")
    val x9871 = OpDef(op=BitAnd, inputs=List(b5836, b5817)).name("x9871").ctrl(x9875) // And(b5836,b5817)
    val x9872_x9872 = ReadMem(x9855).name("x9872").ctrl(x9875) // ParStreamRead(x9855,List(x9871))
    val x9873_x9873 = x9872_x9872 // x9873 = VectorApply(x9872,0)
    val x9874 = StoreBanks(List(x9667_d0_b0), List(b5816, b5835), x9873_x9873).name("x9874").ctrl(x9875) // ParSRAMStore(x9667,List(List(b5816, b5835)),List(x9873),List(x9871))
    val x9895 = UnitController(style=StreamPipe, level=OuterControl).name("x9895").ctrl(x10333) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10378 = StreamOut(field="offset").name("b10378").ctrl(x9895) // x9877 = StreamOutNew(BurstCmdBus)
    val b10379 = StreamOut(field="size").name("b10379").ctrl(x9895) // x9877 = StreamOutNew(BurstCmdBus)
    val x9878 = StreamIn(field="data").name("x9878").ctrl(x9895) // x9878 = StreamInNew(BurstDataBus())
    val x9887 = UnitController(style=SeqPipe, level=InnerControl).name("x9887").ctrl(x9895) // UnitPipe(List(Const(true)),Block(x9886))
    val x9879 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9880 = OpDef(op=FixSla, inputs=List(x9879, Const(2))).name("x9880").ctrl(x9887) // FixLsh(x9879,Const(2))
    val x9881 = x9880 // FixConvert(x9880,TRUE,_64,_0)
    val x9882 = DramAddress(x9555).name("x9882").ctrl(x9887) // GetDRAMAddress(x9555)
    val x9883 = OpDef(op=FixAdd, inputs=List(x9881, x9882)).name("x9883").ctrl(x9887) // FixAdd(x9881,x9882)
    val x9885_x9884 = x9883 // FixConvert(x9883,TRUE,_64,_0)
    // x9885 = SimpleStruct(ArrayBuffer((offset,x9884), (size,Const(2048)), (isLoad,Const(true))))
    val b10380_b10378 = WriteMem(b10378, x9885_x9884).name("b10380_b10378").ctrl(x9887) // StreamWrite(x9877,x9885,Const(true))
    val b10381_b10379 = WriteMem(b10379, Const(2048)).name("b10381_b10379").ctrl(x9887) // StreamWrite(x9877,x9885,Const(true))
    val x9888 = FringeDenseLoad(dram=List(x9555), cmdStream=List(b10378, b10379), dataStream=List(x9878)).name("x9888").ctrl(x9895) // FringeDenseLoad(x9555,x9877,x9878)
    val x9889 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9889").ctrl(x9895) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9890 = CounterChain(List(x9889)).name("x9890").ctrl(x9895) // CounterChainNew(List(x9889))
    val x9894 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9890).name("x9894").ctrl(x9895) // UnrolledForeach(List(Const(true)),x9890,Block(Const(())),List(List(b5857)),List(List(b5858)))
    val b5857 = CounterIter(x9889, None).ctrl(x9894).name("b5857")
    val b5858 = Const(true).ctrl(x9894).name("b5858")
    val x9891_x9891 = ReadMem(x9878).name("x9891").ctrl(x9894) // ParStreamRead(x9878,List(b5858))
    val x9892_x9892 = x9891_x9891 // x9892 = VectorApply(x9891,0)
    val x9893 = StoreBanks(List(x9668_d0_b0), List(b5857), x9892_x9892).name("x9893").ctrl(x9894) // ParSRAMStore(x9668,List(List(b5857)),List(x9892),List(b5858))
    val x9896 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x9896").ctrl(x10333) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x9897 = CounterChain(List(x9896)).name("x9897").ctrl(x10333) // CounterChainNew(List(x9896))
    val x9920 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9897).name("x9920").ctrl(x10333) // UnrolledForeach(List(Const(true)),x9897,Block(Const(())),List(List(b5866)),List(List(b5867)))
    val b5866 = CounterIter(x9896, Some(0)).ctrl(x9920).name("b5866")
    val b5867 = Const(true).ctrl(x9920).name("b5867")
    val b10382 = StreamOut(field="offset").name("b10382").ctrl(x9920) // x9898 = StreamOutNew(BurstCmdBus)
    val b10383 = StreamOut(field="size").name("b10383").ctrl(x9920) // x9898 = StreamOutNew(BurstCmdBus)
    val x9899 = StreamIn(field="data").name("x9899").ctrl(x9920) // x9899 = StreamInNew(BurstDataBus())
    val x9911 = UnitController(style=SeqPipe, level=InnerControl).name("x9911").ctrl(x9920) // UnitPipe(List(b5867),Block(x9910))
    val x9900 = b5866 // FixConvert(b5866,TRUE,_32,_0)
    val x9901 = OpDef(op=FixSla, inputs=List(x9900, Const(7))).name("x9901").ctrl(x9911) // FixLsh(x9900,Const(7))
    val x9902 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9903 = OpDef(op=FixAdd, inputs=List(x9901, x9902)).name("x9903").ctrl(x9911) // FixAdd(x9901,x9902)
    val x9904 = OpDef(op=FixSla, inputs=List(x9903, Const(2))).name("x9904").ctrl(x9911) // FixLsh(x9903,Const(2))
    val x9905 = x9904 // FixConvert(x9904,TRUE,_64,_0)
    val x9906 = DramAddress(x9556).name("x9906").ctrl(x9911) // GetDRAMAddress(x9556)
    val x9907 = OpDef(op=FixAdd, inputs=List(x9905, x9906)).name("x9907").ctrl(x9911) // FixAdd(x9905,x9906)
    val x9909_x9908 = x9907 // FixConvert(x9907,TRUE,_64,_0)
    // x9909 = SimpleStruct(ArrayBuffer((offset,x9908), (size,Const(512)), (isLoad,Const(true))))
    val b10384_b10382 = WriteMem(b10382, x9909_x9908).name("b10384_b10382").ctrl(x9911) // StreamWrite(x9898,x9909,b5867)
    val b10385_b10383 = WriteMem(b10383, Const(512)).name("b10385_b10383").ctrl(x9911) // StreamWrite(x9898,x9909,b5867)
    val x9912 = FringeDenseLoad(dram=List(x9556), cmdStream=List(b10382, b10383), dataStream=List(x9899)).name("x9912").ctrl(x9920) // FringeDenseLoad(x9556,x9898,x9899)
    val x9913 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x9913").ctrl(x9920) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x9914 = CounterChain(List(x9913)).name("x9914").ctrl(x9920) // CounterChainNew(List(x9913))
    val x9919 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9914).name("x9919").ctrl(x9920) // UnrolledForeach(List(b5867),x9914,Block(Const(())),List(List(b5885)),List(List(b5886)))
    val b5885 = CounterIter(x9913, None).ctrl(x9919).name("b5885")
    val b5886 = Const(true).ctrl(x9919).name("b5886")
    val x9915 = OpDef(op=BitAnd, inputs=List(b5886, b5867)).name("x9915").ctrl(x9919) // And(b5886,b5867)
    val x9916_x9916 = ReadMem(x9899).name("x9916").ctrl(x9919) // ParStreamRead(x9899,List(x9915))
    val x9917_x9917 = x9916_x9916 // x9917 = VectorApply(x9916,0)
    val x9918 = StoreBanks(List(x9669_d0_b0, x9669_d1_b0, x9669_d2_b0, x9669_d3_b0), List(b5866, b5885), x9917_x9917).name("x9918").ctrl(x9919) // ParSRAMStore(x9669,List(List(b5866, b5885)),List(x9917),List(x9915))
    val x9921 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x9921").ctrl(x10333) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x9922 = CounterChain(List(x9921)).name("x9922").ctrl(x10333) // CounterChainNew(List(x9921))
    val x9945 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9922).name("x9945").ctrl(x10333) // UnrolledForeach(List(Const(true)),x9922,Block(Const(())),List(List(b5895)),List(List(b5896)))
    val b5895 = CounterIter(x9921, Some(0)).ctrl(x9945).name("b5895")
    val b5896 = Const(true).ctrl(x9945).name("b5896")
    val b10386 = StreamOut(field="offset").name("b10386").ctrl(x9945) // x9923 = StreamOutNew(BurstCmdBus)
    val b10387 = StreamOut(field="size").name("b10387").ctrl(x9945) // x9923 = StreamOutNew(BurstCmdBus)
    val x9924 = StreamIn(field="data").name("x9924").ctrl(x9945) // x9924 = StreamInNew(BurstDataBus())
    val x9936 = UnitController(style=SeqPipe, level=InnerControl).name("x9936").ctrl(x9945) // UnitPipe(List(b5896),Block(x9935))
    val x9925 = b5895 // FixConvert(b5895,TRUE,_32,_0)
    val x9926 = OpDef(op=FixSla, inputs=List(x9925, Const(7))).name("x9926").ctrl(x9936) // FixLsh(x9925,Const(7))
    val x9927 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9928 = OpDef(op=FixAdd, inputs=List(x9926, x9927)).name("x9928").ctrl(x9936) // FixAdd(x9926,x9927)
    val x9929 = OpDef(op=FixSla, inputs=List(x9928, Const(2))).name("x9929").ctrl(x9936) // FixLsh(x9928,Const(2))
    val x9930 = x9929 // FixConvert(x9929,TRUE,_64,_0)
    val x9931 = DramAddress(x9557).name("x9931").ctrl(x9936) // GetDRAMAddress(x9557)
    val x9932 = OpDef(op=FixAdd, inputs=List(x9930, x9931)).name("x9932").ctrl(x9936) // FixAdd(x9930,x9931)
    val x9934_x9933 = x9932 // FixConvert(x9932,TRUE,_64,_0)
    // x9934 = SimpleStruct(ArrayBuffer((offset,x9933), (size,Const(512)), (isLoad,Const(true))))
    val b10388_b10386 = WriteMem(b10386, x9934_x9933).name("b10388_b10386").ctrl(x9936) // StreamWrite(x9923,x9934,b5896)
    val b10389_b10387 = WriteMem(b10387, Const(512)).name("b10389_b10387").ctrl(x9936) // StreamWrite(x9923,x9934,b5896)
    val x9937 = FringeDenseLoad(dram=List(x9557), cmdStream=List(b10386, b10387), dataStream=List(x9924)).name("x9937").ctrl(x9945) // FringeDenseLoad(x9557,x9923,x9924)
    val x9938 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x9938").ctrl(x9945) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x9939 = CounterChain(List(x9938)).name("x9939").ctrl(x9945) // CounterChainNew(List(x9938))
    val x9944 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9939).name("x9944").ctrl(x9945) // UnrolledForeach(List(b5896),x9939,Block(Const(())),List(List(b5914)),List(List(b5915)))
    val b5914 = CounterIter(x9938, None).ctrl(x9944).name("b5914")
    val b5915 = Const(true).ctrl(x9944).name("b5915")
    val x9940 = OpDef(op=BitAnd, inputs=List(b5915, b5896)).name("x9940").ctrl(x9944) // And(b5915,b5896)
    val x9941_x9941 = ReadMem(x9924).name("x9941").ctrl(x9944) // ParStreamRead(x9924,List(x9940))
    val x9942_x9942 = x9941_x9941 // x9942 = VectorApply(x9941,0)
    val x9943 = StoreBanks(List(x9670_d0_b0, x9670_d1_b0, x9670_d2_b0, x9670_d3_b0), List(b5895, b5914), x9942_x9942).name("x9943").ctrl(x9944) // ParSRAMStore(x9670,List(List(b5895, b5914)),List(x9942),List(x9940))
    val x9946 = Counter(min=Const(0), max=Const(3), step=Const(1), par=1).name("x9946").ctrl(x10333) // CounterNew(Const(0),Const(3),Const(1),Const(1))
    val x9947 = CounterChain(List(x9946)).name("x9947").ctrl(x10333) // CounterChainNew(List(x9946))
    val x10332 = LoopController(style=SeqPipe, level=OuterControl, cchain=x9947).name("x10332").ctrl(x10333) // UnrolledForeach(List(Const(true)),x9947,Block(Const(())),List(List(b5924)),List(List(b5925)))
    val b5924 = CounterIter(x9946, Some(0)).ctrl(x10332).name("b5924")
    val b5925 = Const(true).ctrl(x10332).name("b5925")
    val x9949 = UnitController(style=SeqPipe, level=InnerControl).name("x9949").ctrl(x10332) // UnitPipe(List(b5925),Block(Const(())))
    val x9948 = OpDef(op=FixAdd, inputs=List(b5924, Const(1))).name("x9948").ctrl(x9949) // FixAdd(b5924,Const(1))
    val x9950 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x9950").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x9951 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x9951").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x9952 = CounterChain(List(x9950,x9951)).name("x9952").ctrl(x10332) // CounterChainNew(List(x9950, x9951))
    val x9983 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9952).name("x9983").ctrl(x10332) // UnrolledForeach(List(b5925),x9952,Block(Const(())),List(List(b5931), List(b5932)),List(List(b5933), List(b5934)))
    val b5931 = CounterIter(x9950, Some(0)).ctrl(x9983).name("b5931")
    val b5933 = Const(true).ctrl(x9983).name("b5933")
    val b5932 = CounterIter(x9951, Some(0)).ctrl(x9983).name("b5932")
    val b5934 = Const(true).ctrl(x9983).name("b5934")
    val b10390 = StreamOut(field="offset").name("b10390").ctrl(x9983) // x9953 = StreamOutNew(BurstCmdBus)
    val b10391 = StreamOut(field="size").name("b10391").ctrl(x9983) // x9953 = StreamOutNew(BurstCmdBus)
    val x9954 = StreamIn(field="data").name("x9954").ctrl(x9983) // x9954 = StreamInNew(BurstDataBus())
    val x9972 = UnitController(style=SeqPipe, level=InnerControl).name("x9972").ctrl(x9983) // UnitPipe(List(b5933, b5934, b5925),Block(x9971))
    val x9955 = OpDef(op=FixAdd, inputs=List(b5924, b5931)).name("x9955").ctrl(x9972) // FixAdd(b5924,b5931)
    val x9956 = x9955 // FixConvert(x9955,TRUE,_32,_0)
    val x9957 = OpDef(op=FixSla, inputs=List(x9956, Const(6))).name("x9957").ctrl(x9972) // FixLsh(x9956,Const(6))
    val x9958 = b5932 // FixConvert(b5932,TRUE,_32,_0)
    val x9959 = OpDef(op=FixSla, inputs=List(x9958, Const(6))).name("x9959").ctrl(x9972) // FixLsh(x9958,Const(6))
    val x9960 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x9961 = OpDef(op=FixAdd, inputs=List(x9957, x9959)).name("x9961").ctrl(x9972) // FixAdd(x9957,x9959)
    val x9962 = OpDef(op=FixAdd, inputs=List(x9961, x9960)).name("x9962").ctrl(x9972) // FixAdd(x9961,x9960)
    val x9963 = OpDef(op=FixSla, inputs=List(x9962, Const(2))).name("x9963").ctrl(x9972) // FixLsh(x9962,Const(2))
    val x9964 = x9963 // FixConvert(x9963,TRUE,_64,_0)
    val x9965 = DramAddress(x9558).name("x9965").ctrl(x9972) // GetDRAMAddress(x9558)
    val x9966 = OpDef(op=FixAdd, inputs=List(x9964, x9965)).name("x9966").ctrl(x9972) // FixAdd(x9964,x9965)
    val x9968_x9967 = x9966 // FixConvert(x9966,TRUE,_64,_0)
    // x9968 = SimpleStruct(ArrayBuffer((offset,x9967), (size,Const(256)), (isLoad,Const(true))))
    val x9969 = OpDef(op=BitAnd, inputs=List(b5933, b5934)).name("x9969").ctrl(x9972) // And(b5933,b5934)
    val x9970 = OpDef(op=BitAnd, inputs=List(x9969, b5925)).name("x9970").ctrl(x9972) // And(x9969,b5925)
    val b10392_b10390 = WriteMem(b10390, x9968_x9967).name("b10392_b10390").ctrl(x9972) // StreamWrite(x9953,x9968,x9970)
    val b10393_b10391 = WriteMem(b10391, Const(256)).name("b10393_b10391").ctrl(x9972) // StreamWrite(x9953,x9968,x9970)
    val x9973 = FringeDenseLoad(dram=List(x9558), cmdStream=List(b10390, b10391), dataStream=List(x9954)).name("x9973").ctrl(x9983) // FringeDenseLoad(x9558,x9953,x9954)
    val x9974 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x9974").ctrl(x9983) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x9975 = CounterChain(List(x9974)).name("x9975").ctrl(x9983) // CounterChainNew(List(x9974))
    val x9982 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9975).name("x9982").ctrl(x9983) // UnrolledForeach(List(b5933, b5934, b5925),x9975,Block(Const(())),List(List(b5958)),List(List(b5959)))
    val b5958 = CounterIter(x9974, None).ctrl(x9982).name("b5958")
    val b5959 = Const(true).ctrl(x9982).name("b5959")
    val x9976 = OpDef(op=BitAnd, inputs=List(b5959, b5933)).name("x9976").ctrl(x9982) // And(b5959,b5933)
    val x9977 = OpDef(op=BitAnd, inputs=List(b5934, b5925)).name("x9977").ctrl(x9982) // And(b5934,b5925)
    val x9978 = OpDef(op=BitAnd, inputs=List(x9976, x9977)).name("x9978").ctrl(x9982) // And(x9976,x9977)
    val x9979_x9979 = ReadMem(x9954).name("x9979").ctrl(x9982) // ParStreamRead(x9954,List(x9978))
    val x9980_x9980 = x9979_x9979 // x9980 = VectorApply(x9979,0)
    val x9981 = StoreBanks(List(x9671_d0_b0, x9671_d1_b0), List(b5932, b5958), x9980_x9980).name("x9981").ctrl(x9982) // ParSRAMStore(x9671,List(List(b5932, b5958)),List(x9980),List(x9978))
    val x9984 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x9984").ctrl(x10332) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x9985 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x9985").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x9986 = CounterChain(List(x9985,x9984)).name("x9986").ctrl(x10332) // CounterChainNew(List(x9985, x9984))
    val x10099 = LoopController(style=MetaPipe, level=OuterControl, cchain=x9986).name("x10099").ctrl(x10332) // UnrolledForeach(List(b5925),x9986,Block(Const(())),List(List(b5971), List(b5972)),List(List(b5973), List(b5974)))
    val b5971 = CounterIter(x9985, Some(0)).ctrl(x10099).name("b5971")
    val b5973 = Const(true).ctrl(x10099).name("b5973")
    val b5972 = CounterIter(x9984, Some(0)).ctrl(x10099).name("b5972")
    val b5974 = Const(true).ctrl(x10099).name("b5974")
    val x9987_d0 = Reg(init=Some(0.0)).name("x9987_d0").ctrl(x10099) // x9987 = RegNew(Const(0))
    isAccum(x9987_d0) = false
    bufferDepthOf(x9987_d0) = 2
    val x9987_d1 = Reg(init=Some(0.0)).name("x9987_d1").ctrl(x10099) // x9987 = RegNew(Const(0))
    isAccum(x9987_d1) = true
    bufferDepthOf(x9987_d1) = 1
    val x9988 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x9988").ctrl(x10099) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x9989 = CounterChain(List(x9988)).name("x9989").ctrl(x10099) // CounterChainNew(List(x9988))
    val x10004 = LoopController(style=InnerPipe, level=InnerControl, cchain=x9989).name("x10004").ctrl(x10099) // UnrolledReduce(List(b5973, b5974, b5925),x9989,x9987,Block((x9987) => Const(())),List(List(b5978)),List(List(b5979)))
    val b5978 = CounterIter(x9988, None).ctrl(x10004).name("b5978")
    val b5979 = Const(true).ctrl(x10004).name("b5979")
    val x9990 = OpDef(op=BitAnd, inputs=List(b5979, b5973)).name("x9990").ctrl(x10004) // And(b5979,b5973)
    val x9991 = OpDef(op=BitAnd, inputs=List(b5974, b5925)).name("x9991").ctrl(x10004) // And(b5974,b5925)
    val x9992 = OpDef(op=BitAnd, inputs=List(x9990, x9991)).name("x9992").ctrl(x10004) // And(x9990,x9991)
    val x9993 = LoadBanks(List(x9671_d1_b0), List(b5971, b5978)).name("x9993").ctrl(x10004) // ParSRAMLoad(x9671,List(List(b5971, b5978)),List(x9992))
    val x9994 = x9993 // x9994 = VectorApply(x9993,0)
    val x9995 = LoadBanks(List(x9659_d0_b0), List(b5978, b5972)).name("x9995").ctrl(x10004) // ParSRAMLoad(x9659,List(List(b5978, b5972)),List(x9992))
    val x9996 = x9995 // x9996 = VectorApply(x9995,0)
    val x9997 = OpDef(op=FixMul, inputs=List(x9994, x9996)).name("x9997").ctrl(x10004) // FixMul(x9994,x9996)
    val x9998 = ReadMem(x9987_d1).name("x9998").ctrl(x10004) // RegRead(x9987)
    val x9999 = OpDef(op=FixEql, inputs=List(b5978, Const(0))).name("x9999").ctrl(x10004) // FixEql(b5978,Const(0))
    val x10000 = ReduceAccumOp(op=FixAdd, input=x9997, accum=x9998).name("x10000").ctrl(x10004) // FixAdd(x9997,x9998)
    val x10001 = OpDef(op=BitAnd, inputs=List(b5973, b5974)).name("x10001").ctrl(x10004) // And(b5973,b5974)
    val x10002 = OpDef(op=BitAnd, inputs=List(x10001, b5925)).name("x10002").ctrl(x10004) // And(x10001,b5925)
    val x10003_x9987_d0 = WriteMem(x9987_d0, x10000).name("x10003_x9987_d0").ctrl(x10004) // RegWrite(x9987,x10000,x10002)
    val x10003_x9987_d1 = WriteMem(x9987_d1, x10000).name("x10003_x9987_d1").ctrl(x10004) // RegWrite(x9987,x10000,x10002)
    val x10005 = Reg(init=Some(0.0)).name("x10005").ctrl(x10099) // x10005 = RegNew(Const(0))
    isAccum(x10005) = false
    bufferDepthOf(x10005) = 3
    val x10006_d0 = Reg(init=Some(0.0)).name("x10006_d0").ctrl(x10099) // x10006 = RegNew(Const(0))
    isAccum(x10006_d0) = false
    bufferDepthOf(x10006_d0) = 2
    val x10006_d1 = Reg(init=Some(0.0)).name("x10006_d1").ctrl(x10099) // x10006 = RegNew(Const(0))
    isAccum(x10006_d1) = true
    bufferDepthOf(x10006_d1) = 1
    val x10013 = UnitController(style=SeqPipe, level=InnerControl).name("x10013").ctrl(x10099) // UnitPipe(List(b5973, b5974, b5925),Block(Const(())))
    val x10007 = OpDef(op=BitAnd, inputs=List(b5973, b5974)).name("x10007").ctrl(x10013) // And(b5973,b5974)
    val x10008 = OpDef(op=BitAnd, inputs=List(x10007, b5925)).name("x10008").ctrl(x10013) // And(x10007,b5925)
    val x10009 = LoadBanks(List(x9660_d0_b0), List(b5972)).name("x10009").ctrl(x10013) // SRAMLoad(x9660,ArrayBuffer(Const(512)),List(b5972),Const(0),x10008)
    val x10010 = ReadMem(x9987_d0).name("x10010").ctrl(x10013) // RegRead(x9987)
    val x10011 = OpDef(op=FixAdd, inputs=List(x10009, x10010)).name("x10011").ctrl(x10013) // FixAdd(x10009,x10010)
    val x10012_x10005 = WriteMem(x10005, x10011).name("x10012_x10005").ctrl(x10013) // RegWrite(x10005,x10011,x10008)
    val x10014 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10014").ctrl(x10099) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10015 = CounterChain(List(x10014)).name("x10015").ctrl(x10099) // CounterChainNew(List(x10014))
    val x10030 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10015).name("x10030").ctrl(x10099) // UnrolledReduce(List(b5973, b5974, b5925),x10015,x10006,Block((x10006) => Const(())),List(List(b6006)),List(List(b6007)))
    val b6006 = CounterIter(x10014, None).ctrl(x10030).name("b6006")
    val b6007 = Const(true).ctrl(x10030).name("b6007")
    val x10016 = OpDef(op=BitAnd, inputs=List(b6007, b5973)).name("x10016").ctrl(x10030) // And(b6007,b5973)
    val x10017 = OpDef(op=BitAnd, inputs=List(b5974, b5925)).name("x10017").ctrl(x10030) // And(b5974,b5925)
    val x10018 = OpDef(op=BitAnd, inputs=List(x10016, x10017)).name("x10018").ctrl(x10030) // And(x10016,x10017)
    val x10019 = LoadBanks(List(x9670_d3_b0), List(b5971, b6006)).name("x10019").ctrl(x10030) // ParSRAMLoad(x9670,List(List(b5971, b6006)),List(x10018))
    val x10020 = x10019 // x10020 = VectorApply(x10019,0)
    val x10021 = LoadBanks(List(x9661_d0_b0), List(b6006, b5972)).name("x10021").ctrl(x10030) // ParSRAMLoad(x9661,List(List(b6006, b5972)),List(x10018))
    val x10022 = x10021 // x10022 = VectorApply(x10021,0)
    val x10023 = OpDef(op=FixMul, inputs=List(x10020, x10022)).name("x10023").ctrl(x10030) // FixMul(x10020,x10022)
    val x10024 = ReadMem(x10006_d1).name("x10024").ctrl(x10030) // RegRead(x10006)
    val x10025 = OpDef(op=FixEql, inputs=List(b6006, Const(0))).name("x10025").ctrl(x10030) // FixEql(b6006,Const(0))
    val x10026 = ReduceAccumOp(op=FixAdd, input=x10023, accum=x10024).name("x10026").ctrl(x10030) // FixAdd(x10023,x10024)
    val x10027 = OpDef(op=BitAnd, inputs=List(b5973, b5974)).name("x10027").ctrl(x10030) // And(b5973,b5974)
    val x10028 = OpDef(op=BitAnd, inputs=List(x10027, b5925)).name("x10028").ctrl(x10030) // And(x10027,b5925)
    val x10029_x10006_d0 = WriteMem(x10006_d0, x10026).name("x10029_x10006_d0").ctrl(x10030) // RegWrite(x10006,x10026,x10028)
    val x10029_x10006_d1 = WriteMem(x10006_d1, x10026).name("x10029_x10006_d1").ctrl(x10030) // RegWrite(x10006,x10026,x10028)
    val x10031_d0 = Reg(init=Some(0.0)).name("x10031_d0").ctrl(x10099) // x10031 = RegNew(Const(0))
    isAccum(x10031_d0) = false
    bufferDepthOf(x10031_d0) = 2
    val x10031_d1 = Reg(init=Some(0.0)).name("x10031_d1").ctrl(x10099) // x10031 = RegNew(Const(0))
    isAccum(x10031_d1) = false
    bufferDepthOf(x10031_d1) = 2
    val x10031_d2 = Reg(init=Some(0.0)).name("x10031_d2").ctrl(x10099) // x10031 = RegNew(Const(0))
    isAccum(x10031_d2) = false
    bufferDepthOf(x10031_d2) = 2
    val x10031_d3 = Reg(init=Some(0.0)).name("x10031_d3").ctrl(x10099) // x10031 = RegNew(Const(0))
    isAccum(x10031_d3) = false
    bufferDepthOf(x10031_d3) = 2
    val x10032_d0 = Reg(init=Some(false)).name("x10032_d0").ctrl(x10099) // x10032 = RegNew(Const(false))
    isAccum(x10032_d0) = false
    bufferDepthOf(x10032_d0) = 2
    val x10032_d1 = Reg(init=Some(false)).name("x10032_d1").ctrl(x10099) // x10032 = RegNew(Const(false))
    isAccum(x10032_d1) = false
    bufferDepthOf(x10032_d1) = 2
    val x10033_d0 = Reg(init=Some(false)).name("x10033_d0").ctrl(x10099) // x10033 = RegNew(Const(false))
    isAccum(x10033_d0) = false
    bufferDepthOf(x10033_d0) = 2
    val x10033_d1 = Reg(init=Some(false)).name("x10033_d1").ctrl(x10099) // x10033 = RegNew(Const(false))
    isAccum(x10033_d1) = false
    bufferDepthOf(x10033_d1) = 2
    val x10034_d0 = Reg(init=Some(false)).name("x10034_d0").ctrl(x10099) // x10034 = RegNew(Const(false))
    isAccum(x10034_d0) = false
    bufferDepthOf(x10034_d0) = 2
    val x10034_d1 = Reg(init=Some(false)).name("x10034_d1").ctrl(x10099) // x10034 = RegNew(Const(false))
    isAccum(x10034_d1) = false
    bufferDepthOf(x10034_d1) = 2
    val x10035_d0 = Reg(init=Some(false)).name("x10035_d0").ctrl(x10099) // x10035 = RegNew(Const(false))
    isAccum(x10035_d0) = false
    bufferDepthOf(x10035_d0) = 2
    val x10035_d1 = Reg(init=Some(false)).name("x10035_d1").ctrl(x10099) // x10035 = RegNew(Const(false))
    isAccum(x10035_d1) = false
    bufferDepthOf(x10035_d1) = 2
    val x10062 = UnitController(style=SeqPipe, level=InnerControl).name("x10062").ctrl(x10099) // UnitPipe(List(b5973, b5974, b5925),Block(Const(())))
    val x10036 = OpDef(op=BitAnd, inputs=List(b5973, b5974)).name("x10036").ctrl(x10062) // And(b5973,b5974)
    val x10037 = OpDef(op=BitAnd, inputs=List(x10036, b5925)).name("x10037").ctrl(x10062) // And(x10036,b5925)
    val x10038 = LoadBanks(List(x9662_d0_b0), List(b5972)).name("x10038").ctrl(x10062) // SRAMLoad(x9662,ArrayBuffer(Const(512)),List(b5972),Const(0),x10037)
    val x10039 = ReadMem(x10006_d0).name("x10039").ctrl(x10062) // RegRead(x10006)
    val x10040 = OpDef(op=FixAdd, inputs=List(x10038, x10039)).name("x10040").ctrl(x10062) // FixAdd(x10038,x10039)
    val x10041 = ReadMem(x10005).name("x10041").ctrl(x10062) // RegRead(x10005)
    val x10042 = OpDef(op=FixAdd, inputs=List(x10040, x10041)).name("x10042").ctrl(x10062) // FixAdd(x10040,x10041)
    val x10043 = OpDef(op=FixLt, inputs=List(b5972, Const(128))).name("x10043").ctrl(x10062) // FixLt(b5972,Const(128))
    val x10044 = OpDef(op=BitNot, inputs=List(x10043)).name("x10044").ctrl(x10062) // Not(x10043)
    val x10045 = OpDef(op=FixLeq, inputs=List(Const(128), b5972)).name("x10045").ctrl(x10062) // FixLeq(Const(128),b5972)
    val x10046 = OpDef(op=FixLt, inputs=List(b5972, Const(256))).name("x10046").ctrl(x10062) // FixLt(b5972,Const(256))
    val x10047 = OpDef(op=BitAnd, inputs=List(x10045, x10046)).name("x10047").ctrl(x10062) // And(x10045,x10046)
    val x10048 = OpDef(op=BitAnd, inputs=List(x10047, x10044)).name("x10048").ctrl(x10062) // And(x10047,x10044)
    val x10049 = OpDef(op=BitNot, inputs=List(x10047)).name("x10049").ctrl(x10062) // Not(x10047)
    val x10050 = OpDef(op=BitAnd, inputs=List(x10049, x10044)).name("x10050").ctrl(x10062) // And(x10049,x10044)
    val x10051 = OpDef(op=FixLeq, inputs=List(Const(256), b5972)).name("x10051").ctrl(x10062) // FixLeq(Const(256),b5972)
    val x10052 = OpDef(op=FixLt, inputs=List(b5972, Const(384))).name("x10052").ctrl(x10062) // FixLt(b5972,Const(384))
    val x10053 = OpDef(op=BitAnd, inputs=List(x10051, x10052)).name("x10053").ctrl(x10062) // And(x10051,x10052)
    val x10054 = OpDef(op=BitAnd, inputs=List(x10053, x10050)).name("x10054").ctrl(x10062) // And(x10053,x10050)
    val x10055 = OpDef(op=BitNot, inputs=List(x10053)).name("x10055").ctrl(x10062) // Not(x10053)
    val x10056 = OpDef(op=BitAnd, inputs=List(x10055, x10050)).name("x10056").ctrl(x10062) // And(x10055,x10050)
    val x10057_x10031_d0 = WriteMem(x10031_d0, x10042).name("x10057_x10031_d0").ctrl(x10062) // RegWrite(x10031,x10042,x10037)
    val x10057_x10031_d1 = WriteMem(x10031_d1, x10042).name("x10057_x10031_d1").ctrl(x10062) // RegWrite(x10031,x10042,x10037)
    val x10057_x10031_d2 = WriteMem(x10031_d2, x10042).name("x10057_x10031_d2").ctrl(x10062) // RegWrite(x10031,x10042,x10037)
    val x10057_x10031_d3 = WriteMem(x10031_d3, x10042).name("x10057_x10031_d3").ctrl(x10062) // RegWrite(x10031,x10042,x10037)
    val x10058_x10032_d0 = WriteMem(x10032_d0, x10043).name("x10058_x10032_d0").ctrl(x10062) // RegWrite(x10032,x10043,x10037)
    val x10058_x10032_d1 = WriteMem(x10032_d1, x10043).name("x10058_x10032_d1").ctrl(x10062) // RegWrite(x10032,x10043,x10037)
    val x10059_x10033_d0 = WriteMem(x10033_d0, x10048).name("x10059_x10033_d0").ctrl(x10062) // RegWrite(x10033,x10048,x10037)
    val x10059_x10033_d1 = WriteMem(x10033_d1, x10048).name("x10059_x10033_d1").ctrl(x10062) // RegWrite(x10033,x10048,x10037)
    val x10060_x10034_d0 = WriteMem(x10034_d0, x10054).name("x10060_x10034_d0").ctrl(x10062) // RegWrite(x10034,x10054,x10037)
    val x10060_x10034_d1 = WriteMem(x10034_d1, x10054).name("x10060_x10034_d1").ctrl(x10062) // RegWrite(x10034,x10054,x10037)
    val x10061_x10035_d0 = WriteMem(x10035_d0, x10056).name("x10061_x10035_d0").ctrl(x10062) // RegWrite(x10035,x10056,x10037)
    val x10061_x10035_d1 = WriteMem(x10035_d1, x10056).name("x10061_x10035_d1").ctrl(x10062) // RegWrite(x10035,x10056,x10037)
    val x10063 = ReadMem(x10035_d1).name("x10063").ctrl(x10099) // RegRead(x10035)
    val x10064 = ReadMem(x10034_d1).name("x10064").ctrl(x10099) // RegRead(x10034)
    val x10065 = ReadMem(x10033_d1).name("x10065").ctrl(x10099) // RegRead(x10033)
    val x10066 = ReadMem(x10032_d1).name("x10066").ctrl(x10099) // RegRead(x10032)
    val x10098 = UnitController(style=ForkSwitch, level=OuterControl).name("x10098").ctrl(x10099) // //TODO Switch(Block(x10097),List(x10066, x10065, x10064, x10063),List(x10073, x10081, x10089, x10097))
    val x10073 = UnitController(style=MetaPipe, level=InnerControl).name("x10073").ctrl(x10098) // //TODO SwitchCase(Block(x10072))
    val x10067 = ReadMem(x10032_d0).name("x10067").ctrl(x10073) // RegRead(x10032)
    val x10068 = ReadMem(x10031_d3).name("x10068").ctrl(x10073) // RegRead(x10031)
    val x10069 = OpDef(op=BitAnd, inputs=List(b5973, b5974)).name("x10069").ctrl(x10073) // And(b5973,b5974)
    val x10070 = OpDef(op=BitAnd, inputs=List(x10069, b5925)).name("x10070").ctrl(x10073) // And(x10069,b5925)
    val x10071 = OpDef(op=BitAnd, inputs=List(x10067, x10070)).name("x10071").ctrl(x10073) // And(x10067,x10070)
    val x10072 = StoreBanks(List(x9672_d0_b0, x9672_d1_b0), List(b5971, b5972), x10068).name("x10072").ctrl(x10073) // SRAMStore(x9672,ArrayBuffer(Const(1), Const(128)),List(b5971, b5972),Const(0),x10068,x10071)
    val x10081 = UnitController(style=MetaPipe, level=InnerControl).name("x10081").ctrl(x10098) // //TODO SwitchCase(Block(x10080))
    val x10074 = OpDef(op=FixSub, inputs=List(b5972, Const(128))).name("x10074").ctrl(x10081) // FixSub(b5972,Const(128))
    val x10075 = ReadMem(x10033_d0).name("x10075").ctrl(x10081) // RegRead(x10033)
    val x10076 = ReadMem(x10031_d2).name("x10076").ctrl(x10081) // RegRead(x10031)
    val x10077 = OpDef(op=BitAnd, inputs=List(b5973, b5974)).name("x10077").ctrl(x10081) // And(b5973,b5974)
    val x10078 = OpDef(op=BitAnd, inputs=List(x10077, b5925)).name("x10078").ctrl(x10081) // And(x10077,b5925)
    val x10079 = OpDef(op=BitAnd, inputs=List(x10075, x10078)).name("x10079").ctrl(x10081) // And(x10075,x10078)
    val x10080 = StoreBanks(List(x9673_d0_b0, x9673_d1_b0), List(b5971, x10074), x10076).name("x10080").ctrl(x10081) // SRAMStore(x9673,ArrayBuffer(Const(1), Const(128)),List(b5971, x10074),Const(0),x10076,x10079)
    val x10089 = UnitController(style=MetaPipe, level=InnerControl).name("x10089").ctrl(x10098) // //TODO SwitchCase(Block(x10088))
    val x10082 = OpDef(op=FixSub, inputs=List(b5972, Const(256))).name("x10082").ctrl(x10089) // FixSub(b5972,Const(256))
    val x10083 = ReadMem(x10034_d0).name("x10083").ctrl(x10089) // RegRead(x10034)
    val x10084 = ReadMem(x10031_d1).name("x10084").ctrl(x10089) // RegRead(x10031)
    val x10085 = OpDef(op=BitAnd, inputs=List(b5973, b5974)).name("x10085").ctrl(x10089) // And(b5973,b5974)
    val x10086 = OpDef(op=BitAnd, inputs=List(x10085, b5925)).name("x10086").ctrl(x10089) // And(x10085,b5925)
    val x10087 = OpDef(op=BitAnd, inputs=List(x10083, x10086)).name("x10087").ctrl(x10089) // And(x10083,x10086)
    val x10088 = StoreBanks(List(x9674_d0_b0, x9674_d1_b0), List(b5971, x10082), x10084).name("x10088").ctrl(x10089) // SRAMStore(x9674,ArrayBuffer(Const(1), Const(128)),List(b5971, x10082),Const(0),x10084,x10087)
    val x10097 = UnitController(style=MetaPipe, level=InnerControl).name("x10097").ctrl(x10098) // //TODO SwitchCase(Block(x10096))
    val x10090 = OpDef(op=FixSub, inputs=List(b5972, Const(384))).name("x10090").ctrl(x10097) // FixSub(b5972,Const(384))
    val x10091 = ReadMem(x10035_d0).name("x10091").ctrl(x10097) // RegRead(x10035)
    val x10092 = ReadMem(x10031_d0).name("x10092").ctrl(x10097) // RegRead(x10031)
    val x10093 = OpDef(op=BitAnd, inputs=List(b5973, b5974)).name("x10093").ctrl(x10097) // And(b5973,b5974)
    val x10094 = OpDef(op=BitAnd, inputs=List(x10093, b5925)).name("x10094").ctrl(x10097) // And(x10093,b5925)
    val x10095 = OpDef(op=BitAnd, inputs=List(x10091, x10094)).name("x10095").ctrl(x10097) // And(x10091,x10094)
    val x10096 = StoreBanks(List(x9675_d0_b0, x9675_d1_b0), List(b5971, x10090), x10092).name("x10096").ctrl(x10097) // SRAMStore(x9675,ArrayBuffer(Const(1), Const(128)),List(b5971, x10090),Const(0),x10092,x10095)
    val x10100 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10100").ctrl(x10332) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10101 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10101").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10102 = CounterChain(List(x10101,x10100)).name("x10102").ctrl(x10332) // CounterChainNew(List(x10101, x10100))
    val x10123 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10102).name("x10123").ctrl(x10332) // UnrolledForeach(List(b5925),x10102,Block(Const(())),List(List(b6095), List(b6096)),List(List(b6097), List(b6098)))
    val b6095 = CounterIter(x10101, Some(0)).ctrl(x10123).name("b6095")
    val b6097 = Const(true).ctrl(x10123).name("b6097")
    val b6096 = CounterIter(x10100, None).ctrl(x10123).name("b6096")
    val b6098 = Const(true).ctrl(x10123).name("b6098")
    val x10103 = OpDef(op=BitAnd, inputs=List(b6097, b6098)).name("x10103").ctrl(x10123) // And(b6097,b6098)
    val x10104 = OpDef(op=BitAnd, inputs=List(x10103, b5925)).name("x10104").ctrl(x10123) // And(x10103,b5925)
    val x10105 = LoadBanks(List(x9669_d3_b0), List(b6095, b6096)).name("x10105").ctrl(x10123) // ParSRAMLoad(x9669,List(List(b6095, b6096)),List(x10104))
    val x10106 = x10105 // x10106 = VectorApply(x10105,0)
    val x10107 = LoadBanks(List(x9673_d1_b0), List(b6095, b6096)).name("x10107").ctrl(x10123) // ParSRAMLoad(x9673,List(List(b6095, b6096)),List(x10104))
    val x10108 = x10107 // x10108 = VectorApply(x10107,0)
    val x10109 = OpDef(op=FixMul, inputs=List(x10106, x10108)).name("x10109").ctrl(x10123) // FixMul(x10106,x10108)
    val x10110 = LoadBanks(List(x9672_d1_b0), List(b6095, b6096)).name("x10110").ctrl(x10123) // ParSRAMLoad(x9672,List(List(b6095, b6096)),List(x10104))
    val x10111 = x10110 // x10111 = VectorApply(x10110,0)
    val x10112 = LoadBanks(List(x9675_d1_b0), List(b6095, b6096)).name("x10112").ctrl(x10123) // ParSRAMLoad(x9675,List(List(b6095, b6096)),List(x10104))
    val x10113 = x10112 // x10113 = VectorApply(x10112,0)
    val x10114 = OpDef(op=FixMul, inputs=List(x10111, x10113)).name("x10114").ctrl(x10123) // FixMul(x10111,x10113)
    val x10115 = OpDef(op=FixAdd, inputs=List(x10109, x10114)).name("x10115").ctrl(x10123) // FixAdd(x10109,x10114)
    val x10116 = StoreBanks(List(x9669_d0_b0, x9669_d1_b0, x9669_d2_b0, x9669_d3_b0), List(b6095, b6096), x10115).name("x10116").ctrl(x10123) // ParSRAMStore(x9669,List(List(b6095, b6096)),List(x10115),List(x10104))
    val x10117 = LoadBanks(List(x9669_d2_b0), List(b6095, b6096)).name("x10117").ctrl(x10123) // ParSRAMLoad(x9669,List(List(b6095, b6096)),List(x10104))
    val x10118 = x10117 // x10118 = VectorApply(x10117,0)
    val x10119 = LoadBanks(List(x9674_d1_b0), List(b6095, b6096)).name("x10119").ctrl(x10123) // ParSRAMLoad(x9674,List(List(b6095, b6096)),List(x10104))
    val x10120 = x10119 // x10120 = VectorApply(x10119,0)
    val x10121 = OpDef(op=FixMul, inputs=List(x10118, x10120)).name("x10121").ctrl(x10123) // FixMul(x10118,x10120)
    val x10122 = StoreBanks(List(x9670_d0_b0, x9670_d1_b0, x9670_d2_b0, x9670_d3_b0), List(b6095, b6096), x10121).name("x10122").ctrl(x10123) // ParSRAMStore(x9670,List(List(b6095, b6096)),List(x10121),List(x10104))
    val x10124 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10124").ctrl(x10332) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10125 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10125").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10126 = CounterChain(List(x10125,x10124)).name("x10126").ctrl(x10332) // CounterChainNew(List(x10125, x10124))
    val x10239 = LoopController(style=MetaPipe, level=OuterControl, cchain=x10126).name("x10239").ctrl(x10332) // UnrolledForeach(List(b5925),x10126,Block(Const(())),List(List(b6123), List(b6124)),List(List(b6125), List(b6126)))
    val b6123 = CounterIter(x10125, Some(0)).ctrl(x10239).name("b6123")
    val b6125 = Const(true).ctrl(x10239).name("b6125")
    val b6124 = CounterIter(x10124, Some(0)).ctrl(x10239).name("b6124")
    val b6126 = Const(true).ctrl(x10239).name("b6126")
    val x10127_d0 = Reg(init=Some(0.0)).name("x10127_d0").ctrl(x10239) // x10127 = RegNew(Const(0))
    isAccum(x10127_d0) = false
    bufferDepthOf(x10127_d0) = 2
    val x10127_d1 = Reg(init=Some(0.0)).name("x10127_d1").ctrl(x10239) // x10127 = RegNew(Const(0))
    isAccum(x10127_d1) = true
    bufferDepthOf(x10127_d1) = 1
    val x10128 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10128").ctrl(x10239) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10129 = CounterChain(List(x10128)).name("x10129").ctrl(x10239) // CounterChainNew(List(x10128))
    val x10144 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10129).name("x10144").ctrl(x10239) // UnrolledReduce(List(b6125, b6126, b5925),x10129,x10127,Block((x10127) => Const(())),List(List(b6130)),List(List(b6131)))
    val b6130 = CounterIter(x10128, None).ctrl(x10144).name("b6130")
    val b6131 = Const(true).ctrl(x10144).name("b6131")
    val x10130 = OpDef(op=BitAnd, inputs=List(b6131, b6125)).name("x10130").ctrl(x10144) // And(b6131,b6125)
    val x10131 = OpDef(op=BitAnd, inputs=List(b6126, b5925)).name("x10131").ctrl(x10144) // And(b6126,b5925)
    val x10132 = OpDef(op=BitAnd, inputs=List(x10130, x10131)).name("x10132").ctrl(x10144) // And(x10130,x10131)
    val x10133 = LoadBanks(List(x9671_d0_b0), List(b6123, b6130)).name("x10133").ctrl(x10144) // ParSRAMLoad(x9671,List(List(b6123, b6130)),List(x10132))
    val x10134 = x10133 // x10134 = VectorApply(x10133,0)
    val x10135 = LoadBanks(List(x9663_d0_b0), List(b6130, b6124)).name("x10135").ctrl(x10144) // ParSRAMLoad(x9663,List(List(b6130, b6124)),List(x10132))
    val x10136 = x10135 // x10136 = VectorApply(x10135,0)
    val x10137 = OpDef(op=FixMul, inputs=List(x10134, x10136)).name("x10137").ctrl(x10144) // FixMul(x10134,x10136)
    val x10138 = ReadMem(x10127_d1).name("x10138").ctrl(x10144) // RegRead(x10127)
    val x10139 = OpDef(op=FixEql, inputs=List(b6130, Const(0))).name("x10139").ctrl(x10144) // FixEql(b6130,Const(0))
    val x10140 = ReduceAccumOp(op=FixAdd, input=x10137, accum=x10138).name("x10140").ctrl(x10144) // FixAdd(x10137,x10138)
    val x10141 = OpDef(op=BitAnd, inputs=List(b6125, b6126)).name("x10141").ctrl(x10144) // And(b6125,b6126)
    val x10142 = OpDef(op=BitAnd, inputs=List(x10141, b5925)).name("x10142").ctrl(x10144) // And(x10141,b5925)
    val x10143_x10127_d0 = WriteMem(x10127_d0, x10140).name("x10143_x10127_d0").ctrl(x10144) // RegWrite(x10127,x10140,x10142)
    val x10143_x10127_d1 = WriteMem(x10127_d1, x10140).name("x10143_x10127_d1").ctrl(x10144) // RegWrite(x10127,x10140,x10142)
    val x10145 = Reg(init=Some(0.0)).name("x10145").ctrl(x10239) // x10145 = RegNew(Const(0))
    isAccum(x10145) = false
    bufferDepthOf(x10145) = 3
    val x10146_d0 = Reg(init=Some(0.0)).name("x10146_d0").ctrl(x10239) // x10146 = RegNew(Const(0))
    isAccum(x10146_d0) = false
    bufferDepthOf(x10146_d0) = 2
    val x10146_d1 = Reg(init=Some(0.0)).name("x10146_d1").ctrl(x10239) // x10146 = RegNew(Const(0))
    isAccum(x10146_d1) = true
    bufferDepthOf(x10146_d1) = 1
    val x10153 = UnitController(style=SeqPipe, level=InnerControl).name("x10153").ctrl(x10239) // UnitPipe(List(b6125, b6126, b5925),Block(Const(())))
    val x10147 = OpDef(op=BitAnd, inputs=List(b6125, b6126)).name("x10147").ctrl(x10153) // And(b6125,b6126)
    val x10148 = OpDef(op=BitAnd, inputs=List(x10147, b5925)).name("x10148").ctrl(x10153) // And(x10147,b5925)
    val x10149 = LoadBanks(List(x9664_d0_b0), List(b6124)).name("x10149").ctrl(x10153) // SRAMLoad(x9664,ArrayBuffer(Const(512)),List(b6124),Const(0),x10148)
    val x10150 = ReadMem(x10127_d0).name("x10150").ctrl(x10153) // RegRead(x10127)
    val x10151 = OpDef(op=FixAdd, inputs=List(x10149, x10150)).name("x10151").ctrl(x10153) // FixAdd(x10149,x10150)
    val x10152_x10145 = WriteMem(x10145, x10151).name("x10152_x10145").ctrl(x10153) // RegWrite(x10145,x10151,x10148)
    val x10154 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10154").ctrl(x10239) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10155 = CounterChain(List(x10154)).name("x10155").ctrl(x10239) // CounterChainNew(List(x10154))
    val x10170 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10155).name("x10170").ctrl(x10239) // UnrolledReduce(List(b6125, b6126, b5925),x10155,x10146,Block((x10146) => Const(())),List(List(b6158)),List(List(b6159)))
    val b6158 = CounterIter(x10154, None).ctrl(x10170).name("b6158")
    val b6159 = Const(true).ctrl(x10170).name("b6159")
    val x10156 = OpDef(op=BitAnd, inputs=List(b6159, b6125)).name("x10156").ctrl(x10170) // And(b6159,b6125)
    val x10157 = OpDef(op=BitAnd, inputs=List(b6126, b5925)).name("x10157").ctrl(x10170) // And(b6126,b5925)
    val x10158 = OpDef(op=BitAnd, inputs=List(x10156, x10157)).name("x10158").ctrl(x10170) // And(x10156,x10157)
    val x10159 = LoadBanks(List(x9670_d2_b0), List(b6123, b6158)).name("x10159").ctrl(x10170) // ParSRAMLoad(x9670,List(List(b6123, b6158)),List(x10158))
    val x10160 = x10159 // x10160 = VectorApply(x10159,0)
    val x10161 = LoadBanks(List(x9665_d0_b0), List(b6158, b6124)).name("x10161").ctrl(x10170) // ParSRAMLoad(x9665,List(List(b6158, b6124)),List(x10158))
    val x10162 = x10161 // x10162 = VectorApply(x10161,0)
    val x10163 = OpDef(op=FixMul, inputs=List(x10160, x10162)).name("x10163").ctrl(x10170) // FixMul(x10160,x10162)
    val x10164 = ReadMem(x10146_d1).name("x10164").ctrl(x10170) // RegRead(x10146)
    val x10165 = OpDef(op=FixEql, inputs=List(b6158, Const(0))).name("x10165").ctrl(x10170) // FixEql(b6158,Const(0))
    val x10166 = ReduceAccumOp(op=FixAdd, input=x10163, accum=x10164).name("x10166").ctrl(x10170) // FixAdd(x10163,x10164)
    val x10167 = OpDef(op=BitAnd, inputs=List(b6125, b6126)).name("x10167").ctrl(x10170) // And(b6125,b6126)
    val x10168 = OpDef(op=BitAnd, inputs=List(x10167, b5925)).name("x10168").ctrl(x10170) // And(x10167,b5925)
    val x10169_x10146_d0 = WriteMem(x10146_d0, x10166).name("x10169_x10146_d0").ctrl(x10170) // RegWrite(x10146,x10166,x10168)
    val x10169_x10146_d1 = WriteMem(x10146_d1, x10166).name("x10169_x10146_d1").ctrl(x10170) // RegWrite(x10146,x10166,x10168)
    val x10171_d0 = Reg(init=Some(0.0)).name("x10171_d0").ctrl(x10239) // x10171 = RegNew(Const(0))
    isAccum(x10171_d0) = false
    bufferDepthOf(x10171_d0) = 2
    val x10171_d1 = Reg(init=Some(0.0)).name("x10171_d1").ctrl(x10239) // x10171 = RegNew(Const(0))
    isAccum(x10171_d1) = false
    bufferDepthOf(x10171_d1) = 2
    val x10171_d2 = Reg(init=Some(0.0)).name("x10171_d2").ctrl(x10239) // x10171 = RegNew(Const(0))
    isAccum(x10171_d2) = false
    bufferDepthOf(x10171_d2) = 2
    val x10171_d3 = Reg(init=Some(0.0)).name("x10171_d3").ctrl(x10239) // x10171 = RegNew(Const(0))
    isAccum(x10171_d3) = false
    bufferDepthOf(x10171_d3) = 2
    val x10172_d0 = Reg(init=Some(false)).name("x10172_d0").ctrl(x10239) // x10172 = RegNew(Const(false))
    isAccum(x10172_d0) = false
    bufferDepthOf(x10172_d0) = 2
    val x10172_d1 = Reg(init=Some(false)).name("x10172_d1").ctrl(x10239) // x10172 = RegNew(Const(false))
    isAccum(x10172_d1) = false
    bufferDepthOf(x10172_d1) = 2
    val x10173_d0 = Reg(init=Some(false)).name("x10173_d0").ctrl(x10239) // x10173 = RegNew(Const(false))
    isAccum(x10173_d0) = false
    bufferDepthOf(x10173_d0) = 2
    val x10173_d1 = Reg(init=Some(false)).name("x10173_d1").ctrl(x10239) // x10173 = RegNew(Const(false))
    isAccum(x10173_d1) = false
    bufferDepthOf(x10173_d1) = 2
    val x10174_d0 = Reg(init=Some(false)).name("x10174_d0").ctrl(x10239) // x10174 = RegNew(Const(false))
    isAccum(x10174_d0) = false
    bufferDepthOf(x10174_d0) = 2
    val x10174_d1 = Reg(init=Some(false)).name("x10174_d1").ctrl(x10239) // x10174 = RegNew(Const(false))
    isAccum(x10174_d1) = false
    bufferDepthOf(x10174_d1) = 2
    val x10175_d0 = Reg(init=Some(false)).name("x10175_d0").ctrl(x10239) // x10175 = RegNew(Const(false))
    isAccum(x10175_d0) = false
    bufferDepthOf(x10175_d0) = 2
    val x10175_d1 = Reg(init=Some(false)).name("x10175_d1").ctrl(x10239) // x10175 = RegNew(Const(false))
    isAccum(x10175_d1) = false
    bufferDepthOf(x10175_d1) = 2
    val x10202 = UnitController(style=SeqPipe, level=InnerControl).name("x10202").ctrl(x10239) // UnitPipe(List(b6125, b6126, b5925),Block(Const(())))
    val x10176 = OpDef(op=BitAnd, inputs=List(b6125, b6126)).name("x10176").ctrl(x10202) // And(b6125,b6126)
    val x10177 = OpDef(op=BitAnd, inputs=List(x10176, b5925)).name("x10177").ctrl(x10202) // And(x10176,b5925)
    val x10178 = LoadBanks(List(x9666_d0_b0), List(b6124)).name("x10178").ctrl(x10202) // SRAMLoad(x9666,ArrayBuffer(Const(512)),List(b6124),Const(0),x10177)
    val x10179 = ReadMem(x10146_d0).name("x10179").ctrl(x10202) // RegRead(x10146)
    val x10180 = OpDef(op=FixAdd, inputs=List(x10178, x10179)).name("x10180").ctrl(x10202) // FixAdd(x10178,x10179)
    val x10181 = ReadMem(x10145).name("x10181").ctrl(x10202) // RegRead(x10145)
    val x10182 = OpDef(op=FixAdd, inputs=List(x10180, x10181)).name("x10182").ctrl(x10202) // FixAdd(x10180,x10181)
    val x10183 = OpDef(op=FixLt, inputs=List(b6124, Const(128))).name("x10183").ctrl(x10202) // FixLt(b6124,Const(128))
    val x10184 = OpDef(op=BitNot, inputs=List(x10183)).name("x10184").ctrl(x10202) // Not(x10183)
    val x10185 = OpDef(op=FixLeq, inputs=List(Const(128), b6124)).name("x10185").ctrl(x10202) // FixLeq(Const(128),b6124)
    val x10186 = OpDef(op=FixLt, inputs=List(b6124, Const(256))).name("x10186").ctrl(x10202) // FixLt(b6124,Const(256))
    val x10187 = OpDef(op=BitAnd, inputs=List(x10185, x10186)).name("x10187").ctrl(x10202) // And(x10185,x10186)
    val x10188 = OpDef(op=BitAnd, inputs=List(x10187, x10184)).name("x10188").ctrl(x10202) // And(x10187,x10184)
    val x10189 = OpDef(op=BitNot, inputs=List(x10187)).name("x10189").ctrl(x10202) // Not(x10187)
    val x10190 = OpDef(op=BitAnd, inputs=List(x10189, x10184)).name("x10190").ctrl(x10202) // And(x10189,x10184)
    val x10191 = OpDef(op=FixLeq, inputs=List(Const(256), b6124)).name("x10191").ctrl(x10202) // FixLeq(Const(256),b6124)
    val x10192 = OpDef(op=FixLt, inputs=List(b6124, Const(384))).name("x10192").ctrl(x10202) // FixLt(b6124,Const(384))
    val x10193 = OpDef(op=BitAnd, inputs=List(x10191, x10192)).name("x10193").ctrl(x10202) // And(x10191,x10192)
    val x10194 = OpDef(op=BitAnd, inputs=List(x10193, x10190)).name("x10194").ctrl(x10202) // And(x10193,x10190)
    val x10195 = OpDef(op=BitNot, inputs=List(x10193)).name("x10195").ctrl(x10202) // Not(x10193)
    val x10196 = OpDef(op=BitAnd, inputs=List(x10195, x10190)).name("x10196").ctrl(x10202) // And(x10195,x10190)
    val x10197_x10171_d0 = WriteMem(x10171_d0, x10182).name("x10197_x10171_d0").ctrl(x10202) // RegWrite(x10171,x10182,x10177)
    val x10197_x10171_d1 = WriteMem(x10171_d1, x10182).name("x10197_x10171_d1").ctrl(x10202) // RegWrite(x10171,x10182,x10177)
    val x10197_x10171_d2 = WriteMem(x10171_d2, x10182).name("x10197_x10171_d2").ctrl(x10202) // RegWrite(x10171,x10182,x10177)
    val x10197_x10171_d3 = WriteMem(x10171_d3, x10182).name("x10197_x10171_d3").ctrl(x10202) // RegWrite(x10171,x10182,x10177)
    val x10198_x10172_d0 = WriteMem(x10172_d0, x10183).name("x10198_x10172_d0").ctrl(x10202) // RegWrite(x10172,x10183,x10177)
    val x10198_x10172_d1 = WriteMem(x10172_d1, x10183).name("x10198_x10172_d1").ctrl(x10202) // RegWrite(x10172,x10183,x10177)
    val x10199_x10173_d0 = WriteMem(x10173_d0, x10188).name("x10199_x10173_d0").ctrl(x10202) // RegWrite(x10173,x10188,x10177)
    val x10199_x10173_d1 = WriteMem(x10173_d1, x10188).name("x10199_x10173_d1").ctrl(x10202) // RegWrite(x10173,x10188,x10177)
    val x10200_x10174_d0 = WriteMem(x10174_d0, x10194).name("x10200_x10174_d0").ctrl(x10202) // RegWrite(x10174,x10194,x10177)
    val x10200_x10174_d1 = WriteMem(x10174_d1, x10194).name("x10200_x10174_d1").ctrl(x10202) // RegWrite(x10174,x10194,x10177)
    val x10201_x10175_d0 = WriteMem(x10175_d0, x10196).name("x10201_x10175_d0").ctrl(x10202) // RegWrite(x10175,x10196,x10177)
    val x10201_x10175_d1 = WriteMem(x10175_d1, x10196).name("x10201_x10175_d1").ctrl(x10202) // RegWrite(x10175,x10196,x10177)
    val x10203 = ReadMem(x10175_d1).name("x10203").ctrl(x10239) // RegRead(x10175)
    val x10204 = ReadMem(x10174_d1).name("x10204").ctrl(x10239) // RegRead(x10174)
    val x10205 = ReadMem(x10173_d1).name("x10205").ctrl(x10239) // RegRead(x10173)
    val x10206 = ReadMem(x10172_d1).name("x10206").ctrl(x10239) // RegRead(x10172)
    val x10238 = UnitController(style=ForkSwitch, level=OuterControl).name("x10238").ctrl(x10239) // //TODO Switch(Block(x10237),List(x10206, x10205, x10204, x10203),List(x10213, x10221, x10229, x10237))
    val x10213 = UnitController(style=MetaPipe, level=InnerControl).name("x10213").ctrl(x10238) // //TODO SwitchCase(Block(x10212))
    val x10207 = ReadMem(x10172_d0).name("x10207").ctrl(x10213) // RegRead(x10172)
    val x10208 = ReadMem(x10171_d3).name("x10208").ctrl(x10213) // RegRead(x10171)
    val x10209 = OpDef(op=BitAnd, inputs=List(b6125, b6126)).name("x10209").ctrl(x10213) // And(b6125,b6126)
    val x10210 = OpDef(op=BitAnd, inputs=List(x10209, b5925)).name("x10210").ctrl(x10213) // And(x10209,b5925)
    val x10211 = OpDef(op=BitAnd, inputs=List(x10207, x10210)).name("x10211").ctrl(x10213) // And(x10207,x10210)
    val x10212 = StoreBanks(List(x9672_d0_b0, x9672_d1_b0), List(b6123, b6124), x10208).name("x10212").ctrl(x10213) // SRAMStore(x9672,ArrayBuffer(Const(1), Const(128)),List(b6123, b6124),Const(0),x10208,x10211)
    val x10221 = UnitController(style=MetaPipe, level=InnerControl).name("x10221").ctrl(x10238) // //TODO SwitchCase(Block(x10220))
    val x10214 = OpDef(op=FixSub, inputs=List(b6124, Const(128))).name("x10214").ctrl(x10221) // FixSub(b6124,Const(128))
    val x10215 = ReadMem(x10173_d0).name("x10215").ctrl(x10221) // RegRead(x10173)
    val x10216 = ReadMem(x10171_d2).name("x10216").ctrl(x10221) // RegRead(x10171)
    val x10217 = OpDef(op=BitAnd, inputs=List(b6125, b6126)).name("x10217").ctrl(x10221) // And(b6125,b6126)
    val x10218 = OpDef(op=BitAnd, inputs=List(x10217, b5925)).name("x10218").ctrl(x10221) // And(x10217,b5925)
    val x10219 = OpDef(op=BitAnd, inputs=List(x10215, x10218)).name("x10219").ctrl(x10221) // And(x10215,x10218)
    val x10220 = StoreBanks(List(x9673_d0_b0, x9673_d1_b0), List(b6123, x10214), x10216).name("x10220").ctrl(x10221) // SRAMStore(x9673,ArrayBuffer(Const(1), Const(128)),List(b6123, x10214),Const(0),x10216,x10219)
    val x10229 = UnitController(style=MetaPipe, level=InnerControl).name("x10229").ctrl(x10238) // //TODO SwitchCase(Block(x10228))
    val x10222 = OpDef(op=FixSub, inputs=List(b6124, Const(256))).name("x10222").ctrl(x10229) // FixSub(b6124,Const(256))
    val x10223 = ReadMem(x10174_d0).name("x10223").ctrl(x10229) // RegRead(x10174)
    val x10224 = ReadMem(x10171_d1).name("x10224").ctrl(x10229) // RegRead(x10171)
    val x10225 = OpDef(op=BitAnd, inputs=List(b6125, b6126)).name("x10225").ctrl(x10229) // And(b6125,b6126)
    val x10226 = OpDef(op=BitAnd, inputs=List(x10225, b5925)).name("x10226").ctrl(x10229) // And(x10225,b5925)
    val x10227 = OpDef(op=BitAnd, inputs=List(x10223, x10226)).name("x10227").ctrl(x10229) // And(x10223,x10226)
    val x10228 = StoreBanks(List(x9674_d0_b0, x9674_d1_b0), List(b6123, x10222), x10224).name("x10228").ctrl(x10229) // SRAMStore(x9674,ArrayBuffer(Const(1), Const(128)),List(b6123, x10222),Const(0),x10224,x10227)
    val x10237 = UnitController(style=MetaPipe, level=InnerControl).name("x10237").ctrl(x10238) // //TODO SwitchCase(Block(x10236))
    val x10230 = OpDef(op=FixSub, inputs=List(b6124, Const(384))).name("x10230").ctrl(x10237) // FixSub(b6124,Const(384))
    val x10231 = ReadMem(x10175_d0).name("x10231").ctrl(x10237) // RegRead(x10175)
    val x10232 = ReadMem(x10171_d0).name("x10232").ctrl(x10237) // RegRead(x10171)
    val x10233 = OpDef(op=BitAnd, inputs=List(b6125, b6126)).name("x10233").ctrl(x10237) // And(b6125,b6126)
    val x10234 = OpDef(op=BitAnd, inputs=List(x10233, b5925)).name("x10234").ctrl(x10237) // And(x10233,b5925)
    val x10235 = OpDef(op=BitAnd, inputs=List(x10231, x10234)).name("x10235").ctrl(x10237) // And(x10231,x10234)
    val x10236 = StoreBanks(List(x9675_d0_b0, x9675_d1_b0), List(b6123, x10230), x10232).name("x10236").ctrl(x10237) // SRAMStore(x9675,ArrayBuffer(Const(1), Const(128)),List(b6123, x10230),Const(0),x10232,x10235)
    val x10240 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10240").ctrl(x10332) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10241 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10241").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10242 = CounterChain(List(x10241,x10240)).name("x10242").ctrl(x10332) // CounterChainNew(List(x10241, x10240))
    val x10263 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10242).name("x10263").ctrl(x10332) // UnrolledForeach(List(b5925),x10242,Block(Const(())),List(List(b6247), List(b6248)),List(List(b6249), List(b6250)))
    val b6247 = CounterIter(x10241, Some(0)).ctrl(x10263).name("b6247")
    val b6249 = Const(true).ctrl(x10263).name("b6249")
    val b6248 = CounterIter(x10240, None).ctrl(x10263).name("b6248")
    val b6250 = Const(true).ctrl(x10263).name("b6250")
    val x10243 = OpDef(op=BitAnd, inputs=List(b6249, b6250)).name("x10243").ctrl(x10263) // And(b6249,b6250)
    val x10244 = OpDef(op=BitAnd, inputs=List(x10243, b5925)).name("x10244").ctrl(x10263) // And(x10243,b5925)
    val x10245 = LoadBanks(List(x9669_d1_b0), List(b6247, b6248)).name("x10245").ctrl(x10263) // ParSRAMLoad(x9669,List(List(b6247, b6248)),List(x10244))
    val x10246 = x10245 // x10246 = VectorApply(x10245,0)
    val x10247 = LoadBanks(List(x9673_d0_b0), List(b6247, b6248)).name("x10247").ctrl(x10263) // ParSRAMLoad(x9673,List(List(b6247, b6248)),List(x10244))
    val x10248 = x10247 // x10248 = VectorApply(x10247,0)
    val x10249 = OpDef(op=FixMul, inputs=List(x10246, x10248)).name("x10249").ctrl(x10263) // FixMul(x10246,x10248)
    val x10250 = LoadBanks(List(x9672_d0_b0), List(b6247, b6248)).name("x10250").ctrl(x10263) // ParSRAMLoad(x9672,List(List(b6247, b6248)),List(x10244))
    val x10251 = x10250 // x10251 = VectorApply(x10250,0)
    val x10252 = LoadBanks(List(x9675_d0_b0), List(b6247, b6248)).name("x10252").ctrl(x10263) // ParSRAMLoad(x9675,List(List(b6247, b6248)),List(x10244))
    val x10253 = x10252 // x10253 = VectorApply(x10252,0)
    val x10254 = OpDef(op=FixMul, inputs=List(x10251, x10253)).name("x10254").ctrl(x10263) // FixMul(x10251,x10253)
    val x10255 = OpDef(op=FixAdd, inputs=List(x10249, x10254)).name("x10255").ctrl(x10263) // FixAdd(x10249,x10254)
    val x10256 = StoreBanks(List(x9669_d0_b0, x9669_d1_b0, x9669_d2_b0, x9669_d3_b0), List(b6247, b6248), x10255).name("x10256").ctrl(x10263) // ParSRAMStore(x9669,List(List(b6247, b6248)),List(x10255),List(x10244))
    val x10257 = LoadBanks(List(x9669_d0_b0), List(b6247, b6248)).name("x10257").ctrl(x10263) // ParSRAMLoad(x9669,List(List(b6247, b6248)),List(x10244))
    val x10258 = x10257 // x10258 = VectorApply(x10257,0)
    val x10259 = LoadBanks(List(x9674_d0_b0), List(b6247, b6248)).name("x10259").ctrl(x10263) // ParSRAMLoad(x9674,List(List(b6247, b6248)),List(x10244))
    val x10260 = x10259 // x10260 = VectorApply(x10259,0)
    val x10261 = OpDef(op=FixMul, inputs=List(x10258, x10260)).name("x10261").ctrl(x10263) // FixMul(x10258,x10260)
    val x10262 = StoreBanks(List(x9670_d0_b0, x9670_d1_b0, x9670_d2_b0, x9670_d3_b0), List(b6247, b6248), x10261).name("x10262").ctrl(x10263) // ParSRAMStore(x9670,List(List(b6247, b6248)),List(x10261),List(x10244))
    val x10264 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x10264").ctrl(x10332) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x10265 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10265").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10266 = CounterChain(List(x10265,x10264)).name("x10266").ctrl(x10332) // CounterChainNew(List(x10265, x10264))
    val x10292 = LoopController(style=MetaPipe, level=OuterControl, cchain=x10266).name("x10292").ctrl(x10332) // UnrolledForeach(List(b5925),x10266,Block(Const(())),List(List(b6275), List(b6276)),List(List(b6277), List(b6278)))
    val b6275 = CounterIter(x10265, Some(0)).ctrl(x10292).name("b6275")
    val b6277 = Const(true).ctrl(x10292).name("b6277")
    val b6276 = CounterIter(x10264, Some(0)).ctrl(x10292).name("b6276")
    val b6278 = Const(true).ctrl(x10292).name("b6278")
    val x10267_d0 = Reg(init=Some(0.0)).name("x10267_d0").ctrl(x10292) // x10267 = RegNew(Const(0))
    isAccum(x10267_d0) = false
    bufferDepthOf(x10267_d0) = 2
    val x10267_d1 = Reg(init=Some(0.0)).name("x10267_d1").ctrl(x10292) // x10267 = RegNew(Const(0))
    isAccum(x10267_d1) = true
    bufferDepthOf(x10267_d1) = 1
    val x10268 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10268").ctrl(x10292) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10269 = CounterChain(List(x10268)).name("x10269").ctrl(x10292) // CounterChainNew(List(x10268))
    val x10284 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10269).name("x10284").ctrl(x10292) // UnrolledReduce(List(b6277, b6278, b5925),x10269,x10267,Block((x10267) => Const(())),List(List(b6282)),List(List(b6283)))
    val b6282 = CounterIter(x10268, None).ctrl(x10284).name("b6282")
    val b6283 = Const(true).ctrl(x10284).name("b6283")
    val x10270 = OpDef(op=BitAnd, inputs=List(b6283, b6277)).name("x10270").ctrl(x10284) // And(b6283,b6277)
    val x10271 = OpDef(op=BitAnd, inputs=List(b6278, b5925)).name("x10271").ctrl(x10284) // And(b6278,b5925)
    val x10272 = OpDef(op=BitAnd, inputs=List(x10270, x10271)).name("x10272").ctrl(x10284) // And(x10270,x10271)
    val x10273 = LoadBanks(List(x9670_d1_b0), List(b6275, b6282)).name("x10273").ctrl(x10284) // ParSRAMLoad(x9670,List(List(b6275, b6282)),List(x10272))
    val x10274 = x10273 // x10274 = VectorApply(x10273,0)
    val x10275 = LoadBanks(List(x9667_d0_b0), List(b6282, b6276)).name("x10275").ctrl(x10284) // ParSRAMLoad(x9667,List(List(b6282, b6276)),List(x10272))
    val x10276 = x10275 // x10276 = VectorApply(x10275,0)
    val x10277 = OpDef(op=FixMul, inputs=List(x10274, x10276)).name("x10277").ctrl(x10284) // FixMul(x10274,x10276)
    val x10278 = ReadMem(x10267_d1).name("x10278").ctrl(x10284) // RegRead(x10267)
    val x10279 = OpDef(op=FixEql, inputs=List(b6282, Const(0))).name("x10279").ctrl(x10284) // FixEql(b6282,Const(0))
    val x10280 = ReduceAccumOp(op=FixAdd, input=x10277, accum=x10278).name("x10280").ctrl(x10284) // FixAdd(x10277,x10278)
    val x10281 = OpDef(op=BitAnd, inputs=List(b6277, b6278)).name("x10281").ctrl(x10284) // And(b6277,b6278)
    val x10282 = OpDef(op=BitAnd, inputs=List(x10281, b5925)).name("x10282").ctrl(x10284) // And(x10281,b5925)
    val x10283_x10267_d0 = WriteMem(x10267_d0, x10280).name("x10283_x10267_d0").ctrl(x10284) // RegWrite(x10267,x10280,x10282)
    val x10283_x10267_d1 = WriteMem(x10267_d1, x10280).name("x10283_x10267_d1").ctrl(x10284) // RegWrite(x10267,x10280,x10282)
    val x10291 = UnitController(style=SeqPipe, level=InnerControl).name("x10291").ctrl(x10292) // UnitPipe(List(b6277, b6278, b5925),Block(Const(())))
    val x10285 = OpDef(op=BitAnd, inputs=List(b6277, b6278)).name("x10285").ctrl(x10291) // And(b6277,b6278)
    val x10286 = OpDef(op=BitAnd, inputs=List(x10285, b5925)).name("x10286").ctrl(x10291) // And(x10285,b5925)
    val x10287 = LoadBanks(List(x9668_d0_b0), List(b6276)).name("x10287").ctrl(x10291) // SRAMLoad(x9668,ArrayBuffer(Const(64)),List(b6276),Const(0),x10286)
    val x10288 = ReadMem(x10267_d0).name("x10288").ctrl(x10291) // RegRead(x10267)
    val x10289 = OpDef(op=FixAdd, inputs=List(x10288, x10287)).name("x10289").ctrl(x10291) // FixAdd(x10288,x10287)
    val x10290 = StoreBanks(List(x9670_d0_b0, x9670_d1_b0, x9670_d2_b0, x9670_d3_b0), List(b6275, b6276), x10289).name("x10290").ctrl(x10291) // SRAMStore(x9670,ArrayBuffer(Const(1), Const(128)),List(b6275, b6276),Const(0),x10289,x10286)
    val x10293 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10293").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10294 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10294").ctrl(x10332) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10295 = CounterChain(List(x10293,x10294)).name("x10295").ctrl(x10332) // CounterChainNew(List(x10293, x10294))
    val x10331 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10295).name("x10331").ctrl(x10332) // UnrolledForeach(List(b5925),x10295,Block(Const(())),List(List(b6310), List(b6311)),List(List(b6312), List(b6313)))
    val b6310 = CounterIter(x10293, Some(0)).ctrl(x10331).name("b6310")
    val b6312 = Const(true).ctrl(x10331).name("b6312")
    val b6311 = CounterIter(x10294, Some(0)).ctrl(x10331).name("b6311")
    val b6313 = Const(true).ctrl(x10331).name("b6313")
    val b10394 = StreamOut(field="offset").name("b10394").ctrl(x10331) // x10296 = StreamOutNew(BurstCmdBus)
    val b10395 = StreamOut(field="size").name("b10395").ctrl(x10331) // x10296 = StreamOutNew(BurstCmdBus)
    val x10297 = StreamOut(field="data").name("x10297").ctrl(x10331) // x10297 = StreamOutNew(BurstFullDataBus())
    val x10298 = StreamIn(field="ack").name("x10298").ctrl(x10331) // x10298 = StreamInNew(BurstAckBus)
    val x10315 = UnitController(style=SeqPipe, level=InnerControl).name("x10315").ctrl(x10331) // UnitPipe(List(b6312, b6313, b5925),Block(x10314))
    val x10299 = OpDef(op=FixAdd, inputs=List(b5924, b6310)).name("x10299").ctrl(x10315) // FixAdd(b5924,b6310)
    val x10300 = x10299 // FixConvert(x10299,TRUE,_32,_0)
    val x10301 = OpDef(op=FixSla, inputs=List(x10300, Const(6))).name("x10301").ctrl(x10315) // FixLsh(x10300,Const(6))
    val x10302 = b6311 // FixConvert(b6311,TRUE,_32,_0)
    val x10303 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10304 = OpDef(op=FixAdd, inputs=List(x10301, x10302)).name("x10304").ctrl(x10315) // FixAdd(x10301,x10302)
    val x10305 = OpDef(op=FixAdd, inputs=List(x10304, x10303)).name("x10305").ctrl(x10315) // FixAdd(x10304,x10303)
    val x10306 = OpDef(op=FixSla, inputs=List(x10305, Const(2))).name("x10306").ctrl(x10315) // FixLsh(x10305,Const(2))
    val x10307 = x10306 // FixConvert(x10306,TRUE,_64,_0)
    val x10308 = DramAddress(x9658).name("x10308").ctrl(x10315) // GetDRAMAddress(x9658)
    val x10309 = OpDef(op=FixAdd, inputs=List(x10307, x10308)).name("x10309").ctrl(x10315) // FixAdd(x10307,x10308)
    val x10311_x10310 = x10309 // FixConvert(x10309,TRUE,_64,_0)
    // x10311 = SimpleStruct(ArrayBuffer((offset,x10310), (size,Const(512)), (isLoad,Const(false))))
    val x10312 = OpDef(op=BitAnd, inputs=List(b6312, b6313)).name("x10312").ctrl(x10315) // And(b6312,b6313)
    val x10313 = OpDef(op=BitAnd, inputs=List(x10312, b5925)).name("x10313").ctrl(x10315) // And(x10312,b5925)
    val b10396_b10394 = WriteMem(b10394, x10311_x10310).name("b10396_b10394").ctrl(x10315) // StreamWrite(x10296,x10311,x10313)
    val b10397_b10395 = WriteMem(b10395, Const(512)).name("b10397_b10395").ctrl(x10315) // StreamWrite(x10296,x10311,x10313)
    val x10316 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10316").ctrl(x10331) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10317 = CounterChain(List(x10316)).name("x10317").ctrl(x10331) // CounterChainNew(List(x10316))
    val x10325 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10317).name("x10325").ctrl(x10331) // UnrolledForeach(List(b6312, b6313, b5925),x10317,Block(Const(())),List(List(b6336)),List(List(b6337)))
    val b6336 = CounterIter(x10316, None).ctrl(x10325).name("b6336")
    val b6337 = Const(true).ctrl(x10325).name("b6337")
    val x10318 = OpDef(op=BitAnd, inputs=List(b6337, b6312)).name("x10318").ctrl(x10325) // And(b6337,b6312)
    val x10319 = OpDef(op=BitAnd, inputs=List(b6313, b5925)).name("x10319").ctrl(x10325) // And(b6313,b5925)
    val x10320 = OpDef(op=BitAnd, inputs=List(x10318, x10319)).name("x10320").ctrl(x10325) // And(x10318,x10319)
    val x10321 = LoadBanks(List(x9670_d0_b0), List(b6311, b6336)).name("x10321").ctrl(x10325) // ParSRAMLoad(x9670,List(List(b6311, b6336)),List(x10320))
    val x10323_x10322 = x10321 // x10322 = VectorApply(x10321,0)
    // x10323 = SimpleStruct(ArrayBuffer((_1,x10322), (_2,Const(true))))
    val x10324_x10297 = WriteMem(x10297, x10323_x10322).name("x10324_x10297").ctrl(x10325) // ParStreamWrite(x10297,List(x10323),List(x10320))
    val x10326 = FringeDenseStore(dram=List(x9658), cmdStream=List(b10394, b10395), dataStream=List(x10297), ackStream=List(x10298)).name("x10326").ctrl(x10331) // FringeDenseStore(x9658,x10296,x10297,x10298)
    val x10330 = UnitController(style=SeqPipe, level=InnerControl).name("x10330").ctrl(x10331) // UnitPipe(List(b6312, b6313, b5925),Block(Const(())))
    val x10327 = OpDef(op=BitAnd, inputs=List(b6312, b6313)).name("x10327").ctrl(x10330) // And(b6312,b6313)
    val x10328 = OpDef(op=BitAnd, inputs=List(x10327, b5925)).name("x10328").ctrl(x10330) // And(x10327,b5925)
    val x10329_x10329 = ReadMem(x10298).name("x10329").ctrl(x10330) // StreamRead(x10298,x10328)
    // x10340 = WriteTokens(x10336,Const(","),x10337,Block((b417) => x10339),b417) TODO: Unmatched Node
    
  }
}
