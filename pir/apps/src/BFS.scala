import pir._
import pir.node._
import arch._
import pirc.enums._

object BFS extends PIRApp {
  def main(top:Top) = {
    val x3241 = DRAM().name("x3241").ctrl(top) // x3241 = DRAMNew(ArrayBuffer(Const(9600000)),Const(0))
    val x3242 = DRAM().name("x3242").ctrl(top) // x3242 = DRAMNew(ArrayBuffer(Const(8000)),Const(0))
    val x3243 = DRAM().name("x3243").ctrl(top) // x3243 = DRAMNew(ArrayBuffer(Const(8000)),Const(0))
    val x3244 = DRAM().name("x3244").ctrl(top) // x3244 = DRAMNew(ArrayBuffer(Const(8000)),Const(0))
    val x3248 = top.argIn(init=0).name("x3248").ctrl(top) // ArgInNew(Const(0))
    val x3250 = top.argIn(init=0).name("x3250").ctrl(top) // ArgInNew(Const(0))
    val x3483 = UnitController(style=SeqPipe, level=OuterControl).name("x3483").ctrl(top) // Hwblock(Block(Const(())),false)
    val x3252_d0_b0 = SRAM(size=8000, banking=NoBanking()).name("x3252_d0_b0").ctrl(x3483) // x3252 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3253_d0_b0 = SRAM(size=8000, banking=NoBanking()).name("x3253_d0_b0").ctrl(x3483) // x3253 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3254_d0_b0 = SRAM(size=8000, banking=NoBanking()).name("x3254_d0_b0").ctrl(x3483) // x3254 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3255_d0_b0 = SRAM(size=8000, banking=NoBanking()).name("x3255_d0_b0").ctrl(x3483) // x3255 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3255_d1_b0 = SRAM(size=8000, banking=NoBanking()).name("x3255_d1_b0").ctrl(x3483) // x3255 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3256_d0_b0 = SRAM(size=8000, banking=NoBanking()).name("x3256_d0_b0").ctrl(x3483) // x3256 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3256_d1_b0 = SRAM(size=8000, banking=NoBanking()).name("x3256_d1_b0").ctrl(x3483) // x3256 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3256_d2_b0 = SRAM(size=8000, banking=NoBanking()).name("x3256_d2_b0").ctrl(x3483) // x3256 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3257_d0_b0 = SRAM(size=8000, banking=NoBanking()).name("x3257_d0_b0").ctrl(x3483) // x3257 = SRAMNew(ArrayBuffer(Const(8000)))
    val x3258_d0 = Reg(init=0).name("x3258_d0").ctrl(x3483) // x3258 = RegNew(Const(0))
    val x3258_d1 = Reg(init=0).name("x3258_d1").ctrl(x3483) // x3258 = RegNew(Const(0))
    val x3258_d2 = Reg(init=0).name("x3258_d2").ctrl(x3483) // x3258 = RegNew(Const(0))
    val x3258_d3 = Reg(init=0).name("x3258_d3").ctrl(x3483) // x3258 = RegNew(Const(0))
    val x3258_d4 = Reg(init=0).name("x3258_d4").ctrl(x3483) // x3258 = RegNew(Const(0))
    val x3258_d5 = Reg(init=0).name("x3258_d5").ctrl(x3483) // x3258 = RegNew(Const(0))
    val x3258_d6 = Reg(init=0).name("x3258_d6").ctrl(x3483) // x3258 = RegNew(Const(0))
    val x3259 = Reg(init=1).name("x3259").ctrl(x3483) // x3259 = RegNew(Const(1))
    val x3260 = LoadMem(x3250, None).name("x3260").ctrl(x3483) // RegRead(x3250)
    val x3261 = Counter(min=Const(0).ctrl(x3483), max=x3260, step=Const(1).ctrl(x3483), par=1).name("x3261").ctrl(x3483) // CounterNew(Const(0),x3260,Const(1),Const(1))
    val x3262 = CounterChain(List(x3261)).name("x3262").ctrl(x3483) // CounterChainNew(List(x3261))
    val x3268 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3262).name("x3268").ctrl(x3483) // UnrolledForeach(List(Const(true)),x3262,Block(Const(())),List(List(b1937)),List(List(b1938)))
    val b1937 = CounterIter(x3261, Some(0)).ctrl(x3268).name("b1937")
    val b1938 = DummyOp().ctrl(x3268).name("b1938")
    val x3267 = UnitController(style=SeqPipe, level=InnerControl).name("x3267").ctrl(x3268) // UnitPipe(List(b1938),Block(Const(())))
    val x3263 = StoreBanks(List(List(x3252_d0_b0)), List(b1937), Const(0)).name("x3263").ctrl(x3267) // SRAMStore(x3252,ArrayBuffer(Const(8000)),List(b1937),Const(0),Const(0),b1938)
    val x3264 = StoreBanks(List(List(x3255_d0_b0), List(x3255_d1_b0)), List(b1937), Const(0)).name("x3264").ctrl(x3267) // SRAMStore(x3255,ArrayBuffer(Const(8000)),List(b1937),Const(0),Const(0),b1938)
    val x3265 = StoreBanks(List(List(x3256_d0_b0), List(x3256_d1_b0), List(x3256_d2_b0)), List(b1937), Const(0)).name("x3265").ctrl(x3267) // SRAMStore(x3256,ArrayBuffer(Const(8000)),List(b1937),Const(0),Const(0),b1938)
    val x3266 = StoreBanks(List(List(x3257_d0_b0)), List(b1937), Const(0)).name("x3266").ctrl(x3267) // SRAMStore(x3257,ArrayBuffer(Const(8000)),List(b1937),Const(0),Const(0),b1938)
    val x3287 = UnitController(style=StreamPipe, level=OuterControl).name("x3287").ctrl(x3483) // UnitPipe(List(Const(true)),Block(Const(())))
    val b3501 = StreamOut(field="offset").name("b3501").ctrl(x3287) // x3269 = StreamOutNew(BurstCmdBus)
    val b3502 = StreamOut(field="size").name("b3502").ctrl(x3287) // x3269 = StreamOutNew(BurstCmdBus)
    val b3503 = StreamIn(field="data").name("b3503").ctrl(x3287) // x3270 = StreamInNew(BurstDataBus())
    val x3279 = UnitController(style=SeqPipe, level=InnerControl).name("x3279").ctrl(x3287) // UnitPipe(List(Const(true)),Block(x3278))
    val x3271 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x3279))).name("x3271").ctrl(x3279) // FixConvert(Const(0),TRUE,_32,_0)
    val x3272 = OpDef(op=FixSla, inputs=List(x3271, Const(2).ctrl(x3279))).name("x3272").ctrl(x3279) // FixLsh(x3271,Const(2))
    val x3273 = OpDef(op=FixConvert, inputs=List(x3272)).name("x3273").ctrl(x3279) // FixConvert(x3272,TRUE,_64,_0)
    val x3274 = top.dramAddress(x3243).name("x3274").ctrl(x3279) // GetDRAMAddress(x3243)
    val x3275 = OpDef(op=FixAdd, inputs=List(x3273, x3274)).name("x3275").ctrl(x3279) // FixAdd(x3273,x3274)
    val x3276 = OpDef(op=FixConvert, inputs=List(x3275)).name("x3276").ctrl(x3279) // FixConvert(x3275,TRUE,_64,_0)
    // x3277 = SimpleStruct(ArrayBuffer((offset,x3276), (size,Const(32000)), (isLoad,Const(true))))
    val b3504 = StoreMem(List(b3501), None, x3276).name("b3504").ctrl(x3279) // StreamWrite(x3269,x3277,Const(true))
    val b3505 = StoreMem(List(b3502), None, Const(32000)).name("b3505").ctrl(x3279) // StreamWrite(x3269,x3277,Const(true))
    val x3280 = FringeContainer(x3243,b3501,b3502,b3503).name("x3280").ctrl(x3287) // FringeDenseLoad(x3243,x3269,x3270)
    val x3281 = Counter(min=Const(0).ctrl(x3287), max=Const(8000).ctrl(x3287), step=Const(1).ctrl(x3287), par=1).name("x3281").ctrl(x3287) // CounterNew(Const(0),Const(8000),Const(1),Const(1))
    val x3282 = CounterChain(List(x3281)).name("x3282").ctrl(x3287) // CounterChainNew(List(x3281))
    val x3286 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3282).name("x3286").ctrl(x3287) // UnrolledForeach(List(Const(true)),x3282,Block(Const(())),List(List(b1960)),List(List(b1961)))
    val b1960 = CounterIter(x3281, None).ctrl(x3286).name("b1960")
    val b1961 = DummyOp().ctrl(x3286).name("b1961")
    val b3506 = LoadMem(b3503, None).name("b3506").ctrl(x3286) // ParStreamRead(x3270,List(b1961))
    val b3507 = b3506 // x3284 = VectorApply(x3283,0)
    val x3285 = StoreBanks(List(List(x3254_d0_b0)), List(b1960), b3507).name("x3285").ctrl(x3286) // ParSRAMStore(x3254,List(List(b1960)),List(x3284),List(b1961))
    val x3306 = UnitController(style=StreamPipe, level=OuterControl).name("x3306").ctrl(x3483) // UnitPipe(List(Const(true)),Block(Const(())))
    val b3508 = StreamOut(field="offset").name("b3508").ctrl(x3306) // x3288 = StreamOutNew(BurstCmdBus)
    val b3509 = StreamOut(field="size").name("b3509").ctrl(x3306) // x3288 = StreamOutNew(BurstCmdBus)
    val b3510 = StreamIn(field="data").name("b3510").ctrl(x3306) // x3289 = StreamInNew(BurstDataBus())
    val x3298 = UnitController(style=SeqPipe, level=InnerControl).name("x3298").ctrl(x3306) // UnitPipe(List(Const(true)),Block(x3297))
    val x3290 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x3298))).name("x3290").ctrl(x3298) // FixConvert(Const(0),TRUE,_32,_0)
    val x3291 = OpDef(op=FixSla, inputs=List(x3290, Const(2).ctrl(x3298))).name("x3291").ctrl(x3298) // FixLsh(x3290,Const(2))
    val x3292 = OpDef(op=FixConvert, inputs=List(x3291)).name("x3292").ctrl(x3298) // FixConvert(x3291,TRUE,_64,_0)
    val x3293 = top.dramAddress(x3242).name("x3293").ctrl(x3298) // GetDRAMAddress(x3242)
    val x3294 = OpDef(op=FixAdd, inputs=List(x3292, x3293)).name("x3294").ctrl(x3298) // FixAdd(x3292,x3293)
    val x3295 = OpDef(op=FixConvert, inputs=List(x3294)).name("x3295").ctrl(x3298) // FixConvert(x3294,TRUE,_64,_0)
    // x3296 = SimpleStruct(ArrayBuffer((offset,x3295), (size,Const(32000)), (isLoad,Const(true))))
    val b3511 = StoreMem(List(b3508), None, x3295).name("b3511").ctrl(x3298) // StreamWrite(x3288,x3296,Const(true))
    val b3512 = StoreMem(List(b3509), None, Const(32000)).name("b3512").ctrl(x3298) // StreamWrite(x3288,x3296,Const(true))
    val x3299 = FringeContainer(x3242,b3508,b3509,b3510).name("x3299").ctrl(x3306) // FringeDenseLoad(x3242,x3288,x3289)
    val x3300 = Counter(min=Const(0).ctrl(x3306), max=Const(8000).ctrl(x3306), step=Const(1).ctrl(x3306), par=1).name("x3300").ctrl(x3306) // CounterNew(Const(0),Const(8000),Const(1),Const(1))
    val x3301 = CounterChain(List(x3300)).name("x3301").ctrl(x3306) // CounterChainNew(List(x3300))
    val x3305 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3301).name("x3305").ctrl(x3306) // UnrolledForeach(List(Const(true)),x3301,Block(Const(())),List(List(b1981)),List(List(b1982)))
    val b1981 = CounterIter(x3300, None).ctrl(x3305).name("b1981")
    val b1982 = DummyOp().ctrl(x3305).name("b1982")
    val b3513 = LoadMem(b3510, None).name("b3513").ctrl(x3305) // ParStreamRead(x3289,List(b1982))
    val b3514 = b3513 // x3303 = VectorApply(x3302,0)
    val x3304 = StoreBanks(List(List(x3253_d0_b0)), List(b1981), b3514).name("x3304").ctrl(x3305) // ParSRAMStore(x3253,List(List(b1981)),List(x3303),List(b1982))
    val x3307 = LoadMem(x3248, None).name("x3307").ctrl(x3483) // RegRead(x3248)
    val x3308 = Counter(min=Const(0).ctrl(x3483), max=x3307, step=Const(1).ctrl(x3483), par=1).name("x3308").ctrl(x3483) // CounterNew(Const(0),x3307,Const(1),Const(1))
    val x3309 = CounterChain(List(x3308)).name("x3309").ctrl(x3483) // CounterChainNew(List(x3308))
    val x3482 = LoopController(style=SeqPipe, level=OuterControl, cchain=x3309).name("x3482").ctrl(x3483) // UnrolledForeach(List(Const(true)),x3309,Block(Const(())),List(List(b1992)),List(List(b1993)))
    val b1992 = CounterIter(x3308, Some(0)).ctrl(x3482).name("b1992")
    val b1993 = DummyOp().ctrl(x3482).name("b1993")
    val x3310_d0 = Reg(init=1).name("x3310_d0").ctrl(x3482) // x3310 = RegNew(Const(1))
    val x3310_d1 = Reg(init=1).name("x3310_d1").ctrl(x3482) // x3310 = RegNew(Const(1))
    val x3310_d2 = Reg(init=1).name("x3310_d2").ctrl(x3482) // x3310 = RegNew(Const(1))
    val x3311_d0 = Reg(init=1).name("x3311_d0").ctrl(x3482) // x3311 = RegNew(Const(1))
    val x3311_d1 = Reg(init=1).name("x3311_d1").ctrl(x3482) // x3311 = RegNew(Const(1))
    val x3312 = LoadMem(x3259, None).name("x3312").ctrl(x3482) // RegRead(x3259)
    val x3313 = Counter(min=Const(0).ctrl(x3482), max=x3312, step=Const(1).ctrl(x3482), par=1).name("x3313").ctrl(x3482) // CounterNew(Const(0),x3312,Const(1),Const(1))
    val x3314 = CounterChain(List(x3313)).name("x3314").ctrl(x3482) // CounterChainNew(List(x3313))
    val x3412 = LoopController(style=SeqPipe, level=OuterControl, cchain=x3314).name("x3412").ctrl(x3482) // UnrolledForeach(List(b1993),x3314,Block(Const(())),List(List(b1999)),List(List(b2000)))
    val b1999 = CounterIter(x3313, Some(0)).ctrl(x3412).name("b1999")
    val b2000 = DummyOp().ctrl(x3412).name("b2000")
    val x3315 = Reg(init=0).name("x3315").ctrl(x3412) // x3315 = RegNew(Const(0))
    val x3326 = UnitController(style=SeqPipe, level=InnerControl).name("x3326").ctrl(x3412) // UnitPipe(List(b2000, b1993),Block(Const(())))
    val x3316 = OpDef(op=BitAnd, inputs=List(b2000, b1993)).name("x3316").ctrl(x3326) // And(b2000,b1993)
    val x3317 = LoadBanks(List(x3256_d2_b0), List(b1999)).name("x3317").ctrl(x3326) // SRAMLoad(x3256,ArrayBuffer(Const(8000)),List(b1999),Const(0),x3316)
    val x3318 = LoadBanks(List(x3254_d0_b0), List(x3317)).name("x3318").ctrl(x3326) // SRAMLoad(x3254,ArrayBuffer(Const(8000)),List(x3317),Const(0),x3316)
    val x3319 = StoreMem(List(x3311_d0, x3311_d1), None, x3318).name("x3319").ctrl(x3326) // RegWrite(x3311,x3318,x3316)
    val x3320 = LoadBanks(List(x3253_d0_b0), List(x3317)).name("x3320").ctrl(x3326) // SRAMLoad(x3253,ArrayBuffer(Const(8000)),List(x3317),Const(0),x3316)
    val x3321 = StoreMem(List(x3310_d0, x3310_d1, x3310_d2), None, x3320).name("x3321").ctrl(x3326) // RegWrite(x3310,x3320,x3316)
    val x3322 = LoadMem(x3311_d1, None).name("x3322").ctrl(x3326) // RegRead(x3311)
    val x3323 = LoadMem(x3310_d2, None).name("x3323").ctrl(x3326) // RegRead(x3310)
    val x3324 = OpDef(op=FixAdd, inputs=List(x3322, x3323)).name("x3324").ctrl(x3326) // FixAdd(x3322,x3323)
    val x3325 = StoreMem(List(x3315), None, x3323).name("x3325").ctrl(x3326) // RegWrite(x3315,x3323,x3316)
    val x3393 = UnitController(style=StreamPipe, level=OuterControl).name("x3393").ctrl(x3412) // UnitPipe(List(b2000, b1993),Block(Const(())))
    val b3515 = StreamOut(field="offset").name("b3515").ctrl(x3393) // x3327 = StreamOutNew(BurstCmdBus)
    val b3516 = StreamOut(field="size").name("b3516").ctrl(x3393) // x3327 = StreamOutNew(BurstCmdBus)
    val b3517 = FIFO(size=16).name("b3517").ctrl(x3393) // x3328 = FIFONew(Const(16))
    val b3518 = FIFO(size=16).name("b3518").ctrl(x3393) // x3328 = FIFONew(Const(16))
    val b3519 = FIFO(size=16).name("b3519").ctrl(x3393) // x3328 = FIFONew(Const(16))
    val b3520 = StreamIn(field="data").name("b3520").ctrl(x3393) // x3329 = StreamInNew(BurstDataBus())
    val x3362 = UnitController(style=SeqPipe, level=InnerControl).name("x3362").ctrl(x3393) // UnitPipe(List(b2000, b1993),Block(x3361))
    val x3330 = LoadMem(x3311_d0, None).name("x3330").ctrl(x3362) // RegRead(x3311)
    val x3331 = OpDef(op=FixConvert, inputs=List(x3330)).name("x3331").ctrl(x3362) // FixConvert(x3330,TRUE,_32,_0)
    val x3332 = OpDef(op=FixSla, inputs=List(x3331, Const(2).ctrl(x3362))).name("x3332").ctrl(x3362) // FixLsh(x3331,Const(2))
    val x3333 = x3332 // x3333 = DataAsBits(x3332)
    val x3334 = OpDef(op=BitAnd, inputs=List(x3333, Const(31))).name("x3334").ctrl(x3362) // VectorSlice(x3333,5,0) strMask=00000000000000000000000000011111
    val x3335 = x3334 // x3335 = BitsAsData(x3334,FixPt[TRUE,_32,_0])
    val x3336 = LoadMem(x3315, None).name("x3336").ctrl(x3362) // RegRead(x3315)
    val x3337 = OpDef(op=FixSla, inputs=List(x3336, Const(2).ctrl(x3362))).name("x3337").ctrl(x3362) // FixLsh(x3336,Const(2))
    val x3338 = OpDef(op=FixSub, inputs=List(x3332, x3335)).name("x3338").ctrl(x3362) // FixSub(x3332,x3335)
    val x3339 = OpDef(op=FixAdd, inputs=List(x3332, x3337)).name("x3339").ctrl(x3362) // FixAdd(x3332,x3337)
    val x3340 = x3339 // x3340 = DataAsBits(x3339)
    val x3341 = OpDef(op=BitAnd, inputs=List(x3340, Const(31))).name("x3341").ctrl(x3362) // VectorSlice(x3340,5,0) strMask=00000000000000000000000000011111
    val x3342 = x3341 // x3342 = BitsAsData(x3341,FixPt[TRUE,_32,_0])
    val x3343 = OpDef(op=FixEql, inputs=List(x3342, Const(0).ctrl(x3362))).name("x3343").ctrl(x3362) // FixEql(x3342,Const(0))
    val x3344 = OpDef(op=FixSub, inputs=List(Const(64).ctrl(x3362), x3342)).name("x3344").ctrl(x3362) // FixSub(Const(64),x3342)
    val x3345 = OpDef(op=MuxOp, inputs=List(x3343, Const(0).ctrl(x3362), x3344)).name("x3345").ctrl(x3362) // Mux(x3343,Const(0),x3344)
    val x3346 = OpDef(op=FixSra, inputs=List(x3335, Const(2).ctrl(x3362))).name("x3346").ctrl(x3362) // FixRsh(x3335,Const(2))
    val x3347 = OpDef(op=FixSra, inputs=List(x3345, Const(2).ctrl(x3362))).name("x3347").ctrl(x3362) // FixRsh(x3345,Const(2))
    val x3348 = OpDef(op=FixAdd, inputs=List(x3346, x3336)).name("x3348").ctrl(x3362) // FixAdd(x3346,x3336)
    val x3349 = OpDef(op=FixAdd, inputs=List(x3336, x3346)).name("x3349").ctrl(x3362) // FixAdd(x3336,x3346)
    val x3350 = OpDef(op=FixAdd, inputs=List(x3349, x3347)).name("x3350").ctrl(x3362) // FixAdd(x3349,x3347)
    val x3351 = OpDef(op=FixAdd, inputs=List(x3337, x3335)).name("x3351").ctrl(x3362) // FixAdd(x3337,x3335)
    val x3352 = OpDef(op=FixAdd, inputs=List(x3351, x3345)).name("x3352").ctrl(x3362) // FixAdd(x3351,x3345)
    val x3353 = OpDef(op=FixConvert, inputs=List(x3338)).name("x3353").ctrl(x3362) // FixConvert(x3338,TRUE,_64,_0)
    val x3354 = top.dramAddress(x3241).name("x3354").ctrl(x3362) // GetDRAMAddress(x3241)
    val x3355 = OpDef(op=FixAdd, inputs=List(x3353, x3354)).name("x3355").ctrl(x3362) // FixAdd(x3353,x3354)
    val x3356 = OpDef(op=FixConvert, inputs=List(x3355)).name("x3356").ctrl(x3362) // FixConvert(x3355,TRUE,_64,_0)
    // x3357 = SimpleStruct(ArrayBuffer((offset,x3356), (size,x3352), (isLoad,Const(true))))
    val x3358 = OpDef(op=BitAnd, inputs=List(b2000, b1993)).name("x3358").ctrl(x3362) // And(b2000,b1993)
    val b3521 = StoreMem(List(b3515), None, x3356).name("b3521").ctrl(x3362) // StreamWrite(x3327,x3357,x3358)
    val b3522 = StoreMem(List(b3516), None, x3352).name("b3522").ctrl(x3362) // StreamWrite(x3327,x3357,x3358)
    // x3360 = SimpleStruct(ArrayBuffer((size,x3350), (start,x3346), (end,x3348)))
    val b3523 = StoreMem(List(b3517), None, x3350).name("b3523").ctrl(x3362) // FIFOEnq(x3328,x3360,x3358)
    val b3524 = StoreMem(List(b3518), None, x3346).name("b3524").ctrl(x3362) // FIFOEnq(x3328,x3360,x3358)
    val b3525 = StoreMem(List(b3519), None, x3348).name("b3525").ctrl(x3362) // FIFOEnq(x3328,x3360,x3358)
    val x3363 = FringeContainer(x3241,b3515,b3516,b3520).name("x3363").ctrl(x3393) // FringeDenseLoad(x3241,x3327,x3329)
    val x3392 = UnitController(style=SeqPipe, level=OuterControl).name("x3392").ctrl(x3393) // UnitPipe(List(b2000, b1993),Block(Const(())))
    val x3364 = Reg(init=0).name("x3364").ctrl(x3392) // x3364 = RegNew(Const(0))
    val x3365 = Reg(init=0).name("x3365").ctrl(x3392) // x3365 = RegNew(Const(0))
    val x3366 = Reg(init=0).name("x3366").ctrl(x3392) // x3366 = RegNew(Const(0))
    val x3375 = UnitController(style=SeqPipe, level=InnerControl).name("x3375").ctrl(x3392) // UnitPipe(List(b2000, b1993),Block(x3374))
    val x3367 = OpDef(op=BitAnd, inputs=List(b2000, b1993)).name("x3367").ctrl(x3375) // And(b2000,b1993)
    val b3526 = LoadMem(b3517, None).name("b3526").ctrl(x3375) // FIFODeq(x3328,x3367)
    val b3527 = LoadMem(b3518, None).name("b3527").ctrl(x3375) // FIFODeq(x3328,x3367)
    val b3528 = LoadMem(b3519, None).name("b3528").ctrl(x3375) // FIFODeq(x3328,x3367)
    val x3369 = b3527 // x3369 = FieldApply(x3368,start)
    val x3370 = StoreMem(List(x3364), None, x3369).name("x3370").ctrl(x3375) // RegWrite(x3364,x3369,x3367)
    val x3371 = b3528 // x3371 = FieldApply(x3368,end)
    val x3372 = StoreMem(List(x3365), None, x3371).name("x3372").ctrl(x3375) // RegWrite(x3365,x3371,x3367)
    val x3373 = b3526 // x3373 = FieldApply(x3368,size)
    val x3374 = StoreMem(List(x3366), None, x3373).name("x3374").ctrl(x3375) // RegWrite(x3366,x3373,x3367)
    val x3376 = LoadMem(x3366, None).name("x3376").ctrl(x3392) // RegRead(x3366)
    val x3377 = Counter(min=Const(0).ctrl(x3392), max=x3376, step=Const(1).ctrl(x3392), par=1).name("x3377").ctrl(x3392) // CounterNew(Const(0),x3376,Const(1),Const(1))
    val x3378 = CounterChain(List(x3377)).name("x3378").ctrl(x3392) // CounterChainNew(List(x3377))
    val x3391 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3378).name("x3391").ctrl(x3392) // UnrolledForeach(List(b2000, b1993),x3378,Block(Const(())),List(List(b2061)),List(List(b2062)))
    val b2061 = CounterIter(x3377, None).ctrl(x3391).name("b2061")
    val b2062 = DummyOp().ctrl(x3391).name("b2062")
    val x3379 = LoadMem(x3364, None).name("x3379").ctrl(x3391) // RegRead(x3364)
    val x3380 = OpDef(op=FixLeq, inputs=List(x3379, b2061)).name("x3380").ctrl(x3391) // FixLeq(x3379,b2061)
    val x3381 = LoadMem(x3365, None).name("x3381").ctrl(x3391) // RegRead(x3365)
    val x3382 = OpDef(op=FixLt, inputs=List(b2061, x3381)).name("x3382").ctrl(x3391) // FixLt(b2061,x3381)
    val x3383 = OpDef(op=BitAnd, inputs=List(x3380, x3382)).name("x3383").ctrl(x3391) // And(x3380,x3382)
    val x3384 = OpDef(op=FixSub, inputs=List(b2061, x3379)).name("x3384").ctrl(x3391) // FixSub(b2061,x3379)
    val x3385 = OpDef(op=BitAnd, inputs=List(b2062, b2000)).name("x3385").ctrl(x3391) // And(b2062,b2000)
    val x3386 = OpDef(op=BitAnd, inputs=List(x3385, b1993)).name("x3386").ctrl(x3391) // And(x3385,b1993)
    val b3529 = LoadMem(b3520, None).name("b3529").ctrl(x3391) // ParStreamRead(x3329,List(x3386))
    val b3530 = b3529 // x3388 = VectorApply(x3387,0)
    val x3389 = OpDef(op=BitAnd, inputs=List(x3383, x3386)).name("x3389").ctrl(x3391) // And(x3383,x3386)
    val x3390 = StoreBanks(List(List(x3257_d0_b0)), List(x3384), b3530).name("x3390").ctrl(x3391) // ParSRAMStore(x3257,List(List(x3384)),List(x3388),List(x3389))
    val x3394 = LoadMem(x3310_d1, None).name("x3394").ctrl(x3412) // RegRead(x3310)
    val x3395 = Counter(min=Const(0).ctrl(x3412), max=x3394, step=Const(1).ctrl(x3412), par=1).name("x3395").ctrl(x3412) // CounterNew(Const(0),x3394,Const(1),Const(1))
    val x3396 = CounterChain(List(x3395)).name("x3396").ctrl(x3412) // CounterChainNew(List(x3395))
    val x3404 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3396).name("x3404").ctrl(x3412) // UnrolledForeach(List(b2000, b1993),x3396,Block(Const(())),List(List(b2081)),List(List(b2082)))
    val b2081 = CounterIter(x3395, None).ctrl(x3404).name("b2081")
    val b2082 = DummyOp().ctrl(x3404).name("b2082")
    val x3397 = LoadMem(x3258_d6, None).name("x3397").ctrl(x3404) // RegRead(x3258)
    val x3398 = OpDef(op=FixAdd, inputs=List(b2081, x3397)).name("x3398").ctrl(x3404) // FixAdd(b2081,x3397)
    val x3399 = OpDef(op=BitAnd, inputs=List(b2082, b2000)).name("x3399").ctrl(x3404) // And(b2082,b2000)
    val x3400 = OpDef(op=BitAnd, inputs=List(x3399, b1993)).name("x3400").ctrl(x3404) // And(x3399,b1993)
    val x3401 = LoadBanks(List(x3257_d0_b0), List(b2081)).name("x3401").ctrl(x3404) // ParSRAMLoad(x3257,List(List(b2081)),List(x3400))
    val x3402 = x3401 // x3402 = VectorApply(x3401,0)
    val x3403 = StoreBanks(List(List(x3252_d0_b0)), List(x3398), x3402).name("x3403").ctrl(x3404) // ParSRAMStore(x3252,List(List(x3398)),List(x3402),List(x3400))
    val x3411 = UnitController(style=SeqPipe, level=InnerControl).name("x3411").ctrl(x3412) // UnitPipe(List(b2000, b1993),Block(Const(())))
    val x3405 = LoadMem(x3310_d0, None).name("x3405").ctrl(x3411) // RegRead(x3310)
    val x3406 = LoadMem(x3258_d5, None).name("x3406").ctrl(x3411) // RegRead(x3258)
    val x3407 = OpDef(op=FixAdd, inputs=List(x3406, x3405)).name("x3407").ctrl(x3411) // FixAdd(x3406,x3405)
    val x3408 = OpDef(op=FixMin, inputs=List(Const(8000).ctrl(x3411), x3407)).name("x3408").ctrl(x3411) // Min(Const(8000),x3407)
    val x3409 = OpDef(op=BitAnd, inputs=List(b2000, b1993)).name("x3409").ctrl(x3411) // And(b2000,b1993)
    val x3410 = StoreMem(List(x3258_d0, x3258_d5, x3258_d1, x3258_d6, x3258_d2, x3258_d3, x3258_d4), None, x3408).name("x3410").ctrl(x3411) // RegWrite(x3258,x3408,x3409)
    val x3413 = LoadMem(x3258_d4, None).name("x3413").ctrl(x3482) // RegRead(x3258)
    val x3414 = Counter(min=Const(0).ctrl(x3482), max=x3413, step=Const(1).ctrl(x3482), par=1).name("x3414").ctrl(x3482) // CounterNew(Const(0),x3413,Const(1),Const(1))
    val x3415 = CounterChain(List(x3414)).name("x3415").ctrl(x3482) // CounterChainNew(List(x3414))
    val x3420 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3415).name("x3420").ctrl(x3482) // UnrolledForeach(List(b1993),x3415,Block(Const(())),List(List(b2102)),List(List(b2103)))
    val b2102 = CounterIter(x3414, None).ctrl(x3420).name("b2102")
    val b2103 = DummyOp().ctrl(x3420).name("b2103")
    val x3416 = OpDef(op=BitAnd, inputs=List(b2103, b1993)).name("x3416").ctrl(x3420) // And(b2103,b1993)
    val x3417 = LoadBanks(List(x3252_d0_b0), List(b2102)).name("x3417").ctrl(x3420) // ParSRAMLoad(x3252,List(List(b2102)),List(x3416))
    val x3418 = x3417 // x3418 = VectorApply(x3417,0)
    val x3419 = StoreBanks(List(List(x3256_d0_b0), List(x3256_d1_b0), List(x3256_d2_b0)), List(b2102), x3418).name("x3419").ctrl(x3420) // ParSRAMStore(x3256,List(List(b2102)),List(x3418),List(x3416))
    val x3421 = LoadMem(x3258_d3, None).name("x3421").ctrl(x3482) // RegRead(x3258)
    val x3422 = Counter(min=Const(0).ctrl(x3482), max=x3421, step=Const(1).ctrl(x3482), par=1).name("x3422").ctrl(x3482) // CounterNew(Const(0),x3421,Const(1),Const(1))
    val x3423 = CounterChain(List(x3422)).name("x3423").ctrl(x3482) // CounterChainNew(List(x3422))
    val x3427 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3423).name("x3427").ctrl(x3482) // UnrolledForeach(List(b1993),x3423,Block(Const(())),List(List(b2112)),List(List(b2113)))
    val b2112 = CounterIter(x3422, None).ctrl(x3427).name("b2112")
    val b2113 = DummyOp().ctrl(x3427).name("b2113")
    val x3424 = OpDef(op=FixAdd, inputs=List(b1992, Const(1).ctrl(x3427))).name("x3424").ctrl(x3427) // FixAdd(b1992,Const(1))
    val x3425 = OpDef(op=BitAnd, inputs=List(b2113, b1993)).name("x3425").ctrl(x3427) // And(b2113,b1993)
    val x3426 = StoreBanks(List(List(x3255_d0_b0), List(x3255_d1_b0)), List(b2112), x3424).name("x3426").ctrl(x3427) // ParSRAMStore(x3255,List(List(b2112)),List(x3424),List(x3425))
    val x3428_d0 = Reg(init=0).name("x3428_d0").ctrl(x3482) // x3428 = RegNew(Const(0))
    val x3428_d1 = Reg(init=0).name("x3428_d1").ctrl(x3482) // x3428 = RegNew(Const(0))
    val x3440 = UnitController(style=SeqPipe, level=InnerControl).name("x3440").ctrl(x3482) // UnitPipe(List(b1993),Block(x3439))
    val x3429 = LoadMem(x3258_d2, None).name("x3429").ctrl(x3440) // RegRead(x3258)
    val x3430 = OpDef(op=FixLt, inputs=List(x3429, Const(16).ctrl(x3440))).name("x3430").ctrl(x3440) // FixLt(x3429,Const(16))
    val x3431 = x3429 // x3431 = DataAsBits(x3429)
    val x3432 = OpDef(op=BitAnd, inputs=List(x3431, Const(7))).name("x3432").ctrl(x3440) // VectorSlice(x3431,3,0) strMask=00000000000000000000000000000111
    val x3433 = x3432 // x3433 = BitsAsData(x3432,FixPt[TRUE,_32,_0])
    val x3434 = OpDef(op=FixEql, inputs=List(x3433, Const(0).ctrl(x3440))).name("x3434").ctrl(x3440) // FixEql(x3433,Const(0))
    val x3435 = OpDef(op=FixAdd, inputs=List(x3429, Const(16).ctrl(x3440))).name("x3435").ctrl(x3440) // FixAdd(x3429,Const(16))
    val x3436 = OpDef(op=FixSub, inputs=List(x3435, x3433)).name("x3436").ctrl(x3440) // FixSub(x3435,x3433)
    val x3437 = OpDef(op=MuxOp, inputs=List(x3434, x3429, x3436)).name("x3437").ctrl(x3440) // Mux(x3434,x3429,x3436)
    val x3438 = OpDef(op=MuxOp, inputs=List(x3430, Const(16).ctrl(x3440), x3437)).name("x3438").ctrl(x3440) // Mux(x3430,Const(16),x3437)
    val x3439 = StoreMem(List(x3428_d0, x3428_d1), None, x3438).name("x3439").ctrl(x3440) // RegWrite(x3428,x3438,b1993)
    val x3477 = UnitController(style=StreamPipe, level=OuterControl).name("x3477").ctrl(x3482) // UnitPipe(List(b1993),Block(Const(())))
    val b3531 = StreamOut(field="data").name("b3531").ctrl(x3477) // x3441 = StreamOutNew(ScatterCmdBus())
    val b3532 = StreamIn(field="ack").name("b3532").ctrl(x3477) // x3442 = StreamInNew(ScatterAckBus)
    val x3443 = LoadMem(x3428_d1, None).name("x3443").ctrl(x3477) // RegRead(x3428)
    val x3444 = Counter(min=Const(0).ctrl(x3477), max=x3443, step=Const(1).ctrl(x3477), par=1).name("x3444").ctrl(x3477) // CounterNew(Const(0),x3443,Const(1),Const(1))
    val x3445 = CounterChain(List(x3444)).name("x3445").ctrl(x3477) // CounterChainNew(List(x3444))
    val x3468 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3445).name("x3468").ctrl(x3477) // UnrolledForeach(List(b1993),x3445,Block(Const(())),List(List(b2134)),List(List(b2135)))
    val b2134 = CounterIter(x3444, None).ctrl(x3468).name("b2134")
    val b2135 = DummyOp().ctrl(x3468).name("b2135")
    val x3446 = LoadMem(x3258_d1, None).name("x3446").ctrl(x3468) // RegRead(x3258)
    val x3447 = OpDef(op=FixSub, inputs=List(x3446, Const(1).ctrl(x3468))).name("x3447").ctrl(x3468) // FixSub(x3446,Const(1))
    val x3448 = OpDef(op=FixMax, inputs=List(x3447, Const(0).ctrl(x3468))).name("x3448").ctrl(x3468) // Max(x3447,Const(0))
    val x3449 = OpDef(op=BitAnd, inputs=List(b2135, b1993)).name("x3449").ctrl(x3468) // And(b2135,b1993)
    val x3450 = LoadBanks(List(x3256_d1_b0), List(x3448)).name("x3450").ctrl(x3468) // SRAMLoad(x3256,ArrayBuffer(Const(8000)),List(x3448),Const(0),x3449)
    val x3451 = OpDef(op=FixLeq, inputs=List(x3446, b2134)).name("x3451").ctrl(x3468) // FixLeq(x3446,b2134)
    val x3452 = OpDef(op=FixSla, inputs=List(x3450, Const(2).ctrl(x3468))).name("x3452").ctrl(x3468) // FixLsh(x3450,Const(2))
    val x3453 = OpDef(op=FixConvert, inputs=List(x3452)).name("x3453").ctrl(x3468) // FixConvert(x3452,TRUE,_64,_0)
    val x3454 = top.dramAddress(x3244).name("x3454").ctrl(x3468) // GetDRAMAddress(x3244)
    val x3455 = OpDef(op=FixAdd, inputs=List(x3453, x3454)).name("x3455").ctrl(x3468) // FixAdd(x3453,x3454)
    val x3456 = LoadBanks(List(x3256_d0_b0), List(b2134)).name("x3456").ctrl(x3468) // ParSRAMLoad(x3256,List(List(b2134)),List(x3449))
    val x3457 = x3456 // x3457 = VectorApply(x3456,0)
    val x3458 = OpDef(op=FixSla, inputs=List(x3457, Const(2).ctrl(x3468))).name("x3458").ctrl(x3468) // FixLsh(x3457,Const(2))
    val x3459 = OpDef(op=FixConvert, inputs=List(x3458)).name("x3459").ctrl(x3468) // FixConvert(x3458,TRUE,_64,_0)
    val x3460 = OpDef(op=FixAdd, inputs=List(x3459, x3454)).name("x3460").ctrl(x3468) // FixAdd(x3459,x3454)
    val x3461 = OpDef(op=MuxOp, inputs=List(x3451, x3455, x3460)).name("x3461").ctrl(x3468) // Mux(x3451,x3455,x3460)
    val x3462 = LoadBanks(List(x3255_d1_b0), List(x3448)).name("x3462").ctrl(x3468) // SRAMLoad(x3255,ArrayBuffer(Const(8000)),List(x3448),Const(0),x3449)
    val x3463 = LoadBanks(List(x3255_d0_b0), List(b2134)).name("x3463").ctrl(x3468) // ParSRAMLoad(x3255,List(List(b2134)),List(x3449))
    val x3464 = x3463 // x3464 = VectorApply(x3463,0)
    val x3465 = OpDef(op=MuxOp, inputs=List(x3451, x3462, x3464)).name("x3465").ctrl(x3468) // Mux(x3451,x3462,x3464)
    // x3466 = SimpleStruct(ArrayBuffer((_1,x3465), (_2,x3461)))
    val b3533 = StoreMem(List(b3531), None, x3465).name("b3533").ctrl(x3468) // ParStreamWrite(x3441,List(x3466),List(x3449))
    val x3469 = FringeContainer(x3244,b3531,b3532).name("x3469").ctrl(x3477) // FringeSparseStore(x3244,x3441,x3442)
    val x3470 = LoadMem(x3428_d0, None).name("x3470").ctrl(x3477) // RegRead(x3428)
    val x3471 = Counter(min=Const(0).ctrl(x3477), max=x3470, step=Const(16).ctrl(x3477), par=1).name("x3471").ctrl(x3477) // CounterNew(Const(0),x3470,Const(16),Const(1))
    val x3472 = CounterChain(List(x3471)).name("x3472").ctrl(x3477) // CounterChainNew(List(x3471))
    val x3476 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3472).name("x3476").ctrl(x3477) // UnrolledForeach(List(b1993),x3472,Block(Const(())),List(List(b2163)),List(List(b2164)))
    val b2163 = CounterIter(x3471, None).ctrl(x3476).name("b2163")
    val b2164 = DummyOp().ctrl(x3476).name("b2164")
    val x3473 = OpDef(op=BitAnd, inputs=List(b2164, b1993)).name("x3473").ctrl(x3476) // And(b2164,b1993)
    val b3534 = LoadMem(b3532, None).name("b3534").ctrl(x3476) // ParStreamRead(x3442,List(x3473))
    val b3535 = b3534 // x3475 = VectorApply(x3474,0)
    val x3481 = UnitController(style=SeqPipe, level=InnerControl).name("x3481").ctrl(x3482) // UnitPipe(List(b1993),Block(Const(())))
    val x3478 = LoadMem(x3258_d0, None).name("x3478").ctrl(x3481) // RegRead(x3258)
    val x3479 = StoreMem(List(x3259), None, x3478).name("x3479").ctrl(x3481) // RegWrite(x3259,x3478,b1993)
    val x3480 = StoreMem(List(x3258_d0, x3258_d5, x3258_d1, x3258_d6, x3258_d2, x3258_d3, x3258_d4), None, Const(0)).name("x3480").ctrl(x3481) // RegWrite(x3258,Const(0),b1993)
    
  }
}
