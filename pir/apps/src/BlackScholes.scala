import pir._
import pir.node._
import arch._
import pirc.enums._

object BlackScholes extends PIRApp {
  def main(top:Top) = {
    val x5738 = top.argIn(init=0).name("x5738").ctrl(top) // ArgInNew(Const(0))
    val x5741 = LoadDef(List(x5738), None).name("x5741").ctrl(top) // RegRead(x5738)
    val x5742 = DRAM().name("x5742").ctrl(top) // x5742 = DRAMNew(ArrayBuffer(x5741),Const(0))
    val x5743 = LoadDef(List(x5738), None).name("x5743").ctrl(top) // RegRead(x5738)
    val x5744 = DRAM().name("x5744").ctrl(top) // x5744 = DRAMNew(ArrayBuffer(x5743),Const(0.0))
    val x5745 = LoadDef(List(x5738), None).name("x5745").ctrl(top) // RegRead(x5738)
    val x5746 = DRAM().name("x5746").ctrl(top) // x5746 = DRAMNew(ArrayBuffer(x5745),Const(0.0))
    val x5747 = LoadDef(List(x5738), None).name("x5747").ctrl(top) // RegRead(x5738)
    val x5748 = DRAM().name("x5748").ctrl(top) // x5748 = DRAMNew(ArrayBuffer(x5747),Const(0.0))
    val x5749 = LoadDef(List(x5738), None).name("x5749").ctrl(top) // RegRead(x5738)
    val x5750 = DRAM().name("x5750").ctrl(top) // x5750 = DRAMNew(ArrayBuffer(x5749),Const(0.0))
    val x5751 = LoadDef(List(x5738), None).name("x5751").ctrl(top) // RegRead(x5738)
    val x5752 = DRAM().name("x5752").ctrl(top) // x5752 = DRAMNew(ArrayBuffer(x5751),Const(0.0))
    val x5753 = LoadDef(List(x5738), None).name("x5753").ctrl(top) // RegRead(x5738)
    val x5754 = DRAM().name("x5754").ctrl(top) // x5754 = DRAMNew(ArrayBuffer(x5753),Const(0.0))
    val x6118 = UnitController(style=SeqPipe, level=OuterControl).name("x6118").ctrl(top) // Hwblock(Block(Const(())),false)
    val x5761 = LoadDef(List(x5738), None).name("x5761").ctrl(x6118) // RegRead(x5738)
    val x5762 = Counter(min=Const(0).ctrl(x6118), max=x5761, step=Const(2000).ctrl(x6118), par=1).name("x5762").ctrl(x6118) // CounterNew(Const(0),x5761,Const(2000),Const(1))
    val x5763 = CounterChain(List(x5762)).name("x5763").ctrl(x6118) // CounterChainNew(List(x5762))
    val x6117 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5763).name("x6117").ctrl(x6118) // UnrolledForeach(List(Const(true)),x5763,Block(Const(())),List(List(b3727)),List(List(b3728)))
    val b3727 = IterDef(x5762, Some(0)).ctrl(x6117).name("b3727")
    val b3728 = DummyDef().ctrl(x6117).name("b3728")
    val x5764_d0_b0 = SRAM(size=125, banking=Strided(banks=16, stride=1)).name("x5764_d0_b0").ctrl(x6117) // x5764 = SRAMNew(ArrayBuffer(Const(2000)))
    val x5765_d0_b0 = SRAM(size=125, banking=Strided(banks=16, stride=1)).name("x5765_d0_b0").ctrl(x6117) // x5765 = SRAMNew(ArrayBuffer(Const(2000)))
    val x5766_d0_b0 = SRAM(size=125, banking=Strided(banks=16, stride=1)).name("x5766_d0_b0").ctrl(x6117) // x5766 = SRAMNew(ArrayBuffer(Const(2000)))
    val x5767_d0_b0 = SRAM(size=125, banking=Strided(banks=16, stride=1)).name("x5767_d0_b0").ctrl(x6117) // x5767 = SRAMNew(ArrayBuffer(Const(2000)))
    val x5768_d0_b0 = SRAM(size=125, banking=Strided(banks=16, stride=1)).name("x5768_d0_b0").ctrl(x6117) // x5768 = SRAMNew(ArrayBuffer(Const(2000)))
    val x5769_d0_b0 = SRAM(size=125, banking=Strided(banks=16, stride=1)).name("x5769_d0_b0").ctrl(x6117) // x5769 = SRAMNew(ArrayBuffer(Const(2000)))
    val x5770_d0_b0 = SRAM(size=125, banking=Strided(banks=16, stride=1)).name("x5770_d0_b0").ctrl(x6117) // x5770 = SRAMNew(ArrayBuffer(Const(2000)))
    val x5772 = UnitController(style=SeqPipe, level=InnerControl).name("x5772").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val x5771 = OpDef(op=FixAdd, inputs=List(b3727, Const(2000).ctrl(x5772))).name("x5771").ctrl(x5772) // FixAdd(b3727,Const(2000))
    val x5792 = UnitController(style=StreamPipe, level=OuterControl).name("x5792").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val b6129 = StreamOut(field="offset").name("b6129").ctrl(x5792) // x5773 = StreamOutNew(BurstCmdBus)
    val b6130 = StreamOut(field="size").name("b6130").ctrl(x5792) // x5773 = StreamOutNew(BurstCmdBus)
    val b6131 = StreamIn(field="data").name("b6131").ctrl(x5792) // x5774 = StreamInNew(BurstDataBus())
    val x5783 = UnitController(style=SeqPipe, level=InnerControl).name("x5783").ctrl(x5792) // UnitPipe(List(b3728),Block(x5782))
    val x5775 = OpDef(op=FixConvert, inputs=List(b3727)).name("x5775").ctrl(x5783) // FixConvert(b3727,TRUE,_32,_0)
    val x5776 = OpDef(op=FixSla, inputs=List(x5775, Const(2).ctrl(x5783))).name("x5776").ctrl(x5783) // FixLsh(x5775,Const(2))
    val x5777 = OpDef(op=FixConvert, inputs=List(x5776)).name("x5777").ctrl(x5783) // FixConvert(x5776,TRUE,_64,_0)
    val x5778 = top.dramAddress(x5742).name("x5778").ctrl(x5783) // GetDRAMAddress(x5742)
    val x5779 = OpDef(op=FixAdd, inputs=List(x5777, x5778)).name("x5779").ctrl(x5783) // FixAdd(x5777,x5778)
    val x5780 = OpDef(op=FixConvert, inputs=List(x5779)).name("x5780").ctrl(x5783) // FixConvert(x5779,TRUE,_64,_0)
    // x5781 = SimpleStruct(ArrayBuffer((offset,x5780), (size,Const(8000)), (isLoad,Const(true))))
    val b6132 = StoreDef(List(b6129), None, x5780).name("b6132").ctrl(x5783) // StreamWrite(x5773,x5781,b3728)
    val b6133 = StoreDef(List(b6130), None, Const(8000)).name("b6133").ctrl(x5783) // StreamWrite(x5773,x5781,b3728)
    val x5784 = FringeContainer(x5742,b6129,b6130,b6131).name("x5784").ctrl(x5792) // FringeDenseLoad(x5742,x5773,x5774)
    val x5785 = Counter(min=Const(0).ctrl(x5792), max=Const(2000).ctrl(x5792), step=Const(1).ctrl(x5792), par=16).name("x5785").ctrl(x5792) // CounterNew(Const(0),Const(2000),Const(1),Const(16))
    val x5786 = CounterChain(List(x5785)).name("x5786").ctrl(x5792) // CounterChainNew(List(x5785))
    val x5791 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5786).name("x5791").ctrl(x5792) // UnrolledForeach(List(b3728),x5786,Block(Const(())),List(List(b3752)),List(List(b3753)))
    val b3752 = IterDef(x5785, None).ctrl(x5791).name("b3752")
    val b3753 = DummyDef().ctrl(x5791).name("b3753")
    val x5787 = OpDef(op=BitAnd, inputs=List(b3753, b3728)).name("x5787").ctrl(x5791) // And(b3753,b3728)
    val b6134 = LoadDef(List(b6131), None).name("b6134").ctrl(x5791) // ParStreamRead(x5774,List(x5787))
    val b6135 = b6134 // x5789 = VectorApply(x5788,0)
    val x5790 = StoreDef(List(x5764_d0_b0), Some(List(b3752)), b6135).name("x5790").ctrl(x5791) // ParSRAMStore(x5764,List(List(b3752)),List(x5789),List(x5787))
    val x5812 = UnitController(style=StreamPipe, level=OuterControl).name("x5812").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val b6136 = StreamOut(field="offset").name("b6136").ctrl(x5812) // x5793 = StreamOutNew(BurstCmdBus)
    val b6137 = StreamOut(field="size").name("b6137").ctrl(x5812) // x5793 = StreamOutNew(BurstCmdBus)
    val b6138 = StreamIn(field="data").name("b6138").ctrl(x5812) // x5794 = StreamInNew(BurstDataBus())
    val x5803 = UnitController(style=SeqPipe, level=InnerControl).name("x5803").ctrl(x5812) // UnitPipe(List(b3728),Block(x5802))
    val x5795 = OpDef(op=FixConvert, inputs=List(b3727)).name("x5795").ctrl(x5803) // FixConvert(b3727,TRUE,_32,_0)
    val x5796 = OpDef(op=FixSla, inputs=List(x5795, Const(2).ctrl(x5803))).name("x5796").ctrl(x5803) // FixLsh(x5795,Const(2))
    val x5797 = OpDef(op=FixConvert, inputs=List(x5796)).name("x5797").ctrl(x5803) // FixConvert(x5796,TRUE,_64,_0)
    val x5798 = top.dramAddress(x5744).name("x5798").ctrl(x5803) // GetDRAMAddress(x5744)
    val x5799 = OpDef(op=FixAdd, inputs=List(x5797, x5798)).name("x5799").ctrl(x5803) // FixAdd(x5797,x5798)
    val x5800 = OpDef(op=FixConvert, inputs=List(x5799)).name("x5800").ctrl(x5803) // FixConvert(x5799,TRUE,_64,_0)
    // x5801 = SimpleStruct(ArrayBuffer((offset,x5800), (size,Const(8000)), (isLoad,Const(true))))
    val b6139 = StoreDef(List(b6136), None, x5800).name("b6139").ctrl(x5803) // StreamWrite(x5793,x5801,b3728)
    val b6140 = StoreDef(List(b6137), None, Const(8000)).name("b6140").ctrl(x5803) // StreamWrite(x5793,x5801,b3728)
    val x5804 = FringeContainer(x5744,b6136,b6137,b6138).name("x5804").ctrl(x5812) // FringeDenseLoad(x5744,x5793,x5794)
    val x5805 = Counter(min=Const(0).ctrl(x5812), max=Const(2000).ctrl(x5812), step=Const(1).ctrl(x5812), par=16).name("x5805").ctrl(x5812) // CounterNew(Const(0),Const(2000),Const(1),Const(16))
    val x5806 = CounterChain(List(x5805)).name("x5806").ctrl(x5812) // CounterChainNew(List(x5805))
    val x5811 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5806).name("x5811").ctrl(x5812) // UnrolledForeach(List(b3728),x5806,Block(Const(())),List(List(b3774)),List(List(b3775)))
    val b3774 = IterDef(x5805, None).ctrl(x5811).name("b3774")
    val b3775 = DummyDef().ctrl(x5811).name("b3775")
    val x5807 = OpDef(op=BitAnd, inputs=List(b3775, b3728)).name("x5807").ctrl(x5811) // And(b3775,b3728)
    val b6141 = LoadDef(List(b6138), None).name("b6141").ctrl(x5811) // ParStreamRead(x5794,List(x5807))
    val b6142 = b6141 // x5809 = VectorApply(x5808,0)
    val x5810 = StoreDef(List(x5765_d0_b0), Some(List(b3774)), b6142).name("x5810").ctrl(x5811) // ParSRAMStore(x5765,List(List(b3774)),List(x5809),List(x5807))
    val x5832 = UnitController(style=StreamPipe, level=OuterControl).name("x5832").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val b6143 = StreamOut(field="offset").name("b6143").ctrl(x5832) // x5813 = StreamOutNew(BurstCmdBus)
    val b6144 = StreamOut(field="size").name("b6144").ctrl(x5832) // x5813 = StreamOutNew(BurstCmdBus)
    val b6145 = StreamIn(field="data").name("b6145").ctrl(x5832) // x5814 = StreamInNew(BurstDataBus())
    val x5823 = UnitController(style=SeqPipe, level=InnerControl).name("x5823").ctrl(x5832) // UnitPipe(List(b3728),Block(x5822))
    val x5815 = OpDef(op=FixConvert, inputs=List(b3727)).name("x5815").ctrl(x5823) // FixConvert(b3727,TRUE,_32,_0)
    val x5816 = OpDef(op=FixSla, inputs=List(x5815, Const(2).ctrl(x5823))).name("x5816").ctrl(x5823) // FixLsh(x5815,Const(2))
    val x5817 = OpDef(op=FixConvert, inputs=List(x5816)).name("x5817").ctrl(x5823) // FixConvert(x5816,TRUE,_64,_0)
    val x5818 = top.dramAddress(x5746).name("x5818").ctrl(x5823) // GetDRAMAddress(x5746)
    val x5819 = OpDef(op=FixAdd, inputs=List(x5817, x5818)).name("x5819").ctrl(x5823) // FixAdd(x5817,x5818)
    val x5820 = OpDef(op=FixConvert, inputs=List(x5819)).name("x5820").ctrl(x5823) // FixConvert(x5819,TRUE,_64,_0)
    // x5821 = SimpleStruct(ArrayBuffer((offset,x5820), (size,Const(8000)), (isLoad,Const(true))))
    val b6146 = StoreDef(List(b6143), None, x5820).name("b6146").ctrl(x5823) // StreamWrite(x5813,x5821,b3728)
    val b6147 = StoreDef(List(b6144), None, Const(8000)).name("b6147").ctrl(x5823) // StreamWrite(x5813,x5821,b3728)
    val x5824 = FringeContainer(x5746,b6143,b6144,b6145).name("x5824").ctrl(x5832) // FringeDenseLoad(x5746,x5813,x5814)
    val x5825 = Counter(min=Const(0).ctrl(x5832), max=Const(2000).ctrl(x5832), step=Const(1).ctrl(x5832), par=16).name("x5825").ctrl(x5832) // CounterNew(Const(0),Const(2000),Const(1),Const(16))
    val x5826 = CounterChain(List(x5825)).name("x5826").ctrl(x5832) // CounterChainNew(List(x5825))
    val x5831 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5826).name("x5831").ctrl(x5832) // UnrolledForeach(List(b3728),x5826,Block(Const(())),List(List(b3796)),List(List(b3797)))
    val b3796 = IterDef(x5825, None).ctrl(x5831).name("b3796")
    val b3797 = DummyDef().ctrl(x5831).name("b3797")
    val x5827 = OpDef(op=BitAnd, inputs=List(b3797, b3728)).name("x5827").ctrl(x5831) // And(b3797,b3728)
    val b6148 = LoadDef(List(b6145), None).name("b6148").ctrl(x5831) // ParStreamRead(x5814,List(x5827))
    val b6149 = b6148 // x5829 = VectorApply(x5828,0)
    val x5830 = StoreDef(List(x5766_d0_b0), Some(List(b3796)), b6149).name("x5830").ctrl(x5831) // ParSRAMStore(x5766,List(List(b3796)),List(x5829),List(x5827))
    val x5852 = UnitController(style=StreamPipe, level=OuterControl).name("x5852").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val b6150 = StreamOut(field="offset").name("b6150").ctrl(x5852) // x5833 = StreamOutNew(BurstCmdBus)
    val b6151 = StreamOut(field="size").name("b6151").ctrl(x5852) // x5833 = StreamOutNew(BurstCmdBus)
    val b6152 = StreamIn(field="data").name("b6152").ctrl(x5852) // x5834 = StreamInNew(BurstDataBus())
    val x5843 = UnitController(style=SeqPipe, level=InnerControl).name("x5843").ctrl(x5852) // UnitPipe(List(b3728),Block(x5842))
    val x5835 = OpDef(op=FixConvert, inputs=List(b3727)).name("x5835").ctrl(x5843) // FixConvert(b3727,TRUE,_32,_0)
    val x5836 = OpDef(op=FixSla, inputs=List(x5835, Const(2).ctrl(x5843))).name("x5836").ctrl(x5843) // FixLsh(x5835,Const(2))
    val x5837 = OpDef(op=FixConvert, inputs=List(x5836)).name("x5837").ctrl(x5843) // FixConvert(x5836,TRUE,_64,_0)
    val x5838 = top.dramAddress(x5748).name("x5838").ctrl(x5843) // GetDRAMAddress(x5748)
    val x5839 = OpDef(op=FixAdd, inputs=List(x5837, x5838)).name("x5839").ctrl(x5843) // FixAdd(x5837,x5838)
    val x5840 = OpDef(op=FixConvert, inputs=List(x5839)).name("x5840").ctrl(x5843) // FixConvert(x5839,TRUE,_64,_0)
    // x5841 = SimpleStruct(ArrayBuffer((offset,x5840), (size,Const(8000)), (isLoad,Const(true))))
    val b6153 = StoreDef(List(b6150), None, x5840).name("b6153").ctrl(x5843) // StreamWrite(x5833,x5841,b3728)
    val b6154 = StoreDef(List(b6151), None, Const(8000)).name("b6154").ctrl(x5843) // StreamWrite(x5833,x5841,b3728)
    val x5844 = FringeContainer(x5748,b6150,b6151,b6152).name("x5844").ctrl(x5852) // FringeDenseLoad(x5748,x5833,x5834)
    val x5845 = Counter(min=Const(0).ctrl(x5852), max=Const(2000).ctrl(x5852), step=Const(1).ctrl(x5852), par=16).name("x5845").ctrl(x5852) // CounterNew(Const(0),Const(2000),Const(1),Const(16))
    val x5846 = CounterChain(List(x5845)).name("x5846").ctrl(x5852) // CounterChainNew(List(x5845))
    val x5851 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5846).name("x5851").ctrl(x5852) // UnrolledForeach(List(b3728),x5846,Block(Const(())),List(List(b3818)),List(List(b3819)))
    val b3818 = IterDef(x5845, None).ctrl(x5851).name("b3818")
    val b3819 = DummyDef().ctrl(x5851).name("b3819")
    val x5847 = OpDef(op=BitAnd, inputs=List(b3819, b3728)).name("x5847").ctrl(x5851) // And(b3819,b3728)
    val b6155 = LoadDef(List(b6152), None).name("b6155").ctrl(x5851) // ParStreamRead(x5834,List(x5847))
    val b6156 = b6155 // x5849 = VectorApply(x5848,0)
    val x5850 = StoreDef(List(x5767_d0_b0), Some(List(b3818)), b6156).name("x5850").ctrl(x5851) // ParSRAMStore(x5767,List(List(b3818)),List(x5849),List(x5847))
    val x5872 = UnitController(style=StreamPipe, level=OuterControl).name("x5872").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val b6157 = StreamOut(field="offset").name("b6157").ctrl(x5872) // x5853 = StreamOutNew(BurstCmdBus)
    val b6158 = StreamOut(field="size").name("b6158").ctrl(x5872) // x5853 = StreamOutNew(BurstCmdBus)
    val b6159 = StreamIn(field="data").name("b6159").ctrl(x5872) // x5854 = StreamInNew(BurstDataBus())
    val x5863 = UnitController(style=SeqPipe, level=InnerControl).name("x5863").ctrl(x5872) // UnitPipe(List(b3728),Block(x5862))
    val x5855 = OpDef(op=FixConvert, inputs=List(b3727)).name("x5855").ctrl(x5863) // FixConvert(b3727,TRUE,_32,_0)
    val x5856 = OpDef(op=FixSla, inputs=List(x5855, Const(2).ctrl(x5863))).name("x5856").ctrl(x5863) // FixLsh(x5855,Const(2))
    val x5857 = OpDef(op=FixConvert, inputs=List(x5856)).name("x5857").ctrl(x5863) // FixConvert(x5856,TRUE,_64,_0)
    val x5858 = top.dramAddress(x5750).name("x5858").ctrl(x5863) // GetDRAMAddress(x5750)
    val x5859 = OpDef(op=FixAdd, inputs=List(x5857, x5858)).name("x5859").ctrl(x5863) // FixAdd(x5857,x5858)
    val x5860 = OpDef(op=FixConvert, inputs=List(x5859)).name("x5860").ctrl(x5863) // FixConvert(x5859,TRUE,_64,_0)
    // x5861 = SimpleStruct(ArrayBuffer((offset,x5860), (size,Const(8000)), (isLoad,Const(true))))
    val b6160 = StoreDef(List(b6157), None, x5860).name("b6160").ctrl(x5863) // StreamWrite(x5853,x5861,b3728)
    val b6161 = StoreDef(List(b6158), None, Const(8000)).name("b6161").ctrl(x5863) // StreamWrite(x5853,x5861,b3728)
    val x5864 = FringeContainer(x5750,b6157,b6158,b6159).name("x5864").ctrl(x5872) // FringeDenseLoad(x5750,x5853,x5854)
    val x5865 = Counter(min=Const(0).ctrl(x5872), max=Const(2000).ctrl(x5872), step=Const(1).ctrl(x5872), par=16).name("x5865").ctrl(x5872) // CounterNew(Const(0),Const(2000),Const(1),Const(16))
    val x5866 = CounterChain(List(x5865)).name("x5866").ctrl(x5872) // CounterChainNew(List(x5865))
    val x5871 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5866).name("x5871").ctrl(x5872) // UnrolledForeach(List(b3728),x5866,Block(Const(())),List(List(b3840)),List(List(b3841)))
    val b3840 = IterDef(x5865, None).ctrl(x5871).name("b3840")
    val b3841 = DummyDef().ctrl(x5871).name("b3841")
    val x5867 = OpDef(op=BitAnd, inputs=List(b3841, b3728)).name("x5867").ctrl(x5871) // And(b3841,b3728)
    val b6162 = LoadDef(List(b6159), None).name("b6162").ctrl(x5871) // ParStreamRead(x5854,List(x5867))
    val b6163 = b6162 // x5869 = VectorApply(x5868,0)
    val x5870 = StoreDef(List(x5768_d0_b0), Some(List(b3840)), b6163).name("x5870").ctrl(x5871) // ParSRAMStore(x5768,List(List(b3840)),List(x5869),List(x5867))
    val x5892 = UnitController(style=StreamPipe, level=OuterControl).name("x5892").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val b6164 = StreamOut(field="offset").name("b6164").ctrl(x5892) // x5873 = StreamOutNew(BurstCmdBus)
    val b6165 = StreamOut(field="size").name("b6165").ctrl(x5892) // x5873 = StreamOutNew(BurstCmdBus)
    val b6166 = StreamIn(field="data").name("b6166").ctrl(x5892) // x5874 = StreamInNew(BurstDataBus())
    val x5883 = UnitController(style=SeqPipe, level=InnerControl).name("x5883").ctrl(x5892) // UnitPipe(List(b3728),Block(x5882))
    val x5875 = OpDef(op=FixConvert, inputs=List(b3727)).name("x5875").ctrl(x5883) // FixConvert(b3727,TRUE,_32,_0)
    val x5876 = OpDef(op=FixSla, inputs=List(x5875, Const(2).ctrl(x5883))).name("x5876").ctrl(x5883) // FixLsh(x5875,Const(2))
    val x5877 = OpDef(op=FixConvert, inputs=List(x5876)).name("x5877").ctrl(x5883) // FixConvert(x5876,TRUE,_64,_0)
    val x5878 = top.dramAddress(x5752).name("x5878").ctrl(x5883) // GetDRAMAddress(x5752)
    val x5879 = OpDef(op=FixAdd, inputs=List(x5877, x5878)).name("x5879").ctrl(x5883) // FixAdd(x5877,x5878)
    val x5880 = OpDef(op=FixConvert, inputs=List(x5879)).name("x5880").ctrl(x5883) // FixConvert(x5879,TRUE,_64,_0)
    // x5881 = SimpleStruct(ArrayBuffer((offset,x5880), (size,Const(8000)), (isLoad,Const(true))))
    val b6167 = StoreDef(List(b6164), None, x5880).name("b6167").ctrl(x5883) // StreamWrite(x5873,x5881,b3728)
    val b6168 = StoreDef(List(b6165), None, Const(8000)).name("b6168").ctrl(x5883) // StreamWrite(x5873,x5881,b3728)
    val x5884 = FringeContainer(x5752,b6164,b6165,b6166).name("x5884").ctrl(x5892) // FringeDenseLoad(x5752,x5873,x5874)
    val x5885 = Counter(min=Const(0).ctrl(x5892), max=Const(2000).ctrl(x5892), step=Const(1).ctrl(x5892), par=16).name("x5885").ctrl(x5892) // CounterNew(Const(0),Const(2000),Const(1),Const(16))
    val x5886 = CounterChain(List(x5885)).name("x5886").ctrl(x5892) // CounterChainNew(List(x5885))
    val x5891 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5886).name("x5891").ctrl(x5892) // UnrolledForeach(List(b3728),x5886,Block(Const(())),List(List(b3862)),List(List(b3863)))
    val b3862 = IterDef(x5885, None).ctrl(x5891).name("b3862")
    val b3863 = DummyDef().ctrl(x5891).name("b3863")
    val x5887 = OpDef(op=BitAnd, inputs=List(b3863, b3728)).name("x5887").ctrl(x5891) // And(b3863,b3728)
    val b6169 = LoadDef(List(b6166), None).name("b6169").ctrl(x5891) // ParStreamRead(x5874,List(x5887))
    val b6170 = b6169 // x5889 = VectorApply(x5888,0)
    val x5890 = StoreDef(List(x5769_d0_b0), Some(List(b3862)), b6170).name("x5890").ctrl(x5891) // ParSRAMStore(x5769,List(List(b3862)),List(x5889),List(x5887))
    val x5893 = Counter(min=Const(0).ctrl(x6117), max=Const(2000).ctrl(x6117), step=Const(1).ctrl(x6117), par=16).name("x5893").ctrl(x6117) // CounterNew(Const(0),Const(2000),Const(1),Const(16))
    val x5894 = CounterChain(List(x5893)).name("x5894").ctrl(x6117) // CounterChainNew(List(x5893))
    val x6090 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5894).name("x6090").ctrl(x6117) // UnrolledForeach(List(b3728),x5894,Block(Const(())),List(List(b3873)),List(List(b3874)))
    val b3873 = IterDef(x5893, None).ctrl(x6090).name("b3873")
    val b3874 = DummyDef().ctrl(x6090).name("b3874")
    val x5895 = OpDef(op=BitAnd, inputs=List(b3874, b3728)).name("x5895").ctrl(x6090) // And(b3874,b3728)
    val x5896 = LoadDef(List(x5765_d0_b0), Some(List(b3873))).name("x5896").ctrl(x6090) // ParSRAMLoad(x5765,List(List(b3873)),List(x5895))
    val x5897 = x5896 // x5897 = VectorApply(x5896,0)
    val x5898 = LoadDef(List(x5766_d0_b0), Some(List(b3873))).name("x5898").ctrl(x6090) // ParSRAMLoad(x5766,List(List(b3873)),List(x5895))
    val x5899 = x5898 // x5899 = VectorApply(x5898,0)
    val x5900 = LoadDef(List(x5767_d0_b0), Some(List(b3873))).name("x5900").ctrl(x6090) // ParSRAMLoad(x5767,List(List(b3873)),List(x5895))
    val x5901 = x5900 // x5901 = VectorApply(x5900,0)
    val x5902 = LoadDef(List(x5768_d0_b0), Some(List(b3873))).name("x5902").ctrl(x6090) // ParSRAMLoad(x5768,List(List(b3873)),List(x5895))
    val x5903 = x5902 // x5903 = VectorApply(x5902,0)
    val x5904 = LoadDef(List(x5769_d0_b0), Some(List(b3873))).name("x5904").ctrl(x6090) // ParSRAMLoad(x5769,List(List(b3873)),List(x5895))
    val x5905 = x5904 // x5905 = VectorApply(x5904,0)
    val x5906 = LoadDef(List(x5764_d0_b0), Some(List(b3873))).name("x5906").ctrl(x6090) // ParSRAMLoad(x5764,List(List(b3873)),List(x5895))
    val x5907 = x5906 // x5907 = VectorApply(x5906,0)
    val x5908 = OpDef(op=FltDiv, inputs=List(x5897, x5899)).name("x5908").ctrl(x6090) // FltDiv(x5897,x5899)
    val x5909 = OpDef(op=FltSub, inputs=List(x5908, Const(1).ctrl(x6090))).name("x5909").ctrl(x6090) // FltSub(x5908,Const(1))
    val x5910 = OpDef(op=FltMul, inputs=List(x5909, x5909)).name("x5910").ctrl(x6090) // FltMul(x5909,x5909)
    val x5911 = OpDef(op=FltDiv, inputs=List(x5910, Const(2).ctrl(x6090))).name("x5911").ctrl(x6090) // FltDiv(x5910,Const(2))
    val x5912 = OpDef(op=FltSub, inputs=List(x5909, x5911)).name("x5912").ctrl(x6090) // FltSub(x5909,x5911)
    val x5913 = OpDef(op=FltMul, inputs=List(x5910, x5909)).name("x5913").ctrl(x6090) // FltMul(x5910,x5909)
    val x5914 = OpDef(op=FltDiv, inputs=List(x5913, Const(3.0).ctrl(x6090))).name("x5914").ctrl(x6090) // FltDiv(x5913,Const(3.0))
    val x5915 = OpDef(op=FltAdd, inputs=List(x5912, x5914)).name("x5915").ctrl(x6090) // FltAdd(x5912,x5914)
    val x5916 = OpDef(op=FltMul, inputs=List(x5913, x5909)).name("x5916").ctrl(x6090) // FltMul(x5913,x5909)
    val x5917 = OpDef(op=FltDiv, inputs=List(x5916, Const(4).ctrl(x6090))).name("x5917").ctrl(x6090) // FltDiv(x5916,Const(4))
    val x5918 = OpDef(op=FltSub, inputs=List(x5915, x5917)).name("x5918").ctrl(x6090) // FltSub(x5915,x5917)
    val x5919 = OpDef(op=FltMul, inputs=List(x5903, x5903)).name("x5919").ctrl(x6090) // FltMul(x5903,x5903)
    val x5920 = OpDef(op=FltMul, inputs=List(x5919, Const(0.5).ctrl(x6090))).name("x5920").ctrl(x6090) // FltMul(x5919,Const(0.5))
    val x5921 = OpDef(op=FltAdd, inputs=List(x5901, x5920)).name("x5921").ctrl(x6090) // FltAdd(x5901,x5920)
    val x5922 = OpDef(op=FltMul, inputs=List(x5921, x5905)).name("x5922").ctrl(x6090) // FltMul(x5921,x5905)
    val x5923 = OpDef(op=FltAdd, inputs=List(x5922, x5918)).name("x5923").ctrl(x6090) // FltAdd(x5922,x5918)
    val x5924 = OpDef(op=FltLt, inputs=List(x5905, Const(2).ctrl(x6090))).name("x5924").ctrl(x6090) // FltLt(x5905,Const(2))
    val x5925 = OpDef(op=FltSub, inputs=List(x5905, Const(1).ctrl(x6090))).name("x5925").ctrl(x6090) // FltSub(x5905,Const(1))
    val x5926 = OpDef(op=FltDiv, inputs=List(x5925, Const(2).ctrl(x6090))).name("x5926").ctrl(x6090) // FltDiv(x5925,Const(2))
    val x5927 = OpDef(op=FltAdd, inputs=List(Const(1).ctrl(x6090), x5926)).name("x5927").ctrl(x6090) // FltAdd(Const(1),x5926)
    val x5928 = OpDef(op=FltSub, inputs=List(x5905, Const(1).ctrl(x6090))).name("x5928").ctrl(x6090) // FltSub(x5905,Const(1))
    val x5929 = OpDef(op=FltSub, inputs=List(x5905, Const(1).ctrl(x6090))).name("x5929").ctrl(x6090) // FltSub(x5905,Const(1))
    val x5930 = OpDef(op=FltMul, inputs=List(x5928, x5929)).name("x5930").ctrl(x6090) // FltMul(x5928,x5929)
    val x5931 = OpDef(op=FltDiv, inputs=List(x5930, Const(8).ctrl(x6090))).name("x5931").ctrl(x6090) // FltDiv(x5930,Const(8))
    val x5932 = OpDef(op=FltSub, inputs=List(x5927, x5931)).name("x5932").ctrl(x6090) // FltSub(x5927,x5931)
    val x5933 = OpDef(op=FltSub, inputs=List(x5905, Const(1).ctrl(x6090))).name("x5933").ctrl(x6090) // FltSub(x5905,Const(1))
    val x5934 = OpDef(op=FltSub, inputs=List(x5905, Const(1).ctrl(x6090))).name("x5934").ctrl(x6090) // FltSub(x5905,Const(1))
    val x5935 = OpDef(op=FltMul, inputs=List(x5933, x5934)).name("x5935").ctrl(x6090) // FltMul(x5933,x5934)
    val x5936 = OpDef(op=FltSub, inputs=List(x5905, Const(1).ctrl(x6090))).name("x5936").ctrl(x6090) // FltSub(x5905,Const(1))
    val x5937 = OpDef(op=FltMul, inputs=List(x5935, x5936)).name("x5937").ctrl(x6090) // FltMul(x5935,x5936)
    val x5938 = OpDef(op=FltDiv, inputs=List(x5937, Const(16).ctrl(x6090))).name("x5938").ctrl(x6090) // FltDiv(x5937,Const(16))
    val x5939 = OpDef(op=FltAdd, inputs=List(x5932, x5938)).name("x5939").ctrl(x6090) // FltAdd(x5932,x5938)
    val x5940 = OpDef(op=FltLt, inputs=List(x5905, Const(10.00).ctrl(x6090))).name("x5940").ctrl(x6090) // FltLt(x5905,Const(10.00))
    val x5941 = OpDef(op=FltMul, inputs=List(x5905, Const(0.2199999988079071044921875).ctrl(x6090))).name("x5941").ctrl(x6090) // FltMul(x5905,Const(0.2199999988079071044921875))
    val x5942 = OpDef(op=FltAdd, inputs=List(x5941, Const(1).ctrl(x6090))).name("x5942").ctrl(x6090) // FltAdd(x5941,Const(1))
    val x5943 = OpDef(op=FltLt, inputs=List(x5905, Const(100.0000).ctrl(x6090))).name("x5943").ctrl(x6090) // FltLt(x5905,Const(100.0000))
    val x5944 = OpDef(op=FltMul, inputs=List(x5905, Const(0.07999999821186065673828125).ctrl(x6090))).name("x5944").ctrl(x6090) // FltMul(x5905,Const(0.07999999821186065673828125))
    val x5945 = OpDef(op=FltAdd, inputs=List(x5944, Const(2.50).ctrl(x6090))).name("x5945").ctrl(x6090) // FltAdd(x5944,Const(2.50))
    val x5946 = OpDef(op=FltLt, inputs=List(x5905, Const(1000.000000).ctrl(x6090))).name("x5946").ctrl(x6090) // FltLt(x5905,Const(1000.000000))
    val x5947 = OpDef(op=FltMul, inputs=List(x5905, Const(0.0280000008642673492431640625).ctrl(x6090))).name("x5947").ctrl(x6090) // FltMul(x5905,Const(0.0280000008642673492431640625))
    val x5948 = OpDef(op=FltAdd, inputs=List(x5947, Const(8).ctrl(x6090))).name("x5948").ctrl(x6090) // FltAdd(x5947,Const(8))
    val x5949 = OpDef(op=FltLt, inputs=List(x5905, Const(10000.000000000).ctrl(x6090))).name("x5949").ctrl(x6090) // FltLt(x5905,Const(10000.000000000))
    val x5950 = OpDef(op=FltMul, inputs=List(x5905, Const(0.008000000379979610443115234375).ctrl(x6090))).name("x5950").ctrl(x6090) // FltMul(x5905,Const(0.008000000379979610443115234375))
    val x5951 = OpDef(op=FltAdd, inputs=List(x5950, Const(20.00).ctrl(x6090))).name("x5951").ctrl(x6090) // FltAdd(x5950,Const(20.00))
    val x5952 = OpDef(op=FltLt, inputs=List(x5905, Const(100000.00000000000).ctrl(x6090))).name("x5952").ctrl(x6090) // FltLt(x5905,Const(100000.00000000000))
    val x5953 = OpDef(op=FltMul, inputs=List(x5905, Const(0.0030000000260770320892333984375).ctrl(x6090))).name("x5953").ctrl(x6090) // FltMul(x5905,Const(0.0030000000260770320892333984375))
    val x5954 = OpDef(op=FltAdd, inputs=List(x5953, Const(60.000).ctrl(x6090))).name("x5954").ctrl(x6090) // FltAdd(x5953,Const(60.000))
    val x5955 = OpDef(op=FltMul, inputs=List(x5905, Const(0.000199999994947575032711029052734375).ctrl(x6090))).name("x5955").ctrl(x6090) // FltMul(x5905,Const(0.000199999994947575032711029052734375))
    val x5956 = OpDef(op=FltAdd, inputs=List(x5955, Const(300.000000).ctrl(x6090))).name("x5956").ctrl(x6090) // FltAdd(x5955,Const(300.000000))
    val x5957 = OpDef(op=MuxOp, inputs=List(x5952, x5954, x5956)).name("x5957").ctrl(x6090) // Mux(x5952,x5954,x5956)
    val x5958 = OpDef(op=MuxOp, inputs=List(x5949, x5951, x5957)).name("x5958").ctrl(x6090) // Mux(x5949,x5951,x5957)
    val x5959 = OpDef(op=MuxOp, inputs=List(x5946, x5948, x5958)).name("x5959").ctrl(x6090) // Mux(x5946,x5948,x5958)
    val x5960 = OpDef(op=MuxOp, inputs=List(x5943, x5945, x5959)).name("x5960").ctrl(x6090) // Mux(x5943,x5945,x5959)
    val x5961 = OpDef(op=MuxOp, inputs=List(x5940, x5942, x5960)).name("x5961").ctrl(x6090) // Mux(x5940,x5942,x5960)
    val x5962 = OpDef(op=MuxOp, inputs=List(x5924, x5939, x5961)).name("x5962").ctrl(x6090) // Mux(x5924,x5939,x5961)
    val x5963 = OpDef(op=FltMul, inputs=List(x5903, x5962)).name("x5963").ctrl(x6090) // FltMul(x5903,x5962)
    val x5964 = OpDef(op=FltMul, inputs=List(x5963, x5963)).name("x5964").ctrl(x6090) // FltMul(x5963,x5963)
    val x5965 = OpDef(op=FltDiv, inputs=List(x5923, x5964)).name("x5965").ctrl(x6090) // FltDiv(x5923,x5964)
    val x5966 = OpDef(op=FltAbs, inputs=List(x5965)).name("x5966").ctrl(x6090) // FltAbs(x5965)
    val x5967 = OpDef(op=FltMul, inputs=List(x5966, x5966)).name("x5967").ctrl(x6090) // FltMul(x5966,x5966)
    val x5968 = OpDef(op=FltMul, inputs=List(x5967, Const(-0.0500000007450580596923828125).ctrl(x6090))).name("x5968").ctrl(x6090) // FltMul(x5967,Const(-0.0500000007450580596923828125))
    val x5969 = OpDef(op=FltLt, inputs=List(x5968, Const(-3.50).ctrl(x6090))).name("x5969").ctrl(x6090) // FltLt(x5968,Const(-3.50))
    val x5970 = OpDef(op=FltLt, inputs=List(x5968, Const(-1.2000000476837158203125).ctrl(x6090))).name("x5970").ctrl(x6090) // FltLt(x5968,Const(-1.2000000476837158203125))
    val x5971 = OpDef(op=FltMul, inputs=List(x5968, Const(0.100000001490116119384765625).ctrl(x6090))).name("x5971").ctrl(x6090) // FltMul(x5968,Const(0.100000001490116119384765625))
    val x5972 = OpDef(op=FltAdd, inputs=List(x5971, Const(0.3499999940395355224609375).ctrl(x6090))).name("x5972").ctrl(x6090) // FltAdd(x5971,Const(0.3499999940395355224609375))
    val x5973 = OpDef(op=FltAdd, inputs=List(Const(1).ctrl(x6090), x5968)).name("x5973").ctrl(x6090) // FltAdd(Const(1),x5968)
    val x5974 = OpDef(op=FltMul, inputs=List(x5968, x5968)).name("x5974").ctrl(x6090) // FltMul(x5968,x5968)
    val x5975 = OpDef(op=FltDiv, inputs=List(x5974, Const(2).ctrl(x6090))).name("x5975").ctrl(x6090) // FltDiv(x5974,Const(2))
    val x5976 = OpDef(op=FltAdd, inputs=List(x5973, x5975)).name("x5976").ctrl(x6090) // FltAdd(x5973,x5975)
    val x5977 = OpDef(op=FltMul, inputs=List(x5974, x5968)).name("x5977").ctrl(x6090) // FltMul(x5974,x5968)
    val x5978 = OpDef(op=FltDiv, inputs=List(x5977, Const(6.0).ctrl(x6090))).name("x5978").ctrl(x6090) // FltDiv(x5977,Const(6.0))
    val x5979 = OpDef(op=FltAdd, inputs=List(x5976, x5978)).name("x5979").ctrl(x6090) // FltAdd(x5976,x5978)
    val x5980 = OpDef(op=FltMul, inputs=List(x5977, x5968)).name("x5980").ctrl(x6090) // FltMul(x5977,x5968)
    val x5981 = OpDef(op=FltDiv, inputs=List(x5980, Const(24.0).ctrl(x6090))).name("x5981").ctrl(x6090) // FltDiv(x5980,Const(24.0))
    val x5982 = OpDef(op=FltAdd, inputs=List(x5979, x5981)).name("x5982").ctrl(x6090) // FltAdd(x5979,x5981)
    val x5983 = OpDef(op=FltMul, inputs=List(x5980, x5968)).name("x5983").ctrl(x6090) // FltMul(x5980,x5968)
    val x5984 = OpDef(op=FltDiv, inputs=List(x5983, Const(120.000).ctrl(x6090))).name("x5984").ctrl(x6090) // FltDiv(x5983,Const(120.000))
    val x5985 = OpDef(op=FltAdd, inputs=List(x5982, x5984)).name("x5985").ctrl(x6090) // FltAdd(x5982,x5984)
    val x5986 = OpDef(op=MuxOp, inputs=List(x5970, x5972, x5985)).name("x5986").ctrl(x6090) // Mux(x5970,x5972,x5985)
    val x5987 = OpDef(op=MuxOp, inputs=List(x5969, Const(0.0).ctrl(x6090), x5986)).name("x5987").ctrl(x6090) // Mux(x5969,Const(0.0),x5986)
    val x5988 = OpDef(op=FltMul, inputs=List(x5987, Const(0.398942291736602783203125).ctrl(x6090))).name("x5988").ctrl(x6090) // FltMul(x5987,Const(0.398942291736602783203125))
    val x5989 = OpDef(op=FltMul, inputs=List(x5966, Const(0.23164190351963043212890625).ctrl(x6090))).name("x5989").ctrl(x6090) // FltMul(x5966,Const(0.23164190351963043212890625))
    val x5990 = OpDef(op=FltAdd, inputs=List(x5989, Const(1).ctrl(x6090))).name("x5990").ctrl(x6090) // FltAdd(x5989,Const(1))
    val x5991 = OpDef(op=FltDiv, inputs=List(Const(1).ctrl(x6090), x5990)).name("x5991").ctrl(x6090) // FltDiv(Const(1),x5990)
    val x5992 = OpDef(op=FltMul, inputs=List(x5991, x5991)).name("x5992").ctrl(x6090) // FltMul(x5991,x5991)
    val x5993 = OpDef(op=FltMul, inputs=List(x5992, x5991)).name("x5993").ctrl(x6090) // FltMul(x5992,x5991)
    val x5994 = OpDef(op=FltMul, inputs=List(x5993, x5991)).name("x5994").ctrl(x6090) // FltMul(x5993,x5991)
    val x5995 = OpDef(op=FltMul, inputs=List(x5994, x5991)).name("x5995").ctrl(x6090) // FltMul(x5994,x5991)
    val x5996 = OpDef(op=FltMul, inputs=List(x5991, Const(0.319381535053253173828125).ctrl(x6090))).name("x5996").ctrl(x6090) // FltMul(x5991,Const(0.319381535053253173828125))
    val x5997 = OpDef(op=FltMul, inputs=List(x5992, Const(-0.3565637767314910888671875).ctrl(x6090))).name("x5997").ctrl(x6090) // FltMul(x5992,Const(-0.3565637767314910888671875))
    val x5998 = OpDef(op=FltMul, inputs=List(x5993, Const(1.78147792816162109375).ctrl(x6090))).name("x5998").ctrl(x6090) // FltMul(x5993,Const(1.78147792816162109375))
    val x5999 = OpDef(op=FltMul, inputs=List(x5994, Const(-1.8212559223175048828125).ctrl(x6090))).name("x5999").ctrl(x6090) // FltMul(x5994,Const(-1.8212559223175048828125))
    val x6000 = OpDef(op=FltMul, inputs=List(x5995, Const(1.33027446269989013671875).ctrl(x6090))).name("x6000").ctrl(x6090) // FltMul(x5995,Const(1.33027446269989013671875))
    val x6001 = OpDef(op=FltAdd, inputs=List(x5997, x5998)).name("x6001").ctrl(x6090) // FltAdd(x5997,x5998)
    val x6002 = OpDef(op=FltAdd, inputs=List(x6001, x5999)).name("x6002").ctrl(x6090) // FltAdd(x6001,x5999)
    val x6003 = OpDef(op=FltAdd, inputs=List(x6002, x6000)).name("x6003").ctrl(x6090) // FltAdd(x6002,x6000)
    val x6004 = OpDef(op=FltAdd, inputs=List(x6003, x5996)).name("x6004").ctrl(x6090) // FltAdd(x6003,x5996)
    val x6005 = OpDef(op=FltMul, inputs=List(x6004, x5988)).name("x6005").ctrl(x6090) // FltMul(x6004,x5988)
    val x6006 = OpDef(op=FltNeg, inputs=List(x6005)).name("x6006").ctrl(x6090) // FltNeg(x6005)
    val x6007 = OpDef(op=FltAdd, inputs=List(x6006, Const(1).ctrl(x6090))).name("x6007").ctrl(x6090) // FltAdd(x6006,Const(1))
    val x6008 = OpDef(op=FltLt, inputs=List(x5965, Const(0.0).ctrl(x6090))).name("x6008").ctrl(x6090) // FltLt(x5965,Const(0.0))
    val x6009 = OpDef(op=MuxOp, inputs=List(x6008, x6005, x6007)).name("x6009").ctrl(x6090) // Mux(x6008,x6005,x6007)
    val x6010 = OpDef(op=FltSub, inputs=List(x5965, x5963)).name("x6010").ctrl(x6090) // FltSub(x5965,x5963)
    val x6011 = OpDef(op=FltAbs, inputs=List(x6010)).name("x6011").ctrl(x6090) // FltAbs(x6010)
    val x6012 = OpDef(op=FltMul, inputs=List(x6011, x6011)).name("x6012").ctrl(x6090) // FltMul(x6011,x6011)
    val x6013 = OpDef(op=FltMul, inputs=List(x6012, Const(-0.0500000007450580596923828125).ctrl(x6090))).name("x6013").ctrl(x6090) // FltMul(x6012,Const(-0.0500000007450580596923828125))
    val x6014 = OpDef(op=FltLt, inputs=List(x6013, Const(-3.50).ctrl(x6090))).name("x6014").ctrl(x6090) // FltLt(x6013,Const(-3.50))
    val x6015 = OpDef(op=FltLt, inputs=List(x6013, Const(-1.2000000476837158203125).ctrl(x6090))).name("x6015").ctrl(x6090) // FltLt(x6013,Const(-1.2000000476837158203125))
    val x6016 = OpDef(op=FltMul, inputs=List(x6013, Const(0.100000001490116119384765625).ctrl(x6090))).name("x6016").ctrl(x6090) // FltMul(x6013,Const(0.100000001490116119384765625))
    val x6017 = OpDef(op=FltAdd, inputs=List(x6016, Const(0.3499999940395355224609375).ctrl(x6090))).name("x6017").ctrl(x6090) // FltAdd(x6016,Const(0.3499999940395355224609375))
    val x6018 = OpDef(op=FltAdd, inputs=List(Const(1).ctrl(x6090), x6013)).name("x6018").ctrl(x6090) // FltAdd(Const(1),x6013)
    val x6019 = OpDef(op=FltMul, inputs=List(x6013, x6013)).name("x6019").ctrl(x6090) // FltMul(x6013,x6013)
    val x6020 = OpDef(op=FltDiv, inputs=List(x6019, Const(2).ctrl(x6090))).name("x6020").ctrl(x6090) // FltDiv(x6019,Const(2))
    val x6021 = OpDef(op=FltAdd, inputs=List(x6018, x6020)).name("x6021").ctrl(x6090) // FltAdd(x6018,x6020)
    val x6022 = OpDef(op=FltMul, inputs=List(x6019, x6013)).name("x6022").ctrl(x6090) // FltMul(x6019,x6013)
    val x6023 = OpDef(op=FltDiv, inputs=List(x6022, Const(6.0).ctrl(x6090))).name("x6023").ctrl(x6090) // FltDiv(x6022,Const(6.0))
    val x6024 = OpDef(op=FltAdd, inputs=List(x6021, x6023)).name("x6024").ctrl(x6090) // FltAdd(x6021,x6023)
    val x6025 = OpDef(op=FltMul, inputs=List(x6022, x6013)).name("x6025").ctrl(x6090) // FltMul(x6022,x6013)
    val x6026 = OpDef(op=FltDiv, inputs=List(x6025, Const(24.0).ctrl(x6090))).name("x6026").ctrl(x6090) // FltDiv(x6025,Const(24.0))
    val x6027 = OpDef(op=FltAdd, inputs=List(x6024, x6026)).name("x6027").ctrl(x6090) // FltAdd(x6024,x6026)
    val x6028 = OpDef(op=FltMul, inputs=List(x6025, x6013)).name("x6028").ctrl(x6090) // FltMul(x6025,x6013)
    val x6029 = OpDef(op=FltDiv, inputs=List(x6028, Const(120.000).ctrl(x6090))).name("x6029").ctrl(x6090) // FltDiv(x6028,Const(120.000))
    val x6030 = OpDef(op=FltAdd, inputs=List(x6027, x6029)).name("x6030").ctrl(x6090) // FltAdd(x6027,x6029)
    val x6031 = OpDef(op=MuxOp, inputs=List(x6015, x6017, x6030)).name("x6031").ctrl(x6090) // Mux(x6015,x6017,x6030)
    val x6032 = OpDef(op=MuxOp, inputs=List(x6014, Const(0.0).ctrl(x6090), x6031)).name("x6032").ctrl(x6090) // Mux(x6014,Const(0.0),x6031)
    val x6033 = OpDef(op=FltMul, inputs=List(x6032, Const(0.398942291736602783203125).ctrl(x6090))).name("x6033").ctrl(x6090) // FltMul(x6032,Const(0.398942291736602783203125))
    val x6034 = OpDef(op=FltMul, inputs=List(x6011, Const(0.23164190351963043212890625).ctrl(x6090))).name("x6034").ctrl(x6090) // FltMul(x6011,Const(0.23164190351963043212890625))
    val x6035 = OpDef(op=FltAdd, inputs=List(x6034, Const(1).ctrl(x6090))).name("x6035").ctrl(x6090) // FltAdd(x6034,Const(1))
    val x6036 = OpDef(op=FltDiv, inputs=List(Const(1).ctrl(x6090), x6035)).name("x6036").ctrl(x6090) // FltDiv(Const(1),x6035)
    val x6037 = OpDef(op=FltMul, inputs=List(x6036, x6036)).name("x6037").ctrl(x6090) // FltMul(x6036,x6036)
    val x6038 = OpDef(op=FltMul, inputs=List(x6037, x6036)).name("x6038").ctrl(x6090) // FltMul(x6037,x6036)
    val x6039 = OpDef(op=FltMul, inputs=List(x6038, x6036)).name("x6039").ctrl(x6090) // FltMul(x6038,x6036)
    val x6040 = OpDef(op=FltMul, inputs=List(x6039, x6036)).name("x6040").ctrl(x6090) // FltMul(x6039,x6036)
    val x6041 = OpDef(op=FltMul, inputs=List(x6036, Const(0.319381535053253173828125).ctrl(x6090))).name("x6041").ctrl(x6090) // FltMul(x6036,Const(0.319381535053253173828125))
    val x6042 = OpDef(op=FltMul, inputs=List(x6037, Const(-0.3565637767314910888671875).ctrl(x6090))).name("x6042").ctrl(x6090) // FltMul(x6037,Const(-0.3565637767314910888671875))
    val x6043 = OpDef(op=FltMul, inputs=List(x6038, Const(1.78147792816162109375).ctrl(x6090))).name("x6043").ctrl(x6090) // FltMul(x6038,Const(1.78147792816162109375))
    val x6044 = OpDef(op=FltMul, inputs=List(x6039, Const(-1.8212559223175048828125).ctrl(x6090))).name("x6044").ctrl(x6090) // FltMul(x6039,Const(-1.8212559223175048828125))
    val x6045 = OpDef(op=FltMul, inputs=List(x6040, Const(1.33027446269989013671875).ctrl(x6090))).name("x6045").ctrl(x6090) // FltMul(x6040,Const(1.33027446269989013671875))
    val x6046 = OpDef(op=FltAdd, inputs=List(x6042, x6043)).name("x6046").ctrl(x6090) // FltAdd(x6042,x6043)
    val x6047 = OpDef(op=FltAdd, inputs=List(x6046, x6044)).name("x6047").ctrl(x6090) // FltAdd(x6046,x6044)
    val x6048 = OpDef(op=FltAdd, inputs=List(x6047, x6045)).name("x6048").ctrl(x6090) // FltAdd(x6047,x6045)
    val x6049 = OpDef(op=FltAdd, inputs=List(x6048, x6041)).name("x6049").ctrl(x6090) // FltAdd(x6048,x6041)
    val x6050 = OpDef(op=FltMul, inputs=List(x6049, x6033)).name("x6050").ctrl(x6090) // FltMul(x6049,x6033)
    val x6051 = OpDef(op=FltNeg, inputs=List(x6050)).name("x6051").ctrl(x6090) // FltNeg(x6050)
    val x6052 = OpDef(op=FltAdd, inputs=List(x6051, Const(1).ctrl(x6090))).name("x6052").ctrl(x6090) // FltAdd(x6051,Const(1))
    val x6053 = OpDef(op=FltLt, inputs=List(x6010, Const(0.0).ctrl(x6090))).name("x6053").ctrl(x6090) // FltLt(x6010,Const(0.0))
    val x6054 = OpDef(op=MuxOp, inputs=List(x6053, x6050, x6052)).name("x6054").ctrl(x6090) // Mux(x6053,x6050,x6052)
    val x6055 = OpDef(op=FltNeg, inputs=List(x5901)).name("x6055").ctrl(x6090) // FltNeg(x5901)
    val x6056 = OpDef(op=FltMul, inputs=List(x6055, x5905)).name("x6056").ctrl(x6090) // FltMul(x6055,x5905)
    val x6057 = OpDef(op=FltLt, inputs=List(x6056, Const(-3.50).ctrl(x6090))).name("x6057").ctrl(x6090) // FltLt(x6056,Const(-3.50))
    val x6058 = OpDef(op=FltLt, inputs=List(x6056, Const(-1.2000000476837158203125).ctrl(x6090))).name("x6058").ctrl(x6090) // FltLt(x6056,Const(-1.2000000476837158203125))
    val x6059 = OpDef(op=FltMul, inputs=List(x6056, Const(0.100000001490116119384765625).ctrl(x6090))).name("x6059").ctrl(x6090) // FltMul(x6056,Const(0.100000001490116119384765625))
    val x6060 = OpDef(op=FltAdd, inputs=List(x6059, Const(0.3499999940395355224609375).ctrl(x6090))).name("x6060").ctrl(x6090) // FltAdd(x6059,Const(0.3499999940395355224609375))
    val x6061 = OpDef(op=FltAdd, inputs=List(Const(1).ctrl(x6090), x6056)).name("x6061").ctrl(x6090) // FltAdd(Const(1),x6056)
    val x6062 = OpDef(op=FltMul, inputs=List(x6056, x6056)).name("x6062").ctrl(x6090) // FltMul(x6056,x6056)
    val x6063 = OpDef(op=FltDiv, inputs=List(x6062, Const(2).ctrl(x6090))).name("x6063").ctrl(x6090) // FltDiv(x6062,Const(2))
    val x6064 = OpDef(op=FltAdd, inputs=List(x6061, x6063)).name("x6064").ctrl(x6090) // FltAdd(x6061,x6063)
    val x6065 = OpDef(op=FltMul, inputs=List(x6062, x6056)).name("x6065").ctrl(x6090) // FltMul(x6062,x6056)
    val x6066 = OpDef(op=FltDiv, inputs=List(x6065, Const(6.0).ctrl(x6090))).name("x6066").ctrl(x6090) // FltDiv(x6065,Const(6.0))
    val x6067 = OpDef(op=FltAdd, inputs=List(x6064, x6066)).name("x6067").ctrl(x6090) // FltAdd(x6064,x6066)
    val x6068 = OpDef(op=FltMul, inputs=List(x6065, x6056)).name("x6068").ctrl(x6090) // FltMul(x6065,x6056)
    val x6069 = OpDef(op=FltDiv, inputs=List(x6068, Const(24.0).ctrl(x6090))).name("x6069").ctrl(x6090) // FltDiv(x6068,Const(24.0))
    val x6070 = OpDef(op=FltAdd, inputs=List(x6067, x6069)).name("x6070").ctrl(x6090) // FltAdd(x6067,x6069)
    val x6071 = OpDef(op=FltMul, inputs=List(x6068, x6056)).name("x6071").ctrl(x6090) // FltMul(x6068,x6056)
    val x6072 = OpDef(op=FltDiv, inputs=List(x6071, Const(120.000).ctrl(x6090))).name("x6072").ctrl(x6090) // FltDiv(x6071,Const(120.000))
    val x6073 = OpDef(op=FltAdd, inputs=List(x6070, x6072)).name("x6073").ctrl(x6090) // FltAdd(x6070,x6072)
    val x6074 = OpDef(op=MuxOp, inputs=List(x6058, x6060, x6073)).name("x6074").ctrl(x6090) // Mux(x6058,x6060,x6073)
    val x6075 = OpDef(op=MuxOp, inputs=List(x6057, Const(0.0).ctrl(x6090), x6074)).name("x6075").ctrl(x6090) // Mux(x6057,Const(0.0),x6074)
    val x6076 = OpDef(op=FltMul, inputs=List(x5899, x6075)).name("x6076").ctrl(x6090) // FltMul(x5899,x6075)
    val x6077 = OpDef(op=FltNeg, inputs=List(x6009)).name("x6077").ctrl(x6090) // FltNeg(x6009)
    val x6078 = OpDef(op=FltAdd, inputs=List(x6077, Const(1).ctrl(x6090))).name("x6078").ctrl(x6090) // FltAdd(x6077,Const(1))
    val x6079 = OpDef(op=FltNeg, inputs=List(x6054)).name("x6079").ctrl(x6090) // FltNeg(x6054)
    val x6080 = OpDef(op=FltAdd, inputs=List(x6079, Const(1).ctrl(x6090))).name("x6080").ctrl(x6090) // FltAdd(x6079,Const(1))
    val x6081 = OpDef(op=FltMul, inputs=List(x5897, x6009)).name("x6081").ctrl(x6090) // FltMul(x5897,x6009)
    val x6082 = OpDef(op=FltMul, inputs=List(x6076, x6054)).name("x6082").ctrl(x6090) // FltMul(x6076,x6054)
    val x6083 = OpDef(op=FltSub, inputs=List(x6081, x6082)).name("x6083").ctrl(x6090) // FltSub(x6081,x6082)
    val x6084 = OpDef(op=FltMul, inputs=List(x6076, x6080)).name("x6084").ctrl(x6090) // FltMul(x6076,x6080)
    val x6085 = OpDef(op=FltMul, inputs=List(x5897, x6078)).name("x6085").ctrl(x6090) // FltMul(x5897,x6078)
    val x6086 = OpDef(op=FltSub, inputs=List(x6084, x6085)).name("x6086").ctrl(x6090) // FltSub(x6084,x6085)
    val x6087 = OpDef(op=FixEql, inputs=List(x5907, Const(0).ctrl(x6090))).name("x6087").ctrl(x6090) // FixEql(x5907,Const(0))
    val x6088 = OpDef(op=MuxOp, inputs=List(x6087, x6086, x6083)).name("x6088").ctrl(x6090) // Mux(x6087,x6086,x6083)
    val x6089 = StoreDef(List(x5770_d0_b0), Some(List(b3873)), x6088).name("x6089").ctrl(x6090) // ParSRAMStore(x5770,List(List(b3873)),List(x6088),List(x5895))
    val x6092 = UnitController(style=SeqPipe, level=InnerControl).name("x6092").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val x6091 = OpDef(op=FixAdd, inputs=List(b3727, Const(2000).ctrl(x6092))).name("x6091").ctrl(x6092) // FixAdd(b3727,Const(2000))
    val x6116 = UnitController(style=StreamPipe, level=OuterControl).name("x6116").ctrl(x6117) // UnitPipe(List(b3728),Block(Const(())))
    val b6171 = StreamOut(field="offset").name("b6171").ctrl(x6116) // x6093 = StreamOutNew(BurstCmdBus)
    val b6172 = StreamOut(field="size").name("b6172").ctrl(x6116) // x6093 = StreamOutNew(BurstCmdBus)
    val b6173 = StreamOut(field="data").name("b6173").ctrl(x6116) // x6094 = StreamOutNew(BurstFullDataBus())
    val b6174 = StreamIn(field="ack").name("b6174").ctrl(x6116) // x6095 = StreamInNew(BurstAckBus)
    val x6104 = UnitController(style=SeqPipe, level=InnerControl).name("x6104").ctrl(x6116) // UnitPipe(List(b3728),Block(x6103))
    val x6096 = OpDef(op=FixConvert, inputs=List(b3727)).name("x6096").ctrl(x6104) // FixConvert(b3727,TRUE,_32,_0)
    val x6097 = OpDef(op=FixSla, inputs=List(x6096, Const(2).ctrl(x6104))).name("x6097").ctrl(x6104) // FixLsh(x6096,Const(2))
    val x6098 = OpDef(op=FixConvert, inputs=List(x6097)).name("x6098").ctrl(x6104) // FixConvert(x6097,TRUE,_64,_0)
    val x6099 = top.dramAddress(x5754).name("x6099").ctrl(x6104) // GetDRAMAddress(x5754)
    val x6100 = OpDef(op=FixAdd, inputs=List(x6098, x6099)).name("x6100").ctrl(x6104) // FixAdd(x6098,x6099)
    val x6101 = OpDef(op=FixConvert, inputs=List(x6100)).name("x6101").ctrl(x6104) // FixConvert(x6100,TRUE,_64,_0)
    // x6102 = SimpleStruct(ArrayBuffer((offset,x6101), (size,Const(8000)), (isLoad,Const(false))))
    val b6175 = StoreDef(List(b6171), None, x6101).name("b6175").ctrl(x6104) // StreamWrite(x6093,x6102,b3728)
    val b6176 = StoreDef(List(b6172), None, Const(8000)).name("b6176").ctrl(x6104) // StreamWrite(x6093,x6102,b3728)
    val x6105 = Counter(min=Const(0).ctrl(x6116), max=Const(2000).ctrl(x6116), step=Const(1).ctrl(x6116), par=16).name("x6105").ctrl(x6116) // CounterNew(Const(0),Const(2000),Const(1),Const(16))
    val x6106 = CounterChain(List(x6105)).name("x6106").ctrl(x6116) // CounterChainNew(List(x6105))
    val x6112 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6106).name("x6112").ctrl(x6116) // UnrolledForeach(List(b3728),x6106,Block(Const(())),List(List(b4087)),List(List(b4088)))
    val b4087 = IterDef(x6105, None).ctrl(x6112).name("b4087")
    val b4088 = DummyDef().ctrl(x6112).name("b4088")
    val x6107 = OpDef(op=BitAnd, inputs=List(b4088, b3728)).name("x6107").ctrl(x6112) // And(b4088,b3728)
    val x6108 = LoadDef(List(x5770_d0_b0), Some(List(b4087))).name("x6108").ctrl(x6112) // ParSRAMLoad(x5770,List(List(b4087)),List(x6107))
    val x6109 = x6108 // x6109 = VectorApply(x6108,0)
    // x6110 = SimpleStruct(ArrayBuffer((_1,x6109), (_2,Const(true))))
    val b6177 = StoreDef(List(b6173), None, x6109).name("b6177").ctrl(x6112) // ParStreamWrite(x6094,List(x6110),List(x6107))
    val x6113 = FringeContainer(x5754,b6171,b6172,b6173,b6174).name("x6113").ctrl(x6116) // FringeDenseStore(x5754,x6093,x6094,x6095)
    val x6115 = UnitController(style=SeqPipe, level=InnerControl).name("x6115").ctrl(x6116) // UnitPipe(List(b3728),Block(Const(())))
    val b6178 = LoadDef(List(b6174), None).name("b6178").ctrl(x6115) // StreamRead(x6095,b3728)
    
  }
}
