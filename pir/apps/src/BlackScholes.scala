import pir._
import pir.node._
import arch._
import prism.enums._

object BlackScholes extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x5736 = ArgIn(init=0).name("x5736").ctrl(top) // ArgInNew(Const(0))
    boundOf(x5736) = 1024
    val x5739 = ReadMem(x5736).name("x5739").ctrl(top) // RegRead(x5736)
    val x5740 = DRAM().name("x5740").ctrl(top) // x5740 = DRAMNew(ArrayBuffer(x5739),Const(0))
    val x5741 = ReadMem(x5736).name("x5741").ctrl(top) // RegRead(x5736)
    val x5742 = DRAM().name("x5742").ctrl(top) // x5742 = DRAMNew(ArrayBuffer(x5741),Const(0.0))
    val x5743 = ReadMem(x5736).name("x5743").ctrl(top) // RegRead(x5736)
    val x5744 = DRAM().name("x5744").ctrl(top) // x5744 = DRAMNew(ArrayBuffer(x5743),Const(0.0))
    val x5745 = ReadMem(x5736).name("x5745").ctrl(top) // RegRead(x5736)
    val x5746 = DRAM().name("x5746").ctrl(top) // x5746 = DRAMNew(ArrayBuffer(x5745),Const(0.0))
    val x5747 = ReadMem(x5736).name("x5747").ctrl(top) // RegRead(x5736)
    val x5748 = DRAM().name("x5748").ctrl(top) // x5748 = DRAMNew(ArrayBuffer(x5747),Const(0.0))
    val x5749 = ReadMem(x5736).name("x5749").ctrl(top) // RegRead(x5736)
    val x5750 = DRAM().name("x5750").ctrl(top) // x5750 = DRAMNew(ArrayBuffer(x5749),Const(0.0))
    val x5751 = ReadMem(x5736).name("x5751").ctrl(top) // RegRead(x5736)
    val x5752 = DRAM().name("x5752").ctrl(top) // x5752 = DRAMNew(ArrayBuffer(x5751),Const(0.0))
    val x6116 = UnitController(style=SeqPipe, level=OuterControl).name("x6116").ctrl(top) // Hwblock(Block(Const(())),false)
    val x5759 = ReadMem(x5736).name("x5759").ctrl(x6116) // RegRead(x5736)
    val x5760 = Counter(min=Const(0), max=x5759, step=Const(32), par=1).name("x5760").ctrl(x6116) // CounterNew(Const(0),x5759,Const(32),Const(1))
    val x5761 = CounterChain(List(x5760)).name("x5761").ctrl(x6116) // CounterChainNew(List(x5760))
    val x6115 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5761).name("x6115").ctrl(x6116) // UnrolledForeach(List(Const(true)),x5761,Block(Const(())),List(List(b3725)),List(List(b3726)))
    val b3725 = CounterIter(x5760, Some(0)).ctrl(x6115).name("b3725")
    val b3726 = DummyOp().ctrl(x6115).name("b3726")
    val x5762_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5762_d0_b0").ctrl(x6115) // x5762 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x5762_d0_b0) = false
    bufferDepthOf(x5762_d0_b0) = 2
    val x5763_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5763_d0_b0").ctrl(x6115) // x5763 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x5763_d0_b0) = false
    bufferDepthOf(x5763_d0_b0) = 2
    val x5764_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5764_d0_b0").ctrl(x6115) // x5764 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x5764_d0_b0) = false
    bufferDepthOf(x5764_d0_b0) = 2
    val x5765_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5765_d0_b0").ctrl(x6115) // x5765 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x5765_d0_b0) = false
    bufferDepthOf(x5765_d0_b0) = 2
    val x5766_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5766_d0_b0").ctrl(x6115) // x5766 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x5766_d0_b0) = false
    bufferDepthOf(x5766_d0_b0) = 2
    val x5767_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5767_d0_b0").ctrl(x6115) // x5767 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x5767_d0_b0) = false
    bufferDepthOf(x5767_d0_b0) = 2
    val x5768_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5768_d0_b0").ctrl(x6115) // x5768 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x5768_d0_b0) = false
    bufferDepthOf(x5768_d0_b0) = 3
    val x5770 = UnitController(style=SeqPipe, level=InnerControl).name("x5770").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val x5769 = OpDef(op=FixAdd, inputs=List(b3725, Const(32))).name("x5769").ctrl(x5770) // FixAdd(b3725,Const(32))
    val x5790 = UnitController(style=StreamPipe, level=OuterControl).name("x5790").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val b6127 = StreamOut(field="offset").name("b6127").ctrl(x5790) // x5771 = StreamOutNew(BurstCmdBus)
    val b6128 = StreamOut(field="size").name("b6128").ctrl(x5790) // x5771 = StreamOutNew(BurstCmdBus)
    val x5772 = StreamIn(field="data").name("x5772").ctrl(x5790) // x5772 = StreamInNew(BurstDataBus())
    val x5781 = UnitController(style=SeqPipe, level=InnerControl).name("x5781").ctrl(x5790) // UnitPipe(List(b3726),Block(x5780))
    val x5773 = b3725 // FixConvert(b3725,TRUE,_32,_0)
    val x5774 = OpDef(op=FixSla, inputs=List(x5773, Const(2))).name("x5774").ctrl(x5781) // FixLsh(x5773,Const(2))
    val x5775 = x5774 // FixConvert(x5774,TRUE,_64,_0)
    val x5776 = DramAddress(x5740).name("x5776").ctrl(x5781) // GetDRAMAddress(x5740)
    val x5777 = OpDef(op=FixAdd, inputs=List(x5775, x5776)).name("x5777").ctrl(x5781) // FixAdd(x5775,x5776)
    val x5779_x5778 = x5777 // FixConvert(x5777,TRUE,_64,_0)
    // x5779 = SimpleStruct(ArrayBuffer((offset,x5778), (size,Const(128)), (isLoad,Const(true))))
    val b6129_b6127 = WriteMem(b6127, x5779_x5778).name("b6129_b6127").ctrl(x5781) // StreamWrite(x5771,x5779,b3726)
    val b6130_b6128 = WriteMem(b6128, Const(128)).name("b6130_b6128").ctrl(x5781) // StreamWrite(x5771,x5779,b3726)
    val x5782 = FringeDenseLoad(dram=List(x5740), cmdStream=List(b6127, b6128), dataStream=List(x5772)).name("x5782").ctrl(x5790) // FringeDenseLoad(x5740,x5771,x5772)
    val x5783 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x5783").ctrl(x5790) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x5784 = CounterChain(List(x5783)).name("x5784").ctrl(x5790) // CounterChainNew(List(x5783))
    val x5789 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5784).name("x5789").ctrl(x5790) // UnrolledForeach(List(b3726),x5784,Block(Const(())),List(List(b3750)),List(List(b3751)))
    val b3750 = CounterIter(x5783, None).ctrl(x5789).name("b3750")
    val b3751 = DummyOp().ctrl(x5789).name("b3751")
    val x5785 = OpDef(op=BitAnd, inputs=List(b3751, b3726)).name("x5785").ctrl(x5789) // And(b3751,b3726)
    val x5786_x5786 = ReadMem(x5772).name("x5786").ctrl(x5789) // ParStreamRead(x5772,List(x5785))
    val x5787_x5787 = x5786_x5786 // x5787 = VectorApply(x5786,0)
    val x5788 = StoreBanks(List(x5762_d0_b0), List(b3750), x5787_x5787).name("x5788").ctrl(x5789) // ParSRAMStore(x5762,List(List(b3750)),List(x5787),List(x5785))
    val x5810 = UnitController(style=StreamPipe, level=OuterControl).name("x5810").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val b6131 = StreamOut(field="offset").name("b6131").ctrl(x5810) // x5791 = StreamOutNew(BurstCmdBus)
    val b6132 = StreamOut(field="size").name("b6132").ctrl(x5810) // x5791 = StreamOutNew(BurstCmdBus)
    val x5792 = StreamIn(field="data").name("x5792").ctrl(x5810) // x5792 = StreamInNew(BurstDataBus())
    val x5801 = UnitController(style=SeqPipe, level=InnerControl).name("x5801").ctrl(x5810) // UnitPipe(List(b3726),Block(x5800))
    val x5793 = b3725 // FixConvert(b3725,TRUE,_32,_0)
    val x5794 = OpDef(op=FixSla, inputs=List(x5793, Const(2))).name("x5794").ctrl(x5801) // FixLsh(x5793,Const(2))
    val x5795 = x5794 // FixConvert(x5794,TRUE,_64,_0)
    val x5796 = DramAddress(x5742).name("x5796").ctrl(x5801) // GetDRAMAddress(x5742)
    val x5797 = OpDef(op=FixAdd, inputs=List(x5795, x5796)).name("x5797").ctrl(x5801) // FixAdd(x5795,x5796)
    val x5799_x5798 = x5797 // FixConvert(x5797,TRUE,_64,_0)
    // x5799 = SimpleStruct(ArrayBuffer((offset,x5798), (size,Const(128)), (isLoad,Const(true))))
    val b6133_b6131 = WriteMem(b6131, x5799_x5798).name("b6133_b6131").ctrl(x5801) // StreamWrite(x5791,x5799,b3726)
    val b6134_b6132 = WriteMem(b6132, Const(128)).name("b6134_b6132").ctrl(x5801) // StreamWrite(x5791,x5799,b3726)
    val x5802 = FringeDenseLoad(dram=List(x5742), cmdStream=List(b6131, b6132), dataStream=List(x5792)).name("x5802").ctrl(x5810) // FringeDenseLoad(x5742,x5791,x5792)
    val x5803 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x5803").ctrl(x5810) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x5804 = CounterChain(List(x5803)).name("x5804").ctrl(x5810) // CounterChainNew(List(x5803))
    val x5809 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5804).name("x5809").ctrl(x5810) // UnrolledForeach(List(b3726),x5804,Block(Const(())),List(List(b3772)),List(List(b3773)))
    val b3772 = CounterIter(x5803, None).ctrl(x5809).name("b3772")
    val b3773 = DummyOp().ctrl(x5809).name("b3773")
    val x5805 = OpDef(op=BitAnd, inputs=List(b3773, b3726)).name("x5805").ctrl(x5809) // And(b3773,b3726)
    val x5806_x5806 = ReadMem(x5792).name("x5806").ctrl(x5809) // ParStreamRead(x5792,List(x5805))
    val x5807_x5807 = x5806_x5806 // x5807 = VectorApply(x5806,0)
    val x5808 = StoreBanks(List(x5763_d0_b0), List(b3772), x5807_x5807).name("x5808").ctrl(x5809) // ParSRAMStore(x5763,List(List(b3772)),List(x5807),List(x5805))
    val x5830 = UnitController(style=StreamPipe, level=OuterControl).name("x5830").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val b6135 = StreamOut(field="offset").name("b6135").ctrl(x5830) // x5811 = StreamOutNew(BurstCmdBus)
    val b6136 = StreamOut(field="size").name("b6136").ctrl(x5830) // x5811 = StreamOutNew(BurstCmdBus)
    val x5812 = StreamIn(field="data").name("x5812").ctrl(x5830) // x5812 = StreamInNew(BurstDataBus())
    val x5821 = UnitController(style=SeqPipe, level=InnerControl).name("x5821").ctrl(x5830) // UnitPipe(List(b3726),Block(x5820))
    val x5813 = b3725 // FixConvert(b3725,TRUE,_32,_0)
    val x5814 = OpDef(op=FixSla, inputs=List(x5813, Const(2))).name("x5814").ctrl(x5821) // FixLsh(x5813,Const(2))
    val x5815 = x5814 // FixConvert(x5814,TRUE,_64,_0)
    val x5816 = DramAddress(x5744).name("x5816").ctrl(x5821) // GetDRAMAddress(x5744)
    val x5817 = OpDef(op=FixAdd, inputs=List(x5815, x5816)).name("x5817").ctrl(x5821) // FixAdd(x5815,x5816)
    val x5819_x5818 = x5817 // FixConvert(x5817,TRUE,_64,_0)
    // x5819 = SimpleStruct(ArrayBuffer((offset,x5818), (size,Const(128)), (isLoad,Const(true))))
    val b6137_b6135 = WriteMem(b6135, x5819_x5818).name("b6137_b6135").ctrl(x5821) // StreamWrite(x5811,x5819,b3726)
    val b6138_b6136 = WriteMem(b6136, Const(128)).name("b6138_b6136").ctrl(x5821) // StreamWrite(x5811,x5819,b3726)
    val x5822 = FringeDenseLoad(dram=List(x5744), cmdStream=List(b6135, b6136), dataStream=List(x5812)).name("x5822").ctrl(x5830) // FringeDenseLoad(x5744,x5811,x5812)
    val x5823 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x5823").ctrl(x5830) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x5824 = CounterChain(List(x5823)).name("x5824").ctrl(x5830) // CounterChainNew(List(x5823))
    val x5829 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5824).name("x5829").ctrl(x5830) // UnrolledForeach(List(b3726),x5824,Block(Const(())),List(List(b3794)),List(List(b3795)))
    val b3794 = CounterIter(x5823, None).ctrl(x5829).name("b3794")
    val b3795 = DummyOp().ctrl(x5829).name("b3795")
    val x5825 = OpDef(op=BitAnd, inputs=List(b3795, b3726)).name("x5825").ctrl(x5829) // And(b3795,b3726)
    val x5826_x5826 = ReadMem(x5812).name("x5826").ctrl(x5829) // ParStreamRead(x5812,List(x5825))
    val x5827_x5827 = x5826_x5826 // x5827 = VectorApply(x5826,0)
    val x5828 = StoreBanks(List(x5764_d0_b0), List(b3794), x5827_x5827).name("x5828").ctrl(x5829) // ParSRAMStore(x5764,List(List(b3794)),List(x5827),List(x5825))
    val x5850 = UnitController(style=StreamPipe, level=OuterControl).name("x5850").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val b6139 = StreamOut(field="offset").name("b6139").ctrl(x5850) // x5831 = StreamOutNew(BurstCmdBus)
    val b6140 = StreamOut(field="size").name("b6140").ctrl(x5850) // x5831 = StreamOutNew(BurstCmdBus)
    val x5832 = StreamIn(field="data").name("x5832").ctrl(x5850) // x5832 = StreamInNew(BurstDataBus())
    val x5841 = UnitController(style=SeqPipe, level=InnerControl).name("x5841").ctrl(x5850) // UnitPipe(List(b3726),Block(x5840))
    val x5833 = b3725 // FixConvert(b3725,TRUE,_32,_0)
    val x5834 = OpDef(op=FixSla, inputs=List(x5833, Const(2))).name("x5834").ctrl(x5841) // FixLsh(x5833,Const(2))
    val x5835 = x5834 // FixConvert(x5834,TRUE,_64,_0)
    val x5836 = DramAddress(x5746).name("x5836").ctrl(x5841) // GetDRAMAddress(x5746)
    val x5837 = OpDef(op=FixAdd, inputs=List(x5835, x5836)).name("x5837").ctrl(x5841) // FixAdd(x5835,x5836)
    val x5839_x5838 = x5837 // FixConvert(x5837,TRUE,_64,_0)
    // x5839 = SimpleStruct(ArrayBuffer((offset,x5838), (size,Const(128)), (isLoad,Const(true))))
    val b6141_b6139 = WriteMem(b6139, x5839_x5838).name("b6141_b6139").ctrl(x5841) // StreamWrite(x5831,x5839,b3726)
    val b6142_b6140 = WriteMem(b6140, Const(128)).name("b6142_b6140").ctrl(x5841) // StreamWrite(x5831,x5839,b3726)
    val x5842 = FringeDenseLoad(dram=List(x5746), cmdStream=List(b6139, b6140), dataStream=List(x5832)).name("x5842").ctrl(x5850) // FringeDenseLoad(x5746,x5831,x5832)
    val x5843 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x5843").ctrl(x5850) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x5844 = CounterChain(List(x5843)).name("x5844").ctrl(x5850) // CounterChainNew(List(x5843))
    val x5849 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5844).name("x5849").ctrl(x5850) // UnrolledForeach(List(b3726),x5844,Block(Const(())),List(List(b3816)),List(List(b3817)))
    val b3816 = CounterIter(x5843, None).ctrl(x5849).name("b3816")
    val b3817 = DummyOp().ctrl(x5849).name("b3817")
    val x5845 = OpDef(op=BitAnd, inputs=List(b3817, b3726)).name("x5845").ctrl(x5849) // And(b3817,b3726)
    val x5846_x5846 = ReadMem(x5832).name("x5846").ctrl(x5849) // ParStreamRead(x5832,List(x5845))
    val x5847_x5847 = x5846_x5846 // x5847 = VectorApply(x5846,0)
    val x5848 = StoreBanks(List(x5765_d0_b0), List(b3816), x5847_x5847).name("x5848").ctrl(x5849) // ParSRAMStore(x5765,List(List(b3816)),List(x5847),List(x5845))
    val x5870 = UnitController(style=StreamPipe, level=OuterControl).name("x5870").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val b6143 = StreamOut(field="offset").name("b6143").ctrl(x5870) // x5851 = StreamOutNew(BurstCmdBus)
    val b6144 = StreamOut(field="size").name("b6144").ctrl(x5870) // x5851 = StreamOutNew(BurstCmdBus)
    val x5852 = StreamIn(field="data").name("x5852").ctrl(x5870) // x5852 = StreamInNew(BurstDataBus())
    val x5861 = UnitController(style=SeqPipe, level=InnerControl).name("x5861").ctrl(x5870) // UnitPipe(List(b3726),Block(x5860))
    val x5853 = b3725 // FixConvert(b3725,TRUE,_32,_0)
    val x5854 = OpDef(op=FixSla, inputs=List(x5853, Const(2))).name("x5854").ctrl(x5861) // FixLsh(x5853,Const(2))
    val x5855 = x5854 // FixConvert(x5854,TRUE,_64,_0)
    val x5856 = DramAddress(x5748).name("x5856").ctrl(x5861) // GetDRAMAddress(x5748)
    val x5857 = OpDef(op=FixAdd, inputs=List(x5855, x5856)).name("x5857").ctrl(x5861) // FixAdd(x5855,x5856)
    val x5859_x5858 = x5857 // FixConvert(x5857,TRUE,_64,_0)
    // x5859 = SimpleStruct(ArrayBuffer((offset,x5858), (size,Const(128)), (isLoad,Const(true))))
    val b6145_b6143 = WriteMem(b6143, x5859_x5858).name("b6145_b6143").ctrl(x5861) // StreamWrite(x5851,x5859,b3726)
    val b6146_b6144 = WriteMem(b6144, Const(128)).name("b6146_b6144").ctrl(x5861) // StreamWrite(x5851,x5859,b3726)
    val x5862 = FringeDenseLoad(dram=List(x5748), cmdStream=List(b6143, b6144), dataStream=List(x5852)).name("x5862").ctrl(x5870) // FringeDenseLoad(x5748,x5851,x5852)
    val x5863 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x5863").ctrl(x5870) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x5864 = CounterChain(List(x5863)).name("x5864").ctrl(x5870) // CounterChainNew(List(x5863))
    val x5869 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5864).name("x5869").ctrl(x5870) // UnrolledForeach(List(b3726),x5864,Block(Const(())),List(List(b3838)),List(List(b3839)))
    val b3838 = CounterIter(x5863, None).ctrl(x5869).name("b3838")
    val b3839 = DummyOp().ctrl(x5869).name("b3839")
    val x5865 = OpDef(op=BitAnd, inputs=List(b3839, b3726)).name("x5865").ctrl(x5869) // And(b3839,b3726)
    val x5866_x5866 = ReadMem(x5852).name("x5866").ctrl(x5869) // ParStreamRead(x5852,List(x5865))
    val x5867_x5867 = x5866_x5866 // x5867 = VectorApply(x5866,0)
    val x5868 = StoreBanks(List(x5766_d0_b0), List(b3838), x5867_x5867).name("x5868").ctrl(x5869) // ParSRAMStore(x5766,List(List(b3838)),List(x5867),List(x5865))
    val x5890 = UnitController(style=StreamPipe, level=OuterControl).name("x5890").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val b6147 = StreamOut(field="offset").name("b6147").ctrl(x5890) // x5871 = StreamOutNew(BurstCmdBus)
    val b6148 = StreamOut(field="size").name("b6148").ctrl(x5890) // x5871 = StreamOutNew(BurstCmdBus)
    val x5872 = StreamIn(field="data").name("x5872").ctrl(x5890) // x5872 = StreamInNew(BurstDataBus())
    val x5881 = UnitController(style=SeqPipe, level=InnerControl).name("x5881").ctrl(x5890) // UnitPipe(List(b3726),Block(x5880))
    val x5873 = b3725 // FixConvert(b3725,TRUE,_32,_0)
    val x5874 = OpDef(op=FixSla, inputs=List(x5873, Const(2))).name("x5874").ctrl(x5881) // FixLsh(x5873,Const(2))
    val x5875 = x5874 // FixConvert(x5874,TRUE,_64,_0)
    val x5876 = DramAddress(x5750).name("x5876").ctrl(x5881) // GetDRAMAddress(x5750)
    val x5877 = OpDef(op=FixAdd, inputs=List(x5875, x5876)).name("x5877").ctrl(x5881) // FixAdd(x5875,x5876)
    val x5879_x5878 = x5877 // FixConvert(x5877,TRUE,_64,_0)
    // x5879 = SimpleStruct(ArrayBuffer((offset,x5878), (size,Const(128)), (isLoad,Const(true))))
    val b6149_b6147 = WriteMem(b6147, x5879_x5878).name("b6149_b6147").ctrl(x5881) // StreamWrite(x5871,x5879,b3726)
    val b6150_b6148 = WriteMem(b6148, Const(128)).name("b6150_b6148").ctrl(x5881) // StreamWrite(x5871,x5879,b3726)
    val x5882 = FringeDenseLoad(dram=List(x5750), cmdStream=List(b6147, b6148), dataStream=List(x5872)).name("x5882").ctrl(x5890) // FringeDenseLoad(x5750,x5871,x5872)
    val x5883 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x5883").ctrl(x5890) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x5884 = CounterChain(List(x5883)).name("x5884").ctrl(x5890) // CounterChainNew(List(x5883))
    val x5889 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5884).name("x5889").ctrl(x5890) // UnrolledForeach(List(b3726),x5884,Block(Const(())),List(List(b3860)),List(List(b3861)))
    val b3860 = CounterIter(x5883, None).ctrl(x5889).name("b3860")
    val b3861 = DummyOp().ctrl(x5889).name("b3861")
    val x5885 = OpDef(op=BitAnd, inputs=List(b3861, b3726)).name("x5885").ctrl(x5889) // And(b3861,b3726)
    val x5886_x5886 = ReadMem(x5872).name("x5886").ctrl(x5889) // ParStreamRead(x5872,List(x5885))
    val x5887_x5887 = x5886_x5886 // x5887 = VectorApply(x5886,0)
    val x5888 = StoreBanks(List(x5767_d0_b0), List(b3860), x5887_x5887).name("x5888").ctrl(x5889) // ParSRAMStore(x5767,List(List(b3860)),List(x5887),List(x5885))
    val x5891 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x5891").ctrl(x6115) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x5892 = CounterChain(List(x5891)).name("x5892").ctrl(x6115) // CounterChainNew(List(x5891))
    val x6088 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5892).name("x6088").ctrl(x6115) // UnrolledForeach(List(b3726),x5892,Block(Const(())),List(List(b3871)),List(List(b3872)))
    val b3871 = CounterIter(x5891, None).ctrl(x6088).name("b3871")
    val b3872 = DummyOp().ctrl(x6088).name("b3872")
    val x5893 = OpDef(op=BitAnd, inputs=List(b3872, b3726)).name("x5893").ctrl(x6088) // And(b3872,b3726)
    val x5894 = LoadBanks(List(x5763_d0_b0), List(b3871)).name("x5894").ctrl(x6088) // ParSRAMLoad(x5763,List(List(b3871)),List(x5893))
    val x5895 = x5894 // x5895 = VectorApply(x5894,0)
    val x5896 = LoadBanks(List(x5764_d0_b0), List(b3871)).name("x5896").ctrl(x6088) // ParSRAMLoad(x5764,List(List(b3871)),List(x5893))
    val x5897 = x5896 // x5897 = VectorApply(x5896,0)
    val x5898 = LoadBanks(List(x5765_d0_b0), List(b3871)).name("x5898").ctrl(x6088) // ParSRAMLoad(x5765,List(List(b3871)),List(x5893))
    val x5899 = x5898 // x5899 = VectorApply(x5898,0)
    val x5900 = LoadBanks(List(x5766_d0_b0), List(b3871)).name("x5900").ctrl(x6088) // ParSRAMLoad(x5766,List(List(b3871)),List(x5893))
    val x5901 = x5900 // x5901 = VectorApply(x5900,0)
    val x5902 = LoadBanks(List(x5767_d0_b0), List(b3871)).name("x5902").ctrl(x6088) // ParSRAMLoad(x5767,List(List(b3871)),List(x5893))
    val x5903 = x5902 // x5903 = VectorApply(x5902,0)
    val x5904 = LoadBanks(List(x5762_d0_b0), List(b3871)).name("x5904").ctrl(x6088) // ParSRAMLoad(x5762,List(List(b3871)),List(x5893))
    val x5905 = x5904 // x5905 = VectorApply(x5904,0)
    val x5906 = OpDef(op=FltDiv, inputs=List(x5895, x5897)).name("x5906").ctrl(x6088) // FltDiv(x5895,x5897)
    val x5907 = OpDef(op=FltSub, inputs=List(x5906, Const(1.0))).name("x5907").ctrl(x6088) // FltSub(x5906,Const(1))
    val x5908 = OpDef(op=FltMul, inputs=List(x5907, x5907)).name("x5908").ctrl(x6088) // FltMul(x5907,x5907)
    val x5909 = OpDef(op=FltDiv, inputs=List(x5908, Const(2.0))).name("x5909").ctrl(x6088) // FltDiv(x5908,Const(2))
    val x5910 = OpDef(op=FltSub, inputs=List(x5907, x5909)).name("x5910").ctrl(x6088) // FltSub(x5907,x5909)
    val x5911 = OpDef(op=FltMul, inputs=List(x5908, x5907)).name("x5911").ctrl(x6088) // FltMul(x5908,x5907)
    val x5912 = OpDef(op=FltDiv, inputs=List(x5911, Const(3.0))).name("x5912").ctrl(x6088) // FltDiv(x5911,Const(3.0))
    val x5913 = OpDef(op=FltAdd, inputs=List(x5910, x5912)).name("x5913").ctrl(x6088) // FltAdd(x5910,x5912)
    val x5914 = OpDef(op=FltMul, inputs=List(x5911, x5907)).name("x5914").ctrl(x6088) // FltMul(x5911,x5907)
    val x5915 = OpDef(op=FltDiv, inputs=List(x5914, Const(4.0))).name("x5915").ctrl(x6088) // FltDiv(x5914,Const(4))
    val x5916 = OpDef(op=FltSub, inputs=List(x5913, x5915)).name("x5916").ctrl(x6088) // FltSub(x5913,x5915)
    val x5917 = OpDef(op=FltMul, inputs=List(x5901, x5901)).name("x5917").ctrl(x6088) // FltMul(x5901,x5901)
    val x5918 = OpDef(op=FltMul, inputs=List(x5917, Const(0.5))).name("x5918").ctrl(x6088) // FltMul(x5917,Const(0.5))
    val x5919 = OpDef(op=FltAdd, inputs=List(x5899, x5918)).name("x5919").ctrl(x6088) // FltAdd(x5899,x5918)
    val x5920 = OpDef(op=FltMul, inputs=List(x5919, x5903)).name("x5920").ctrl(x6088) // FltMul(x5919,x5903)
    val x5921 = OpDef(op=FltAdd, inputs=List(x5920, x5916)).name("x5921").ctrl(x6088) // FltAdd(x5920,x5916)
    val x5922 = OpDef(op=FltLt, inputs=List(x5903, Const(2.0))).name("x5922").ctrl(x6088) // FltLt(x5903,Const(2))
    val x5923 = OpDef(op=FltSub, inputs=List(x5903, Const(1.0))).name("x5923").ctrl(x6088) // FltSub(x5903,Const(1))
    val x5924 = OpDef(op=FltDiv, inputs=List(x5923, Const(2.0))).name("x5924").ctrl(x6088) // FltDiv(x5923,Const(2))
    val x5925 = OpDef(op=FltAdd, inputs=List(Const(1.0), x5924)).name("x5925").ctrl(x6088) // FltAdd(Const(1),x5924)
    val x5926 = OpDef(op=FltSub, inputs=List(x5903, Const(1.0))).name("x5926").ctrl(x6088) // FltSub(x5903,Const(1))
    val x5927 = OpDef(op=FltSub, inputs=List(x5903, Const(1.0))).name("x5927").ctrl(x6088) // FltSub(x5903,Const(1))
    val x5928 = OpDef(op=FltMul, inputs=List(x5926, x5927)).name("x5928").ctrl(x6088) // FltMul(x5926,x5927)
    val x5929 = OpDef(op=FltDiv, inputs=List(x5928, Const(8.0))).name("x5929").ctrl(x6088) // FltDiv(x5928,Const(8))
    val x5930 = OpDef(op=FltSub, inputs=List(x5925, x5929)).name("x5930").ctrl(x6088) // FltSub(x5925,x5929)
    val x5931 = OpDef(op=FltSub, inputs=List(x5903, Const(1.0))).name("x5931").ctrl(x6088) // FltSub(x5903,Const(1))
    val x5932 = OpDef(op=FltSub, inputs=List(x5903, Const(1.0))).name("x5932").ctrl(x6088) // FltSub(x5903,Const(1))
    val x5933 = OpDef(op=FltMul, inputs=List(x5931, x5932)).name("x5933").ctrl(x6088) // FltMul(x5931,x5932)
    val x5934 = OpDef(op=FltSub, inputs=List(x5903, Const(1.0))).name("x5934").ctrl(x6088) // FltSub(x5903,Const(1))
    val x5935 = OpDef(op=FltMul, inputs=List(x5933, x5934)).name("x5935").ctrl(x6088) // FltMul(x5933,x5934)
    val x5936 = OpDef(op=FltDiv, inputs=List(x5935, Const(16.0))).name("x5936").ctrl(x6088) // FltDiv(x5935,Const(16))
    val x5937 = OpDef(op=FltAdd, inputs=List(x5930, x5936)).name("x5937").ctrl(x6088) // FltAdd(x5930,x5936)
    val x5938 = OpDef(op=FltLt, inputs=List(x5903, Const(10.0))).name("x5938").ctrl(x6088) // FltLt(x5903,Const(10.00))
    val x5939 = OpDef(op=FltMul, inputs=List(x5903, Const(0.22))).name("x5939").ctrl(x6088) // FltMul(x5903,Const(0.2199999988079071044921875))
    val x5940 = OpDef(op=FltAdd, inputs=List(x5939, Const(1.0))).name("x5940").ctrl(x6088) // FltAdd(x5939,Const(1))
    val x5941 = OpDef(op=FltLt, inputs=List(x5903, Const(100.0))).name("x5941").ctrl(x6088) // FltLt(x5903,Const(100.0000))
    val x5942 = OpDef(op=FltMul, inputs=List(x5903, Const(0.08))).name("x5942").ctrl(x6088) // FltMul(x5903,Const(0.07999999821186065673828125))
    val x5943 = OpDef(op=FltAdd, inputs=List(x5942, Const(2.5))).name("x5943").ctrl(x6088) // FltAdd(x5942,Const(2.50))
    val x5944 = OpDef(op=FltLt, inputs=List(x5903, Const(1000.0))).name("x5944").ctrl(x6088) // FltLt(x5903,Const(1000.000000))
    val x5945 = OpDef(op=FltMul, inputs=List(x5903, Const(0.028))).name("x5945").ctrl(x6088) // FltMul(x5903,Const(0.0280000008642673492431640625))
    val x5946 = OpDef(op=FltAdd, inputs=List(x5945, Const(8.0))).name("x5946").ctrl(x6088) // FltAdd(x5945,Const(8))
    val x5947 = OpDef(op=FltLt, inputs=List(x5903, Const(10000.0))).name("x5947").ctrl(x6088) // FltLt(x5903,Const(10000.000000000))
    val x5948 = OpDef(op=FltMul, inputs=List(x5903, Const(0.008))).name("x5948").ctrl(x6088) // FltMul(x5903,Const(0.008000000379979610443115234375))
    val x5949 = OpDef(op=FltAdd, inputs=List(x5948, Const(20.0))).name("x5949").ctrl(x6088) // FltAdd(x5948,Const(20.00))
    val x5950 = OpDef(op=FltLt, inputs=List(x5903, Const(100000.0))).name("x5950").ctrl(x6088) // FltLt(x5903,Const(100000.00000000000))
    val x5951 = OpDef(op=FltMul, inputs=List(x5903, Const(0.003))).name("x5951").ctrl(x6088) // FltMul(x5903,Const(0.0030000000260770320892333984375))
    val x5952 = OpDef(op=FltAdd, inputs=List(x5951, Const(60.0))).name("x5952").ctrl(x6088) // FltAdd(x5951,Const(60.000))
    val x5953 = OpDef(op=FltMul, inputs=List(x5903, Const(2.0E-4))).name("x5953").ctrl(x6088) // FltMul(x5903,Const(0.000199999994947575032711029052734375))
    val x5954 = OpDef(op=FltAdd, inputs=List(x5953, Const(300.0))).name("x5954").ctrl(x6088) // FltAdd(x5953,Const(300.000000))
    val x5955 = OpDef(op=MuxOp, inputs=List(x5950, x5952, x5954)).name("x5955").ctrl(x6088) // Mux(x5950,x5952,x5954)
    val x5956 = OpDef(op=MuxOp, inputs=List(x5947, x5949, x5955)).name("x5956").ctrl(x6088) // Mux(x5947,x5949,x5955)
    val x5957 = OpDef(op=MuxOp, inputs=List(x5944, x5946, x5956)).name("x5957").ctrl(x6088) // Mux(x5944,x5946,x5956)
    val x5958 = OpDef(op=MuxOp, inputs=List(x5941, x5943, x5957)).name("x5958").ctrl(x6088) // Mux(x5941,x5943,x5957)
    val x5959 = OpDef(op=MuxOp, inputs=List(x5938, x5940, x5958)).name("x5959").ctrl(x6088) // Mux(x5938,x5940,x5958)
    val x5960 = OpDef(op=MuxOp, inputs=List(x5922, x5937, x5959)).name("x5960").ctrl(x6088) // Mux(x5922,x5937,x5959)
    val x5961 = OpDef(op=FltMul, inputs=List(x5901, x5960)).name("x5961").ctrl(x6088) // FltMul(x5901,x5960)
    val x5962 = OpDef(op=FltMul, inputs=List(x5961, x5961)).name("x5962").ctrl(x6088) // FltMul(x5961,x5961)
    val x5963 = OpDef(op=FltDiv, inputs=List(x5921, x5962)).name("x5963").ctrl(x6088) // FltDiv(x5921,x5962)
    val x5964 = OpDef(op=FltAbs, inputs=List(x5963)).name("x5964").ctrl(x6088) // FltAbs(x5963)
    val x5965 = OpDef(op=FltMul, inputs=List(x5964, x5964)).name("x5965").ctrl(x6088) // FltMul(x5964,x5964)
    val x5966 = OpDef(op=FltMul, inputs=List(x5965, Const(-0.05))).name("x5966").ctrl(x6088) // FltMul(x5965,Const(-0.0500000007450580596923828125))
    val x5967 = OpDef(op=FltLt, inputs=List(x5966, Const(-3.5))).name("x5967").ctrl(x6088) // FltLt(x5966,Const(-3.50))
    val x5968 = OpDef(op=FltLt, inputs=List(x5966, Const(-1.2))).name("x5968").ctrl(x6088) // FltLt(x5966,Const(-1.2000000476837158203125))
    val x5969 = OpDef(op=FltMul, inputs=List(x5966, Const(0.1))).name("x5969").ctrl(x6088) // FltMul(x5966,Const(0.100000001490116119384765625))
    val x5970 = OpDef(op=FltAdd, inputs=List(x5969, Const(0.35))).name("x5970").ctrl(x6088) // FltAdd(x5969,Const(0.3499999940395355224609375))
    val x5971 = OpDef(op=FltAdd, inputs=List(Const(1.0), x5966)).name("x5971").ctrl(x6088) // FltAdd(Const(1),x5966)
    val x5972 = OpDef(op=FltMul, inputs=List(x5966, x5966)).name("x5972").ctrl(x6088) // FltMul(x5966,x5966)
    val x5973 = OpDef(op=FltDiv, inputs=List(x5972, Const(2.0))).name("x5973").ctrl(x6088) // FltDiv(x5972,Const(2))
    val x5974 = OpDef(op=FltAdd, inputs=List(x5971, x5973)).name("x5974").ctrl(x6088) // FltAdd(x5971,x5973)
    val x5975 = OpDef(op=FltMul, inputs=List(x5972, x5966)).name("x5975").ctrl(x6088) // FltMul(x5972,x5966)
    val x5976 = OpDef(op=FltDiv, inputs=List(x5975, Const(6.0))).name("x5976").ctrl(x6088) // FltDiv(x5975,Const(6.0))
    val x5977 = OpDef(op=FltAdd, inputs=List(x5974, x5976)).name("x5977").ctrl(x6088) // FltAdd(x5974,x5976)
    val x5978 = OpDef(op=FltMul, inputs=List(x5975, x5966)).name("x5978").ctrl(x6088) // FltMul(x5975,x5966)
    val x5979 = OpDef(op=FltDiv, inputs=List(x5978, Const(24.0))).name("x5979").ctrl(x6088) // FltDiv(x5978,Const(24.0))
    val x5980 = OpDef(op=FltAdd, inputs=List(x5977, x5979)).name("x5980").ctrl(x6088) // FltAdd(x5977,x5979)
    val x5981 = OpDef(op=FltMul, inputs=List(x5978, x5966)).name("x5981").ctrl(x6088) // FltMul(x5978,x5966)
    val x5982 = OpDef(op=FltDiv, inputs=List(x5981, Const(120.0))).name("x5982").ctrl(x6088) // FltDiv(x5981,Const(120.000))
    val x5983 = OpDef(op=FltAdd, inputs=List(x5980, x5982)).name("x5983").ctrl(x6088) // FltAdd(x5980,x5982)
    val x5984 = OpDef(op=MuxOp, inputs=List(x5968, x5970, x5983)).name("x5984").ctrl(x6088) // Mux(x5968,x5970,x5983)
    val x5985 = OpDef(op=MuxOp, inputs=List(x5967, Const(0.0), x5984)).name("x5985").ctrl(x6088) // Mux(x5967,Const(0.0),x5984)
    val x5986 = OpDef(op=FltMul, inputs=List(x5985, Const(0.3989423))).name("x5986").ctrl(x6088) // FltMul(x5985,Const(0.398942291736602783203125))
    val x5987 = OpDef(op=FltMul, inputs=List(x5964, Const(0.2316419))).name("x5987").ctrl(x6088) // FltMul(x5964,Const(0.23164190351963043212890625))
    val x5988 = OpDef(op=FltAdd, inputs=List(x5987, Const(1.0))).name("x5988").ctrl(x6088) // FltAdd(x5987,Const(1))
    val x5989 = OpDef(op=FltDiv, inputs=List(Const(1.0), x5988)).name("x5989").ctrl(x6088) // FltDiv(Const(1),x5988)
    val x5990 = OpDef(op=FltMul, inputs=List(x5989, x5989)).name("x5990").ctrl(x6088) // FltMul(x5989,x5989)
    val x5991 = OpDef(op=FltMul, inputs=List(x5990, x5989)).name("x5991").ctrl(x6088) // FltMul(x5990,x5989)
    val x5992 = OpDef(op=FltMul, inputs=List(x5991, x5989)).name("x5992").ctrl(x6088) // FltMul(x5991,x5989)
    val x5993 = OpDef(op=FltMul, inputs=List(x5992, x5989)).name("x5993").ctrl(x6088) // FltMul(x5992,x5989)
    val x5994 = OpDef(op=FltMul, inputs=List(x5989, Const(0.31938154))).name("x5994").ctrl(x6088) // FltMul(x5989,Const(0.319381535053253173828125))
    val x5995 = OpDef(op=FltMul, inputs=List(x5990, Const(-0.35656378))).name("x5995").ctrl(x6088) // FltMul(x5990,Const(-0.3565637767314910888671875))
    val x5996 = OpDef(op=FltMul, inputs=List(x5991, Const(1.7814779))).name("x5996").ctrl(x6088) // FltMul(x5991,Const(1.78147792816162109375))
    val x5997 = OpDef(op=FltMul, inputs=List(x5992, Const(-1.8212559))).name("x5997").ctrl(x6088) // FltMul(x5992,Const(-1.8212559223175048828125))
    val x5998 = OpDef(op=FltMul, inputs=List(x5993, Const(1.3302745))).name("x5998").ctrl(x6088) // FltMul(x5993,Const(1.33027446269989013671875))
    val x5999 = OpDef(op=FltAdd, inputs=List(x5995, x5996)).name("x5999").ctrl(x6088) // FltAdd(x5995,x5996)
    val x6000 = OpDef(op=FltAdd, inputs=List(x5999, x5997)).name("x6000").ctrl(x6088) // FltAdd(x5999,x5997)
    val x6001 = OpDef(op=FltAdd, inputs=List(x6000, x5998)).name("x6001").ctrl(x6088) // FltAdd(x6000,x5998)
    val x6002 = OpDef(op=FltAdd, inputs=List(x6001, x5994)).name("x6002").ctrl(x6088) // FltAdd(x6001,x5994)
    val x6003 = OpDef(op=FltMul, inputs=List(x6002, x5986)).name("x6003").ctrl(x6088) // FltMul(x6002,x5986)
    val x6004 = OpDef(op=FltNeg, inputs=List(x6003)).name("x6004").ctrl(x6088) // FltNeg(x6003)
    val x6005 = OpDef(op=FltAdd, inputs=List(x6004, Const(1.0))).name("x6005").ctrl(x6088) // FltAdd(x6004,Const(1))
    val x6006 = OpDef(op=FltLt, inputs=List(x5963, Const(0.0))).name("x6006").ctrl(x6088) // FltLt(x5963,Const(0.0))
    val x6007 = OpDef(op=MuxOp, inputs=List(x6006, x6003, x6005)).name("x6007").ctrl(x6088) // Mux(x6006,x6003,x6005)
    val x6008 = OpDef(op=FltSub, inputs=List(x5963, x5961)).name("x6008").ctrl(x6088) // FltSub(x5963,x5961)
    val x6009 = OpDef(op=FltAbs, inputs=List(x6008)).name("x6009").ctrl(x6088) // FltAbs(x6008)
    val x6010 = OpDef(op=FltMul, inputs=List(x6009, x6009)).name("x6010").ctrl(x6088) // FltMul(x6009,x6009)
    val x6011 = OpDef(op=FltMul, inputs=List(x6010, Const(-0.05))).name("x6011").ctrl(x6088) // FltMul(x6010,Const(-0.0500000007450580596923828125))
    val x6012 = OpDef(op=FltLt, inputs=List(x6011, Const(-3.5))).name("x6012").ctrl(x6088) // FltLt(x6011,Const(-3.50))
    val x6013 = OpDef(op=FltLt, inputs=List(x6011, Const(-1.2))).name("x6013").ctrl(x6088) // FltLt(x6011,Const(-1.2000000476837158203125))
    val x6014 = OpDef(op=FltMul, inputs=List(x6011, Const(0.1))).name("x6014").ctrl(x6088) // FltMul(x6011,Const(0.100000001490116119384765625))
    val x6015 = OpDef(op=FltAdd, inputs=List(x6014, Const(0.35))).name("x6015").ctrl(x6088) // FltAdd(x6014,Const(0.3499999940395355224609375))
    val x6016 = OpDef(op=FltAdd, inputs=List(Const(1.0), x6011)).name("x6016").ctrl(x6088) // FltAdd(Const(1),x6011)
    val x6017 = OpDef(op=FltMul, inputs=List(x6011, x6011)).name("x6017").ctrl(x6088) // FltMul(x6011,x6011)
    val x6018 = OpDef(op=FltDiv, inputs=List(x6017, Const(2.0))).name("x6018").ctrl(x6088) // FltDiv(x6017,Const(2))
    val x6019 = OpDef(op=FltAdd, inputs=List(x6016, x6018)).name("x6019").ctrl(x6088) // FltAdd(x6016,x6018)
    val x6020 = OpDef(op=FltMul, inputs=List(x6017, x6011)).name("x6020").ctrl(x6088) // FltMul(x6017,x6011)
    val x6021 = OpDef(op=FltDiv, inputs=List(x6020, Const(6.0))).name("x6021").ctrl(x6088) // FltDiv(x6020,Const(6.0))
    val x6022 = OpDef(op=FltAdd, inputs=List(x6019, x6021)).name("x6022").ctrl(x6088) // FltAdd(x6019,x6021)
    val x6023 = OpDef(op=FltMul, inputs=List(x6020, x6011)).name("x6023").ctrl(x6088) // FltMul(x6020,x6011)
    val x6024 = OpDef(op=FltDiv, inputs=List(x6023, Const(24.0))).name("x6024").ctrl(x6088) // FltDiv(x6023,Const(24.0))
    val x6025 = OpDef(op=FltAdd, inputs=List(x6022, x6024)).name("x6025").ctrl(x6088) // FltAdd(x6022,x6024)
    val x6026 = OpDef(op=FltMul, inputs=List(x6023, x6011)).name("x6026").ctrl(x6088) // FltMul(x6023,x6011)
    val x6027 = OpDef(op=FltDiv, inputs=List(x6026, Const(120.0))).name("x6027").ctrl(x6088) // FltDiv(x6026,Const(120.000))
    val x6028 = OpDef(op=FltAdd, inputs=List(x6025, x6027)).name("x6028").ctrl(x6088) // FltAdd(x6025,x6027)
    val x6029 = OpDef(op=MuxOp, inputs=List(x6013, x6015, x6028)).name("x6029").ctrl(x6088) // Mux(x6013,x6015,x6028)
    val x6030 = OpDef(op=MuxOp, inputs=List(x6012, Const(0.0), x6029)).name("x6030").ctrl(x6088) // Mux(x6012,Const(0.0),x6029)
    val x6031 = OpDef(op=FltMul, inputs=List(x6030, Const(0.3989423))).name("x6031").ctrl(x6088) // FltMul(x6030,Const(0.398942291736602783203125))
    val x6032 = OpDef(op=FltMul, inputs=List(x6009, Const(0.2316419))).name("x6032").ctrl(x6088) // FltMul(x6009,Const(0.23164190351963043212890625))
    val x6033 = OpDef(op=FltAdd, inputs=List(x6032, Const(1.0))).name("x6033").ctrl(x6088) // FltAdd(x6032,Const(1))
    val x6034 = OpDef(op=FltDiv, inputs=List(Const(1.0), x6033)).name("x6034").ctrl(x6088) // FltDiv(Const(1),x6033)
    val x6035 = OpDef(op=FltMul, inputs=List(x6034, x6034)).name("x6035").ctrl(x6088) // FltMul(x6034,x6034)
    val x6036 = OpDef(op=FltMul, inputs=List(x6035, x6034)).name("x6036").ctrl(x6088) // FltMul(x6035,x6034)
    val x6037 = OpDef(op=FltMul, inputs=List(x6036, x6034)).name("x6037").ctrl(x6088) // FltMul(x6036,x6034)
    val x6038 = OpDef(op=FltMul, inputs=List(x6037, x6034)).name("x6038").ctrl(x6088) // FltMul(x6037,x6034)
    val x6039 = OpDef(op=FltMul, inputs=List(x6034, Const(0.31938154))).name("x6039").ctrl(x6088) // FltMul(x6034,Const(0.319381535053253173828125))
    val x6040 = OpDef(op=FltMul, inputs=List(x6035, Const(-0.35656378))).name("x6040").ctrl(x6088) // FltMul(x6035,Const(-0.3565637767314910888671875))
    val x6041 = OpDef(op=FltMul, inputs=List(x6036, Const(1.7814779))).name("x6041").ctrl(x6088) // FltMul(x6036,Const(1.78147792816162109375))
    val x6042 = OpDef(op=FltMul, inputs=List(x6037, Const(-1.8212559))).name("x6042").ctrl(x6088) // FltMul(x6037,Const(-1.8212559223175048828125))
    val x6043 = OpDef(op=FltMul, inputs=List(x6038, Const(1.3302745))).name("x6043").ctrl(x6088) // FltMul(x6038,Const(1.33027446269989013671875))
    val x6044 = OpDef(op=FltAdd, inputs=List(x6040, x6041)).name("x6044").ctrl(x6088) // FltAdd(x6040,x6041)
    val x6045 = OpDef(op=FltAdd, inputs=List(x6044, x6042)).name("x6045").ctrl(x6088) // FltAdd(x6044,x6042)
    val x6046 = OpDef(op=FltAdd, inputs=List(x6045, x6043)).name("x6046").ctrl(x6088) // FltAdd(x6045,x6043)
    val x6047 = OpDef(op=FltAdd, inputs=List(x6046, x6039)).name("x6047").ctrl(x6088) // FltAdd(x6046,x6039)
    val x6048 = OpDef(op=FltMul, inputs=List(x6047, x6031)).name("x6048").ctrl(x6088) // FltMul(x6047,x6031)
    val x6049 = OpDef(op=FltNeg, inputs=List(x6048)).name("x6049").ctrl(x6088) // FltNeg(x6048)
    val x6050 = OpDef(op=FltAdd, inputs=List(x6049, Const(1.0))).name("x6050").ctrl(x6088) // FltAdd(x6049,Const(1))
    val x6051 = OpDef(op=FltLt, inputs=List(x6008, Const(0.0))).name("x6051").ctrl(x6088) // FltLt(x6008,Const(0.0))
    val x6052 = OpDef(op=MuxOp, inputs=List(x6051, x6048, x6050)).name("x6052").ctrl(x6088) // Mux(x6051,x6048,x6050)
    val x6053 = OpDef(op=FltNeg, inputs=List(x5899)).name("x6053").ctrl(x6088) // FltNeg(x5899)
    val x6054 = OpDef(op=FltMul, inputs=List(x6053, x5903)).name("x6054").ctrl(x6088) // FltMul(x6053,x5903)
    val x6055 = OpDef(op=FltLt, inputs=List(x6054, Const(-3.5))).name("x6055").ctrl(x6088) // FltLt(x6054,Const(-3.50))
    val x6056 = OpDef(op=FltLt, inputs=List(x6054, Const(-1.2))).name("x6056").ctrl(x6088) // FltLt(x6054,Const(-1.2000000476837158203125))
    val x6057 = OpDef(op=FltMul, inputs=List(x6054, Const(0.1))).name("x6057").ctrl(x6088) // FltMul(x6054,Const(0.100000001490116119384765625))
    val x6058 = OpDef(op=FltAdd, inputs=List(x6057, Const(0.35))).name("x6058").ctrl(x6088) // FltAdd(x6057,Const(0.3499999940395355224609375))
    val x6059 = OpDef(op=FltAdd, inputs=List(Const(1.0), x6054)).name("x6059").ctrl(x6088) // FltAdd(Const(1),x6054)
    val x6060 = OpDef(op=FltMul, inputs=List(x6054, x6054)).name("x6060").ctrl(x6088) // FltMul(x6054,x6054)
    val x6061 = OpDef(op=FltDiv, inputs=List(x6060, Const(2.0))).name("x6061").ctrl(x6088) // FltDiv(x6060,Const(2))
    val x6062 = OpDef(op=FltAdd, inputs=List(x6059, x6061)).name("x6062").ctrl(x6088) // FltAdd(x6059,x6061)
    val x6063 = OpDef(op=FltMul, inputs=List(x6060, x6054)).name("x6063").ctrl(x6088) // FltMul(x6060,x6054)
    val x6064 = OpDef(op=FltDiv, inputs=List(x6063, Const(6.0))).name("x6064").ctrl(x6088) // FltDiv(x6063,Const(6.0))
    val x6065 = OpDef(op=FltAdd, inputs=List(x6062, x6064)).name("x6065").ctrl(x6088) // FltAdd(x6062,x6064)
    val x6066 = OpDef(op=FltMul, inputs=List(x6063, x6054)).name("x6066").ctrl(x6088) // FltMul(x6063,x6054)
    val x6067 = OpDef(op=FltDiv, inputs=List(x6066, Const(24.0))).name("x6067").ctrl(x6088) // FltDiv(x6066,Const(24.0))
    val x6068 = OpDef(op=FltAdd, inputs=List(x6065, x6067)).name("x6068").ctrl(x6088) // FltAdd(x6065,x6067)
    val x6069 = OpDef(op=FltMul, inputs=List(x6066, x6054)).name("x6069").ctrl(x6088) // FltMul(x6066,x6054)
    val x6070 = OpDef(op=FltDiv, inputs=List(x6069, Const(120.0))).name("x6070").ctrl(x6088) // FltDiv(x6069,Const(120.000))
    val x6071 = OpDef(op=FltAdd, inputs=List(x6068, x6070)).name("x6071").ctrl(x6088) // FltAdd(x6068,x6070)
    val x6072 = OpDef(op=MuxOp, inputs=List(x6056, x6058, x6071)).name("x6072").ctrl(x6088) // Mux(x6056,x6058,x6071)
    val x6073 = OpDef(op=MuxOp, inputs=List(x6055, Const(0.0), x6072)).name("x6073").ctrl(x6088) // Mux(x6055,Const(0.0),x6072)
    val x6074 = OpDef(op=FltMul, inputs=List(x5897, x6073)).name("x6074").ctrl(x6088) // FltMul(x5897,x6073)
    val x6075 = OpDef(op=FltNeg, inputs=List(x6007)).name("x6075").ctrl(x6088) // FltNeg(x6007)
    val x6076 = OpDef(op=FltAdd, inputs=List(x6075, Const(1.0))).name("x6076").ctrl(x6088) // FltAdd(x6075,Const(1))
    val x6077 = OpDef(op=FltNeg, inputs=List(x6052)).name("x6077").ctrl(x6088) // FltNeg(x6052)
    val x6078 = OpDef(op=FltAdd, inputs=List(x6077, Const(1.0))).name("x6078").ctrl(x6088) // FltAdd(x6077,Const(1))
    val x6079 = OpDef(op=FltMul, inputs=List(x5895, x6007)).name("x6079").ctrl(x6088) // FltMul(x5895,x6007)
    val x6080 = OpDef(op=FltMul, inputs=List(x6074, x6052)).name("x6080").ctrl(x6088) // FltMul(x6074,x6052)
    val x6081 = OpDef(op=FltSub, inputs=List(x6079, x6080)).name("x6081").ctrl(x6088) // FltSub(x6079,x6080)
    val x6082 = OpDef(op=FltMul, inputs=List(x6074, x6078)).name("x6082").ctrl(x6088) // FltMul(x6074,x6078)
    val x6083 = OpDef(op=FltMul, inputs=List(x5895, x6076)).name("x6083").ctrl(x6088) // FltMul(x5895,x6076)
    val x6084 = OpDef(op=FltSub, inputs=List(x6082, x6083)).name("x6084").ctrl(x6088) // FltSub(x6082,x6083)
    val x6085 = OpDef(op=FixEql, inputs=List(x5905, Const(0))).name("x6085").ctrl(x6088) // FixEql(x5905,Const(0))
    val x6086 = OpDef(op=MuxOp, inputs=List(x6085, x6084, x6081)).name("x6086").ctrl(x6088) // Mux(x6085,x6084,x6081)
    val x6087 = StoreBanks(List(x5768_d0_b0), List(b3871), x6086).name("x6087").ctrl(x6088) // ParSRAMStore(x5768,List(List(b3871)),List(x6086),List(x5893))
    val x6090 = UnitController(style=SeqPipe, level=InnerControl).name("x6090").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val x6089 = OpDef(op=FixAdd, inputs=List(b3725, Const(32))).name("x6089").ctrl(x6090) // FixAdd(b3725,Const(32))
    val x6114 = UnitController(style=StreamPipe, level=OuterControl).name("x6114").ctrl(x6115) // UnitPipe(List(b3726),Block(Const(())))
    val b6151 = StreamOut(field="offset").name("b6151").ctrl(x6114) // x6091 = StreamOutNew(BurstCmdBus)
    val b6152 = StreamOut(field="size").name("b6152").ctrl(x6114) // x6091 = StreamOutNew(BurstCmdBus)
    val x6092 = StreamOut(field="data").name("x6092").ctrl(x6114) // x6092 = StreamOutNew(BurstFullDataBus())
    val x6093 = StreamIn(field="ack").name("x6093").ctrl(x6114) // x6093 = StreamInNew(BurstAckBus)
    val x6102 = UnitController(style=SeqPipe, level=InnerControl).name("x6102").ctrl(x6114) // UnitPipe(List(b3726),Block(x6101))
    val x6094 = b3725 // FixConvert(b3725,TRUE,_32,_0)
    val x6095 = OpDef(op=FixSla, inputs=List(x6094, Const(2))).name("x6095").ctrl(x6102) // FixLsh(x6094,Const(2))
    val x6096 = x6095 // FixConvert(x6095,TRUE,_64,_0)
    val x6097 = DramAddress(x5752).name("x6097").ctrl(x6102) // GetDRAMAddress(x5752)
    val x6098 = OpDef(op=FixAdd, inputs=List(x6096, x6097)).name("x6098").ctrl(x6102) // FixAdd(x6096,x6097)
    val x6100_x6099 = x6098 // FixConvert(x6098,TRUE,_64,_0)
    // x6100 = SimpleStruct(ArrayBuffer((offset,x6099), (size,Const(128)), (isLoad,Const(false))))
    val b6153_b6151 = WriteMem(b6151, x6100_x6099).name("b6153_b6151").ctrl(x6102) // StreamWrite(x6091,x6100,b3726)
    val b6154_b6152 = WriteMem(b6152, Const(128)).name("b6154_b6152").ctrl(x6102) // StreamWrite(x6091,x6100,b3726)
    val x6103 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x6103").ctrl(x6114) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x6104 = CounterChain(List(x6103)).name("x6104").ctrl(x6114) // CounterChainNew(List(x6103))
    val x6110 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6104).name("x6110").ctrl(x6114) // UnrolledForeach(List(b3726),x6104,Block(Const(())),List(List(b4085)),List(List(b4086)))
    val b4085 = CounterIter(x6103, None).ctrl(x6110).name("b4085")
    val b4086 = DummyOp().ctrl(x6110).name("b4086")
    val x6105 = OpDef(op=BitAnd, inputs=List(b4086, b3726)).name("x6105").ctrl(x6110) // And(b4086,b3726)
    val x6106 = LoadBanks(List(x5768_d0_b0), List(b4085)).name("x6106").ctrl(x6110) // ParSRAMLoad(x5768,List(List(b4085)),List(x6105))
    val x6108_x6107 = x6106 // x6107 = VectorApply(x6106,0)
    // x6108 = SimpleStruct(ArrayBuffer((_1,x6107), (_2,Const(true))))
    val x6109_x6092 = WriteMem(x6092, x6108_x6107).name("x6109_x6092").ctrl(x6110) // ParStreamWrite(x6092,List(x6108),List(x6105))
    val x6111 = FringeDenseStore(dram=List(x5752), cmdStream=List(b6151, b6152), dataStream=List(x6092), ackStream=List(x6093)).name("x6111").ctrl(x6114) // FringeDenseStore(x5752,x6091,x6092,x6093)
    val x6113 = UnitController(style=SeqPipe, level=InnerControl).name("x6113").ctrl(x6114) // UnitPipe(List(b3726),Block(Const(())))
    val x6112_x6112 = ReadMem(x6093).name("x6112").ctrl(x6113) // StreamRead(x6093,b3726)
    
  }
}
