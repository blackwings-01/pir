import pir.node._
import prism.enums._

object SPMV_ELL extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x3295 = DRAM().name("x3295").ctrl(top) // x3295 = DRAMNew(ArrayBuffer(Const(494), Const(10)),Const(0))
    val x3296 = DRAM().name("x3296").ctrl(top) // x3296 = DRAMNew(ArrayBuffer(Const(494), Const(10)),Const(0))
    val x3297 = DRAM().name("x3297").ctrl(top) // x3297 = DRAMNew(ArrayBuffer(Const(494)),Const(0))
    val x3298 = DRAM().name("x3298").ctrl(top) // x3298 = DRAMNew(ArrayBuffer(Const(494)),Const(0))
    val x3461 = UnitController(style=SeqPipe, level=OuterControl).name("x3461").ctrl(top) // Hwblock(Block(Const(())),false)
    val x3305 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x3305").ctrl(x3461) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x3306 = CounterChain(List(x3305)).name("x3306").ctrl(x3461) // CounterChainNew(List(x3305))
    val x3460 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3306).name("x3460").ctrl(x3461) // UnrolledForeach(List(Const(true)),x3306,Block(Const(())),List(List(b2035)),List(List(b2036)))
    val b2035 = CounterIter(x3305, Some(0)).ctrl(x3460).name("b2035")
    val b2036 = DummyOp().ctrl(x3460).name("b2036")
    val x3307_d0_b0 = SRAM(size=4940, banking=NoBanking()).name("x3307_d0_b0").ctrl(x3460) // x3307 = SRAMNew(ArrayBuffer(Const(494), Const(10)))
    isAccum(x3307_d0_b0) = false
    val x3308_d0_b0 = SRAM(size=4940, banking=NoBanking()).name("x3308_d0_b0").ctrl(x3460) // x3308 = SRAMNew(ArrayBuffer(Const(494), Const(10)))
    isAccum(x3308_d0_b0) = false
    val x3309_d0_b0 = SRAM(size=494, banking=NoBanking()).name("x3309_d0_b0").ctrl(x3460) // x3309 = SRAMNew(ArrayBuffer(Const(494)))
    isAccum(x3309_d0_b0) = false
    val x3311 = UnitController(style=SeqPipe, level=InnerControl).name("x3311").ctrl(x3460) // UnitPipe(List(b2036),Block(Const(())))
    val x3310 = OpDef(op=FixAdd, inputs=List(b2035, Const(494))).name("x3310").ctrl(x3311) // FixAdd(b2035,Const(494))
    val x3312 = Counter(min=Const(0), max=Const(494), step=Const(1), par=1).name("x3312").ctrl(x3460) // CounterNew(Const(0),Const(494),Const(1),Const(1))
    val x3313 = CounterChain(List(x3312)).name("x3313").ctrl(x3460) // CounterChainNew(List(x3312))
    val x3339 = LoopController(style=StreamPipe, level=OuterControl, cchain=x3313).name("x3339").ctrl(x3460) // UnrolledForeach(List(b2036),x3313,Block(Const(())),List(List(b2044)),List(List(b2045)))
    val b2044 = CounterIter(x3312, Some(0)).ctrl(x3339).name("b2044")
    val b2045 = DummyOp().ctrl(x3339).name("b2045")
    val b3510 = StreamOut(field="offset").name("b3510").ctrl(x3339) // x3314 = StreamOutNew(BurstCmdBus)
    val b3511 = StreamOut(field="size").name("b3511").ctrl(x3339) // x3314 = StreamOutNew(BurstCmdBus)
    val x3315 = StreamIn(field="data").name("x3315").ctrl(x3339) // x3315 = StreamInNew(BurstDataBus())
    val x3329 = UnitController(style=SeqPipe, level=InnerControl).name("x3329").ctrl(x3339) // UnitPipe(List(b2045, b2036),Block(x3328))
    val x3316 = OpDef(op=FixAdd, inputs=List(b2035, b2044)).name("x3316").ctrl(x3329) // FixAdd(b2035,b2044)
    val x3317 = x3316 // FixConvert(x3316,TRUE,_32,_0)
    val x3318 = OpDef(op=FixMul, inputs=List(x3317, Const(10))).name("x3318").ctrl(x3329) // FixMul(x3317,Const(10))
    val x3319 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x3320 = OpDef(op=FixAdd, inputs=List(x3318, x3319)).name("x3320").ctrl(x3329) // FixAdd(x3318,x3319)
    val x3321 = OpDef(op=FixSla, inputs=List(x3320, Const(2))).name("x3321").ctrl(x3329) // FixLsh(x3320,Const(2))
    val x3322 = x3321 // FixConvert(x3321,TRUE,_64,_0)
    val x3323 = top.argFringe.dramAddress(x3296).name("x3323").ctrl(x3329) // GetDRAMAddress(x3296)
    val x3324 = OpDef(op=FixAdd, inputs=List(x3322, x3323)).name("x3324").ctrl(x3329) // FixAdd(x3322,x3323)
    val x3326_x3325 = x3324 // FixConvert(x3324,TRUE,_64,_0)
    // x3326 = SimpleStruct(ArrayBuffer((offset,x3325), (size,Const(40)), (isLoad,Const(true))))
    val x3327 = OpDef(op=BitAnd, inputs=List(b2045, b2036)).name("x3327").ctrl(x3329) // And(b2045,b2036)
    val b3512_b3510 = WriteMem(b3510, x3326_x3325).name("b3512_b3510").ctrl(x3329) // StreamWrite(x3314,x3326,x3327)
    val b3513_b3511 = WriteMem(b3511, Const(40)).name("b3513_b3511").ctrl(x3329) // StreamWrite(x3314,x3326,x3327)
    val x3330 = FringeContainer(x3296,b3510,b3511,x3315).name("x3330").ctrl(x3339) // FringeDenseLoad(x3296,x3314,x3315)
    val x3331 = Counter(min=Const(0), max=Const(10), step=Const(1), par=1).name("x3331").ctrl(x3339) // CounterNew(Const(0),Const(10),Const(1),Const(1))
    val x3332 = CounterChain(List(x3331)).name("x3332").ctrl(x3339) // CounterChainNew(List(x3331))
    val x3338 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3332).name("x3338").ctrl(x3339) // UnrolledForeach(List(b2045, b2036),x3332,Block(Const(())),List(List(b2065)),List(List(b2066)))
    val b2065 = CounterIter(x3331, None).ctrl(x3338).name("b2065")
    val b2066 = DummyOp().ctrl(x3338).name("b2066")
    val x3333 = OpDef(op=BitAnd, inputs=List(b2066, b2045)).name("x3333").ctrl(x3338) // And(b2066,b2045)
    val x3334 = OpDef(op=BitAnd, inputs=List(x3333, b2036)).name("x3334").ctrl(x3338) // And(x3333,b2036)
    val x3335_x3335 = ReadMem(x3315).name("x3335").ctrl(x3338) // ParStreamRead(x3315,List(x3334))
    val x3336_x3336 = x3335_x3335 // x3336 = VectorApply(x3335,0)
    val x3337 = StoreBanks(List(x3307_d0_b0), List(b2044, b2065), x3336_x3336).name("x3337").ctrl(x3338) // ParSRAMStore(x3307,List(List(b2044, b2065)),List(x3336),List(x3334))
    val x3340 = Counter(min=Const(0), max=Const(494), step=Const(1), par=1).name("x3340").ctrl(x3460) // CounterNew(Const(0),Const(494),Const(1),Const(1))
    val x3341 = CounterChain(List(x3340)).name("x3341").ctrl(x3460) // CounterChainNew(List(x3340))
    val x3367 = LoopController(style=StreamPipe, level=OuterControl, cchain=x3341).name("x3367").ctrl(x3460) // UnrolledForeach(List(b2036),x3341,Block(Const(())),List(List(b2076)),List(List(b2077)))
    val b2076 = CounterIter(x3340, Some(0)).ctrl(x3367).name("b2076")
    val b2077 = DummyOp().ctrl(x3367).name("b2077")
    val b3514 = StreamOut(field="offset").name("b3514").ctrl(x3367) // x3342 = StreamOutNew(BurstCmdBus)
    val b3515 = StreamOut(field="size").name("b3515").ctrl(x3367) // x3342 = StreamOutNew(BurstCmdBus)
    val x3343 = StreamIn(field="data").name("x3343").ctrl(x3367) // x3343 = StreamInNew(BurstDataBus())
    val x3357 = UnitController(style=SeqPipe, level=InnerControl).name("x3357").ctrl(x3367) // UnitPipe(List(b2077, b2036),Block(x3356))
    val x3344 = OpDef(op=FixAdd, inputs=List(b2035, b2076)).name("x3344").ctrl(x3357) // FixAdd(b2035,b2076)
    val x3345 = x3344 // FixConvert(x3344,TRUE,_32,_0)
    val x3346 = OpDef(op=FixMul, inputs=List(x3345, Const(10))).name("x3346").ctrl(x3357) // FixMul(x3345,Const(10))
    val x3347 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x3348 = OpDef(op=FixAdd, inputs=List(x3346, x3347)).name("x3348").ctrl(x3357) // FixAdd(x3346,x3347)
    val x3349 = OpDef(op=FixSla, inputs=List(x3348, Const(2))).name("x3349").ctrl(x3357) // FixLsh(x3348,Const(2))
    val x3350 = x3349 // FixConvert(x3349,TRUE,_64,_0)
    val x3351 = top.argFringe.dramAddress(x3295).name("x3351").ctrl(x3357) // GetDRAMAddress(x3295)
    val x3352 = OpDef(op=FixAdd, inputs=List(x3350, x3351)).name("x3352").ctrl(x3357) // FixAdd(x3350,x3351)
    val x3354_x3353 = x3352 // FixConvert(x3352,TRUE,_64,_0)
    // x3354 = SimpleStruct(ArrayBuffer((offset,x3353), (size,Const(40)), (isLoad,Const(true))))
    val x3355 = OpDef(op=BitAnd, inputs=List(b2077, b2036)).name("x3355").ctrl(x3357) // And(b2077,b2036)
    val b3516_b3514 = WriteMem(b3514, x3354_x3353).name("b3516_b3514").ctrl(x3357) // StreamWrite(x3342,x3354,x3355)
    val b3517_b3515 = WriteMem(b3515, Const(40)).name("b3517_b3515").ctrl(x3357) // StreamWrite(x3342,x3354,x3355)
    val x3358 = FringeContainer(x3295,b3514,b3515,x3343).name("x3358").ctrl(x3367) // FringeDenseLoad(x3295,x3342,x3343)
    val x3359 = Counter(min=Const(0), max=Const(10), step=Const(1), par=1).name("x3359").ctrl(x3367) // CounterNew(Const(0),Const(10),Const(1),Const(1))
    val x3360 = CounterChain(List(x3359)).name("x3360").ctrl(x3367) // CounterChainNew(List(x3359))
    val x3366 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3360).name("x3366").ctrl(x3367) // UnrolledForeach(List(b2077, b2036),x3360,Block(Const(())),List(List(b2097)),List(List(b2098)))
    val b2097 = CounterIter(x3359, None).ctrl(x3366).name("b2097")
    val b2098 = DummyOp().ctrl(x3366).name("b2098")
    val x3361 = OpDef(op=BitAnd, inputs=List(b2098, b2077)).name("x3361").ctrl(x3366) // And(b2098,b2077)
    val x3362 = OpDef(op=BitAnd, inputs=List(x3361, b2036)).name("x3362").ctrl(x3366) // And(x3361,b2036)
    val x3363_x3363 = ReadMem(x3343).name("x3363").ctrl(x3366) // ParStreamRead(x3343,List(x3362))
    val x3364_x3364 = x3363_x3363 // x3364 = VectorApply(x3363,0)
    val x3365 = StoreBanks(List(x3308_d0_b0), List(b2076, b2097), x3364_x3364).name("x3365").ctrl(x3366) // ParSRAMStore(x3308,List(List(b2076, b2097)),List(x3364),List(x3362))
    val x3368 = Counter(min=Const(0), max=Const(494), step=Const(1), par=1).name("x3368").ctrl(x3460) // CounterNew(Const(0),Const(494),Const(1),Const(1))
    val x3369 = CounterChain(List(x3368)).name("x3369").ctrl(x3460) // CounterChainNew(List(x3368))
    val x3435 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3369).name("x3435").ctrl(x3460) // UnrolledForeach(List(b2036),x3369,Block(Const(())),List(List(b2108)),List(List(b2109)))
    val b2108 = CounterIter(x3368, Some(0)).ctrl(x3435).name("b2108")
    val b2109 = DummyOp().ctrl(x3435).name("b2109")
    val x3370_d0_b0 = SRAM(size=10, banking=NoBanking()).name("x3370_d0_b0").ctrl(x3435) // x3370 = SRAMNew(ArrayBuffer(Const(10)))
    isAccum(x3370_d0_b0) = false
    val x3371_d0_b0 = SRAM(size=10, banking=NoBanking()).name("x3371_d0_b0").ctrl(x3435) // x3371 = SRAMNew(ArrayBuffer(Const(10)))
    isAccum(x3371_d0_b0) = false
    val x3372 = Counter(min=Const(0), max=Const(10), step=Const(1), par=1).name("x3372").ctrl(x3435) // CounterNew(Const(0),Const(10),Const(1),Const(1))
    val x3373 = CounterChain(List(x3372)).name("x3373").ctrl(x3435) // CounterChainNew(List(x3372))
    val x3379 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3373).name("x3379").ctrl(x3435) // UnrolledForeach(List(b2109, b2036),x3373,Block(Const(())),List(List(b2114)),List(List(b2115)))
    val b2114 = CounterIter(x3372, None).ctrl(x3379).name("b2114")
    val b2115 = DummyOp().ctrl(x3379).name("b2115")
    val x3374 = OpDef(op=BitAnd, inputs=List(b2115, b2109)).name("x3374").ctrl(x3379) // And(b2115,b2109)
    val x3375 = OpDef(op=BitAnd, inputs=List(x3374, b2036)).name("x3375").ctrl(x3379) // And(x3374,b2036)
    val x3376 = LoadBanks(List(x3307_d0_b0), List(b2108, b2114)).name("x3376").ctrl(x3379) // ParSRAMLoad(x3307,List(List(b2108, b2114)),List(x3375))
    val x3377 = x3376 // x3377 = VectorApply(x3376,0)
    val x3378 = StoreBanks(List(x3371_d0_b0), List(b2114), x3377).name("x3378").ctrl(x3379) // ParSRAMStore(x3371,List(List(b2114)),List(x3377),List(x3375))
    val x3380_d0 = Reg(init=Some(0)).name("x3380_d0").ctrl(x3435) // x3380 = RegNew(Const(0))
    isAccum(x3380_d0) = false
    val x3380_d1 = Reg(init=Some(0)).name("x3380_d1").ctrl(x3435) // x3380 = RegNew(Const(0))
    isAccum(x3380_d1) = false
    val x3383 = UnitController(style=SeqPipe, level=InnerControl).name("x3383").ctrl(x3435) // UnitPipe(List(b2109, b2036),Block(x3382))
    val x3381 = OpDef(op=BitAnd, inputs=List(b2109, b2036)).name("x3381").ctrl(x3383) // And(b2109,b2036)
    val x3382_x3380_d0 = WriteMem(x3380_d0, Const(16)).name("x3382_x3380_d0").ctrl(x3383) // RegWrite(x3380,Const(16),x3381)
    val x3382_x3380_d1 = WriteMem(x3380_d1, Const(16)).name("x3382_x3380_d1").ctrl(x3383) // RegWrite(x3380,Const(16),x3381)
    val x3414 = UnitController(style=StreamPipe, level=OuterControl).name("x3414").ctrl(x3435) // UnitPipe(List(b2109, b2036),Block(Const(())))
    val x3384 = StreamOut(field="addr").name("x3384").ctrl(x3414) // x3384 = StreamOutNew(GatherAddrBus)
    val x3385 = StreamIn(field="data").name("x3385").ctrl(x3414) // x3385 = StreamInNew(GatherDataBus())
    val x3386 = ReadMem(x3380_d1).name("x3386").ctrl(x3414) // RegRead(x3380)
    val x3387 = Counter(min=Const(0), max=x3386, step=Const(1), par=1).name("x3387").ctrl(x3414) // CounterNew(Const(0),x3386,Const(1),Const(1))
    val x3388 = CounterChain(List(x3387)).name("x3388").ctrl(x3414) // CounterChainNew(List(x3387))
    val x3401 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3388).name("x3401").ctrl(x3414) // UnrolledForeach(List(b2109, b2036),x3388,Block(Const(())),List(List(b2131)),List(List(b2132)))
    val b2131 = CounterIter(x3387, None).ctrl(x3401).name("b2131")
    val b2132 = DummyOp().ctrl(x3401).name("b2132")
    val x3389 = OpDef(op=FixLeq, inputs=List(Const(10), b2131)).name("x3389").ctrl(x3401) // FixLeq(Const(10),b2131)
    val x3390 = top.argFringe.dramAddress(x3297).name("x3390").ctrl(x3401) // GetDRAMAddress(x3297)
    val x3391 = x3390 // FixConvert(x3390,TRUE,_64,_0)
    val x3392 = OpDef(op=BitAnd, inputs=List(b2132, b2109)).name("x3392").ctrl(x3401) // And(b2132,b2109)
    val x3393 = OpDef(op=BitAnd, inputs=List(x3392, b2036)).name("x3393").ctrl(x3401) // And(x3392,b2036)
    val x3394 = LoadBanks(List(x3371_d0_b0), List(b2131)).name("x3394").ctrl(x3401) // ParSRAMLoad(x3371,List(List(b2131)),List(x3393))
    val x3395 = x3394 // x3395 = VectorApply(x3394,0)
    val x3396 = OpDef(op=FixSla, inputs=List(x3395, Const(2))).name("x3396").ctrl(x3401) // FixLsh(x3395,Const(2))
    val x3397 = x3396 // FixConvert(x3396,TRUE,_64,_0)
    val x3398 = OpDef(op=FixAdd, inputs=List(x3397, x3390)).name("x3398").ctrl(x3401) // FixAdd(x3397,x3390)
    val x3399 = OpDef(op=MuxOp, inputs=List(x3389, x3391, x3398)).name("x3399").ctrl(x3401) // Mux(x3389,x3391,x3398)
    val x3400_x3384 = WriteMem(x3384, x3399).name("x3400_x3384").ctrl(x3401) // ParStreamWrite(x3384,List(x3399),List(x3393))
    val x3402 = FringeContainer(x3297,x3384,x3385).name("x3402").ctrl(x3414) // FringeSparseLoad(x3297,x3384,x3385)
    val x3403 = ReadMem(x3380_d0).name("x3403").ctrl(x3414) // RegRead(x3380)
    val x3404 = Counter(min=Const(0), max=x3403, step=Const(1), par=1).name("x3404").ctrl(x3414) // CounterNew(Const(0),x3403,Const(1),Const(1))
    val x3405 = CounterChain(List(x3404)).name("x3405").ctrl(x3414) // CounterChainNew(List(x3404))
    val x3413 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3405).name("x3413").ctrl(x3414) // UnrolledForeach(List(b2109, b2036),x3405,Block(Const(())),List(List(b2150)),List(List(b2151)))
    val b2150 = CounterIter(x3404, None).ctrl(x3413).name("b2150")
    val b2151 = DummyOp().ctrl(x3413).name("b2151")
    val x3406 = OpDef(op=BitAnd, inputs=List(b2151, b2109)).name("x3406").ctrl(x3413) // And(b2151,b2109)
    val x3407 = OpDef(op=BitAnd, inputs=List(x3406, b2036)).name("x3407").ctrl(x3413) // And(x3406,b2036)
    val x3408_x3408 = ReadMem(x3385).name("x3408").ctrl(x3413) // ParStreamRead(x3385,List(x3407))
    val x3409_x3409 = x3408_x3408 // x3409 = VectorApply(x3408,0)
    val x3410 = OpDef(op=FixLt, inputs=List(b2150, Const(10))).name("x3410").ctrl(x3413) // FixLt(b2150,Const(10))
    val x3411 = OpDef(op=BitAnd, inputs=List(x3410, x3407)).name("x3411").ctrl(x3413) // And(x3410,x3407)
    val x3412 = StoreBanks(List(x3370_d0_b0), List(b2150), x3409_x3409).name("x3412").ctrl(x3413) // ParSRAMStore(x3370,List(List(b2150)),List(x3409),List(x3411))
    val x3415_d0 = Reg(init=Some(0.0)).name("x3415_d0").ctrl(x3435) // x3415 = RegNew(Const(0))
    isAccum(x3415_d0) = false
    val x3415_d1 = Reg(init=Some(0.0)).name("x3415_d1").ctrl(x3435) // x3415 = RegNew(Const(0))
    isAccum(x3415_d1) = true
    val x3416 = Counter(min=Const(0), max=Const(10), step=Const(1), par=1).name("x3416").ctrl(x3435) // CounterNew(Const(0),Const(10),Const(1),Const(1))
    val x3417 = CounterChain(List(x3416)).name("x3417").ctrl(x3435) // CounterChainNew(List(x3416))
    val x3430 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3417).name("x3430").ctrl(x3435) // UnrolledReduce(List(b2109, b2036),x3417,x3415,Block((x3415) => Const(())),List(List(b2164)),List(List(b2165)))
    val b2164 = CounterIter(x3416, None).ctrl(x3430).name("b2164")
    val b2165 = DummyOp().ctrl(x3430).name("b2165")
    val x3418 = OpDef(op=BitAnd, inputs=List(b2165, b2109)).name("x3418").ctrl(x3430) // And(b2165,b2109)
    val x3419 = OpDef(op=BitAnd, inputs=List(x3418, b2036)).name("x3419").ctrl(x3430) // And(x3418,b2036)
    val x3420 = LoadBanks(List(x3308_d0_b0), List(b2108, b2164)).name("x3420").ctrl(x3430) // ParSRAMLoad(x3308,List(List(b2108, b2164)),List(x3419))
    val x3421 = x3420 // x3421 = VectorApply(x3420,0)
    val x3422 = LoadBanks(List(x3370_d0_b0), List(b2164)).name("x3422").ctrl(x3430) // ParSRAMLoad(x3370,List(List(b2164)),List(x3419))
    val x3423 = x3422 // x3423 = VectorApply(x3422,0)
    val x3424 = OpDef(op=FixMul, inputs=List(x3421, x3423)).name("x3424").ctrl(x3430) // FixMul(x3421,x3423)
    val x3425 = ReadMem(x3415_d1).name("x3425").ctrl(x3430) // RegRead(x3415)
    val x3426 = OpDef(op=FixEql, inputs=List(b2164, Const(0))).name("x3426").ctrl(x3430) // FixEql(b2164,Const(0))
    val x3427 = ReduceAccumOp(op=FixAdd, input=x3424, accum=x3425).name("x3427").ctrl(x3430) // FixAdd(x3424,x3425)
    val x3428 = OpDef(op=BitAnd, inputs=List(b2109, b2036)).name("x3428").ctrl(x3430) // And(b2109,b2036)
    val x3429_x3415_d0 = WriteMem(x3415_d0, x3427).name("x3429_x3415_d0").ctrl(x3430) // RegWrite(x3415,x3427,x3428)
    val x3429_x3415_d1 = WriteMem(x3415_d1, x3427).name("x3429_x3415_d1").ctrl(x3430) // RegWrite(x3415,x3427,x3428)
    val x3434 = UnitController(style=SeqPipe, level=InnerControl).name("x3434").ctrl(x3435) // UnitPipe(List(b2109, b2036),Block(Const(())))
    val x3431 = ReadMem(x3415_d0).name("x3431").ctrl(x3434) // RegRead(x3415)
    val x3432 = OpDef(op=BitAnd, inputs=List(b2109, b2036)).name("x3432").ctrl(x3434) // And(b2109,b2036)
    val x3433 = StoreBanks(List(x3309_d0_b0), List(b2108), x3431).name("x3433").ctrl(x3434) // SRAMStore(x3309,ArrayBuffer(Const(494)),List(b2108),Const(0),x3431,x3432)
    val x3459 = UnitController(style=StreamPipe, level=OuterControl).name("x3459").ctrl(x3460) // UnitPipe(List(b2036),Block(Const(())))
    val b3518 = StreamOut(field="offset").name("b3518").ctrl(x3459) // x3436 = StreamOutNew(BurstCmdBus)
    val b3519 = StreamOut(field="size").name("b3519").ctrl(x3459) // x3436 = StreamOutNew(BurstCmdBus)
    val x3437 = StreamOut(field="data").name("x3437").ctrl(x3459) // x3437 = StreamOutNew(BurstFullDataBus())
    val x3438 = StreamIn(field="ack").name("x3438").ctrl(x3459) // x3438 = StreamInNew(BurstAckBus)
    val x3447 = UnitController(style=SeqPipe, level=InnerControl).name("x3447").ctrl(x3459) // UnitPipe(List(b2036),Block(x3446))
    val x3439 = b2035 // FixConvert(b2035,TRUE,_32,_0)
    val x3440 = OpDef(op=FixSla, inputs=List(x3439, Const(2))).name("x3440").ctrl(x3447) // FixLsh(x3439,Const(2))
    val x3441 = x3440 // FixConvert(x3440,TRUE,_64,_0)
    val x3442 = top.argFringe.dramAddress(x3298).name("x3442").ctrl(x3447) // GetDRAMAddress(x3298)
    val x3443 = OpDef(op=FixAdd, inputs=List(x3441, x3442)).name("x3443").ctrl(x3447) // FixAdd(x3441,x3442)
    val x3445_x3444 = x3443 // FixConvert(x3443,TRUE,_64,_0)
    // x3445 = SimpleStruct(ArrayBuffer((offset,x3444), (size,Const(1976)), (isLoad,Const(false))))
    val b3520_b3518 = WriteMem(b3518, x3445_x3444).name("b3520_b3518").ctrl(x3447) // StreamWrite(x3436,x3445,b2036)
    val b3521_b3519 = WriteMem(b3519, Const(1976)).name("b3521_b3519").ctrl(x3447) // StreamWrite(x3436,x3445,b2036)
    val x3448 = Counter(min=Const(0), max=Const(494), step=Const(1), par=1).name("x3448").ctrl(x3459) // CounterNew(Const(0),Const(494),Const(1),Const(1))
    val x3449 = CounterChain(List(x3448)).name("x3449").ctrl(x3459) // CounterChainNew(List(x3448))
    val x3455 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3449).name("x3455").ctrl(x3459) // UnrolledForeach(List(b2036),x3449,Block(Const(())),List(List(b2198)),List(List(b2199)))
    val b2198 = CounterIter(x3448, None).ctrl(x3455).name("b2198")
    val b2199 = DummyOp().ctrl(x3455).name("b2199")
    val x3450 = OpDef(op=BitAnd, inputs=List(b2199, b2036)).name("x3450").ctrl(x3455) // And(b2199,b2036)
    val x3451 = LoadBanks(List(x3309_d0_b0), List(b2198)).name("x3451").ctrl(x3455) // ParSRAMLoad(x3309,List(List(b2198)),List(x3450))
    val x3453_x3452 = x3451 // x3452 = VectorApply(x3451,0)
    // x3453 = SimpleStruct(ArrayBuffer((_1,x3452), (_2,Const(true))))
    val x3454_x3437 = WriteMem(x3437, x3453_x3452).name("x3454_x3437").ctrl(x3455) // ParStreamWrite(x3437,List(x3453),List(x3450))
    val x3456 = FringeContainer(x3298,b3518,b3519,x3437,x3438).name("x3456").ctrl(x3459) // FringeDenseStore(x3298,x3436,x3437,x3438)
    val x3458 = UnitController(style=SeqPipe, level=InnerControl).name("x3458").ctrl(x3459) // UnitPipe(List(b2036),Block(Const(())))
    val x3457_x3457 = ReadMem(x3438).name("x3457").ctrl(x3458) // StreamRead(x3438,b2036)
    
  }
}
