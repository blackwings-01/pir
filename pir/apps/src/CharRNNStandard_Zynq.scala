import pir._
import pir.node._
import arch._
import prism.enums._

object CharRNNStandard_Zynq extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x9863 = DRAM().name("x9863").ctrl(top) // x9863 = DRAMNew(ArrayBuffer(Const(65), Const(512)),Const(0))
    val x9864 = DRAM().name("x9864").ctrl(top) // x9864 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x9865 = DRAM().name("x9865").ctrl(top) // x9865 = DRAMNew(ArrayBuffer(Const(128), Const(512)),Const(0))
    val x9866 = DRAM().name("x9866").ctrl(top) // x9866 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x9867 = DRAM().name("x9867").ctrl(top) // x9867 = DRAMNew(ArrayBuffer(Const(128), Const(512)),Const(0))
    val x9868 = DRAM().name("x9868").ctrl(top) // x9868 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x9869 = DRAM().name("x9869").ctrl(top) // x9869 = DRAMNew(ArrayBuffer(Const(128), Const(512)),Const(0))
    val x9870 = DRAM().name("x9870").ctrl(top) // x9870 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x9871 = DRAM().name("x9871").ctrl(top) // x9871 = DRAMNew(ArrayBuffer(Const(128), Const(65)),Const(0))
    val x9872 = DRAM().name("x9872").ctrl(top) // x9872 = DRAMNew(ArrayBuffer(Const(65)),Const(0))
    val x9873 = DRAM().name("x9873").ctrl(top) // x9873 = DRAMNew(ArrayBuffer(Const(1), Const(128)),Const(0))
    val x9874 = DRAM().name("x9874").ctrl(top) // x9874 = DRAMNew(ArrayBuffer(Const(1), Const(128)),Const(0))
    val x9875 = DRAM().name("x9875").ctrl(top) // x9875 = DRAMNew(ArrayBuffer(Const(3), Const(1), Const(65)),Const(0))
    val x9975 = DRAM().name("x9975").ctrl(top) // x9975 = DRAMNew(ArrayBuffer(Const(3), Const(65), Const(1)),Const(0))
    val x10683 = UnitController(style=SeqPipe, level=OuterControl).name("x10683").ctrl(top) // Hwblock(Block(Const(())),false)
    val x9976_d0_b0 = SRAM(size=33280, banking=Strided(banks=1, stride=512)).name("x9976_d0_b0").ctrl(x10683) // x9976 = SRAMNew(ArrayBuffer(Const(65), Const(512)))
    isAccum(x9976_d0_b0) = false
    bufferDepthOf(x9976_d0_b0) = 1
    val x9977_d0_b0 = SRAM(size=512, banking=Strided(banks=1, stride=1)).name("x9977_d0_b0").ctrl(x10683) // x9977 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x9977_d0_b0) = false
    bufferDepthOf(x9977_d0_b0) = 1
    val x9978_d0_b0 = SRAM(size=65536, banking=Strided(banks=1, stride=512)).name("x9978_d0_b0").ctrl(x10683) // x9978 = SRAMNew(ArrayBuffer(Const(128), Const(512)))
    isAccum(x9978_d0_b0) = false
    bufferDepthOf(x9978_d0_b0) = 1
    val x9979_d0_b0 = SRAM(size=512, banking=Strided(banks=1, stride=1)).name("x9979_d0_b0").ctrl(x10683) // x9979 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x9979_d0_b0) = false
    bufferDepthOf(x9979_d0_b0) = 1
    val x9980_d0_b0 = SRAM(size=65536, banking=Strided(banks=1, stride=512)).name("x9980_d0_b0").ctrl(x10683) // x9980 = SRAMNew(ArrayBuffer(Const(128), Const(512)))
    isAccum(x9980_d0_b0) = false
    bufferDepthOf(x9980_d0_b0) = 1
    val x9981_d0_b0 = SRAM(size=512, banking=Strided(banks=1, stride=1)).name("x9981_d0_b0").ctrl(x10683) // x9981 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x9981_d0_b0) = false
    bufferDepthOf(x9981_d0_b0) = 1
    val x9982_d0_b0 = SRAM(size=65536, banking=Strided(banks=1, stride=512)).name("x9982_d0_b0").ctrl(x10683) // x9982 = SRAMNew(ArrayBuffer(Const(128), Const(512)))
    isAccum(x9982_d0_b0) = false
    bufferDepthOf(x9982_d0_b0) = 1
    val x9983_d0_b0 = SRAM(size=512, banking=Strided(banks=1, stride=1)).name("x9983_d0_b0").ctrl(x10683) // x9983 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x9983_d0_b0) = false
    bufferDepthOf(x9983_d0_b0) = 1
    val x9984_d0_b0 = SRAM(size=8320, banking=Strided(banks=1, stride=65)).name("x9984_d0_b0").ctrl(x10683) // x9984 = SRAMNew(ArrayBuffer(Const(128), Const(65)))
    isAccum(x9984_d0_b0) = false
    bufferDepthOf(x9984_d0_b0) = 1
    val x9985_d0_b0 = SRAM(size=65, banking=Strided(banks=1, stride=1)).name("x9985_d0_b0").ctrl(x10683) // x9985 = SRAMNew(ArrayBuffer(Const(65)))
    isAccum(x9985_d0_b0) = false
    bufferDepthOf(x9985_d0_b0) = 1
    val x9986_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9986_d0_b0").ctrl(x10683) // x9986 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9986_d0_b0) = false
    bufferDepthOf(x9986_d0_b0) = 1
    val x9986_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9986_d1_b0").ctrl(x10683) // x9986 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9986_d1_b0) = true
    bufferDepthOf(x9986_d1_b0) = 1
    val x9986_d2_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9986_d2_b0").ctrl(x10683) // x9986 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9986_d2_b0) = false
    bufferDepthOf(x9986_d2_b0) = 1
    val x9986_d3_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9986_d3_b0").ctrl(x10683) // x9986 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9986_d3_b0) = true
    bufferDepthOf(x9986_d3_b0) = 1
    val x9987_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9987_d0_b0").ctrl(x10683) // x9987 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9987_d0_b0) = false
    bufferDepthOf(x9987_d0_b0) = 1
    val x9987_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9987_d1_b0").ctrl(x10683) // x9987 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9987_d1_b0) = false
    bufferDepthOf(x9987_d1_b0) = 2
    val x9987_d2_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9987_d2_b0").ctrl(x10683) // x9987 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9987_d2_b0) = false
    bufferDepthOf(x9987_d2_b0) = 1
    val x9987_d3_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9987_d3_b0").ctrl(x10683) // x9987 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9987_d3_b0) = false
    bufferDepthOf(x9987_d3_b0) = 1
    val x9988_d0_b0 = SRAM(size=65, banking=Strided(banks=1, stride=65)).name("x9988_d0_b0").ctrl(x10683) // x9988 = SRAMNew(ArrayBuffer(Const(1), Const(65)))
    isAccum(x9988_d0_b0) = false
    bufferDepthOf(x9988_d0_b0) = 1
    val x9988_d1_b0 = SRAM(size=65, banking=Strided(banks=1, stride=65)).name("x9988_d1_b0").ctrl(x10683) // x9988 = SRAMNew(ArrayBuffer(Const(1), Const(65)))
    isAccum(x9988_d1_b0) = false
    bufferDepthOf(x9988_d1_b0) = 1
    val x9989_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9989_d0_b0").ctrl(x10683) // x9989 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9989_d0_b0) = false
    bufferDepthOf(x9989_d0_b0) = 1
    val x9989_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9989_d1_b0").ctrl(x10683) // x9989 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9989_d1_b0) = false
    bufferDepthOf(x9989_d1_b0) = 1
    val x9990_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9990_d0_b0").ctrl(x10683) // x9990 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9990_d0_b0) = false
    bufferDepthOf(x9990_d0_b0) = 1
    val x9990_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9990_d1_b0").ctrl(x10683) // x9990 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9990_d1_b0) = false
    bufferDepthOf(x9990_d1_b0) = 1
    val x9991_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9991_d0_b0").ctrl(x10683) // x9991 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9991_d0_b0) = false
    bufferDepthOf(x9991_d0_b0) = 1
    val x9991_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9991_d1_b0").ctrl(x10683) // x9991 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9991_d1_b0) = false
    bufferDepthOf(x9991_d1_b0) = 1
    val x9992_d0_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9992_d0_b0").ctrl(x10683) // x9992 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9992_d0_b0) = false
    bufferDepthOf(x9992_d0_b0) = 1
    val x9992_d1_b0 = SRAM(size=128, banking=Strided(banks=1, stride=128)).name("x9992_d1_b0").ctrl(x10683) // x9992 = SRAMNew(ArrayBuffer(Const(1), Const(128)))
    isAccum(x9992_d1_b0) = false
    bufferDepthOf(x9992_d1_b0) = 1
    val x9993 = Counter(min=Const(0), max=Const(65), step=Const(1), par=1).name("x9993").ctrl(x10683) // CounterNew(Const(0),Const(65),Const(1),Const(1))
    val x9994 = CounterChain(List(x9993)).name("x9994").ctrl(x10683) // CounterChainNew(List(x9993))
    val x10017 = LoopController(style=StreamPipe, level=OuterControl, cchain=x9994).name("x10017").ctrl(x10683) // UnrolledForeach(List(Const(true)),x9994,Block(Const(())),List(List(b5784)),List(List(b5785)))
    val b5784 = CounterIter(x9993, Some(0)).ctrl(x10017).name("b5784")
    val b5785 = Const(true).ctrl(x10017).name("b5785")
    val b10692 = StreamOut(field="offset").name("b10692").ctrl(x10017) // x9995 = StreamOutNew(BurstCmdBus)
    val b10693 = StreamOut(field="size").name("b10693").ctrl(x10017) // x9995 = StreamOutNew(BurstCmdBus)
    val x9996 = StreamIn(field="data").name("x9996").ctrl(x10017) // x9996 = StreamInNew(BurstDataBus())
    val x10008 = UnitController(style=SeqPipe, level=InnerControl).name("x10008").ctrl(x10017) // UnitPipe(List(b5785),Block(x10007))
    val x9997 = b5784 // FixConvert(b5784,TRUE,_32,_0)
    val x9998 = OpDef(op=FixSla, inputs=List(x9997, Const(9))).name("x9998").ctrl(x10008) // FixLsh(x9997,Const(9))
    val x9999 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10000 = OpDef(op=FixAdd, inputs=List(x9998, x9999)).name("x10000").ctrl(x10008) // FixAdd(x9998,x9999)
    val x10001 = OpDef(op=FixSla, inputs=List(x10000, Const(2))).name("x10001").ctrl(x10008) // FixLsh(x10000,Const(2))
    val x10002 = x10001 // FixConvert(x10001,TRUE,_64,_0)
    val x10003 = DramAddress(x9863).name("x10003").ctrl(x10008) // GetDRAMAddress(x9863)
    val x10004 = OpDef(op=FixAdd, inputs=List(x10002, x10003)).name("x10004").ctrl(x10008) // FixAdd(x10002,x10003)
    val x10006_x10005 = x10004 // FixConvert(x10004,TRUE,_64,_0)
    // x10006 = SimpleStruct(ArrayBuffer((offset,x10005), (size,Const(2048)), (isLoad,Const(true))))
    val b10694_b10692 = WriteMem(b10692, x10006_x10005).name("b10694_b10692").ctrl(x10008) // StreamWrite(x9995,x10006,b5785)
    val b10695_b10693 = WriteMem(b10693, Const(2048)).name("b10695_b10693").ctrl(x10008) // StreamWrite(x9995,x10006,b5785)
    val x10009 = FringeDenseLoad(dram=List(x9863), cmdStream=List(b10692, b10693), dataStream=List(x9996)).name("x10009").ctrl(x10017) // FringeDenseLoad(x9863,x9995,x9996)
    val x10010 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10010").ctrl(x10017) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10011 = CounterChain(List(x10010)).name("x10011").ctrl(x10017) // CounterChainNew(List(x10010))
    val x10016 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10011).name("x10016").ctrl(x10017) // UnrolledForeach(List(b5785),x10011,Block(Const(())),List(List(b5803)),List(List(b5804)))
    val b5803 = CounterIter(x10010, None).ctrl(x10016).name("b5803")
    val b5804 = Const(true).ctrl(x10016).name("b5804")
    val x10012 = OpDef(op=BitAnd, inputs=List(b5804, b5785)).name("x10012").ctrl(x10016) // And(b5804,b5785)
    val x10013_x10013 = ReadMem(x9996).name("x10013").ctrl(x10016) // ParStreamRead(x9996,List(x10012))
    val x10014_x10014 = x10013_x10013 // x10014 = VectorApply(x10013,0)
    val x10015 = StoreBanks(List(x9976_d0_b0), List(b5784, b5803), x10014_x10014).name("x10015").ctrl(x10016) // ParSRAMStore(x9976,List(List(b5784, b5803)),List(x10014),List(x10012))
    val x10036 = UnitController(style=StreamPipe, level=OuterControl).name("x10036").ctrl(x10683) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10696 = StreamOut(field="offset").name("b10696").ctrl(x10036) // x10018 = StreamOutNew(BurstCmdBus)
    val b10697 = StreamOut(field="size").name("b10697").ctrl(x10036) // x10018 = StreamOutNew(BurstCmdBus)
    val x10019 = StreamIn(field="data").name("x10019").ctrl(x10036) // x10019 = StreamInNew(BurstDataBus())
    val x10028 = UnitController(style=SeqPipe, level=InnerControl).name("x10028").ctrl(x10036) // UnitPipe(List(Const(true)),Block(x10027))
    val x10020 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10021 = OpDef(op=FixSla, inputs=List(x10020, Const(2))).name("x10021").ctrl(x10028) // FixLsh(x10020,Const(2))
    val x10022 = x10021 // FixConvert(x10021,TRUE,_64,_0)
    val x10023 = DramAddress(x9864).name("x10023").ctrl(x10028) // GetDRAMAddress(x9864)
    val x10024 = OpDef(op=FixAdd, inputs=List(x10022, x10023)).name("x10024").ctrl(x10028) // FixAdd(x10022,x10023)
    val x10026_x10025 = x10024 // FixConvert(x10024,TRUE,_64,_0)
    // x10026 = SimpleStruct(ArrayBuffer((offset,x10025), (size,Const(2048)), (isLoad,Const(true))))
    val b10698_b10696 = WriteMem(b10696, x10026_x10025).name("b10698_b10696").ctrl(x10028) // StreamWrite(x10018,x10026,Const(true))
    val b10699_b10697 = WriteMem(b10697, Const(2048)).name("b10699_b10697").ctrl(x10028) // StreamWrite(x10018,x10026,Const(true))
    val x10029 = FringeDenseLoad(dram=List(x9864), cmdStream=List(b10696, b10697), dataStream=List(x10019)).name("x10029").ctrl(x10036) // FringeDenseLoad(x9864,x10018,x10019)
    val x10030 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10030").ctrl(x10036) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10031 = CounterChain(List(x10030)).name("x10031").ctrl(x10036) // CounterChainNew(List(x10030))
    val x10035 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10031).name("x10035").ctrl(x10036) // UnrolledForeach(List(Const(true)),x10031,Block(Const(())),List(List(b5825)),List(List(b5826)))
    val b5825 = CounterIter(x10030, None).ctrl(x10035).name("b5825")
    val b5826 = Const(true).ctrl(x10035).name("b5826")
    val x10032_x10032 = ReadMem(x10019).name("x10032").ctrl(x10035) // ParStreamRead(x10019,List(b5826))
    val x10033_x10033 = x10032_x10032 // x10033 = VectorApply(x10032,0)
    val x10034 = StoreBanks(List(x9977_d0_b0), List(b5825), x10033_x10033).name("x10034").ctrl(x10035) // ParSRAMStore(x9977,List(List(b5825)),List(x10033),List(b5826))
    val x10037 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10037").ctrl(x10683) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10038 = CounterChain(List(x10037)).name("x10038").ctrl(x10683) // CounterChainNew(List(x10037))
    val x10061 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10038).name("x10061").ctrl(x10683) // UnrolledForeach(List(Const(true)),x10038,Block(Const(())),List(List(b5834)),List(List(b5835)))
    val b5834 = CounterIter(x10037, Some(0)).ctrl(x10061).name("b5834")
    val b5835 = Const(true).ctrl(x10061).name("b5835")
    val b10700 = StreamOut(field="offset").name("b10700").ctrl(x10061) // x10039 = StreamOutNew(BurstCmdBus)
    val b10701 = StreamOut(field="size").name("b10701").ctrl(x10061) // x10039 = StreamOutNew(BurstCmdBus)
    val x10040 = StreamIn(field="data").name("x10040").ctrl(x10061) // x10040 = StreamInNew(BurstDataBus())
    val x10052 = UnitController(style=SeqPipe, level=InnerControl).name("x10052").ctrl(x10061) // UnitPipe(List(b5835),Block(x10051))
    val x10041 = b5834 // FixConvert(b5834,TRUE,_32,_0)
    val x10042 = OpDef(op=FixSla, inputs=List(x10041, Const(9))).name("x10042").ctrl(x10052) // FixLsh(x10041,Const(9))
    val x10043 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10044 = OpDef(op=FixAdd, inputs=List(x10042, x10043)).name("x10044").ctrl(x10052) // FixAdd(x10042,x10043)
    val x10045 = OpDef(op=FixSla, inputs=List(x10044, Const(2))).name("x10045").ctrl(x10052) // FixLsh(x10044,Const(2))
    val x10046 = x10045 // FixConvert(x10045,TRUE,_64,_0)
    val x10047 = DramAddress(x9867).name("x10047").ctrl(x10052) // GetDRAMAddress(x9867)
    val x10048 = OpDef(op=FixAdd, inputs=List(x10046, x10047)).name("x10048").ctrl(x10052) // FixAdd(x10046,x10047)
    val x10050_x10049 = x10048 // FixConvert(x10048,TRUE,_64,_0)
    // x10050 = SimpleStruct(ArrayBuffer((offset,x10049), (size,Const(2048)), (isLoad,Const(true))))
    val b10702_b10700 = WriteMem(b10700, x10050_x10049).name("b10702_b10700").ctrl(x10052) // StreamWrite(x10039,x10050,b5835)
    val b10703_b10701 = WriteMem(b10701, Const(2048)).name("b10703_b10701").ctrl(x10052) // StreamWrite(x10039,x10050,b5835)
    val x10053 = FringeDenseLoad(dram=List(x9867), cmdStream=List(b10700, b10701), dataStream=List(x10040)).name("x10053").ctrl(x10061) // FringeDenseLoad(x9867,x10039,x10040)
    val x10054 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10054").ctrl(x10061) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10055 = CounterChain(List(x10054)).name("x10055").ctrl(x10061) // CounterChainNew(List(x10054))
    val x10060 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10055).name("x10060").ctrl(x10061) // UnrolledForeach(List(b5835),x10055,Block(Const(())),List(List(b5853)),List(List(b5854)))
    val b5853 = CounterIter(x10054, None).ctrl(x10060).name("b5853")
    val b5854 = Const(true).ctrl(x10060).name("b5854")
    val x10056 = OpDef(op=BitAnd, inputs=List(b5854, b5835)).name("x10056").ctrl(x10060) // And(b5854,b5835)
    val x10057_x10057 = ReadMem(x10040).name("x10057").ctrl(x10060) // ParStreamRead(x10040,List(x10056))
    val x10058_x10058 = x10057_x10057 // x10058 = VectorApply(x10057,0)
    val x10059 = StoreBanks(List(x9978_d0_b0), List(b5834, b5853), x10058_x10058).name("x10059").ctrl(x10060) // ParSRAMStore(x9978,List(List(b5834, b5853)),List(x10058),List(x10056))
    val x10080 = UnitController(style=StreamPipe, level=OuterControl).name("x10080").ctrl(x10683) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10704 = StreamOut(field="offset").name("b10704").ctrl(x10080) // x10062 = StreamOutNew(BurstCmdBus)
    val b10705 = StreamOut(field="size").name("b10705").ctrl(x10080) // x10062 = StreamOutNew(BurstCmdBus)
    val x10063 = StreamIn(field="data").name("x10063").ctrl(x10080) // x10063 = StreamInNew(BurstDataBus())
    val x10072 = UnitController(style=SeqPipe, level=InnerControl).name("x10072").ctrl(x10080) // UnitPipe(List(Const(true)),Block(x10071))
    val x10064 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10065 = OpDef(op=FixSla, inputs=List(x10064, Const(2))).name("x10065").ctrl(x10072) // FixLsh(x10064,Const(2))
    val x10066 = x10065 // FixConvert(x10065,TRUE,_64,_0)
    val x10067 = DramAddress(x9868).name("x10067").ctrl(x10072) // GetDRAMAddress(x9868)
    val x10068 = OpDef(op=FixAdd, inputs=List(x10066, x10067)).name("x10068").ctrl(x10072) // FixAdd(x10066,x10067)
    val x10070_x10069 = x10068 // FixConvert(x10068,TRUE,_64,_0)
    // x10070 = SimpleStruct(ArrayBuffer((offset,x10069), (size,Const(2048)), (isLoad,Const(true))))
    val b10706_b10704 = WriteMem(b10704, x10070_x10069).name("b10706_b10704").ctrl(x10072) // StreamWrite(x10062,x10070,Const(true))
    val b10707_b10705 = WriteMem(b10705, Const(2048)).name("b10707_b10705").ctrl(x10072) // StreamWrite(x10062,x10070,Const(true))
    val x10073 = FringeDenseLoad(dram=List(x9868), cmdStream=List(b10704, b10705), dataStream=List(x10063)).name("x10073").ctrl(x10080) // FringeDenseLoad(x9868,x10062,x10063)
    val x10074 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10074").ctrl(x10080) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10075 = CounterChain(List(x10074)).name("x10075").ctrl(x10080) // CounterChainNew(List(x10074))
    val x10079 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10075).name("x10079").ctrl(x10080) // UnrolledForeach(List(Const(true)),x10075,Block(Const(())),List(List(b5875)),List(List(b5876)))
    val b5875 = CounterIter(x10074, None).ctrl(x10079).name("b5875")
    val b5876 = Const(true).ctrl(x10079).name("b5876")
    val x10076_x10076 = ReadMem(x10063).name("x10076").ctrl(x10079) // ParStreamRead(x10063,List(b5876))
    val x10077_x10077 = x10076_x10076 // x10077 = VectorApply(x10076,0)
    val x10078 = StoreBanks(List(x9979_d0_b0), List(b5875), x10077_x10077).name("x10078").ctrl(x10079) // ParSRAMStore(x9979,List(List(b5875)),List(x10077),List(b5876))
    val x10081 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10081").ctrl(x10683) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10082 = CounterChain(List(x10081)).name("x10082").ctrl(x10683) // CounterChainNew(List(x10081))
    val x10105 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10082).name("x10105").ctrl(x10683) // UnrolledForeach(List(Const(true)),x10082,Block(Const(())),List(List(b5884)),List(List(b5885)))
    val b5884 = CounterIter(x10081, Some(0)).ctrl(x10105).name("b5884")
    val b5885 = Const(true).ctrl(x10105).name("b5885")
    val b10708 = StreamOut(field="offset").name("b10708").ctrl(x10105) // x10083 = StreamOutNew(BurstCmdBus)
    val b10709 = StreamOut(field="size").name("b10709").ctrl(x10105) // x10083 = StreamOutNew(BurstCmdBus)
    val x10084 = StreamIn(field="data").name("x10084").ctrl(x10105) // x10084 = StreamInNew(BurstDataBus())
    val x10096 = UnitController(style=SeqPipe, level=InnerControl).name("x10096").ctrl(x10105) // UnitPipe(List(b5885),Block(x10095))
    val x10085 = b5884 // FixConvert(b5884,TRUE,_32,_0)
    val x10086 = OpDef(op=FixSla, inputs=List(x10085, Const(9))).name("x10086").ctrl(x10096) // FixLsh(x10085,Const(9))
    val x10087 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10088 = OpDef(op=FixAdd, inputs=List(x10086, x10087)).name("x10088").ctrl(x10096) // FixAdd(x10086,x10087)
    val x10089 = OpDef(op=FixSla, inputs=List(x10088, Const(2))).name("x10089").ctrl(x10096) // FixLsh(x10088,Const(2))
    val x10090 = x10089 // FixConvert(x10089,TRUE,_64,_0)
    val x10091 = DramAddress(x9865).name("x10091").ctrl(x10096) // GetDRAMAddress(x9865)
    val x10092 = OpDef(op=FixAdd, inputs=List(x10090, x10091)).name("x10092").ctrl(x10096) // FixAdd(x10090,x10091)
    val x10094_x10093 = x10092 // FixConvert(x10092,TRUE,_64,_0)
    // x10094 = SimpleStruct(ArrayBuffer((offset,x10093), (size,Const(2048)), (isLoad,Const(true))))
    val b10710_b10708 = WriteMem(b10708, x10094_x10093).name("b10710_b10708").ctrl(x10096) // StreamWrite(x10083,x10094,b5885)
    val b10711_b10709 = WriteMem(b10709, Const(2048)).name("b10711_b10709").ctrl(x10096) // StreamWrite(x10083,x10094,b5885)
    val x10097 = FringeDenseLoad(dram=List(x9865), cmdStream=List(b10708, b10709), dataStream=List(x10084)).name("x10097").ctrl(x10105) // FringeDenseLoad(x9865,x10083,x10084)
    val x10098 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10098").ctrl(x10105) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10099 = CounterChain(List(x10098)).name("x10099").ctrl(x10105) // CounterChainNew(List(x10098))
    val x10104 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10099).name("x10104").ctrl(x10105) // UnrolledForeach(List(b5885),x10099,Block(Const(())),List(List(b5903)),List(List(b5904)))
    val b5903 = CounterIter(x10098, None).ctrl(x10104).name("b5903")
    val b5904 = Const(true).ctrl(x10104).name("b5904")
    val x10100 = OpDef(op=BitAnd, inputs=List(b5904, b5885)).name("x10100").ctrl(x10104) // And(b5904,b5885)
    val x10101_x10101 = ReadMem(x10084).name("x10101").ctrl(x10104) // ParStreamRead(x10084,List(x10100))
    val x10102_x10102 = x10101_x10101 // x10102 = VectorApply(x10101,0)
    val x10103 = StoreBanks(List(x9980_d0_b0), List(b5884, b5903), x10102_x10102).name("x10103").ctrl(x10104) // ParSRAMStore(x9980,List(List(b5884, b5903)),List(x10102),List(x10100))
    val x10124 = UnitController(style=StreamPipe, level=OuterControl).name("x10124").ctrl(x10683) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10712 = StreamOut(field="offset").name("b10712").ctrl(x10124) // x10106 = StreamOutNew(BurstCmdBus)
    val b10713 = StreamOut(field="size").name("b10713").ctrl(x10124) // x10106 = StreamOutNew(BurstCmdBus)
    val x10107 = StreamIn(field="data").name("x10107").ctrl(x10124) // x10107 = StreamInNew(BurstDataBus())
    val x10116 = UnitController(style=SeqPipe, level=InnerControl).name("x10116").ctrl(x10124) // UnitPipe(List(Const(true)),Block(x10115))
    val x10108 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10109 = OpDef(op=FixSla, inputs=List(x10108, Const(2))).name("x10109").ctrl(x10116) // FixLsh(x10108,Const(2))
    val x10110 = x10109 // FixConvert(x10109,TRUE,_64,_0)
    val x10111 = DramAddress(x9866).name("x10111").ctrl(x10116) // GetDRAMAddress(x9866)
    val x10112 = OpDef(op=FixAdd, inputs=List(x10110, x10111)).name("x10112").ctrl(x10116) // FixAdd(x10110,x10111)
    val x10114_x10113 = x10112 // FixConvert(x10112,TRUE,_64,_0)
    // x10114 = SimpleStruct(ArrayBuffer((offset,x10113), (size,Const(2048)), (isLoad,Const(true))))
    val b10714_b10712 = WriteMem(b10712, x10114_x10113).name("b10714_b10712").ctrl(x10116) // StreamWrite(x10106,x10114,Const(true))
    val b10715_b10713 = WriteMem(b10713, Const(2048)).name("b10715_b10713").ctrl(x10116) // StreamWrite(x10106,x10114,Const(true))
    val x10117 = FringeDenseLoad(dram=List(x9866), cmdStream=List(b10712, b10713), dataStream=List(x10107)).name("x10117").ctrl(x10124) // FringeDenseLoad(x9866,x10106,x10107)
    val x10118 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10118").ctrl(x10124) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10119 = CounterChain(List(x10118)).name("x10119").ctrl(x10124) // CounterChainNew(List(x10118))
    val x10123 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10119).name("x10123").ctrl(x10124) // UnrolledForeach(List(Const(true)),x10119,Block(Const(())),List(List(b5925)),List(List(b5926)))
    val b5925 = CounterIter(x10118, None).ctrl(x10123).name("b5925")
    val b5926 = Const(true).ctrl(x10123).name("b5926")
    val x10120_x10120 = ReadMem(x10107).name("x10120").ctrl(x10123) // ParStreamRead(x10107,List(b5926))
    val x10121_x10121 = x10120_x10120 // x10121 = VectorApply(x10120,0)
    val x10122 = StoreBanks(List(x9981_d0_b0), List(b5925), x10121_x10121).name("x10122").ctrl(x10123) // ParSRAMStore(x9981,List(List(b5925)),List(x10121),List(b5926))
    val x10125 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10125").ctrl(x10683) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10126 = CounterChain(List(x10125)).name("x10126").ctrl(x10683) // CounterChainNew(List(x10125))
    val x10149 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10126).name("x10149").ctrl(x10683) // UnrolledForeach(List(Const(true)),x10126,Block(Const(())),List(List(b5934)),List(List(b5935)))
    val b5934 = CounterIter(x10125, Some(0)).ctrl(x10149).name("b5934")
    val b5935 = Const(true).ctrl(x10149).name("b5935")
    val b10716 = StreamOut(field="offset").name("b10716").ctrl(x10149) // x10127 = StreamOutNew(BurstCmdBus)
    val b10717 = StreamOut(field="size").name("b10717").ctrl(x10149) // x10127 = StreamOutNew(BurstCmdBus)
    val x10128 = StreamIn(field="data").name("x10128").ctrl(x10149) // x10128 = StreamInNew(BurstDataBus())
    val x10140 = UnitController(style=SeqPipe, level=InnerControl).name("x10140").ctrl(x10149) // UnitPipe(List(b5935),Block(x10139))
    val x10129 = b5934 // FixConvert(b5934,TRUE,_32,_0)
    val x10130 = OpDef(op=FixSla, inputs=List(x10129, Const(9))).name("x10130").ctrl(x10140) // FixLsh(x10129,Const(9))
    val x10131 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10132 = OpDef(op=FixAdd, inputs=List(x10130, x10131)).name("x10132").ctrl(x10140) // FixAdd(x10130,x10131)
    val x10133 = OpDef(op=FixSla, inputs=List(x10132, Const(2))).name("x10133").ctrl(x10140) // FixLsh(x10132,Const(2))
    val x10134 = x10133 // FixConvert(x10133,TRUE,_64,_0)
    val x10135 = DramAddress(x9869).name("x10135").ctrl(x10140) // GetDRAMAddress(x9869)
    val x10136 = OpDef(op=FixAdd, inputs=List(x10134, x10135)).name("x10136").ctrl(x10140) // FixAdd(x10134,x10135)
    val x10138_x10137 = x10136 // FixConvert(x10136,TRUE,_64,_0)
    // x10138 = SimpleStruct(ArrayBuffer((offset,x10137), (size,Const(2048)), (isLoad,Const(true))))
    val b10718_b10716 = WriteMem(b10716, x10138_x10137).name("b10718_b10716").ctrl(x10140) // StreamWrite(x10127,x10138,b5935)
    val b10719_b10717 = WriteMem(b10717, Const(2048)).name("b10719_b10717").ctrl(x10140) // StreamWrite(x10127,x10138,b5935)
    val x10141 = FringeDenseLoad(dram=List(x9869), cmdStream=List(b10716, b10717), dataStream=List(x10128)).name("x10141").ctrl(x10149) // FringeDenseLoad(x9869,x10127,x10128)
    val x10142 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10142").ctrl(x10149) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10143 = CounterChain(List(x10142)).name("x10143").ctrl(x10149) // CounterChainNew(List(x10142))
    val x10148 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10143).name("x10148").ctrl(x10149) // UnrolledForeach(List(b5935),x10143,Block(Const(())),List(List(b5953)),List(List(b5954)))
    val b5953 = CounterIter(x10142, None).ctrl(x10148).name("b5953")
    val b5954 = Const(true).ctrl(x10148).name("b5954")
    val x10144 = OpDef(op=BitAnd, inputs=List(b5954, b5935)).name("x10144").ctrl(x10148) // And(b5954,b5935)
    val x10145_x10145 = ReadMem(x10128).name("x10145").ctrl(x10148) // ParStreamRead(x10128,List(x10144))
    val x10146_x10146 = x10145_x10145 // x10146 = VectorApply(x10145,0)
    val x10147 = StoreBanks(List(x9982_d0_b0), List(b5934, b5953), x10146_x10146).name("x10147").ctrl(x10148) // ParSRAMStore(x9982,List(List(b5934, b5953)),List(x10146),List(x10144))
    val x10168 = UnitController(style=StreamPipe, level=OuterControl).name("x10168").ctrl(x10683) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10720 = StreamOut(field="offset").name("b10720").ctrl(x10168) // x10150 = StreamOutNew(BurstCmdBus)
    val b10721 = StreamOut(field="size").name("b10721").ctrl(x10168) // x10150 = StreamOutNew(BurstCmdBus)
    val x10151 = StreamIn(field="data").name("x10151").ctrl(x10168) // x10151 = StreamInNew(BurstDataBus())
    val x10160 = UnitController(style=SeqPipe, level=InnerControl).name("x10160").ctrl(x10168) // UnitPipe(List(Const(true)),Block(x10159))
    val x10152 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10153 = OpDef(op=FixSla, inputs=List(x10152, Const(2))).name("x10153").ctrl(x10160) // FixLsh(x10152,Const(2))
    val x10154 = x10153 // FixConvert(x10153,TRUE,_64,_0)
    val x10155 = DramAddress(x9870).name("x10155").ctrl(x10160) // GetDRAMAddress(x9870)
    val x10156 = OpDef(op=FixAdd, inputs=List(x10154, x10155)).name("x10156").ctrl(x10160) // FixAdd(x10154,x10155)
    val x10158_x10157 = x10156 // FixConvert(x10156,TRUE,_64,_0)
    // x10158 = SimpleStruct(ArrayBuffer((offset,x10157), (size,Const(2048)), (isLoad,Const(true))))
    val b10722_b10720 = WriteMem(b10720, x10158_x10157).name("b10722_b10720").ctrl(x10160) // StreamWrite(x10150,x10158,Const(true))
    val b10723_b10721 = WriteMem(b10721, Const(2048)).name("b10723_b10721").ctrl(x10160) // StreamWrite(x10150,x10158,Const(true))
    val x10161 = FringeDenseLoad(dram=List(x9870), cmdStream=List(b10720, b10721), dataStream=List(x10151)).name("x10161").ctrl(x10168) // FringeDenseLoad(x9870,x10150,x10151)
    val x10162 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10162").ctrl(x10168) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10163 = CounterChain(List(x10162)).name("x10163").ctrl(x10168) // CounterChainNew(List(x10162))
    val x10167 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10163).name("x10167").ctrl(x10168) // UnrolledForeach(List(Const(true)),x10163,Block(Const(())),List(List(b5975)),List(List(b5976)))
    val b5975 = CounterIter(x10162, None).ctrl(x10167).name("b5975")
    val b5976 = Const(true).ctrl(x10167).name("b5976")
    val x10164_x10164 = ReadMem(x10151).name("x10164").ctrl(x10167) // ParStreamRead(x10151,List(b5976))
    val x10165_x10165 = x10164_x10164 // x10165 = VectorApply(x10164,0)
    val x10166 = StoreBanks(List(x9983_d0_b0), List(b5975), x10165_x10165).name("x10166").ctrl(x10167) // ParSRAMStore(x9983,List(List(b5975)),List(x10165),List(b5976))
    val x10169 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10169").ctrl(x10683) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10170 = CounterChain(List(x10169)).name("x10170").ctrl(x10683) // CounterChainNew(List(x10169))
    val x10193 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10170).name("x10193").ctrl(x10683) // UnrolledForeach(List(Const(true)),x10170,Block(Const(())),List(List(b5984)),List(List(b5985)))
    val b5984 = CounterIter(x10169, Some(0)).ctrl(x10193).name("b5984")
    val b5985 = Const(true).ctrl(x10193).name("b5985")
    val b10724 = StreamOut(field="offset").name("b10724").ctrl(x10193) // x10171 = StreamOutNew(BurstCmdBus)
    val b10725 = StreamOut(field="size").name("b10725").ctrl(x10193) // x10171 = StreamOutNew(BurstCmdBus)
    val x10172 = StreamIn(field="data").name("x10172").ctrl(x10193) // x10172 = StreamInNew(BurstDataBus())
    val x10184 = UnitController(style=SeqPipe, level=InnerControl).name("x10184").ctrl(x10193) // UnitPipe(List(b5985),Block(x10183))
    val x10173 = b5984 // FixConvert(b5984,TRUE,_32,_0)
    val x10174 = OpDef(op=FixMul, inputs=List(x10173, Const(65))).name("x10174").ctrl(x10184) // FixMul(x10173,Const(65))
    val x10175 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10176 = OpDef(op=FixAdd, inputs=List(x10174, x10175)).name("x10176").ctrl(x10184) // FixAdd(x10174,x10175)
    val x10177 = OpDef(op=FixSla, inputs=List(x10176, Const(2))).name("x10177").ctrl(x10184) // FixLsh(x10176,Const(2))
    val x10178 = x10177 // FixConvert(x10177,TRUE,_64,_0)
    val x10179 = DramAddress(x9871).name("x10179").ctrl(x10184) // GetDRAMAddress(x9871)
    val x10180 = OpDef(op=FixAdd, inputs=List(x10178, x10179)).name("x10180").ctrl(x10184) // FixAdd(x10178,x10179)
    val x10182_x10181 = x10180 // FixConvert(x10180,TRUE,_64,_0)
    // x10182 = SimpleStruct(ArrayBuffer((offset,x10181), (size,Const(2048)), (isLoad,Const(true))))
    val b10726_b10724 = WriteMem(b10724, x10182_x10181).name("b10726_b10724").ctrl(x10184) // StreamWrite(x10171,x10182,b5985)
    val b10727_b10725 = WriteMem(b10725, Const(2048)).name("b10727_b10725").ctrl(x10184) // StreamWrite(x10171,x10182,b5985)
    val x10185 = FringeDenseLoad(dram=List(x9871), cmdStream=List(b10724, b10725), dataStream=List(x10172)).name("x10185").ctrl(x10193) // FringeDenseLoad(x9871,x10171,x10172)
    val x10186 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10186").ctrl(x10193) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10187 = CounterChain(List(x10186)).name("x10187").ctrl(x10193) // CounterChainNew(List(x10186))
    val x10192 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10187).name("x10192").ctrl(x10193) // UnrolledForeach(List(b5985),x10187,Block(Const(())),List(List(b6003)),List(List(b6004)))
    val b6003 = CounterIter(x10186, None).ctrl(x10192).name("b6003")
    val b6004 = Const(true).ctrl(x10192).name("b6004")
    val x10188 = OpDef(op=BitAnd, inputs=List(b6004, b5985)).name("x10188").ctrl(x10192) // And(b6004,b5985)
    val x10189_x10189 = ReadMem(x10172).name("x10189").ctrl(x10192) // ParStreamRead(x10172,List(x10188))
    val x10190_x10190 = x10189_x10189 // x10190 = VectorApply(x10189,0)
    val x10191 = StoreBanks(List(x9984_d0_b0), List(b5984, b6003), x10190_x10190).name("x10191").ctrl(x10192) // ParSRAMStore(x9984,List(List(b5984, b6003)),List(x10190),List(x10188))
    val x10212 = UnitController(style=StreamPipe, level=OuterControl).name("x10212").ctrl(x10683) // UnitPipe(List(Const(true)),Block(Const(())))
    val b10728 = StreamOut(field="offset").name("b10728").ctrl(x10212) // x10194 = StreamOutNew(BurstCmdBus)
    val b10729 = StreamOut(field="size").name("b10729").ctrl(x10212) // x10194 = StreamOutNew(BurstCmdBus)
    val x10195 = StreamIn(field="data").name("x10195").ctrl(x10212) // x10195 = StreamInNew(BurstDataBus())
    val x10204 = UnitController(style=SeqPipe, level=InnerControl).name("x10204").ctrl(x10212) // UnitPipe(List(Const(true)),Block(x10203))
    val x10196 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10197 = OpDef(op=FixSla, inputs=List(x10196, Const(2))).name("x10197").ctrl(x10204) // FixLsh(x10196,Const(2))
    val x10198 = x10197 // FixConvert(x10197,TRUE,_64,_0)
    val x10199 = DramAddress(x9872).name("x10199").ctrl(x10204) // GetDRAMAddress(x9872)
    val x10200 = OpDef(op=FixAdd, inputs=List(x10198, x10199)).name("x10200").ctrl(x10204) // FixAdd(x10198,x10199)
    val x10202_x10201 = x10200 // FixConvert(x10200,TRUE,_64,_0)
    // x10202 = SimpleStruct(ArrayBuffer((offset,x10201), (size,Const(2048)), (isLoad,Const(true))))
    val b10730_b10728 = WriteMem(b10728, x10202_x10201).name("b10730_b10728").ctrl(x10204) // StreamWrite(x10194,x10202,Const(true))
    val b10731_b10729 = WriteMem(b10729, Const(2048)).name("b10731_b10729").ctrl(x10204) // StreamWrite(x10194,x10202,Const(true))
    val x10205 = FringeDenseLoad(dram=List(x9872), cmdStream=List(b10728, b10729), dataStream=List(x10195)).name("x10205").ctrl(x10212) // FringeDenseLoad(x9872,x10194,x10195)
    val x10206 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10206").ctrl(x10212) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10207 = CounterChain(List(x10206)).name("x10207").ctrl(x10212) // CounterChainNew(List(x10206))
    val x10211 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10207).name("x10211").ctrl(x10212) // UnrolledForeach(List(Const(true)),x10207,Block(Const(())),List(List(b6025)),List(List(b6026)))
    val b6025 = CounterIter(x10206, None).ctrl(x10211).name("b6025")
    val b6026 = Const(true).ctrl(x10211).name("b6026")
    val x10208_x10208 = ReadMem(x10195).name("x10208").ctrl(x10211) // ParStreamRead(x10195,List(b6026))
    val x10209_x10209 = x10208_x10208 // x10209 = VectorApply(x10208,0)
    val x10210 = StoreBanks(List(x9985_d0_b0), List(b6025), x10209_x10209).name("x10210").ctrl(x10211) // ParSRAMStore(x9985,List(List(b6025)),List(x10209),List(b6026))
    val x10213 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10213").ctrl(x10683) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10214 = CounterChain(List(x10213)).name("x10214").ctrl(x10683) // CounterChainNew(List(x10213))
    val x10237 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10214).name("x10237").ctrl(x10683) // UnrolledForeach(List(Const(true)),x10214,Block(Const(())),List(List(b6034)),List(List(b6035)))
    val b6034 = CounterIter(x10213, Some(0)).ctrl(x10237).name("b6034")
    val b6035 = Const(true).ctrl(x10237).name("b6035")
    val b10732 = StreamOut(field="offset").name("b10732").ctrl(x10237) // x10215 = StreamOutNew(BurstCmdBus)
    val b10733 = StreamOut(field="size").name("b10733").ctrl(x10237) // x10215 = StreamOutNew(BurstCmdBus)
    val x10216 = StreamIn(field="data").name("x10216").ctrl(x10237) // x10216 = StreamInNew(BurstDataBus())
    val x10228 = UnitController(style=SeqPipe, level=InnerControl).name("x10228").ctrl(x10237) // UnitPipe(List(b6035),Block(x10227))
    val x10217 = b6034 // FixConvert(b6034,TRUE,_32,_0)
    val x10218 = OpDef(op=FixSla, inputs=List(x10217, Const(7))).name("x10218").ctrl(x10228) // FixLsh(x10217,Const(7))
    val x10219 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10220 = OpDef(op=FixAdd, inputs=List(x10218, x10219)).name("x10220").ctrl(x10228) // FixAdd(x10218,x10219)
    val x10221 = OpDef(op=FixSla, inputs=List(x10220, Const(2))).name("x10221").ctrl(x10228) // FixLsh(x10220,Const(2))
    val x10222 = x10221 // FixConvert(x10221,TRUE,_64,_0)
    val x10223 = DramAddress(x9873).name("x10223").ctrl(x10228) // GetDRAMAddress(x9873)
    val x10224 = OpDef(op=FixAdd, inputs=List(x10222, x10223)).name("x10224").ctrl(x10228) // FixAdd(x10222,x10223)
    val x10226_x10225 = x10224 // FixConvert(x10224,TRUE,_64,_0)
    // x10226 = SimpleStruct(ArrayBuffer((offset,x10225), (size,Const(512)), (isLoad,Const(true))))
    val b10734_b10732 = WriteMem(b10732, x10226_x10225).name("b10734_b10732").ctrl(x10228) // StreamWrite(x10215,x10226,b6035)
    val b10735_b10733 = WriteMem(b10733, Const(512)).name("b10735_b10733").ctrl(x10228) // StreamWrite(x10215,x10226,b6035)
    val x10229 = FringeDenseLoad(dram=List(x9873), cmdStream=List(b10732, b10733), dataStream=List(x10216)).name("x10229").ctrl(x10237) // FringeDenseLoad(x9873,x10215,x10216)
    val x10230 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10230").ctrl(x10237) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10231 = CounterChain(List(x10230)).name("x10231").ctrl(x10237) // CounterChainNew(List(x10230))
    val x10236 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10231).name("x10236").ctrl(x10237) // UnrolledForeach(List(b6035),x10231,Block(Const(())),List(List(b6053)),List(List(b6054)))
    val b6053 = CounterIter(x10230, None).ctrl(x10236).name("b6053")
    val b6054 = Const(true).ctrl(x10236).name("b6054")
    val x10232 = OpDef(op=BitAnd, inputs=List(b6054, b6035)).name("x10232").ctrl(x10236) // And(b6054,b6035)
    val x10233_x10233 = ReadMem(x10216).name("x10233").ctrl(x10236) // ParStreamRead(x10216,List(x10232))
    val x10234_x10234 = x10233_x10233 // x10234 = VectorApply(x10233,0)
    val x10235 = StoreBanks(List(x9986_d0_b0, x9986_d1_b0, x9986_d2_b0, x9986_d3_b0), List(b6034, b6053), x10234_x10234).name("x10235").ctrl(x10236) // ParSRAMStore(x9986,List(List(b6034, b6053)),List(x10234),List(x10232))
    val x10238 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10238").ctrl(x10683) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10239 = CounterChain(List(x10238)).name("x10239").ctrl(x10683) // CounterChainNew(List(x10238))
    val x10262 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10239).name("x10262").ctrl(x10683) // UnrolledForeach(List(Const(true)),x10239,Block(Const(())),List(List(b6063)),List(List(b6064)))
    val b6063 = CounterIter(x10238, Some(0)).ctrl(x10262).name("b6063")
    val b6064 = Const(true).ctrl(x10262).name("b6064")
    val b10736 = StreamOut(field="offset").name("b10736").ctrl(x10262) // x10240 = StreamOutNew(BurstCmdBus)
    val b10737 = StreamOut(field="size").name("b10737").ctrl(x10262) // x10240 = StreamOutNew(BurstCmdBus)
    val x10241 = StreamIn(field="data").name("x10241").ctrl(x10262) // x10241 = StreamInNew(BurstDataBus())
    val x10253 = UnitController(style=SeqPipe, level=InnerControl).name("x10253").ctrl(x10262) // UnitPipe(List(b6064),Block(x10252))
    val x10242 = b6063 // FixConvert(b6063,TRUE,_32,_0)
    val x10243 = OpDef(op=FixSla, inputs=List(x10242, Const(7))).name("x10243").ctrl(x10253) // FixLsh(x10242,Const(7))
    val x10244 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10245 = OpDef(op=FixAdd, inputs=List(x10243, x10244)).name("x10245").ctrl(x10253) // FixAdd(x10243,x10244)
    val x10246 = OpDef(op=FixSla, inputs=List(x10245, Const(2))).name("x10246").ctrl(x10253) // FixLsh(x10245,Const(2))
    val x10247 = x10246 // FixConvert(x10246,TRUE,_64,_0)
    val x10248 = DramAddress(x9874).name("x10248").ctrl(x10253) // GetDRAMAddress(x9874)
    val x10249 = OpDef(op=FixAdd, inputs=List(x10247, x10248)).name("x10249").ctrl(x10253) // FixAdd(x10247,x10248)
    val x10251_x10250 = x10249 // FixConvert(x10249,TRUE,_64,_0)
    // x10251 = SimpleStruct(ArrayBuffer((offset,x10250), (size,Const(512)), (isLoad,Const(true))))
    val b10738_b10736 = WriteMem(b10736, x10251_x10250).name("b10738_b10736").ctrl(x10253) // StreamWrite(x10240,x10251,b6064)
    val b10739_b10737 = WriteMem(b10737, Const(512)).name("b10739_b10737").ctrl(x10253) // StreamWrite(x10240,x10251,b6064)
    val x10254 = FringeDenseLoad(dram=List(x9874), cmdStream=List(b10736, b10737), dataStream=List(x10241)).name("x10254").ctrl(x10262) // FringeDenseLoad(x9874,x10240,x10241)
    val x10255 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10255").ctrl(x10262) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10256 = CounterChain(List(x10255)).name("x10256").ctrl(x10262) // CounterChainNew(List(x10255))
    val x10261 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10256).name("x10261").ctrl(x10262) // UnrolledForeach(List(b6064),x10256,Block(Const(())),List(List(b6082)),List(List(b6083)))
    val b6082 = CounterIter(x10255, None).ctrl(x10261).name("b6082")
    val b6083 = Const(true).ctrl(x10261).name("b6083")
    val x10257 = OpDef(op=BitAnd, inputs=List(b6083, b6064)).name("x10257").ctrl(x10261) // And(b6083,b6064)
    val x10258_x10258 = ReadMem(x10241).name("x10258").ctrl(x10261) // ParStreamRead(x10241,List(x10257))
    val x10259_x10259 = x10258_x10258 // x10259 = VectorApply(x10258,0)
    val x10260 = StoreBanks(List(x9987_d0_b0, x9987_d1_b0, x9987_d2_b0, x9987_d3_b0), List(b6063, b6082), x10259_x10259).name("x10260").ctrl(x10261) // ParSRAMStore(x9987,List(List(b6063, b6082)),List(x10259),List(x10257))
    val x10263 = Counter(min=Const(0), max=Const(3), step=Const(1), par=1).name("x10263").ctrl(x10683) // CounterNew(Const(0),Const(3),Const(1),Const(1))
    val x10264 = CounterChain(List(x10263)).name("x10264").ctrl(x10683) // CounterChainNew(List(x10263))
    val x10682 = LoopController(style=SeqPipe, level=OuterControl, cchain=x10264).name("x10682").ctrl(x10683) // UnrolledForeach(List(Const(true)),x10264,Block(Const(())),List(List(b6092)),List(List(b6093)))
    val b6092 = CounterIter(x10263, Some(0)).ctrl(x10682).name("b6092")
    val b6093 = Const(true).ctrl(x10682).name("b6093")
    val x10266 = UnitController(style=SeqPipe, level=InnerControl).name("x10266").ctrl(x10682) // UnitPipe(List(b6093),Block(Const(())))
    val x10265 = OpDef(op=FixAdd, inputs=List(b6092, Const(1))).name("x10265").ctrl(x10266) // FixAdd(b6092,Const(1))
    val x10267 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10267").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10268 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10268").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10269 = CounterChain(List(x10267,x10268)).name("x10269").ctrl(x10682) // CounterChainNew(List(x10267, x10268))
    val x10343 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10269).name("x10343").ctrl(x10682) // UnrolledForeach(List(b6093),x10269,Block(Const(())),List(List(b6099), List(b6100)),List(List(b6101), List(b6102)))
    val b6099 = CounterIter(x10267, Some(0)).ctrl(x10343).name("b6099")
    val b6101 = Const(true).ctrl(x10343).name("b6101")
    val b6100 = CounterIter(x10268, Some(0)).ctrl(x10343).name("b6100")
    val b6102 = Const(true).ctrl(x10343).name("b6102")
    val b10740 = StreamOut(field="offset").name("b10740").ctrl(x10343) // x10270 = StreamOutNew(BurstCmdBus)
    val b10741 = StreamOut(field="size").name("b10741").ctrl(x10343) // x10270 = StreamOutNew(BurstCmdBus)
    val b10742 = FIFO(size=16).name("b10742").ctrl(x10343) // x10271 = FIFONew(Const(16))
    isAccum(b10742) = false
    bufferDepthOf(b10742) = 2
    val b10743 = FIFO(size=16).name("b10743").ctrl(x10343) // x10271 = FIFONew(Const(16))
    isAccum(b10743) = false
    bufferDepthOf(b10743) = 2
    val b10744 = FIFO(size=16).name("b10744").ctrl(x10343) // x10271 = FIFONew(Const(16))
    isAccum(b10744) = false
    bufferDepthOf(b10744) = 2
    val x10272 = StreamIn(field="data").name("x10272").ctrl(x10343) // x10272 = StreamInNew(BurstDataBus())
    val x10310 = UnitController(style=SeqPipe, level=InnerControl).name("x10310").ctrl(x10343) // UnitPipe(List(b6101, b6102, b6093),Block(x10309))
    val x10273 = OpDef(op=FixAdd, inputs=List(b6092, b6099)).name("x10273").ctrl(x10310) // FixAdd(b6092,b6099)
    val x10274 = x10273 // FixConvert(x10273,TRUE,_32,_0)
    val x10275 = OpDef(op=FixMul, inputs=List(x10274, Const(65))).name("x10275").ctrl(x10310) // FixMul(x10274,Const(65))
    val x10276 = b6100 // FixConvert(b6100,TRUE,_32,_0)
    val x10277 = OpDef(op=FixMul, inputs=List(x10276, Const(65))).name("x10277").ctrl(x10310) // FixMul(x10276,Const(65))
    val x10278 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10279 = OpDef(op=FixAdd, inputs=List(x10275, x10277)).name("x10279").ctrl(x10310) // FixAdd(x10275,x10277)
    val x10280 = OpDef(op=FixAdd, inputs=List(x10279, x10278)).name("x10280").ctrl(x10310) // FixAdd(x10279,x10278)
    val x10281 = OpDef(op=FixSla, inputs=List(x10280, Const(2))).name("x10281").ctrl(x10310) // FixLsh(x10280,Const(2))
    val x10282 = x10281 // x10282 = DataAsBits(x10281)
    val x10283 = OpDef(op=BitAnd, inputs=List(x10282, Const(31))).name("x10283").ctrl(x10310) // VectorSlice(x10282,5,0) strMask=00000000000000000000000000011111
    val x10284 = x10283 // x10284 = BitsAsData(x10283,FixPt[TRUE,_32,_0])
    val x10285 = OpDef(op=FixSub, inputs=List(x10281, x10284)).name("x10285").ctrl(x10310) // FixSub(x10281,x10284)
    val x10286 = OpDef(op=FixAdd, inputs=List(x10281, Const(260))).name("x10286").ctrl(x10310) // FixAdd(x10281,Const(260))
    val x10287 = x10286 // x10287 = DataAsBits(x10286)
    val x10288 = OpDef(op=BitAnd, inputs=List(x10287, Const(31))).name("x10288").ctrl(x10310) // VectorSlice(x10287,5,0) strMask=00000000000000000000000000011111
    val x10289 = x10288 // x10289 = BitsAsData(x10288,FixPt[TRUE,_32,_0])
    val x10290 = OpDef(op=FixEql, inputs=List(x10289, Const(0))).name("x10290").ctrl(x10310) // FixEql(x10289,Const(0))
    val x10291 = OpDef(op=FixSub, inputs=List(Const(64), x10289)).name("x10291").ctrl(x10310) // FixSub(Const(64),x10289)
    val x10292 = OpDef(op=MuxOp, inputs=List(x10290, Const(0), x10291)).name("x10292").ctrl(x10310) // Mux(x10290,Const(0),x10291)
    val x10308_x10293 = OpDef(op=FixSra, inputs=List(x10284, Const(2))).name("x10293").ctrl(x10310) // FixRsh(x10284,Const(2))
    val x10294 = OpDef(op=FixSra, inputs=List(x10292, Const(2))).name("x10294").ctrl(x10310) // FixRsh(x10292,Const(2))
    val x10308_x10295 = OpDef(op=FixAdd, inputs=List(x10308_x10293, Const(65))).name("x10295").ctrl(x10310) // FixAdd(x10293,Const(65))
    val x10296 = OpDef(op=FixAdd, inputs=List(Const(65), x10308_x10293)).name("x10296").ctrl(x10310) // FixAdd(Const(65),x10293)
    val x10308_x10297 = OpDef(op=FixAdd, inputs=List(x10296, x10294)).name("x10297").ctrl(x10310) // FixAdd(x10296,x10294)
    val x10298 = OpDef(op=FixAdd, inputs=List(Const(260), x10284)).name("x10298").ctrl(x10310) // FixAdd(Const(260),x10284)
    val x10304_x10299 = OpDef(op=FixAdd, inputs=List(x10298, x10292)).name("x10299").ctrl(x10310) // FixAdd(x10298,x10292)
    val x10300 = x10285 // FixConvert(x10285,TRUE,_64,_0)
    val x10301 = DramAddress(x9875).name("x10301").ctrl(x10310) // GetDRAMAddress(x9875)
    val x10302 = OpDef(op=FixAdd, inputs=List(x10300, x10301)).name("x10302").ctrl(x10310) // FixAdd(x10300,x10301)
    val x10304_x10303 = x10302 // FixConvert(x10302,TRUE,_64,_0)
    // x10304 = SimpleStruct(ArrayBuffer((offset,x10303), (size,x10299), (isLoad,Const(true))))
    val x10305 = OpDef(op=BitAnd, inputs=List(b6101, b6102)).name("x10305").ctrl(x10310) // And(b6101,b6102)
    val x10306 = OpDef(op=BitAnd, inputs=List(x10305, b6093)).name("x10306").ctrl(x10310) // And(x10305,b6093)
    val b10745_b10740 = WriteMem(b10740, x10304_x10303).name("b10745_b10740").ctrl(x10310) // StreamWrite(x10270,x10304,x10306)
    val b10746_b10741 = WriteMem(b10741, x10304_x10299).name("b10746_b10741").ctrl(x10310) // StreamWrite(x10270,x10304,x10306)
    // x10308 = SimpleStruct(ArrayBuffer((size,x10297), (start,x10293), (end,x10295)))
    val b10747_b10742 = WriteMem(b10742, x10308_x10297).name("b10747_b10742").ctrl(x10310) // FIFOEnq(x10271,x10308,x10306)
    val b10748_b10743 = WriteMem(b10743, x10308_x10293).name("b10748_b10743").ctrl(x10310) // FIFOEnq(x10271,x10308,x10306)
    val b10749_b10744 = WriteMem(b10744, x10308_x10295).name("b10749_b10744").ctrl(x10310) // FIFOEnq(x10271,x10308,x10306)
    val x10311 = FringeDenseLoad(dram=List(x9875), cmdStream=List(b10740, b10741), dataStream=List(x10272)).name("x10311").ctrl(x10343) // FringeDenseLoad(x9875,x10270,x10272)
    val x10342 = UnitController(style=SeqPipe, level=OuterControl).name("x10342").ctrl(x10343) // UnitPipe(List(b6101, b6102, b6093),Block(Const(())))
    val x10312 = Reg(init=Some(0)).name("x10312").ctrl(x10342) // x10312 = RegNew(Const(0))
    isAccum(x10312) = false
    bufferDepthOf(x10312) = 1
    val x10313 = Reg(init=Some(0)).name("x10313").ctrl(x10342) // x10313 = RegNew(Const(0))
    isAccum(x10313) = false
    bufferDepthOf(x10313) = 1
    val x10314 = Reg(init=Some(0)).name("x10314").ctrl(x10342) // x10314 = RegNew(Const(0))
    isAccum(x10314) = false
    bufferDepthOf(x10314) = 1
    val x10324 = UnitController(style=SeqPipe, level=InnerControl).name("x10324").ctrl(x10342) // UnitPipe(List(b6101, b6102, b6093),Block(x10323))
    val x10315 = OpDef(op=BitAnd, inputs=List(b6101, b6102)).name("x10315").ctrl(x10324) // And(b6101,b6102)
    val x10316 = OpDef(op=BitAnd, inputs=List(x10315, b6093)).name("x10316").ctrl(x10324) // And(x10315,b6093)
    val x10317_b10750 = ReadMem(b10742).name("b10750").ctrl(x10324) // FIFODeq(x10271,x10316)
    val x10317_b10751 = ReadMem(b10743).name("b10751").ctrl(x10324) // FIFODeq(x10271,x10316)
    val x10317_b10752 = ReadMem(b10744).name("b10752").ctrl(x10324) // FIFODeq(x10271,x10316)
    val x10318 = x10317_b10751 // x10318 = FieldApply(x10317,start)
    val x10319_x10312 = WriteMem(x10312, x10318).name("x10319_x10312").ctrl(x10324) // RegWrite(x10312,x10318,x10316)
    val x10320 = x10317_b10752 // x10320 = FieldApply(x10317,end)
    val x10321_x10313 = WriteMem(x10313, x10320).name("x10321_x10313").ctrl(x10324) // RegWrite(x10313,x10320,x10316)
    val x10322 = x10317_b10750 // x10322 = FieldApply(x10317,size)
    val x10323_x10314 = WriteMem(x10314, x10322).name("x10323_x10314").ctrl(x10324) // RegWrite(x10314,x10322,x10316)
    val x10325 = ReadMem(x10314).name("x10325").ctrl(x10342) // RegRead(x10314)
    val x10326 = Counter(min=Const(0), max=x10325, step=Const(1), par=1).name("x10326").ctrl(x10342) // CounterNew(Const(0),x10325,Const(1),Const(1))
    val x10327 = CounterChain(List(x10326)).name("x10327").ctrl(x10342) // CounterChainNew(List(x10326))
    val x10341 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10327).name("x10341").ctrl(x10342) // UnrolledForeach(List(b6101, b6102, b6093),x10327,Block(Const(())),List(List(b6157)),List(List(b6158)))
    val b6157 = CounterIter(x10326, None).ctrl(x10341).name("b6157")
    val b6158 = Const(true).ctrl(x10341).name("b6158")
    val x10328 = ReadMem(x10312).name("x10328").ctrl(x10341) // RegRead(x10312)
    val x10329 = OpDef(op=FixLeq, inputs=List(x10328, b6157)).name("x10329").ctrl(x10341) // FixLeq(x10328,b6157)
    val x10330 = ReadMem(x10313).name("x10330").ctrl(x10341) // RegRead(x10313)
    val x10331 = OpDef(op=FixLt, inputs=List(b6157, x10330)).name("x10331").ctrl(x10341) // FixLt(b6157,x10330)
    val x10332 = OpDef(op=BitAnd, inputs=List(x10329, x10331)).name("x10332").ctrl(x10341) // And(x10329,x10331)
    val x10333 = OpDef(op=FixSub, inputs=List(b6157, x10328)).name("x10333").ctrl(x10341) // FixSub(b6157,x10328)
    val x10334 = OpDef(op=BitAnd, inputs=List(b6158, b6101)).name("x10334").ctrl(x10341) // And(b6158,b6101)
    val x10335 = OpDef(op=BitAnd, inputs=List(b6102, b6093)).name("x10335").ctrl(x10341) // And(b6102,b6093)
    val x10336 = OpDef(op=BitAnd, inputs=List(x10334, x10335)).name("x10336").ctrl(x10341) // And(x10334,x10335)
    val x10337_x10337 = ReadMem(x10272).name("x10337").ctrl(x10341) // ParStreamRead(x10272,List(x10336))
    val x10338_x10338 = x10337_x10337 // x10338 = VectorApply(x10337,0)
    val x10339 = OpDef(op=BitAnd, inputs=List(x10332, x10336)).name("x10339").ctrl(x10341) // And(x10332,x10336)
    val x10340 = StoreBanks(List(x9988_d0_b0, x9988_d1_b0), List(b6100, x10333), x10338_x10338).name("x10340").ctrl(x10341) // ParSRAMStore(x9988,List(List(b6100, x10333)),List(x10338),List(x10339))
    val x10344 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10344").ctrl(x10682) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10345 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10345").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10346 = CounterChain(List(x10345,x10344)).name("x10346").ctrl(x10682) // CounterChainNew(List(x10345, x10344))
    val x10459 = LoopController(style=MetaPipe, level=OuterControl, cchain=x10346).name("x10459").ctrl(x10682) // UnrolledForeach(List(b6093),x10346,Block(Const(())),List(List(b6178), List(b6179)),List(List(b6180), List(b6181)))
    val b6178 = CounterIter(x10345, Some(0)).ctrl(x10459).name("b6178")
    val b6180 = Const(true).ctrl(x10459).name("b6180")
    val b6179 = CounterIter(x10344, Some(0)).ctrl(x10459).name("b6179")
    val b6181 = Const(true).ctrl(x10459).name("b6181")
    val x10347_d0 = Reg(init=Some(0.0)).name("x10347_d0").ctrl(x10459) // x10347 = RegNew(Const(0))
    isAccum(x10347_d0) = false
    bufferDepthOf(x10347_d0) = 2
    val x10347_d1 = Reg(init=Some(0.0)).name("x10347_d1").ctrl(x10459) // x10347 = RegNew(Const(0))
    isAccum(x10347_d1) = true
    bufferDepthOf(x10347_d1) = 1
    val x10348 = Counter(min=Const(0), max=Const(65), step=Const(1), par=1).name("x10348").ctrl(x10459) // CounterNew(Const(0),Const(65),Const(1),Const(1))
    val x10349 = CounterChain(List(x10348)).name("x10349").ctrl(x10459) // CounterChainNew(List(x10348))
    val x10364 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10349).name("x10364").ctrl(x10459) // UnrolledReduce(List(b6180, b6181, b6093),x10349,x10347,Block((x10347) => Const(())),List(List(b6185)),List(List(b6186)))
    val b6185 = CounterIter(x10348, None).ctrl(x10364).name("b6185")
    val b6186 = Const(true).ctrl(x10364).name("b6186")
    val x10350 = OpDef(op=BitAnd, inputs=List(b6186, b6180)).name("x10350").ctrl(x10364) // And(b6186,b6180)
    val x10351 = OpDef(op=BitAnd, inputs=List(b6181, b6093)).name("x10351").ctrl(x10364) // And(b6181,b6093)
    val x10352 = OpDef(op=BitAnd, inputs=List(x10350, x10351)).name("x10352").ctrl(x10364) // And(x10350,x10351)
    val x10353 = LoadBanks(List(x9988_d1_b0), List(b6178, b6185)).name("x10353").ctrl(x10364) // ParSRAMLoad(x9988,List(List(b6178, b6185)),List(x10352))
    val x10354 = x10353 // x10354 = VectorApply(x10353,0)
    val x10355 = LoadBanks(List(x9976_d0_b0), List(b6185, b6179)).name("x10355").ctrl(x10364) // ParSRAMLoad(x9976,List(List(b6185, b6179)),List(x10352))
    val x10356 = x10355 // x10356 = VectorApply(x10355,0)
    val x10357 = OpDef(op=FixMul, inputs=List(x10354, x10356)).name("x10357").ctrl(x10364) // FixMul(x10354,x10356)
    val x10358 = ReadMem(x10347_d1).name("x10358").ctrl(x10364) // RegRead(x10347)
    val x10359 = OpDef(op=FixEql, inputs=List(b6185, Const(0))).name("x10359").ctrl(x10364) // FixEql(b6185,Const(0))
    val x10360 = ReduceAccumOp(op=FixAdd, input=x10357, accum=x10358).name("x10360").ctrl(x10364) // FixAdd(x10357,x10358)
    val x10361 = OpDef(op=BitAnd, inputs=List(b6180, b6181)).name("x10361").ctrl(x10364) // And(b6180,b6181)
    val x10362 = OpDef(op=BitAnd, inputs=List(x10361, b6093)).name("x10362").ctrl(x10364) // And(x10361,b6093)
    val x10363_x10347_d0 = WriteMem(x10347_d0, x10360).name("x10363_x10347_d0").ctrl(x10364) // RegWrite(x10347,x10360,x10362)
    val x10363_x10347_d1 = WriteMem(x10347_d1, x10360).name("x10363_x10347_d1").ctrl(x10364) // RegWrite(x10347,x10360,x10362)
    val x10365 = Reg(init=Some(0.0)).name("x10365").ctrl(x10459) // x10365 = RegNew(Const(0))
    isAccum(x10365) = false
    bufferDepthOf(x10365) = 3
    val x10366_d0 = Reg(init=Some(0.0)).name("x10366_d0").ctrl(x10459) // x10366 = RegNew(Const(0))
    isAccum(x10366_d0) = false
    bufferDepthOf(x10366_d0) = 2
    val x10366_d1 = Reg(init=Some(0.0)).name("x10366_d1").ctrl(x10459) // x10366 = RegNew(Const(0))
    isAccum(x10366_d1) = true
    bufferDepthOf(x10366_d1) = 1
    val x10373 = UnitController(style=SeqPipe, level=InnerControl).name("x10373").ctrl(x10459) // UnitPipe(List(b6180, b6181, b6093),Block(Const(())))
    val x10367 = OpDef(op=BitAnd, inputs=List(b6180, b6181)).name("x10367").ctrl(x10373) // And(b6180,b6181)
    val x10368 = OpDef(op=BitAnd, inputs=List(x10367, b6093)).name("x10368").ctrl(x10373) // And(x10367,b6093)
    val x10369 = LoadBanks(List(x9977_d0_b0), List(b6179)).name("x10369").ctrl(x10373) // SRAMLoad(x9977,ArrayBuffer(Const(512)),List(b6179),Const(0),x10368)
    val x10370 = ReadMem(x10347_d0).name("x10370").ctrl(x10373) // RegRead(x10347)
    val x10371 = OpDef(op=FixAdd, inputs=List(x10369, x10370)).name("x10371").ctrl(x10373) // FixAdd(x10369,x10370)
    val x10372_x10365 = WriteMem(x10365, x10371).name("x10372_x10365").ctrl(x10373) // RegWrite(x10365,x10371,x10368)
    val x10374 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10374").ctrl(x10459) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10375 = CounterChain(List(x10374)).name("x10375").ctrl(x10459) // CounterChainNew(List(x10374))
    val x10390 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10375).name("x10390").ctrl(x10459) // UnrolledReduce(List(b6180, b6181, b6093),x10375,x10366,Block((x10366) => Const(())),List(List(b6213)),List(List(b6214)))
    val b6213 = CounterIter(x10374, None).ctrl(x10390).name("b6213")
    val b6214 = Const(true).ctrl(x10390).name("b6214")
    val x10376 = OpDef(op=BitAnd, inputs=List(b6214, b6180)).name("x10376").ctrl(x10390) // And(b6214,b6180)
    val x10377 = OpDef(op=BitAnd, inputs=List(b6181, b6093)).name("x10377").ctrl(x10390) // And(b6181,b6093)
    val x10378 = OpDef(op=BitAnd, inputs=List(x10376, x10377)).name("x10378").ctrl(x10390) // And(x10376,x10377)
    val x10379 = LoadBanks(List(x9987_d3_b0), List(b6178, b6213)).name("x10379").ctrl(x10390) // ParSRAMLoad(x9987,List(List(b6178, b6213)),List(x10378))
    val x10380 = x10379 // x10380 = VectorApply(x10379,0)
    val x10381 = LoadBanks(List(x9978_d0_b0), List(b6213, b6179)).name("x10381").ctrl(x10390) // ParSRAMLoad(x9978,List(List(b6213, b6179)),List(x10378))
    val x10382 = x10381 // x10382 = VectorApply(x10381,0)
    val x10383 = OpDef(op=FixMul, inputs=List(x10380, x10382)).name("x10383").ctrl(x10390) // FixMul(x10380,x10382)
    val x10384 = ReadMem(x10366_d1).name("x10384").ctrl(x10390) // RegRead(x10366)
    val x10385 = OpDef(op=FixEql, inputs=List(b6213, Const(0))).name("x10385").ctrl(x10390) // FixEql(b6213,Const(0))
    val x10386 = ReduceAccumOp(op=FixAdd, input=x10383, accum=x10384).name("x10386").ctrl(x10390) // FixAdd(x10383,x10384)
    val x10387 = OpDef(op=BitAnd, inputs=List(b6180, b6181)).name("x10387").ctrl(x10390) // And(b6180,b6181)
    val x10388 = OpDef(op=BitAnd, inputs=List(x10387, b6093)).name("x10388").ctrl(x10390) // And(x10387,b6093)
    val x10389_x10366_d0 = WriteMem(x10366_d0, x10386).name("x10389_x10366_d0").ctrl(x10390) // RegWrite(x10366,x10386,x10388)
    val x10389_x10366_d1 = WriteMem(x10366_d1, x10386).name("x10389_x10366_d1").ctrl(x10390) // RegWrite(x10366,x10386,x10388)
    val x10391_d0 = Reg(init=Some(0.0)).name("x10391_d0").ctrl(x10459) // x10391 = RegNew(Const(0))
    isAccum(x10391_d0) = false
    bufferDepthOf(x10391_d0) = 2
    val x10391_d1 = Reg(init=Some(0.0)).name("x10391_d1").ctrl(x10459) // x10391 = RegNew(Const(0))
    isAccum(x10391_d1) = false
    bufferDepthOf(x10391_d1) = 2
    val x10391_d2 = Reg(init=Some(0.0)).name("x10391_d2").ctrl(x10459) // x10391 = RegNew(Const(0))
    isAccum(x10391_d2) = false
    bufferDepthOf(x10391_d2) = 2
    val x10391_d3 = Reg(init=Some(0.0)).name("x10391_d3").ctrl(x10459) // x10391 = RegNew(Const(0))
    isAccum(x10391_d3) = false
    bufferDepthOf(x10391_d3) = 2
    val x10392_d0 = Reg(init=Some(false)).name("x10392_d0").ctrl(x10459) // x10392 = RegNew(Const(false))
    isAccum(x10392_d0) = false
    bufferDepthOf(x10392_d0) = 2
    val x10392_d1 = Reg(init=Some(false)).name("x10392_d1").ctrl(x10459) // x10392 = RegNew(Const(false))
    isAccum(x10392_d1) = false
    bufferDepthOf(x10392_d1) = 2
    val x10393_d0 = Reg(init=Some(false)).name("x10393_d0").ctrl(x10459) // x10393 = RegNew(Const(false))
    isAccum(x10393_d0) = false
    bufferDepthOf(x10393_d0) = 2
    val x10393_d1 = Reg(init=Some(false)).name("x10393_d1").ctrl(x10459) // x10393 = RegNew(Const(false))
    isAccum(x10393_d1) = false
    bufferDepthOf(x10393_d1) = 2
    val x10394_d0 = Reg(init=Some(false)).name("x10394_d0").ctrl(x10459) // x10394 = RegNew(Const(false))
    isAccum(x10394_d0) = false
    bufferDepthOf(x10394_d0) = 2
    val x10394_d1 = Reg(init=Some(false)).name("x10394_d1").ctrl(x10459) // x10394 = RegNew(Const(false))
    isAccum(x10394_d1) = false
    bufferDepthOf(x10394_d1) = 2
    val x10395_d0 = Reg(init=Some(false)).name("x10395_d0").ctrl(x10459) // x10395 = RegNew(Const(false))
    isAccum(x10395_d0) = false
    bufferDepthOf(x10395_d0) = 2
    val x10395_d1 = Reg(init=Some(false)).name("x10395_d1").ctrl(x10459) // x10395 = RegNew(Const(false))
    isAccum(x10395_d1) = false
    bufferDepthOf(x10395_d1) = 2
    val x10422 = UnitController(style=SeqPipe, level=InnerControl).name("x10422").ctrl(x10459) // UnitPipe(List(b6180, b6181, b6093),Block(Const(())))
    val x10396 = OpDef(op=BitAnd, inputs=List(b6180, b6181)).name("x10396").ctrl(x10422) // And(b6180,b6181)
    val x10397 = OpDef(op=BitAnd, inputs=List(x10396, b6093)).name("x10397").ctrl(x10422) // And(x10396,b6093)
    val x10398 = LoadBanks(List(x9979_d0_b0), List(b6179)).name("x10398").ctrl(x10422) // SRAMLoad(x9979,ArrayBuffer(Const(512)),List(b6179),Const(0),x10397)
    val x10399 = ReadMem(x10366_d0).name("x10399").ctrl(x10422) // RegRead(x10366)
    val x10400 = OpDef(op=FixAdd, inputs=List(x10398, x10399)).name("x10400").ctrl(x10422) // FixAdd(x10398,x10399)
    val x10401 = ReadMem(x10365).name("x10401").ctrl(x10422) // RegRead(x10365)
    val x10402 = OpDef(op=FixAdd, inputs=List(x10400, x10401)).name("x10402").ctrl(x10422) // FixAdd(x10400,x10401)
    val x10403 = OpDef(op=FixLt, inputs=List(b6179, Const(128))).name("x10403").ctrl(x10422) // FixLt(b6179,Const(128))
    val x10404 = OpDef(op=BitNot, inputs=List(x10403)).name("x10404").ctrl(x10422) // Not(x10403)
    val x10405 = OpDef(op=FixLeq, inputs=List(Const(128), b6179)).name("x10405").ctrl(x10422) // FixLeq(Const(128),b6179)
    val x10406 = OpDef(op=FixLt, inputs=List(b6179, Const(256))).name("x10406").ctrl(x10422) // FixLt(b6179,Const(256))
    val x10407 = OpDef(op=BitAnd, inputs=List(x10405, x10406)).name("x10407").ctrl(x10422) // And(x10405,x10406)
    val x10408 = OpDef(op=BitAnd, inputs=List(x10407, x10404)).name("x10408").ctrl(x10422) // And(x10407,x10404)
    val x10409 = OpDef(op=BitNot, inputs=List(x10407)).name("x10409").ctrl(x10422) // Not(x10407)
    val x10410 = OpDef(op=BitAnd, inputs=List(x10409, x10404)).name("x10410").ctrl(x10422) // And(x10409,x10404)
    val x10411 = OpDef(op=FixLeq, inputs=List(Const(256), b6179)).name("x10411").ctrl(x10422) // FixLeq(Const(256),b6179)
    val x10412 = OpDef(op=FixLt, inputs=List(b6179, Const(384))).name("x10412").ctrl(x10422) // FixLt(b6179,Const(384))
    val x10413 = OpDef(op=BitAnd, inputs=List(x10411, x10412)).name("x10413").ctrl(x10422) // And(x10411,x10412)
    val x10414 = OpDef(op=BitAnd, inputs=List(x10413, x10410)).name("x10414").ctrl(x10422) // And(x10413,x10410)
    val x10415 = OpDef(op=BitNot, inputs=List(x10413)).name("x10415").ctrl(x10422) // Not(x10413)
    val x10416 = OpDef(op=BitAnd, inputs=List(x10415, x10410)).name("x10416").ctrl(x10422) // And(x10415,x10410)
    val x10417_x10391_d0 = WriteMem(x10391_d0, x10402).name("x10417_x10391_d0").ctrl(x10422) // RegWrite(x10391,x10402,x10397)
    val x10417_x10391_d1 = WriteMem(x10391_d1, x10402).name("x10417_x10391_d1").ctrl(x10422) // RegWrite(x10391,x10402,x10397)
    val x10417_x10391_d2 = WriteMem(x10391_d2, x10402).name("x10417_x10391_d2").ctrl(x10422) // RegWrite(x10391,x10402,x10397)
    val x10417_x10391_d3 = WriteMem(x10391_d3, x10402).name("x10417_x10391_d3").ctrl(x10422) // RegWrite(x10391,x10402,x10397)
    val x10418_x10392_d0 = WriteMem(x10392_d0, x10403).name("x10418_x10392_d0").ctrl(x10422) // RegWrite(x10392,x10403,x10397)
    val x10418_x10392_d1 = WriteMem(x10392_d1, x10403).name("x10418_x10392_d1").ctrl(x10422) // RegWrite(x10392,x10403,x10397)
    val x10419_x10393_d0 = WriteMem(x10393_d0, x10408).name("x10419_x10393_d0").ctrl(x10422) // RegWrite(x10393,x10408,x10397)
    val x10419_x10393_d1 = WriteMem(x10393_d1, x10408).name("x10419_x10393_d1").ctrl(x10422) // RegWrite(x10393,x10408,x10397)
    val x10420_x10394_d0 = WriteMem(x10394_d0, x10414).name("x10420_x10394_d0").ctrl(x10422) // RegWrite(x10394,x10414,x10397)
    val x10420_x10394_d1 = WriteMem(x10394_d1, x10414).name("x10420_x10394_d1").ctrl(x10422) // RegWrite(x10394,x10414,x10397)
    val x10421_x10395_d0 = WriteMem(x10395_d0, x10416).name("x10421_x10395_d0").ctrl(x10422) // RegWrite(x10395,x10416,x10397)
    val x10421_x10395_d1 = WriteMem(x10395_d1, x10416).name("x10421_x10395_d1").ctrl(x10422) // RegWrite(x10395,x10416,x10397)
    val x10423 = ReadMem(x10395_d1).name("x10423").ctrl(x10459) // RegRead(x10395)
    val x10424 = ReadMem(x10394_d1).name("x10424").ctrl(x10459) // RegRead(x10394)
    val x10425 = ReadMem(x10393_d1).name("x10425").ctrl(x10459) // RegRead(x10393)
    val x10426 = ReadMem(x10392_d1).name("x10426").ctrl(x10459) // RegRead(x10392)
    val x10458 = UnitController(style=ForkSwitch, level=OuterControl).name("x10458").ctrl(x10459) // //TODO Switch(Block(x10457),List(x10426, x10425, x10424, x10423),List(x10433, x10441, x10449, x10457))
    val x10433 = UnitController(style=MetaPipe, level=InnerControl).name("x10433").ctrl(x10458) // //TODO SwitchCase(Block(x10432))
    val x10427 = ReadMem(x10392_d0).name("x10427").ctrl(x10433) // RegRead(x10392)
    val x10428 = ReadMem(x10391_d3).name("x10428").ctrl(x10433) // RegRead(x10391)
    val x10429 = OpDef(op=BitAnd, inputs=List(b6180, b6181)).name("x10429").ctrl(x10433) // And(b6180,b6181)
    val x10430 = OpDef(op=BitAnd, inputs=List(x10429, b6093)).name("x10430").ctrl(x10433) // And(x10429,b6093)
    val x10431 = OpDef(op=BitAnd, inputs=List(x10427, x10430)).name("x10431").ctrl(x10433) // And(x10427,x10430)
    val x10432 = StoreBanks(List(x9989_d0_b0, x9989_d1_b0), List(b6178, b6179), x10428).name("x10432").ctrl(x10433) // SRAMStore(x9989,ArrayBuffer(Const(1), Const(128)),List(b6178, b6179),Const(0),x10428,x10431)
    val x10441 = UnitController(style=MetaPipe, level=InnerControl).name("x10441").ctrl(x10458) // //TODO SwitchCase(Block(x10440))
    val x10434 = OpDef(op=FixSub, inputs=List(b6179, Const(128))).name("x10434").ctrl(x10441) // FixSub(b6179,Const(128))
    val x10435 = ReadMem(x10393_d0).name("x10435").ctrl(x10441) // RegRead(x10393)
    val x10436 = ReadMem(x10391_d2).name("x10436").ctrl(x10441) // RegRead(x10391)
    val x10437 = OpDef(op=BitAnd, inputs=List(b6180, b6181)).name("x10437").ctrl(x10441) // And(b6180,b6181)
    val x10438 = OpDef(op=BitAnd, inputs=List(x10437, b6093)).name("x10438").ctrl(x10441) // And(x10437,b6093)
    val x10439 = OpDef(op=BitAnd, inputs=List(x10435, x10438)).name("x10439").ctrl(x10441) // And(x10435,x10438)
    val x10440 = StoreBanks(List(x9990_d0_b0, x9990_d1_b0), List(b6178, x10434), x10436).name("x10440").ctrl(x10441) // SRAMStore(x9990,ArrayBuffer(Const(1), Const(128)),List(b6178, x10434),Const(0),x10436,x10439)
    val x10449 = UnitController(style=MetaPipe, level=InnerControl).name("x10449").ctrl(x10458) // //TODO SwitchCase(Block(x10448))
    val x10442 = OpDef(op=FixSub, inputs=List(b6179, Const(256))).name("x10442").ctrl(x10449) // FixSub(b6179,Const(256))
    val x10443 = ReadMem(x10394_d0).name("x10443").ctrl(x10449) // RegRead(x10394)
    val x10444 = ReadMem(x10391_d1).name("x10444").ctrl(x10449) // RegRead(x10391)
    val x10445 = OpDef(op=BitAnd, inputs=List(b6180, b6181)).name("x10445").ctrl(x10449) // And(b6180,b6181)
    val x10446 = OpDef(op=BitAnd, inputs=List(x10445, b6093)).name("x10446").ctrl(x10449) // And(x10445,b6093)
    val x10447 = OpDef(op=BitAnd, inputs=List(x10443, x10446)).name("x10447").ctrl(x10449) // And(x10443,x10446)
    val x10448 = StoreBanks(List(x9991_d0_b0, x9991_d1_b0), List(b6178, x10442), x10444).name("x10448").ctrl(x10449) // SRAMStore(x9991,ArrayBuffer(Const(1), Const(128)),List(b6178, x10442),Const(0),x10444,x10447)
    val x10457 = UnitController(style=MetaPipe, level=InnerControl).name("x10457").ctrl(x10458) // //TODO SwitchCase(Block(x10456))
    val x10450 = OpDef(op=FixSub, inputs=List(b6179, Const(384))).name("x10450").ctrl(x10457) // FixSub(b6179,Const(384))
    val x10451 = ReadMem(x10395_d0).name("x10451").ctrl(x10457) // RegRead(x10395)
    val x10452 = ReadMem(x10391_d0).name("x10452").ctrl(x10457) // RegRead(x10391)
    val x10453 = OpDef(op=BitAnd, inputs=List(b6180, b6181)).name("x10453").ctrl(x10457) // And(b6180,b6181)
    val x10454 = OpDef(op=BitAnd, inputs=List(x10453, b6093)).name("x10454").ctrl(x10457) // And(x10453,b6093)
    val x10455 = OpDef(op=BitAnd, inputs=List(x10451, x10454)).name("x10455").ctrl(x10457) // And(x10451,x10454)
    val x10456 = StoreBanks(List(x9992_d0_b0, x9992_d1_b0), List(b6178, x10450), x10452).name("x10456").ctrl(x10457) // SRAMStore(x9992,ArrayBuffer(Const(1), Const(128)),List(b6178, x10450),Const(0),x10452,x10455)
    val x10460 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10460").ctrl(x10682) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10461 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10461").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10462 = CounterChain(List(x10461,x10460)).name("x10462").ctrl(x10682) // CounterChainNew(List(x10461, x10460))
    val x10478 = LoopController(style=MetaPipe, level=OuterControl, cchain=x10462).name("x10478").ctrl(x10682) // UnrolledForeach(List(b6093),x10462,Block(Const(())),List(List(b6302), List(b6303)),List(List(b6304), List(b6305)))
    val b6302 = CounterIter(x10461, Some(0)).ctrl(x10478).name("b6302")
    val b6304 = Const(true).ctrl(x10478).name("b6304")
    val b6303 = CounterIter(x10460, Some(0)).ctrl(x10478).name("b6303")
    val b6305 = Const(true).ctrl(x10478).name("b6305")
    val x10477 = UnitController(style=SeqPipe, level=InnerControl).name("x10477").ctrl(x10478) // UnitPipe(List(b6304, b6305, b6093),Block(x10476))
    val x10463 = OpDef(op=BitAnd, inputs=List(b6304, b6305)).name("x10463").ctrl(x10477) // And(b6304,b6305)
    val x10464 = OpDef(op=BitAnd, inputs=List(x10463, b6093)).name("x10464").ctrl(x10477) // And(x10463,b6093)
    val x10465 = LoadBanks(List(x9986_d3_b0), List(b6302, b6303)).name("x10465").ctrl(x10477) // SRAMLoad(x9986,ArrayBuffer(Const(1), Const(128)),List(b6302, b6303),Const(0),x10464)
    val x10466 = LoadBanks(List(x9990_d1_b0), List(b6302, b6303)).name("x10466").ctrl(x10477) // SRAMLoad(x9990,ArrayBuffer(Const(1), Const(128)),List(b6302, b6303),Const(0),x10464)
    val x10467 = OpDef(op=FixMul, inputs=List(x10465, x10466)).name("x10467").ctrl(x10477) // FixMul(x10465,x10466)
    val x10468 = LoadBanks(List(x9989_d1_b0), List(b6302, b6303)).name("x10468").ctrl(x10477) // SRAMLoad(x9989,ArrayBuffer(Const(1), Const(128)),List(b6302, b6303),Const(0),x10464)
    val x10469 = LoadBanks(List(x9992_d1_b0), List(b6302, b6303)).name("x10469").ctrl(x10477) // SRAMLoad(x9992,ArrayBuffer(Const(1), Const(128)),List(b6302, b6303),Const(0),x10464)
    val x10470 = OpDef(op=FixMul, inputs=List(x10468, x10469)).name("x10470").ctrl(x10477) // FixMul(x10468,x10469)
    val x10471 = OpDef(op=FixAdd, inputs=List(x10467, x10470)).name("x10471").ctrl(x10477) // FixAdd(x10467,x10470)
    val x10472 = StoreBanks(List(x9986_d0_b0, x9986_d1_b0, x9986_d2_b0, x9986_d3_b0), List(b6302, b6303), x10471).name("x10472").ctrl(x10477) // SRAMStore(x9986,ArrayBuffer(Const(1), Const(128)),List(b6302, b6303),Const(0),x10471,x10464)
    val x10473 = LoadBanks(List(x9986_d2_b0), List(b6302, b6303)).name("x10473").ctrl(x10477) // SRAMLoad(x9986,ArrayBuffer(Const(1), Const(128)),List(b6302, b6303),Const(0),x10464)
    val x10474 = LoadBanks(List(x9991_d1_b0), List(b6302, b6303)).name("x10474").ctrl(x10477) // SRAMLoad(x9991,ArrayBuffer(Const(1), Const(128)),List(b6302, b6303),Const(0),x10464)
    val x10475 = OpDef(op=FixMul, inputs=List(x10473, x10474)).name("x10475").ctrl(x10477) // FixMul(x10473,x10474)
    val x10476 = StoreBanks(List(x9987_d0_b0, x9987_d1_b0, x9987_d2_b0, x9987_d3_b0), List(b6302, b6303), x10475).name("x10476").ctrl(x10477) // SRAMStore(x9987,ArrayBuffer(Const(1), Const(128)),List(b6302, b6303),Const(0),x10475,x10464)
    val x10479 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x10479").ctrl(x10682) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x10480 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10480").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10481 = CounterChain(List(x10480,x10479)).name("x10481").ctrl(x10682) // CounterChainNew(List(x10480, x10479))
    val x10594 = LoopController(style=MetaPipe, level=OuterControl, cchain=x10481).name("x10594").ctrl(x10682) // UnrolledForeach(List(b6093),x10481,Block(Const(())),List(List(b6325), List(b6326)),List(List(b6327), List(b6328)))
    val b6325 = CounterIter(x10480, Some(0)).ctrl(x10594).name("b6325")
    val b6327 = Const(true).ctrl(x10594).name("b6327")
    val b6326 = CounterIter(x10479, Some(0)).ctrl(x10594).name("b6326")
    val b6328 = Const(true).ctrl(x10594).name("b6328")
    val x10482_d0 = Reg(init=Some(0.0)).name("x10482_d0").ctrl(x10594) // x10482 = RegNew(Const(0))
    isAccum(x10482_d0) = false
    bufferDepthOf(x10482_d0) = 2
    val x10482_d1 = Reg(init=Some(0.0)).name("x10482_d1").ctrl(x10594) // x10482 = RegNew(Const(0))
    isAccum(x10482_d1) = true
    bufferDepthOf(x10482_d1) = 1
    val x10483 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10483").ctrl(x10594) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10484 = CounterChain(List(x10483)).name("x10484").ctrl(x10594) // CounterChainNew(List(x10483))
    val x10499 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10484).name("x10499").ctrl(x10594) // UnrolledReduce(List(b6327, b6328, b6093),x10484,x10482,Block((x10482) => Const(())),List(List(b6332)),List(List(b6333)))
    val b6332 = CounterIter(x10483, None).ctrl(x10499).name("b6332")
    val b6333 = Const(true).ctrl(x10499).name("b6333")
    val x10485 = OpDef(op=BitAnd, inputs=List(b6333, b6327)).name("x10485").ctrl(x10499) // And(b6333,b6327)
    val x10486 = OpDef(op=BitAnd, inputs=List(b6328, b6093)).name("x10486").ctrl(x10499) // And(b6328,b6093)
    val x10487 = OpDef(op=BitAnd, inputs=List(x10485, x10486)).name("x10487").ctrl(x10499) // And(x10485,x10486)
    val x10488 = LoadBanks(List(x9988_d0_b0), List(b6325, b6332)).name("x10488").ctrl(x10499) // ParSRAMLoad(x9988,List(List(b6325, b6332)),List(x10487))
    val x10489 = x10488 // x10489 = VectorApply(x10488,0)
    val x10490 = LoadBanks(List(x9980_d0_b0), List(b6332, b6326)).name("x10490").ctrl(x10499) // ParSRAMLoad(x9980,List(List(b6332, b6326)),List(x10487))
    val x10491 = x10490 // x10491 = VectorApply(x10490,0)
    val x10492 = OpDef(op=FixMul, inputs=List(x10489, x10491)).name("x10492").ctrl(x10499) // FixMul(x10489,x10491)
    val x10493 = ReadMem(x10482_d1).name("x10493").ctrl(x10499) // RegRead(x10482)
    val x10494 = OpDef(op=FixEql, inputs=List(b6332, Const(0))).name("x10494").ctrl(x10499) // FixEql(b6332,Const(0))
    val x10495 = ReduceAccumOp(op=FixAdd, input=x10492, accum=x10493).name("x10495").ctrl(x10499) // FixAdd(x10492,x10493)
    val x10496 = OpDef(op=BitAnd, inputs=List(b6327, b6328)).name("x10496").ctrl(x10499) // And(b6327,b6328)
    val x10497 = OpDef(op=BitAnd, inputs=List(x10496, b6093)).name("x10497").ctrl(x10499) // And(x10496,b6093)
    val x10498_x10482_d0 = WriteMem(x10482_d0, x10495).name("x10498_x10482_d0").ctrl(x10499) // RegWrite(x10482,x10495,x10497)
    val x10498_x10482_d1 = WriteMem(x10482_d1, x10495).name("x10498_x10482_d1").ctrl(x10499) // RegWrite(x10482,x10495,x10497)
    val x10500 = Reg(init=Some(0.0)).name("x10500").ctrl(x10594) // x10500 = RegNew(Const(0))
    isAccum(x10500) = false
    bufferDepthOf(x10500) = 3
    val x10501_d0 = Reg(init=Some(0.0)).name("x10501_d0").ctrl(x10594) // x10501 = RegNew(Const(0))
    isAccum(x10501_d0) = false
    bufferDepthOf(x10501_d0) = 2
    val x10501_d1 = Reg(init=Some(0.0)).name("x10501_d1").ctrl(x10594) // x10501 = RegNew(Const(0))
    isAccum(x10501_d1) = true
    bufferDepthOf(x10501_d1) = 1
    val x10508 = UnitController(style=SeqPipe, level=InnerControl).name("x10508").ctrl(x10594) // UnitPipe(List(b6327, b6328, b6093),Block(Const(())))
    val x10502 = OpDef(op=BitAnd, inputs=List(b6327, b6328)).name("x10502").ctrl(x10508) // And(b6327,b6328)
    val x10503 = OpDef(op=BitAnd, inputs=List(x10502, b6093)).name("x10503").ctrl(x10508) // And(x10502,b6093)
    val x10504 = LoadBanks(List(x9981_d0_b0), List(b6326)).name("x10504").ctrl(x10508) // SRAMLoad(x9981,ArrayBuffer(Const(512)),List(b6326),Const(0),x10503)
    val x10505 = ReadMem(x10482_d0).name("x10505").ctrl(x10508) // RegRead(x10482)
    val x10506 = OpDef(op=FixAdd, inputs=List(x10504, x10505)).name("x10506").ctrl(x10508) // FixAdd(x10504,x10505)
    val x10507_x10500 = WriteMem(x10500, x10506).name("x10507_x10500").ctrl(x10508) // RegWrite(x10500,x10506,x10503)
    val x10509 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10509").ctrl(x10594) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10510 = CounterChain(List(x10509)).name("x10510").ctrl(x10594) // CounterChainNew(List(x10509))
    val x10525 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10510).name("x10525").ctrl(x10594) // UnrolledReduce(List(b6327, b6328, b6093),x10510,x10501,Block((x10501) => Const(())),List(List(b6360)),List(List(b6361)))
    val b6360 = CounterIter(x10509, None).ctrl(x10525).name("b6360")
    val b6361 = Const(true).ctrl(x10525).name("b6361")
    val x10511 = OpDef(op=BitAnd, inputs=List(b6361, b6327)).name("x10511").ctrl(x10525) // And(b6361,b6327)
    val x10512 = OpDef(op=BitAnd, inputs=List(b6328, b6093)).name("x10512").ctrl(x10525) // And(b6328,b6093)
    val x10513 = OpDef(op=BitAnd, inputs=List(x10511, x10512)).name("x10513").ctrl(x10525) // And(x10511,x10512)
    val x10514 = LoadBanks(List(x9987_d2_b0), List(b6325, b6360)).name("x10514").ctrl(x10525) // ParSRAMLoad(x9987,List(List(b6325, b6360)),List(x10513))
    val x10515 = x10514 // x10515 = VectorApply(x10514,0)
    val x10516 = LoadBanks(List(x9982_d0_b0), List(b6360, b6326)).name("x10516").ctrl(x10525) // ParSRAMLoad(x9982,List(List(b6360, b6326)),List(x10513))
    val x10517 = x10516 // x10517 = VectorApply(x10516,0)
    val x10518 = OpDef(op=FixMul, inputs=List(x10515, x10517)).name("x10518").ctrl(x10525) // FixMul(x10515,x10517)
    val x10519 = ReadMem(x10501_d1).name("x10519").ctrl(x10525) // RegRead(x10501)
    val x10520 = OpDef(op=FixEql, inputs=List(b6360, Const(0))).name("x10520").ctrl(x10525) // FixEql(b6360,Const(0))
    val x10521 = ReduceAccumOp(op=FixAdd, input=x10518, accum=x10519).name("x10521").ctrl(x10525) // FixAdd(x10518,x10519)
    val x10522 = OpDef(op=BitAnd, inputs=List(b6327, b6328)).name("x10522").ctrl(x10525) // And(b6327,b6328)
    val x10523 = OpDef(op=BitAnd, inputs=List(x10522, b6093)).name("x10523").ctrl(x10525) // And(x10522,b6093)
    val x10524_x10501_d0 = WriteMem(x10501_d0, x10521).name("x10524_x10501_d0").ctrl(x10525) // RegWrite(x10501,x10521,x10523)
    val x10524_x10501_d1 = WriteMem(x10501_d1, x10521).name("x10524_x10501_d1").ctrl(x10525) // RegWrite(x10501,x10521,x10523)
    val x10526_d0 = Reg(init=Some(0.0)).name("x10526_d0").ctrl(x10594) // x10526 = RegNew(Const(0))
    isAccum(x10526_d0) = false
    bufferDepthOf(x10526_d0) = 2
    val x10526_d1 = Reg(init=Some(0.0)).name("x10526_d1").ctrl(x10594) // x10526 = RegNew(Const(0))
    isAccum(x10526_d1) = false
    bufferDepthOf(x10526_d1) = 2
    val x10526_d2 = Reg(init=Some(0.0)).name("x10526_d2").ctrl(x10594) // x10526 = RegNew(Const(0))
    isAccum(x10526_d2) = false
    bufferDepthOf(x10526_d2) = 2
    val x10526_d3 = Reg(init=Some(0.0)).name("x10526_d3").ctrl(x10594) // x10526 = RegNew(Const(0))
    isAccum(x10526_d3) = false
    bufferDepthOf(x10526_d3) = 2
    val x10527_d0 = Reg(init=Some(false)).name("x10527_d0").ctrl(x10594) // x10527 = RegNew(Const(false))
    isAccum(x10527_d0) = false
    bufferDepthOf(x10527_d0) = 2
    val x10527_d1 = Reg(init=Some(false)).name("x10527_d1").ctrl(x10594) // x10527 = RegNew(Const(false))
    isAccum(x10527_d1) = false
    bufferDepthOf(x10527_d1) = 2
    val x10528_d0 = Reg(init=Some(false)).name("x10528_d0").ctrl(x10594) // x10528 = RegNew(Const(false))
    isAccum(x10528_d0) = false
    bufferDepthOf(x10528_d0) = 2
    val x10528_d1 = Reg(init=Some(false)).name("x10528_d1").ctrl(x10594) // x10528 = RegNew(Const(false))
    isAccum(x10528_d1) = false
    bufferDepthOf(x10528_d1) = 2
    val x10529_d0 = Reg(init=Some(false)).name("x10529_d0").ctrl(x10594) // x10529 = RegNew(Const(false))
    isAccum(x10529_d0) = false
    bufferDepthOf(x10529_d0) = 2
    val x10529_d1 = Reg(init=Some(false)).name("x10529_d1").ctrl(x10594) // x10529 = RegNew(Const(false))
    isAccum(x10529_d1) = false
    bufferDepthOf(x10529_d1) = 2
    val x10530_d0 = Reg(init=Some(false)).name("x10530_d0").ctrl(x10594) // x10530 = RegNew(Const(false))
    isAccum(x10530_d0) = false
    bufferDepthOf(x10530_d0) = 2
    val x10530_d1 = Reg(init=Some(false)).name("x10530_d1").ctrl(x10594) // x10530 = RegNew(Const(false))
    isAccum(x10530_d1) = false
    bufferDepthOf(x10530_d1) = 2
    val x10557 = UnitController(style=SeqPipe, level=InnerControl).name("x10557").ctrl(x10594) // UnitPipe(List(b6327, b6328, b6093),Block(Const(())))
    val x10531 = OpDef(op=BitAnd, inputs=List(b6327, b6328)).name("x10531").ctrl(x10557) // And(b6327,b6328)
    val x10532 = OpDef(op=BitAnd, inputs=List(x10531, b6093)).name("x10532").ctrl(x10557) // And(x10531,b6093)
    val x10533 = LoadBanks(List(x9983_d0_b0), List(b6326)).name("x10533").ctrl(x10557) // SRAMLoad(x9983,ArrayBuffer(Const(512)),List(b6326),Const(0),x10532)
    val x10534 = ReadMem(x10501_d0).name("x10534").ctrl(x10557) // RegRead(x10501)
    val x10535 = OpDef(op=FixAdd, inputs=List(x10533, x10534)).name("x10535").ctrl(x10557) // FixAdd(x10533,x10534)
    val x10536 = ReadMem(x10500).name("x10536").ctrl(x10557) // RegRead(x10500)
    val x10537 = OpDef(op=FixAdd, inputs=List(x10535, x10536)).name("x10537").ctrl(x10557) // FixAdd(x10535,x10536)
    val x10538 = OpDef(op=FixLt, inputs=List(b6326, Const(128))).name("x10538").ctrl(x10557) // FixLt(b6326,Const(128))
    val x10539 = OpDef(op=BitNot, inputs=List(x10538)).name("x10539").ctrl(x10557) // Not(x10538)
    val x10540 = OpDef(op=FixLeq, inputs=List(Const(128), b6326)).name("x10540").ctrl(x10557) // FixLeq(Const(128),b6326)
    val x10541 = OpDef(op=FixLt, inputs=List(b6326, Const(256))).name("x10541").ctrl(x10557) // FixLt(b6326,Const(256))
    val x10542 = OpDef(op=BitAnd, inputs=List(x10540, x10541)).name("x10542").ctrl(x10557) // And(x10540,x10541)
    val x10543 = OpDef(op=BitAnd, inputs=List(x10542, x10539)).name("x10543").ctrl(x10557) // And(x10542,x10539)
    val x10544 = OpDef(op=BitNot, inputs=List(x10542)).name("x10544").ctrl(x10557) // Not(x10542)
    val x10545 = OpDef(op=BitAnd, inputs=List(x10544, x10539)).name("x10545").ctrl(x10557) // And(x10544,x10539)
    val x10546 = OpDef(op=FixLeq, inputs=List(Const(256), b6326)).name("x10546").ctrl(x10557) // FixLeq(Const(256),b6326)
    val x10547 = OpDef(op=FixLt, inputs=List(b6326, Const(384))).name("x10547").ctrl(x10557) // FixLt(b6326,Const(384))
    val x10548 = OpDef(op=BitAnd, inputs=List(x10546, x10547)).name("x10548").ctrl(x10557) // And(x10546,x10547)
    val x10549 = OpDef(op=BitAnd, inputs=List(x10548, x10545)).name("x10549").ctrl(x10557) // And(x10548,x10545)
    val x10550 = OpDef(op=BitNot, inputs=List(x10548)).name("x10550").ctrl(x10557) // Not(x10548)
    val x10551 = OpDef(op=BitAnd, inputs=List(x10550, x10545)).name("x10551").ctrl(x10557) // And(x10550,x10545)
    val x10552_x10526_d0 = WriteMem(x10526_d0, x10537).name("x10552_x10526_d0").ctrl(x10557) // RegWrite(x10526,x10537,x10532)
    val x10552_x10526_d1 = WriteMem(x10526_d1, x10537).name("x10552_x10526_d1").ctrl(x10557) // RegWrite(x10526,x10537,x10532)
    val x10552_x10526_d2 = WriteMem(x10526_d2, x10537).name("x10552_x10526_d2").ctrl(x10557) // RegWrite(x10526,x10537,x10532)
    val x10552_x10526_d3 = WriteMem(x10526_d3, x10537).name("x10552_x10526_d3").ctrl(x10557) // RegWrite(x10526,x10537,x10532)
    val x10553_x10527_d0 = WriteMem(x10527_d0, x10538).name("x10553_x10527_d0").ctrl(x10557) // RegWrite(x10527,x10538,x10532)
    val x10553_x10527_d1 = WriteMem(x10527_d1, x10538).name("x10553_x10527_d1").ctrl(x10557) // RegWrite(x10527,x10538,x10532)
    val x10554_x10528_d0 = WriteMem(x10528_d0, x10543).name("x10554_x10528_d0").ctrl(x10557) // RegWrite(x10528,x10543,x10532)
    val x10554_x10528_d1 = WriteMem(x10528_d1, x10543).name("x10554_x10528_d1").ctrl(x10557) // RegWrite(x10528,x10543,x10532)
    val x10555_x10529_d0 = WriteMem(x10529_d0, x10549).name("x10555_x10529_d0").ctrl(x10557) // RegWrite(x10529,x10549,x10532)
    val x10555_x10529_d1 = WriteMem(x10529_d1, x10549).name("x10555_x10529_d1").ctrl(x10557) // RegWrite(x10529,x10549,x10532)
    val x10556_x10530_d0 = WriteMem(x10530_d0, x10551).name("x10556_x10530_d0").ctrl(x10557) // RegWrite(x10530,x10551,x10532)
    val x10556_x10530_d1 = WriteMem(x10530_d1, x10551).name("x10556_x10530_d1").ctrl(x10557) // RegWrite(x10530,x10551,x10532)
    val x10558 = ReadMem(x10530_d1).name("x10558").ctrl(x10594) // RegRead(x10530)
    val x10559 = ReadMem(x10529_d1).name("x10559").ctrl(x10594) // RegRead(x10529)
    val x10560 = ReadMem(x10528_d1).name("x10560").ctrl(x10594) // RegRead(x10528)
    val x10561 = ReadMem(x10527_d1).name("x10561").ctrl(x10594) // RegRead(x10527)
    val x10593 = UnitController(style=ForkSwitch, level=OuterControl).name("x10593").ctrl(x10594) // //TODO Switch(Block(x10592),List(x10561, x10560, x10559, x10558),List(x10568, x10576, x10584, x10592))
    val x10568 = UnitController(style=MetaPipe, level=InnerControl).name("x10568").ctrl(x10593) // //TODO SwitchCase(Block(x10567))
    val x10562 = ReadMem(x10527_d0).name("x10562").ctrl(x10568) // RegRead(x10527)
    val x10563 = ReadMem(x10526_d3).name("x10563").ctrl(x10568) // RegRead(x10526)
    val x10564 = OpDef(op=BitAnd, inputs=List(b6327, b6328)).name("x10564").ctrl(x10568) // And(b6327,b6328)
    val x10565 = OpDef(op=BitAnd, inputs=List(x10564, b6093)).name("x10565").ctrl(x10568) // And(x10564,b6093)
    val x10566 = OpDef(op=BitAnd, inputs=List(x10562, x10565)).name("x10566").ctrl(x10568) // And(x10562,x10565)
    val x10567 = StoreBanks(List(x9989_d0_b0, x9989_d1_b0), List(b6325, b6326), x10563).name("x10567").ctrl(x10568) // SRAMStore(x9989,ArrayBuffer(Const(1), Const(128)),List(b6325, b6326),Const(0),x10563,x10566)
    val x10576 = UnitController(style=MetaPipe, level=InnerControl).name("x10576").ctrl(x10593) // //TODO SwitchCase(Block(x10575))
    val x10569 = OpDef(op=FixSub, inputs=List(b6326, Const(128))).name("x10569").ctrl(x10576) // FixSub(b6326,Const(128))
    val x10570 = ReadMem(x10528_d0).name("x10570").ctrl(x10576) // RegRead(x10528)
    val x10571 = ReadMem(x10526_d2).name("x10571").ctrl(x10576) // RegRead(x10526)
    val x10572 = OpDef(op=BitAnd, inputs=List(b6327, b6328)).name("x10572").ctrl(x10576) // And(b6327,b6328)
    val x10573 = OpDef(op=BitAnd, inputs=List(x10572, b6093)).name("x10573").ctrl(x10576) // And(x10572,b6093)
    val x10574 = OpDef(op=BitAnd, inputs=List(x10570, x10573)).name("x10574").ctrl(x10576) // And(x10570,x10573)
    val x10575 = StoreBanks(List(x9990_d0_b0, x9990_d1_b0), List(b6325, x10569), x10571).name("x10575").ctrl(x10576) // SRAMStore(x9990,ArrayBuffer(Const(1), Const(128)),List(b6325, x10569),Const(0),x10571,x10574)
    val x10584 = UnitController(style=MetaPipe, level=InnerControl).name("x10584").ctrl(x10593) // //TODO SwitchCase(Block(x10583))
    val x10577 = OpDef(op=FixSub, inputs=List(b6326, Const(256))).name("x10577").ctrl(x10584) // FixSub(b6326,Const(256))
    val x10578 = ReadMem(x10529_d0).name("x10578").ctrl(x10584) // RegRead(x10529)
    val x10579 = ReadMem(x10526_d1).name("x10579").ctrl(x10584) // RegRead(x10526)
    val x10580 = OpDef(op=BitAnd, inputs=List(b6327, b6328)).name("x10580").ctrl(x10584) // And(b6327,b6328)
    val x10581 = OpDef(op=BitAnd, inputs=List(x10580, b6093)).name("x10581").ctrl(x10584) // And(x10580,b6093)
    val x10582 = OpDef(op=BitAnd, inputs=List(x10578, x10581)).name("x10582").ctrl(x10584) // And(x10578,x10581)
    val x10583 = StoreBanks(List(x9991_d0_b0, x9991_d1_b0), List(b6325, x10577), x10579).name("x10583").ctrl(x10584) // SRAMStore(x9991,ArrayBuffer(Const(1), Const(128)),List(b6325, x10577),Const(0),x10579,x10582)
    val x10592 = UnitController(style=MetaPipe, level=InnerControl).name("x10592").ctrl(x10593) // //TODO SwitchCase(Block(x10591))
    val x10585 = OpDef(op=FixSub, inputs=List(b6326, Const(384))).name("x10585").ctrl(x10592) // FixSub(b6326,Const(384))
    val x10586 = ReadMem(x10530_d0).name("x10586").ctrl(x10592) // RegRead(x10530)
    val x10587 = ReadMem(x10526_d0).name("x10587").ctrl(x10592) // RegRead(x10526)
    val x10588 = OpDef(op=BitAnd, inputs=List(b6327, b6328)).name("x10588").ctrl(x10592) // And(b6327,b6328)
    val x10589 = OpDef(op=BitAnd, inputs=List(x10588, b6093)).name("x10589").ctrl(x10592) // And(x10588,b6093)
    val x10590 = OpDef(op=BitAnd, inputs=List(x10586, x10589)).name("x10590").ctrl(x10592) // And(x10586,x10589)
    val x10591 = StoreBanks(List(x9992_d0_b0, x9992_d1_b0), List(b6325, x10585), x10587).name("x10591").ctrl(x10592) // SRAMStore(x9992,ArrayBuffer(Const(1), Const(128)),List(b6325, x10585),Const(0),x10587,x10590)
    val x10595 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10595").ctrl(x10682) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10596 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10596").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10597 = CounterChain(List(x10596,x10595)).name("x10597").ctrl(x10682) // CounterChainNew(List(x10596, x10595))
    val x10613 = LoopController(style=MetaPipe, level=OuterControl, cchain=x10597).name("x10613").ctrl(x10682) // UnrolledForeach(List(b6093),x10597,Block(Const(())),List(List(b6449), List(b6450)),List(List(b6451), List(b6452)))
    val b6449 = CounterIter(x10596, Some(0)).ctrl(x10613).name("b6449")
    val b6451 = Const(true).ctrl(x10613).name("b6451")
    val b6450 = CounterIter(x10595, Some(0)).ctrl(x10613).name("b6450")
    val b6452 = Const(true).ctrl(x10613).name("b6452")
    val x10612 = UnitController(style=SeqPipe, level=InnerControl).name("x10612").ctrl(x10613) // UnitPipe(List(b6451, b6452, b6093),Block(x10611))
    val x10598 = OpDef(op=BitAnd, inputs=List(b6451, b6452)).name("x10598").ctrl(x10612) // And(b6451,b6452)
    val x10599 = OpDef(op=BitAnd, inputs=List(x10598, b6093)).name("x10599").ctrl(x10612) // And(x10598,b6093)
    val x10600 = LoadBanks(List(x9986_d1_b0), List(b6449, b6450)).name("x10600").ctrl(x10612) // SRAMLoad(x9986,ArrayBuffer(Const(1), Const(128)),List(b6449, b6450),Const(0),x10599)
    val x10601 = LoadBanks(List(x9990_d0_b0), List(b6449, b6450)).name("x10601").ctrl(x10612) // SRAMLoad(x9990,ArrayBuffer(Const(1), Const(128)),List(b6449, b6450),Const(0),x10599)
    val x10602 = OpDef(op=FixMul, inputs=List(x10600, x10601)).name("x10602").ctrl(x10612) // FixMul(x10600,x10601)
    val x10603 = LoadBanks(List(x9989_d0_b0), List(b6449, b6450)).name("x10603").ctrl(x10612) // SRAMLoad(x9989,ArrayBuffer(Const(1), Const(128)),List(b6449, b6450),Const(0),x10599)
    val x10604 = LoadBanks(List(x9992_d0_b0), List(b6449, b6450)).name("x10604").ctrl(x10612) // SRAMLoad(x9992,ArrayBuffer(Const(1), Const(128)),List(b6449, b6450),Const(0),x10599)
    val x10605 = OpDef(op=FixMul, inputs=List(x10603, x10604)).name("x10605").ctrl(x10612) // FixMul(x10603,x10604)
    val x10606 = OpDef(op=FixAdd, inputs=List(x10602, x10605)).name("x10606").ctrl(x10612) // FixAdd(x10602,x10605)
    val x10607 = StoreBanks(List(x9986_d0_b0, x9986_d1_b0, x9986_d2_b0, x9986_d3_b0), List(b6449, b6450), x10606).name("x10607").ctrl(x10612) // SRAMStore(x9986,ArrayBuffer(Const(1), Const(128)),List(b6449, b6450),Const(0),x10606,x10599)
    val x10608 = LoadBanks(List(x9986_d0_b0), List(b6449, b6450)).name("x10608").ctrl(x10612) // SRAMLoad(x9986,ArrayBuffer(Const(1), Const(128)),List(b6449, b6450),Const(0),x10599)
    val x10609 = LoadBanks(List(x9991_d0_b0), List(b6449, b6450)).name("x10609").ctrl(x10612) // SRAMLoad(x9991,ArrayBuffer(Const(1), Const(128)),List(b6449, b6450),Const(0),x10599)
    val x10610 = OpDef(op=FixMul, inputs=List(x10608, x10609)).name("x10610").ctrl(x10612) // FixMul(x10608,x10609)
    val x10611 = StoreBanks(List(x9987_d0_b0, x9987_d1_b0, x9987_d2_b0, x9987_d3_b0), List(b6449, b6450), x10610).name("x10611").ctrl(x10612) // SRAMStore(x9987,ArrayBuffer(Const(1), Const(128)),List(b6449, b6450),Const(0),x10610,x10599)
    val x10614 = Counter(min=Const(0), max=Const(65), step=Const(1), par=1).name("x10614").ctrl(x10682) // CounterNew(Const(0),Const(65),Const(1),Const(1))
    val x10615 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10615").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10616 = CounterChain(List(x10615,x10614)).name("x10616").ctrl(x10682) // CounterChainNew(List(x10615, x10614))
    val x10642 = LoopController(style=MetaPipe, level=OuterControl, cchain=x10616).name("x10642").ctrl(x10682) // UnrolledForeach(List(b6093),x10616,Block(Const(())),List(List(b6472), List(b6473)),List(List(b6474), List(b6475)))
    val b6472 = CounterIter(x10615, Some(0)).ctrl(x10642).name("b6472")
    val b6474 = Const(true).ctrl(x10642).name("b6474")
    val b6473 = CounterIter(x10614, Some(0)).ctrl(x10642).name("b6473")
    val b6475 = Const(true).ctrl(x10642).name("b6475")
    val x10617_d0 = Reg(init=Some(0.0)).name("x10617_d0").ctrl(x10642) // x10617 = RegNew(Const(0))
    isAccum(x10617_d0) = false
    bufferDepthOf(x10617_d0) = 2
    val x10617_d1 = Reg(init=Some(0.0)).name("x10617_d1").ctrl(x10642) // x10617 = RegNew(Const(0))
    isAccum(x10617_d1) = true
    bufferDepthOf(x10617_d1) = 1
    val x10618 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10618").ctrl(x10642) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10619 = CounterChain(List(x10618)).name("x10619").ctrl(x10642) // CounterChainNew(List(x10618))
    val x10634 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10619).name("x10634").ctrl(x10642) // UnrolledReduce(List(b6474, b6475, b6093),x10619,x10617,Block((x10617) => Const(())),List(List(b6479)),List(List(b6480)))
    val b6479 = CounterIter(x10618, None).ctrl(x10634).name("b6479")
    val b6480 = Const(true).ctrl(x10634).name("b6480")
    val x10620 = OpDef(op=BitAnd, inputs=List(b6480, b6474)).name("x10620").ctrl(x10634) // And(b6480,b6474)
    val x10621 = OpDef(op=BitAnd, inputs=List(b6475, b6093)).name("x10621").ctrl(x10634) // And(b6475,b6093)
    val x10622 = OpDef(op=BitAnd, inputs=List(x10620, x10621)).name("x10622").ctrl(x10634) // And(x10620,x10621)
    val x10623 = LoadBanks(List(x9987_d1_b0), List(b6472, b6479)).name("x10623").ctrl(x10634) // ParSRAMLoad(x9987,List(List(b6472, b6479)),List(x10622))
    val x10624 = x10623 // x10624 = VectorApply(x10623,0)
    val x10625 = LoadBanks(List(x9984_d0_b0), List(b6479, b6473)).name("x10625").ctrl(x10634) // ParSRAMLoad(x9984,List(List(b6479, b6473)),List(x10622))
    val x10626 = x10625 // x10626 = VectorApply(x10625,0)
    val x10627 = OpDef(op=FixMul, inputs=List(x10624, x10626)).name("x10627").ctrl(x10634) // FixMul(x10624,x10626)
    val x10628 = ReadMem(x10617_d1).name("x10628").ctrl(x10634) // RegRead(x10617)
    val x10629 = OpDef(op=FixEql, inputs=List(b6479, Const(0))).name("x10629").ctrl(x10634) // FixEql(b6479,Const(0))
    val x10630 = ReduceAccumOp(op=FixAdd, input=x10627, accum=x10628).name("x10630").ctrl(x10634) // FixAdd(x10627,x10628)
    val x10631 = OpDef(op=BitAnd, inputs=List(b6474, b6475)).name("x10631").ctrl(x10634) // And(b6474,b6475)
    val x10632 = OpDef(op=BitAnd, inputs=List(x10631, b6093)).name("x10632").ctrl(x10634) // And(x10631,b6093)
    val x10633_x10617_d0 = WriteMem(x10617_d0, x10630).name("x10633_x10617_d0").ctrl(x10634) // RegWrite(x10617,x10630,x10632)
    val x10633_x10617_d1 = WriteMem(x10617_d1, x10630).name("x10633_x10617_d1").ctrl(x10634) // RegWrite(x10617,x10630,x10632)
    val x10641 = UnitController(style=SeqPipe, level=InnerControl).name("x10641").ctrl(x10642) // UnitPipe(List(b6474, b6475, b6093),Block(Const(())))
    val x10635 = OpDef(op=BitAnd, inputs=List(b6474, b6475)).name("x10635").ctrl(x10641) // And(b6474,b6475)
    val x10636 = OpDef(op=BitAnd, inputs=List(x10635, b6093)).name("x10636").ctrl(x10641) // And(x10635,b6093)
    val x10637 = LoadBanks(List(x9985_d0_b0), List(b6473)).name("x10637").ctrl(x10641) // SRAMLoad(x9985,ArrayBuffer(Const(65)),List(b6473),Const(0),x10636)
    val x10638 = ReadMem(x10617_d0).name("x10638").ctrl(x10641) // RegRead(x10617)
    val x10639 = OpDef(op=FixAdd, inputs=List(x10638, x10637)).name("x10639").ctrl(x10641) // FixAdd(x10638,x10637)
    val x10640 = StoreBanks(List(x9987_d0_b0, x9987_d1_b0, x9987_d2_b0, x9987_d3_b0), List(b6472, b6473), x10639).name("x10640").ctrl(x10641) // SRAMStore(x9987,ArrayBuffer(Const(1), Const(128)),List(b6472, b6473),Const(0),x10639,x10636)
    val x10643 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10643").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10644 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x10644").ctrl(x10682) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x10645 = CounterChain(List(x10643,x10644)).name("x10645").ctrl(x10682) // CounterChainNew(List(x10643, x10644))
    val x10681 = LoopController(style=StreamPipe, level=OuterControl, cchain=x10645).name("x10681").ctrl(x10682) // UnrolledForeach(List(b6093),x10645,Block(Const(())),List(List(b6507), List(b6508)),List(List(b6509), List(b6510)))
    val b6507 = CounterIter(x10643, Some(0)).ctrl(x10681).name("b6507")
    val b6509 = Const(true).ctrl(x10681).name("b6509")
    val b6508 = CounterIter(x10644, Some(0)).ctrl(x10681).name("b6508")
    val b6510 = Const(true).ctrl(x10681).name("b6510")
    val b10753 = StreamOut(field="offset").name("b10753").ctrl(x10681) // x10646 = StreamOutNew(BurstCmdBus)
    val b10754 = StreamOut(field="size").name("b10754").ctrl(x10681) // x10646 = StreamOutNew(BurstCmdBus)
    val x10647 = StreamOut(field="data").name("x10647").ctrl(x10681) // x10647 = StreamOutNew(BurstFullDataBus())
    val x10648 = StreamIn(field="ack").name("x10648").ctrl(x10681) // x10648 = StreamInNew(BurstAckBus)
    val x10665 = UnitController(style=SeqPipe, level=InnerControl).name("x10665").ctrl(x10681) // UnitPipe(List(b6509, b6510, b6093),Block(x10664))
    val x10649 = OpDef(op=FixAdd, inputs=List(b6092, b6507)).name("x10649").ctrl(x10665) // FixAdd(b6092,b6507)
    val x10650 = x10649 // FixConvert(x10649,TRUE,_32,_0)
    val x10651 = OpDef(op=FixMul, inputs=List(x10650, Const(65))).name("x10651").ctrl(x10665) // FixMul(x10650,Const(65))
    val x10652 = b6508 // FixConvert(b6508,TRUE,_32,_0)
    val x10653 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x10654 = OpDef(op=FixAdd, inputs=List(x10651, x10652)).name("x10654").ctrl(x10665) // FixAdd(x10651,x10652)
    val x10655 = OpDef(op=FixAdd, inputs=List(x10654, x10653)).name("x10655").ctrl(x10665) // FixAdd(x10654,x10653)
    val x10656 = OpDef(op=FixSla, inputs=List(x10655, Const(2))).name("x10656").ctrl(x10665) // FixLsh(x10655,Const(2))
    val x10657 = x10656 // FixConvert(x10656,TRUE,_64,_0)
    val x10658 = DramAddress(x9975).name("x10658").ctrl(x10665) // GetDRAMAddress(x9975)
    val x10659 = OpDef(op=FixAdd, inputs=List(x10657, x10658)).name("x10659").ctrl(x10665) // FixAdd(x10657,x10658)
    val x10661_x10660 = x10659 // FixConvert(x10659,TRUE,_64,_0)
    // x10661 = SimpleStruct(ArrayBuffer((offset,x10660), (size,Const(512)), (isLoad,Const(false))))
    val x10662 = OpDef(op=BitAnd, inputs=List(b6509, b6510)).name("x10662").ctrl(x10665) // And(b6509,b6510)
    val x10663 = OpDef(op=BitAnd, inputs=List(x10662, b6093)).name("x10663").ctrl(x10665) // And(x10662,b6093)
    val b10755_b10753 = WriteMem(b10753, x10661_x10660).name("b10755_b10753").ctrl(x10665) // StreamWrite(x10646,x10661,x10663)
    val b10756_b10754 = WriteMem(b10754, Const(512)).name("b10756_b10754").ctrl(x10665) // StreamWrite(x10646,x10661,x10663)
    val x10666 = Counter(min=Const(0), max=Const(128), step=Const(1), par=1).name("x10666").ctrl(x10681) // CounterNew(Const(0),Const(128),Const(1),Const(1))
    val x10667 = CounterChain(List(x10666)).name("x10667").ctrl(x10681) // CounterChainNew(List(x10666))
    val x10675 = LoopController(style=InnerPipe, level=InnerControl, cchain=x10667).name("x10675").ctrl(x10681) // UnrolledForeach(List(b6509, b6510, b6093),x10667,Block(Const(())),List(List(b6533)),List(List(b6534)))
    val b6533 = CounterIter(x10666, None).ctrl(x10675).name("b6533")
    val b6534 = Const(true).ctrl(x10675).name("b6534")
    val x10668 = OpDef(op=BitAnd, inputs=List(b6534, b6509)).name("x10668").ctrl(x10675) // And(b6534,b6509)
    val x10669 = OpDef(op=BitAnd, inputs=List(b6510, b6093)).name("x10669").ctrl(x10675) // And(b6510,b6093)
    val x10670 = OpDef(op=BitAnd, inputs=List(x10668, x10669)).name("x10670").ctrl(x10675) // And(x10668,x10669)
    val x10671 = LoadBanks(List(x9987_d0_b0), List(b6508, b6533)).name("x10671").ctrl(x10675) // ParSRAMLoad(x9987,List(List(b6508, b6533)),List(x10670))
    val x10673_x10672 = x10671 // x10672 = VectorApply(x10671,0)
    // x10673 = SimpleStruct(ArrayBuffer((_1,x10672), (_2,Const(true))))
    val x10674_x10647 = WriteMem(x10647, x10673_x10672).name("x10674_x10647").ctrl(x10675) // ParStreamWrite(x10647,List(x10673),List(x10670))
    val x10676 = FringeDenseStore(dram=List(x9975), cmdStream=List(b10753, b10754), dataStream=List(x10647), ackStream=List(x10648)).name("x10676").ctrl(x10681) // FringeDenseStore(x9975,x10646,x10647,x10648)
    val x10680 = UnitController(style=SeqPipe, level=InnerControl).name("x10680").ctrl(x10681) // UnitPipe(List(b6509, b6510, b6093),Block(Const(())))
    val x10677 = OpDef(op=BitAnd, inputs=List(b6509, b6510)).name("x10677").ctrl(x10680) // And(b6509,b6510)
    val x10678 = OpDef(op=BitAnd, inputs=List(x10677, b6093)).name("x10678").ctrl(x10680) // And(x10677,b6093)
    val x10679_x10679 = ReadMem(x10648).name("x10679").ctrl(x10680) // StreamRead(x10648,x10678)
    // x10690 = WriteTokens(x10686,Const(","),x10687,Block((b419) => x10689),b419) TODO: Unmatched Node
    
  }
}
