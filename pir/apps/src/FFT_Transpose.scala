import pir._
import pir.node._
import arch._
import prism.enums._

object FFT_Transpose extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x19421 = DRAM().name("x19421").ctrl(top) // x19421 = DRAMNew(ArrayBuffer(Const(8), Const(64)),Const(0))
    val x19422 = DRAM().name("x19422").ctrl(top) // x19422 = DRAMNew(ArrayBuffer(Const(8), Const(64)),Const(0))
    val x19423 = DRAM().name("x19423").ctrl(top) // x19423 = DRAMNew(ArrayBuffer(Const(8), Const(64)),Const(0))
    val x19424 = DRAM().name("x19424").ctrl(top) // x19424 = DRAMNew(ArrayBuffer(Const(8), Const(64)),Const(0))
    val x20605 = UnitController(style=SeqPipe, level=OuterControl).name("x20605").ctrl(top) // Hwblock(Block(Const(())),false)
    val x19427_d0_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d0_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d0_b0) = false
    val x19427_d1_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d1_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d1_b0) = false
    val x19427_d2_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d2_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d2_b0) = true
    val x19427_d3_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d3_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d3_b0) = true
    val x19427_d4_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d4_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d4_b0) = false
    val x19427_d5_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d5_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d5_b0) = false
    val x19427_d6_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d6_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d6_b0) = true
    val x19427_d7_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d7_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d7_b0) = true
    val x19427_d8_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d8_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d8_b0) = false
    val x19427_d9_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d9_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d9_b0) = false
    val x19427_d10_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d10_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d10_b0) = true
    val x19427_d11_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d11_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d11_b0) = true
    val x19427_d12_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d12_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d12_b0) = false
    val x19427_d13_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d13_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d13_b0) = false
    val x19427_d14_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d14_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d14_b0) = false
    val x19427_d15_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d15_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d15_b0) = true
    val x19427_d16_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d16_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d16_b0) = true
    val x19427_d17_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d17_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d17_b0) = false
    val x19427_d18_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d18_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d18_b0) = false
    val x19427_d19_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d19_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d19_b0) = true
    val x19427_d20_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d20_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d20_b0) = true
    val x19427_d21_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d21_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d21_b0) = false
    val x19427_d22_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d22_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d22_b0) = false
    val x19427_d23_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d23_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d23_b0) = true
    val x19427_d24_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d24_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d24_b0) = true
    val x19427_d25_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d25_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d25_b0) = false
    val x19427_d26_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d26_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d26_b0) = false
    val x19427_d27_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d27_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d27_b0) = false
    val x19427_d28_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d28_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d28_b0) = true
    val x19427_d29_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d29_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d29_b0) = true
    val x19427_d30_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d30_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d30_b0) = false
    val x19427_d31_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d31_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d31_b0) = false
    val x19427_d32_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d32_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d32_b0) = true
    val x19427_d33_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d33_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d33_b0) = true
    val x19427_d34_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d34_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d34_b0) = false
    val x19427_d35_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d35_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d35_b0) = false
    val x19427_d36_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d36_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d36_b0) = true
    val x19427_d37_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d37_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d37_b0) = true
    val x19427_d38_b0 = SRAM(size=512, banking=NoBanking()).name("x19427_d38_b0").ctrl(x20605) // x19427 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19427_d38_b0) = false
    val x19428_d0_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d0_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d0_b0) = false
    val x19428_d1_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d1_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d1_b0) = false
    val x19428_d2_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d2_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d2_b0) = true
    val x19428_d3_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d3_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d3_b0) = true
    val x19428_d4_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d4_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d4_b0) = false
    val x19428_d5_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d5_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d5_b0) = false
    val x19428_d6_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d6_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d6_b0) = false
    val x19428_d7_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d7_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d7_b0) = true
    val x19428_d8_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d8_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d8_b0) = true
    val x19428_d9_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d9_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d9_b0) = false
    val x19428_d10_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d10_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d10_b0) = true
    val x19428_d11_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d11_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d11_b0) = false
    val x19428_d12_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d12_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d12_b0) = true
    val x19428_d13_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d13_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d13_b0) = true
    val x19428_d14_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d14_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d14_b0) = false
    val x19428_d15_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d15_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d15_b0) = false
    val x19428_d16_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d16_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d16_b0) = true
    val x19428_d17_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d17_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d17_b0) = false
    val x19428_d18_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d18_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d18_b0) = true
    val x19428_d19_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d19_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d19_b0) = true
    val x19428_d20_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d20_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d20_b0) = false
    val x19428_d21_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d21_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d21_b0) = false
    val x19428_d22_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d22_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d22_b0) = false
    val x19428_d23_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d23_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d23_b0) = true
    val x19428_d24_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d24_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d24_b0) = true
    val x19428_d25_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d25_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d25_b0) = false
    val x19428_d26_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d26_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d26_b0) = true
    val x19428_d27_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d27_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d27_b0) = false
    val x19428_d28_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d28_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d28_b0) = true
    val x19428_d29_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d29_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d29_b0) = true
    val x19428_d30_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d30_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d30_b0) = false
    val x19428_d31_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d31_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d31_b0) = false
    val x19428_d32_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d32_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d32_b0) = true
    val x19428_d33_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d33_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d33_b0) = false
    val x19428_d34_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d34_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d34_b0) = true
    val x19428_d35_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d35_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d35_b0) = true
    val x19428_d36_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d36_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d36_b0) = false
    val x19428_d37_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d37_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d37_b0) = false
    val x19428_d38_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d38_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d38_b0) = false
    val x19428_d39_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d39_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d39_b0) = true
    val x19428_d40_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d40_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d40_b0) = true
    val x19428_d41_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d41_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d41_b0) = false
    val x19428_d42_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d42_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d42_b0) = true
    val x19428_d43_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d43_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d43_b0) = false
    val x19428_d44_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d44_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d44_b0) = true
    val x19428_d45_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d45_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d45_b0) = true
    val x19428_d46_b0 = SRAM(size=512, banking=NoBanking()).name("x19428_d46_b0").ctrl(x20605) // x19428 = SRAMNew(ArrayBuffer(Const(8), Const(64)))
    isAccum(x19428_d46_b0) = false
    val x19429_d0_b0 = SRAM(size=576, banking=NoBanking()).name("x19429_d0_b0").ctrl(x20605) // x19429 = SRAMNew(ArrayBuffer(Const(576)))
    isAccum(x19429_d0_b0) = false
    val x19429_d1_b0 = SRAM(size=576, banking=NoBanking()).name("x19429_d1_b0").ctrl(x20605) // x19429 = SRAMNew(ArrayBuffer(Const(576)))
    isAccum(x19429_d1_b0) = false
    val x19429_d2_b0 = SRAM(size=576, banking=NoBanking()).name("x19429_d2_b0").ctrl(x20605) // x19429 = SRAMNew(ArrayBuffer(Const(576)))
    isAccum(x19429_d2_b0) = false
    val x19429_d3_b0 = SRAM(size=576, banking=NoBanking()).name("x19429_d3_b0").ctrl(x20605) // x19429 = SRAMNew(ArrayBuffer(Const(576)))
    isAccum(x19429_d3_b0) = false
    val x19430 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x19430").ctrl(x20605) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x19431 = CounterChain(List(x19430)).name("x19431").ctrl(x20605) // CounterChainNew(ArrayBuffer(x19430))
    val x19454 = LoopController(style=StreamPipe, level=OuterControl, cchain=x19431).name("x19454").ctrl(x20605) // UnrolledForeach(List(Const(true)),x19431,Block(Const(())),ArrayBuffer(List(b12760)),ArrayBuffer(List(b12761)))
    val b12760 = CounterIter(x19430, Some(0)).ctrl(x19454).name("b12760")
    val b12761 = DummyOp().ctrl(x19454).name("b12761")
    val b20705 = StreamOut(field="offset").name("b20705").ctrl(x19454) // x19432 = StreamOutNew(BurstCmdBus)
    val b20706 = StreamOut(field="size").name("b20706").ctrl(x19454) // x19432 = StreamOutNew(BurstCmdBus)
    val x19433 = StreamIn(field="data").name("x19433").ctrl(x19454) // x19433 = StreamInNew(BurstDataBus())
    val x19445 = UnitController(style=SeqPipe, level=InnerControl).name("x19445").ctrl(x19454) // UnitPipe(List(b12761),Block(x19444))
    val x19434 = b12760 // FixConvert(b12760,TRUE,_32,_0)
    val x19435 = OpDef(op=FixSla, inputs=List(x19434, Const(6))).name("x19435").ctrl(x19445) // FixLsh(x19434,Const(6))
    val x19436 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x19437 = OpDef(op=FixAdd, inputs=List(x19435, x19436)).name("x19437").ctrl(x19445) // FixAdd(x19435,x19436)
    val x19438 = OpDef(op=FixSla, inputs=List(x19437, Const(2))).name("x19438").ctrl(x19445) // FixLsh(x19437,Const(2))
    val x19439 = x19438 // FixConvert(x19438,TRUE,_64,_0)
    val x19440 = top.argFringe.dramAddress(x19421).name("x19440").ctrl(x19445) // GetDRAMAddress(x19421)
    val x19441 = OpDef(op=FixAdd, inputs=List(x19439, x19440)).name("x19441").ctrl(x19445) // FixAdd(x19439,x19440)
    val x19443_x19442 = x19441 // FixConvert(x19441,TRUE,_64,_0)
    // x19443 = SimpleStruct(ArrayBuffer((offset,x19442), (size,Const(256)), (isLoad,Const(true))))
    val b20707_b20705 = WriteMem(b20705, x19443_x19442).name("b20707_b20705").ctrl(x19445) // StreamWrite(x19432,x19443,b12761)
    val b20708_b20706 = WriteMem(b20706, Const(256)).name("b20708_b20706").ctrl(x19445) // StreamWrite(x19432,x19443,b12761)
    val x19446 = FringeContainer(x19421,b20705,b20706,x19433).name("x19446").ctrl(x19454) // FringeDenseLoad(x19421,x19432,x19433)
    val x19447 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x19447").ctrl(x19454) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x19448 = CounterChain(List(x19447)).name("x19448").ctrl(x19454) // CounterChainNew(List(x19447))
    val x19453 = LoopController(style=InnerPipe, level=InnerControl, cchain=x19448).name("x19453").ctrl(x19454) // UnrolledForeach(ArrayBuffer(b12761),x19448,Block(Const(())),List(List(b12779)),List(List(b12780)))
    val b12779 = CounterIter(x19447, None).ctrl(x19453).name("b12779")
    val b12780 = DummyOp().ctrl(x19453).name("b12780")
    val x19449 = OpDef(op=BitAnd, inputs=List(b12780, b12761)).name("x19449").ctrl(x19453) // And(b12780,b12761)
    val x19450_x19450 = ReadMem(x19433).name("x19450").ctrl(x19453) // ParStreamRead(x19433,List(x19449))
    val x19451_x19451 = x19450_x19450 // x19451 = VectorApply(x19450,0)
    val x19452 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(b12760, b12779), x19451_x19451).name("x19452").ctrl(x19453) // ParSRAMStore(x19427,List(List(b12760, b12779)),List(x19451),List(x19449))
    val x19455 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x19455").ctrl(x20605) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x19456 = CounterChain(List(x19455)).name("x19456").ctrl(x20605) // CounterChainNew(ArrayBuffer(x19455))
    val x19479 = LoopController(style=StreamPipe, level=OuterControl, cchain=x19456).name("x19479").ctrl(x20605) // UnrolledForeach(List(Const(true)),x19456,Block(Const(())),ArrayBuffer(List(b12789)),ArrayBuffer(List(b12790)))
    val b12789 = CounterIter(x19455, Some(0)).ctrl(x19479).name("b12789")
    val b12790 = DummyOp().ctrl(x19479).name("b12790")
    val b20709 = StreamOut(field="offset").name("b20709").ctrl(x19479) // x19457 = StreamOutNew(BurstCmdBus)
    val b20710 = StreamOut(field="size").name("b20710").ctrl(x19479) // x19457 = StreamOutNew(BurstCmdBus)
    val x19458 = StreamIn(field="data").name("x19458").ctrl(x19479) // x19458 = StreamInNew(BurstDataBus())
    val x19470 = UnitController(style=SeqPipe, level=InnerControl).name("x19470").ctrl(x19479) // UnitPipe(List(b12790),Block(x19469))
    val x19459 = b12789 // FixConvert(b12789,TRUE,_32,_0)
    val x19460 = OpDef(op=FixSla, inputs=List(x19459, Const(6))).name("x19460").ctrl(x19470) // FixLsh(x19459,Const(6))
    val x19461 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x19462 = OpDef(op=FixAdd, inputs=List(x19460, x19461)).name("x19462").ctrl(x19470) // FixAdd(x19460,x19461)
    val x19463 = OpDef(op=FixSla, inputs=List(x19462, Const(2))).name("x19463").ctrl(x19470) // FixLsh(x19462,Const(2))
    val x19464 = x19463 // FixConvert(x19463,TRUE,_64,_0)
    val x19465 = top.argFringe.dramAddress(x19422).name("x19465").ctrl(x19470) // GetDRAMAddress(x19422)
    val x19466 = OpDef(op=FixAdd, inputs=List(x19464, x19465)).name("x19466").ctrl(x19470) // FixAdd(x19464,x19465)
    val x19468_x19467 = x19466 // FixConvert(x19466,TRUE,_64,_0)
    // x19468 = SimpleStruct(ArrayBuffer((offset,x19467), (size,Const(256)), (isLoad,Const(true))))
    val b20711_b20709 = WriteMem(b20709, x19468_x19467).name("b20711_b20709").ctrl(x19470) // StreamWrite(x19457,x19468,b12790)
    val b20712_b20710 = WriteMem(b20710, Const(256)).name("b20712_b20710").ctrl(x19470) // StreamWrite(x19457,x19468,b12790)
    val x19471 = FringeContainer(x19422,b20709,b20710,x19458).name("x19471").ctrl(x19479) // FringeDenseLoad(x19422,x19457,x19458)
    val x19472 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x19472").ctrl(x19479) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x19473 = CounterChain(List(x19472)).name("x19473").ctrl(x19479) // CounterChainNew(List(x19472))
    val x19478 = LoopController(style=InnerPipe, level=InnerControl, cchain=x19473).name("x19478").ctrl(x19479) // UnrolledForeach(ArrayBuffer(b12790),x19473,Block(Const(())),List(List(b12808)),List(List(b12809)))
    val b12808 = CounterIter(x19472, None).ctrl(x19478).name("b12808")
    val b12809 = DummyOp().ctrl(x19478).name("b12809")
    val x19474 = OpDef(op=BitAnd, inputs=List(b12809, b12790)).name("x19474").ctrl(x19478) // And(b12809,b12790)
    val x19475_x19475 = ReadMem(x19458).name("x19475").ctrl(x19478) // ParStreamRead(x19458,List(x19474))
    val x19476_x19476 = x19475_x19475 // x19476 = VectorApply(x19475,0)
    val x19477 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b12789, b12808), x19476_x19476).name("x19477").ctrl(x19478) // ParSRAMStore(x19428,List(List(b12789, b12808)),List(x19476),List(x19474))
    val x19480_d0_b0 = SRAM(size=8, banking=NoBanking()).name("x19480_d0_b0").ctrl(x20605) // x19480 = SRAMNew(List(Const(8)))
    isAccum(x19480_d0_b0) = false
    val x19480_d1_b0 = SRAM(size=8, banking=NoBanking()).name("x19480_d1_b0").ctrl(x20605) // x19480 = SRAMNew(List(Const(8)))
    isAccum(x19480_d1_b0) = false
    val x19480_d2_b0 = SRAM(size=8, banking=NoBanking()).name("x19480_d2_b0").ctrl(x20605) // x19480 = SRAMNew(List(Const(8)))
    isAccum(x19480_d2_b0) = false
    val x19480_d3_b0 = SRAM(size=8, banking=NoBanking()).name("x19480_d3_b0").ctrl(x20605) // x19480 = SRAMNew(List(Const(8)))
    isAccum(x19480_d3_b0) = false
    val x19481 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x19481").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x19482 = CounterChain(List(x19481)).name("x19482").ctrl(x20605) // CounterChainNew(List(x19481))
    val x19783 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19482).name("x19783").ctrl(x20605) // UnrolledForeach(List(Const(true)),x19482,Block(Const(())),List(List(b12819)),List(List(b12820)))
    val b12819 = CounterIter(x19481, Some(0)).ctrl(x19783).name("b12819")
    val b12820 = DummyOp().ctrl(x19783).name("b12820")
    val x19483 = Counter(min=Const(0), max=Const(4), step=Const(1), par=1).name("x19483").ctrl(x19783) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x19484 = CounterChain(List(x19483)).name("x19484").ctrl(x19783) // CounterChainNew(List(x19483))
    val x19526 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19484).name("x19526").ctrl(x19783) // UnrolledForeach(List(b12820),x19484,Block(Const(())),List(List(b12823)),List(List(b12824)))
    val b12823 = CounterIter(x19483, Some(0)).ctrl(x19526).name("b12823")
    val b12824 = DummyOp().ctrl(x19526).name("b12824")
    val x19525 = UnitController(style=SeqPipe, level=OuterControl).name("x19525").ctrl(x19526) // UnitPipe(List(b12824, b12820),Block(Const(())))
    val x19485_d0 = Reg(init=Some(0)).name("x19485_d0").ctrl(x19525) // x19485 = RegNew(Const(0))
    isAccum(x19485_d0) = false
    val x19485_d1 = Reg(init=Some(0)).name("x19485_d1").ctrl(x19525) // x19485 = RegNew(Const(0))
    isAccum(x19485_d1) = false
    val x19485_d2 = Reg(init=Some(0)).name("x19485_d2").ctrl(x19525) // x19485 = RegNew(Const(0))
    isAccum(x19485_d2) = false
    val x19485_d3 = Reg(init=Some(0)).name("x19485_d3").ctrl(x19525) // x19485 = RegNew(Const(0))
    isAccum(x19485_d3) = false
    val x19486_d0 = Reg(init=Some(0.0)).name("x19486_d0").ctrl(x19525) // x19486 = RegNew(Const(0))
    isAccum(x19486_d0) = false
    val x19486_d1 = Reg(init=Some(0.0)).name("x19486_d1").ctrl(x19525) // x19486 = RegNew(Const(0))
    isAccum(x19486_d1) = false
    val x19487_d0 = Reg(init=Some(0.0)).name("x19487_d0").ctrl(x19525) // x19487 = RegNew(Const(0))
    isAccum(x19487_d0) = false
    val x19487_d1 = Reg(init=Some(0.0)).name("x19487_d1").ctrl(x19525) // x19487 = RegNew(Const(0))
    isAccum(x19487_d1) = false
    val x19496 = UnitController(style=SeqPipe, level=InnerControl).name("x19496").ctrl(x19525) // UnitPipe(List(b12824, b12820),Block(Const(())))
    val x19488 = b12823 // FixConvert(b12823,TRUE,_32,_0)
    val x19489 = OpDef(op=FixAdd, inputs=List(Const(4), x19488)).name("x19489").ctrl(x19496) // FixAdd(Const(4),x19488)
    val x19490 = OpDef(op=BitAnd, inputs=List(b12824, b12820)).name("x19490").ctrl(x19496) // And(b12824,b12820)
    val x19491 = LoadBanks(List(x19427_d38_b0), List(b12823, b12819)).name("x19491").ctrl(x19496) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(b12823, b12819),Const(0),x19490)
    val x19492 = LoadBanks(List(x19428_d46_b0), List(b12823, b12819)).name("x19492").ctrl(x19496) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(b12823, b12819),Const(0),x19490)
    val x19493_x19485_d0 = WriteMem(x19485_d0, x19489).name("x19493_x19485_d0").ctrl(x19496) // RegWrite(x19485,x19489,x19490)
    val x19493_x19485_d1 = WriteMem(x19485_d1, x19489).name("x19493_x19485_d1").ctrl(x19496) // RegWrite(x19485,x19489,x19490)
    val x19493_x19485_d2 = WriteMem(x19485_d2, x19489).name("x19493_x19485_d2").ctrl(x19496) // RegWrite(x19485,x19489,x19490)
    val x19493_x19485_d3 = WriteMem(x19485_d3, x19489).name("x19493_x19485_d3").ctrl(x19496) // RegWrite(x19485,x19489,x19490)
    val x19494_x19486_d0 = WriteMem(x19486_d0, x19491).name("x19494_x19486_d0").ctrl(x19496) // RegWrite(x19486,x19491,x19490)
    val x19494_x19486_d1 = WriteMem(x19486_d1, x19491).name("x19494_x19486_d1").ctrl(x19496) // RegWrite(x19486,x19491,x19490)
    val x19495_x19487_d0 = WriteMem(x19487_d0, x19492).name("x19495_x19487_d0").ctrl(x19496) // RegWrite(x19487,x19492,x19490)
    val x19495_x19487_d1 = WriteMem(x19487_d1, x19492).name("x19495_x19487_d1").ctrl(x19496) // RegWrite(x19487,x19492,x19490)
    val x19503 = UnitController(style=SeqPipe, level=InnerControl).name("x19503").ctrl(x19525) // UnitPipe(List(b12824, b12820),Block(x19502))
    val x19497 = ReadMem(x19485_d3).name("x19497").ctrl(x19503) // RegRead(x19485)
    val x19498 = OpDef(op=BitAnd, inputs=List(b12824, b12820)).name("x19498").ctrl(x19503) // And(b12824,b12820)
    val x19499 = LoadBanks(List(x19427_d37_b0), List(x19497, b12819)).name("x19499").ctrl(x19503) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19497, b12819),Const(0),x19498)
    val x19500 = ReadMem(x19486_d1).name("x19500").ctrl(x19503) // RegRead(x19486)
    val x19501 = OpDef(op=FixAdd, inputs=List(x19500, x19499)).name("x19501").ctrl(x19503) // FixAdd(x19500,x19499)
    val x19502 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(b12823, b12819), x19501).name("x19502").ctrl(x19503) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(b12823, b12819),Const(0),x19501,x19498)
    val x19510 = UnitController(style=SeqPipe, level=InnerControl).name("x19510").ctrl(x19525) // UnitPipe(List(b12824, b12820),Block(x19509))
    val x19504 = ReadMem(x19485_d2).name("x19504").ctrl(x19510) // RegRead(x19485)
    val x19505 = OpDef(op=BitAnd, inputs=List(b12824, b12820)).name("x19505").ctrl(x19510) // And(b12824,b12820)
    val x19506 = LoadBanks(List(x19428_d45_b0), List(x19504, b12819)).name("x19506").ctrl(x19510) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19504, b12819),Const(0),x19505)
    val x19507 = ReadMem(x19487_d1).name("x19507").ctrl(x19510) // RegRead(x19487)
    val x19508 = OpDef(op=FixAdd, inputs=List(x19507, x19506)).name("x19508").ctrl(x19510) // FixAdd(x19507,x19506)
    val x19509 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b12823, b12819), x19508).name("x19509").ctrl(x19510) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(b12823, b12819),Const(0),x19508,x19505)
    val x19517 = UnitController(style=SeqPipe, level=InnerControl).name("x19517").ctrl(x19525) // UnitPipe(List(b12824, b12820),Block(x19516))
    val x19511 = ReadMem(x19485_d1).name("x19511").ctrl(x19517) // RegRead(x19485)
    val x19512 = OpDef(op=BitAnd, inputs=List(b12824, b12820)).name("x19512").ctrl(x19517) // And(b12824,b12820)
    val x19513 = LoadBanks(List(x19427_d36_b0), List(x19511, b12819)).name("x19513").ctrl(x19517) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19511, b12819),Const(0),x19512)
    val x19514 = ReadMem(x19486_d0).name("x19514").ctrl(x19517) // RegRead(x19486)
    val x19515 = OpDef(op=FixSub, inputs=List(x19514, x19513)).name("x19515").ctrl(x19517) // FixSub(x19514,x19513)
    val x19516 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19511, b12819), x19515).name("x19516").ctrl(x19517) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19511, b12819),Const(0),x19515,x19512)
    val x19524 = UnitController(style=SeqPipe, level=InnerControl).name("x19524").ctrl(x19525) // UnitPipe(List(b12824, b12820),Block(x19523))
    val x19518 = ReadMem(x19485_d0).name("x19518").ctrl(x19524) // RegRead(x19485)
    val x19519 = OpDef(op=BitAnd, inputs=List(b12824, b12820)).name("x19519").ctrl(x19524) // And(b12824,b12820)
    val x19520 = LoadBanks(List(x19428_d44_b0), List(x19518, b12819)).name("x19520").ctrl(x19524) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19518, b12819),Const(0),x19519)
    val x19521 = ReadMem(x19487_d0).name("x19521").ctrl(x19524) // RegRead(x19487)
    val x19522 = OpDef(op=FixSub, inputs=List(x19521, x19520)).name("x19522").ctrl(x19524) // FixSub(x19521,x19520)
    val x19523 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19518, b12819), x19522).name("x19523").ctrl(x19524) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19518, b12819),Const(0),x19522,x19519)
    val x19527 = Counter(min=Const(0), max=Const(3), step=Const(1), par=1).name("x19527").ctrl(x19783) // CounterNew(Const(0),Const(3),Const(1),Const(1))
    val x19528 = CounterChain(List(x19527)).name("x19528").ctrl(x19783) // CounterChainNew(List(x19527))
    val x19569 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19528).name("x19569").ctrl(x19783) // UnrolledForeach(List(b12820),x19528,Block(Const(())),List(List(b12869)),List(List(b12870)))
    val b12869 = CounterIter(x19527, Some(0)).ctrl(x19569).name("b12869")
    val b12870 = DummyOp().ctrl(x19569).name("b12870")
    val x19529_d0_b0 = SRAM(size=6, banking=NoBanking()).name("x19529_d0_b0").ctrl(x19569) // x19529 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x19529_d0_b0) = false
    val x19529_d1_b0 = SRAM(size=6, banking=NoBanking()).name("x19529_d1_b0").ctrl(x19569) // x19529 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x19529_d1_b0) = false
    val x19529_d2_b0 = SRAM(size=6, banking=NoBanking()).name("x19529_d2_b0").ctrl(x19569) // x19529 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x19529_d2_b0) = false
    val x19529_d3_b0 = SRAM(size=6, banking=NoBanking()).name("x19529_d3_b0").ctrl(x19569) // x19529 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x19529_d3_b0) = false
    val x19530_d0 = Reg(init=Some(0.0)).name("x19530_d0").ctrl(x19569) // x19530 = RegNew(Const(0))
    isAccum(x19530_d0) = false
    val x19530_d1 = Reg(init=Some(0.0)).name("x19530_d1").ctrl(x19569) // x19530 = RegNew(Const(0))
    isAccum(x19530_d1) = false
    val x19531_d0 = Reg(init=Some(0.0)).name("x19531_d0").ctrl(x19569) // x19531 = RegNew(Const(0))
    isAccum(x19531_d0) = false
    val x19531_d1 = Reg(init=Some(0.0)).name("x19531_d1").ctrl(x19569) // x19531 = RegNew(Const(0))
    isAccum(x19531_d1) = false
    val x19540 = UnitController(style=SeqPipe, level=InnerControl).name("x19540").ctrl(x19569) // UnitPipe(List(b12870, b12820),Block(Const(())))
    val x19532 = b12869 // FixConvert(b12869,TRUE,_32,_0)
    val x19533 = OpDef(op=FixAdd, inputs=List(Const(5), x19532)).name("x19533").ctrl(x19540) // FixAdd(Const(5),x19532)
    val x19534 = OpDef(op=BitAnd, inputs=List(b12870, b12820)).name("x19534").ctrl(x19540) // And(b12870,b12820)
    val x19535 = LoadBanks(List(x19427_d35_b0), List(x19533, b12819)).name("x19535").ctrl(x19540) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19533, b12819),Const(0),x19534)
    val x19536 = OpDef(op=FixEql, inputs=List(x19532, Const(1))).name("x19536").ctrl(x19540) // FixEql(x19532,Const(1))
    val x19537 = OpDef(op=MuxOp, inputs=List(x19536, Const(1.0), Const(0.7070923))).name("x19537").ctrl(x19540) // Mux(x19536,Const(1),Const(0.70709228515625))
    val x19538_x19530_d0 = WriteMem(x19530_d0, x19535).name("x19538_x19530_d0").ctrl(x19540) // RegWrite(x19530,x19535,x19534)
    val x19538_x19530_d1 = WriteMem(x19530_d1, x19535).name("x19538_x19530_d1").ctrl(x19540) // RegWrite(x19530,x19535,x19534)
    val x19539_x19531_d0 = WriteMem(x19531_d0, x19537).name("x19539_x19531_d0").ctrl(x19540) // RegWrite(x19531,x19537,x19534)
    val x19539_x19531_d1 = WriteMem(x19531_d1, x19537).name("x19539_x19531_d1").ctrl(x19540) // RegWrite(x19531,x19537,x19534)
    val x19554 = UnitController(style=SeqPipe, level=InnerControl).name("x19554").ctrl(x19569) // UnitPipe(List(b12870, b12820),Block(x19553))
    val x19541 = b12869 // FixConvert(b12869,TRUE,_32,_0)
    val x19542 = OpDef(op=FixAdd, inputs=List(Const(5), x19541)).name("x19542").ctrl(x19554) // FixAdd(Const(5),x19541)
    val x19543 = OpDef(op=BitAnd, inputs=List(b12870, b12820)).name("x19543").ctrl(x19554) // And(b12870,b12820)
    val x19544 = LoadBanks(List(x19529_d3_b0), List(Const(0), b12869)).name("x19544").ctrl(x19554) // SRAMLoad(x19529,List(Const(2), Const(3)),List(Const(0), b12869),Const(0),x19543)
    val x19545 = ReadMem(x19530_d1).name("x19545").ctrl(x19554) // RegRead(x19530)
    val x19546 = OpDef(op=FixMul, inputs=List(x19545, x19544)).name("x19546").ctrl(x19554) // FixMul(x19545,x19544)
    val x19547 = LoadBanks(List(x19428_d43_b0), List(x19542, b12819)).name("x19547").ctrl(x19554) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19542, b12819),Const(0),x19543)
    val x19548 = LoadBanks(List(x19529_d2_b0), List(Const(1), b12869)).name("x19548").ctrl(x19554) // SRAMLoad(x19529,List(Const(2), Const(3)),List(Const(1), b12869),Const(0),x19543)
    val x19549 = OpDef(op=FixMul, inputs=List(x19547, x19548)).name("x19549").ctrl(x19554) // FixMul(x19547,x19548)
    val x19550 = OpDef(op=FixSub, inputs=List(x19546, x19549)).name("x19550").ctrl(x19554) // FixSub(x19546,x19549)
    val x19551 = ReadMem(x19531_d1).name("x19551").ctrl(x19554) // RegRead(x19531)
    val x19552 = OpDef(op=FixMul, inputs=List(x19550, x19551)).name("x19552").ctrl(x19554) // FixMul(x19550,x19551)
    val x19553 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19542, b12819), x19552).name("x19553").ctrl(x19554) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19542, b12819),Const(0),x19552,x19543)
    val x19568 = UnitController(style=SeqPipe, level=InnerControl).name("x19568").ctrl(x19569) // UnitPipe(List(b12870, b12820),Block(x19567))
    val x19555 = b12869 // FixConvert(b12869,TRUE,_32,_0)
    val x19556 = OpDef(op=FixAdd, inputs=List(Const(5), x19555)).name("x19556").ctrl(x19568) // FixAdd(Const(5),x19555)
    val x19557 = OpDef(op=BitAnd, inputs=List(b12870, b12820)).name("x19557").ctrl(x19568) // And(b12870,b12820)
    val x19558 = LoadBanks(List(x19529_d1_b0), List(Const(1), b12869)).name("x19558").ctrl(x19568) // SRAMLoad(x19529,List(Const(2), Const(3)),List(Const(1), b12869),Const(0),x19557)
    val x19559 = ReadMem(x19530_d0).name("x19559").ctrl(x19568) // RegRead(x19530)
    val x19560 = OpDef(op=FixMul, inputs=List(x19559, x19558)).name("x19560").ctrl(x19568) // FixMul(x19559,x19558)
    val x19561 = LoadBanks(List(x19428_d42_b0), List(x19556, b12819)).name("x19561").ctrl(x19568) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19556, b12819),Const(0),x19557)
    val x19562 = LoadBanks(List(x19529_d0_b0), List(Const(0), b12869)).name("x19562").ctrl(x19568) // SRAMLoad(x19529,List(Const(2), Const(3)),List(Const(0), b12869),Const(0),x19557)
    val x19563 = OpDef(op=FixMul, inputs=List(x19561, x19562)).name("x19563").ctrl(x19568) // FixMul(x19561,x19562)
    val x19564 = OpDef(op=FixAdd, inputs=List(x19560, x19563)).name("x19564").ctrl(x19568) // FixAdd(x19560,x19563)
    val x19565 = ReadMem(x19531_d0).name("x19565").ctrl(x19568) // RegRead(x19531)
    val x19566 = OpDef(op=FixMul, inputs=List(x19564, x19565)).name("x19566").ctrl(x19568) // FixMul(x19564,x19565)
    val x19567 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19556, b12819), x19566).name("x19567").ctrl(x19568) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19556, b12819),Const(0),x19566,x19557)
    val x19570 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x19570").ctrl(x19783) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x19571 = CounterChain(List(x19570)).name("x19571").ctrl(x19783) // CounterChainNew(List(x19570))
    val x19715 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19571).name("x19715").ctrl(x19783) // UnrolledForeach(List(b12820),x19571,Block(Const(())),List(List(b12914)),List(List(b12915)))
    val b12914 = CounterIter(x19570, Some(0)).ctrl(x19715).name("b12914")
    val b12915 = DummyOp().ctrl(x19715).name("b12915")
    val x19572_d0 = Reg(init=Some(0)).name("x19572_d0").ctrl(x19715) // x19572 = RegNew(Const(0))
    isAccum(x19572_d0) = false
    val x19572_d1 = Reg(init=Some(0)).name("x19572_d1").ctrl(x19715) // x19572 = RegNew(Const(0))
    isAccum(x19572_d1) = false
    val x19572_d2 = Reg(init=Some(0)).name("x19572_d2").ctrl(x19715) // x19572 = RegNew(Const(0))
    isAccum(x19572_d2) = false
    val x19572_d3 = Reg(init=Some(0)).name("x19572_d3").ctrl(x19715) // x19572 = RegNew(Const(0))
    isAccum(x19572_d3) = false
    val x19572_d4 = Reg(init=Some(0)).name("x19572_d4").ctrl(x19715) // x19572 = RegNew(Const(0))
    isAccum(x19572_d4) = false
    val x19578 = UnitController(style=SeqPipe, level=InnerControl).name("x19578").ctrl(x19715) // UnitPipe(List(b12915, b12820),Block(Const(())))
    val x19574 = b12914 // FixConvert(b12914,TRUE,_32,_0)
    val x19575 = OpDef(op=FixMul, inputs=List(Const(4), x19574)).name("x19575").ctrl(x19578) // FixMul(Const(4),x19574)
    val x19576 = OpDef(op=BitAnd, inputs=List(b12915, b12820)).name("x19576").ctrl(x19578) // And(b12915,b12820)
    val x19577_x19572_d0 = WriteMem(x19572_d0, x19575).name("x19577_x19572_d0").ctrl(x19578) // RegWrite(x19572,x19575,x19576)
    val x19577_x19572_d1 = WriteMem(x19572_d1, x19575).name("x19577_x19572_d1").ctrl(x19578) // RegWrite(x19572,x19575,x19576)
    val x19577_x19572_d2 = WriteMem(x19572_d2, x19575).name("x19577_x19572_d2").ctrl(x19578) // RegWrite(x19572,x19575,x19576)
    val x19577_x19572_d3 = WriteMem(x19572_d3, x19575).name("x19577_x19572_d3").ctrl(x19578) // RegWrite(x19572,x19575,x19576)
    val x19577_x19572_d4 = WriteMem(x19572_d4, x19575).name("x19577_x19572_d4").ctrl(x19578) // RegWrite(x19572,x19575,x19576)
    val x19579 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x19579").ctrl(x19715) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x19580 = CounterChain(List(x19579)).name("x19580").ctrl(x19715) // CounterChainNew(List(x19579))
    val x19634 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19580).name("x19634").ctrl(x19715) // UnrolledForeach(List(b12915, b12820),x19580,Block(Const(())),List(List(b12925)),List(List(b12926)))
    val b12925 = CounterIter(x19579, Some(0)).ctrl(x19634).name("b12925")
    val b12926 = DummyOp().ctrl(x19634).name("b12926")
    val x19633 = UnitController(style=SeqPipe, level=OuterControl).name("x19633").ctrl(x19634) // UnitPipe(List(b12926, b12915, b12820),Block(Const(())))
    val x19581_d0 = Reg(init=Some(0)).name("x19581_d0").ctrl(x19633) // x19581 = RegNew(Const(0))
    isAccum(x19581_d0) = false
    val x19581_d1 = Reg(init=Some(0)).name("x19581_d1").ctrl(x19633) // x19581 = RegNew(Const(0))
    isAccum(x19581_d1) = false
    val x19582_d0 = Reg(init=Some(0)).name("x19582_d0").ctrl(x19633) // x19582 = RegNew(Const(0))
    isAccum(x19582_d0) = false
    val x19582_d1 = Reg(init=Some(0)).name("x19582_d1").ctrl(x19633) // x19582 = RegNew(Const(0))
    isAccum(x19582_d1) = false
    val x19582_d2 = Reg(init=Some(0)).name("x19582_d2").ctrl(x19633) // x19582 = RegNew(Const(0))
    isAccum(x19582_d2) = false
    val x19582_d3 = Reg(init=Some(0)).name("x19582_d3").ctrl(x19633) // x19582 = RegNew(Const(0))
    isAccum(x19582_d3) = false
    val x19583_d0 = Reg(init=Some(0.0)).name("x19583_d0").ctrl(x19633) // x19583 = RegNew(Const(0))
    isAccum(x19583_d0) = false
    val x19583_d1 = Reg(init=Some(0.0)).name("x19583_d1").ctrl(x19633) // x19583 = RegNew(Const(0))
    isAccum(x19583_d1) = false
    val x19584_d0 = Reg(init=Some(0.0)).name("x19584_d0").ctrl(x19633) // x19584 = RegNew(Const(0))
    isAccum(x19584_d0) = false
    val x19584_d1 = Reg(init=Some(0.0)).name("x19584_d1").ctrl(x19633) // x19584 = RegNew(Const(0))
    isAccum(x19584_d1) = false
    val x19598 = UnitController(style=SeqPipe, level=InnerControl).name("x19598").ctrl(x19633) // UnitPipe(List(b12926, b12915, b12820),Block(Const(())))
    val x19585 = b12925 // FixConvert(b12925,TRUE,_32,_0)
    val x19586 = ReadMem(x19572_d4).name("x19586").ctrl(x19598) // RegRead(x19572)
    val x19587 = OpDef(op=FixAdd, inputs=List(x19586, x19585)).name("x19587").ctrl(x19598) // FixAdd(x19586,x19585)
    val x19588 = OpDef(op=FixAdd, inputs=List(Const(2), x19586)).name("x19588").ctrl(x19598) // FixAdd(Const(2),x19586)
    val x19589 = OpDef(op=FixAdd, inputs=List(x19588, x19585)).name("x19589").ctrl(x19598) // FixAdd(x19588,x19585)
    val x19590 = OpDef(op=BitAnd, inputs=List(b12926, b12915)).name("x19590").ctrl(x19598) // And(b12926,b12915)
    val x19591 = OpDef(op=BitAnd, inputs=List(x19590, b12820)).name("x19591").ctrl(x19598) // And(x19590,b12820)
    val x19592 = LoadBanks(List(x19427_d34_b0), List(x19587, b12819)).name("x19592").ctrl(x19598) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19587, b12819),Const(0),x19591)
    val x19593 = LoadBanks(List(x19428_d41_b0), List(x19587, b12819)).name("x19593").ctrl(x19598) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19587, b12819),Const(0),x19591)
    val x19594_x19581_d0 = WriteMem(x19581_d0, x19587).name("x19594_x19581_d0").ctrl(x19598) // RegWrite(x19581,x19587,x19591)
    val x19594_x19581_d1 = WriteMem(x19581_d1, x19587).name("x19594_x19581_d1").ctrl(x19598) // RegWrite(x19581,x19587,x19591)
    val x19595_x19582_d0 = WriteMem(x19582_d0, x19589).name("x19595_x19582_d0").ctrl(x19598) // RegWrite(x19582,x19589,x19591)
    val x19595_x19582_d1 = WriteMem(x19582_d1, x19589).name("x19595_x19582_d1").ctrl(x19598) // RegWrite(x19582,x19589,x19591)
    val x19595_x19582_d2 = WriteMem(x19582_d2, x19589).name("x19595_x19582_d2").ctrl(x19598) // RegWrite(x19582,x19589,x19591)
    val x19595_x19582_d3 = WriteMem(x19582_d3, x19589).name("x19595_x19582_d3").ctrl(x19598) // RegWrite(x19582,x19589,x19591)
    val x19596_x19583_d0 = WriteMem(x19583_d0, x19592).name("x19596_x19583_d0").ctrl(x19598) // RegWrite(x19583,x19592,x19591)
    val x19596_x19583_d1 = WriteMem(x19583_d1, x19592).name("x19596_x19583_d1").ctrl(x19598) // RegWrite(x19583,x19592,x19591)
    val x19597_x19584_d0 = WriteMem(x19584_d0, x19593).name("x19597_x19584_d0").ctrl(x19598) // RegWrite(x19584,x19593,x19591)
    val x19597_x19584_d1 = WriteMem(x19584_d1, x19593).name("x19597_x19584_d1").ctrl(x19598) // RegWrite(x19584,x19593,x19591)
    val x19607 = UnitController(style=SeqPipe, level=InnerControl).name("x19607").ctrl(x19633) // UnitPipe(List(b12926, b12915, b12820),Block(x19606))
    val x19599 = ReadMem(x19582_d3).name("x19599").ctrl(x19607) // RegRead(x19582)
    val x19600 = OpDef(op=BitAnd, inputs=List(b12926, b12915)).name("x19600").ctrl(x19607) // And(b12926,b12915)
    val x19601 = OpDef(op=BitAnd, inputs=List(x19600, b12820)).name("x19601").ctrl(x19607) // And(x19600,b12820)
    val x19602 = LoadBanks(List(x19427_d33_b0), List(x19599, b12819)).name("x19602").ctrl(x19607) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19599, b12819),Const(0),x19601)
    val x19603 = ReadMem(x19583_d1).name("x19603").ctrl(x19607) // RegRead(x19583)
    val x19604 = OpDef(op=FixAdd, inputs=List(x19603, x19602)).name("x19604").ctrl(x19607) // FixAdd(x19603,x19602)
    val x19605 = ReadMem(x19581_d1).name("x19605").ctrl(x19607) // RegRead(x19581)
    val x19606 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19605, b12819), x19604).name("x19606").ctrl(x19607) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19605, b12819),Const(0),x19604,x19601)
    val x19616 = UnitController(style=SeqPipe, level=InnerControl).name("x19616").ctrl(x19633) // UnitPipe(List(b12926, b12915, b12820),Block(x19615))
    val x19608 = ReadMem(x19582_d2).name("x19608").ctrl(x19616) // RegRead(x19582)
    val x19609 = OpDef(op=BitAnd, inputs=List(b12926, b12915)).name("x19609").ctrl(x19616) // And(b12926,b12915)
    val x19610 = OpDef(op=BitAnd, inputs=List(x19609, b12820)).name("x19610").ctrl(x19616) // And(x19609,b12820)
    val x19611 = LoadBanks(List(x19428_d40_b0), List(x19608, b12819)).name("x19611").ctrl(x19616) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19608, b12819),Const(0),x19610)
    val x19612 = ReadMem(x19584_d1).name("x19612").ctrl(x19616) // RegRead(x19584)
    val x19613 = OpDef(op=FixAdd, inputs=List(x19612, x19611)).name("x19613").ctrl(x19616) // FixAdd(x19612,x19611)
    val x19614 = ReadMem(x19581_d0).name("x19614").ctrl(x19616) // RegRead(x19581)
    val x19615 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19614, b12819), x19613).name("x19615").ctrl(x19616) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19614, b12819),Const(0),x19613,x19610)
    val x19624 = UnitController(style=SeqPipe, level=InnerControl).name("x19624").ctrl(x19633) // UnitPipe(List(b12926, b12915, b12820),Block(x19623))
    val x19617 = ReadMem(x19582_d1).name("x19617").ctrl(x19624) // RegRead(x19582)
    val x19618 = OpDef(op=BitAnd, inputs=List(b12926, b12915)).name("x19618").ctrl(x19624) // And(b12926,b12915)
    val x19619 = OpDef(op=BitAnd, inputs=List(x19618, b12820)).name("x19619").ctrl(x19624) // And(x19618,b12820)
    val x19620 = LoadBanks(List(x19427_d32_b0), List(x19617, b12819)).name("x19620").ctrl(x19624) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19617, b12819),Const(0),x19619)
    val x19621 = ReadMem(x19583_d0).name("x19621").ctrl(x19624) // RegRead(x19583)
    val x19622 = OpDef(op=FixSub, inputs=List(x19621, x19620)).name("x19622").ctrl(x19624) // FixSub(x19621,x19620)
    val x19623 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19617, b12819), x19622).name("x19623").ctrl(x19624) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19617, b12819),Const(0),x19622,x19619)
    val x19632 = UnitController(style=SeqPipe, level=InnerControl).name("x19632").ctrl(x19633) // UnitPipe(List(b12926, b12915, b12820),Block(x19631))
    val x19625 = ReadMem(x19582_d0).name("x19625").ctrl(x19632) // RegRead(x19582)
    val x19626 = OpDef(op=BitAnd, inputs=List(b12926, b12915)).name("x19626").ctrl(x19632) // And(b12926,b12915)
    val x19627 = OpDef(op=BitAnd, inputs=List(x19626, b12820)).name("x19627").ctrl(x19632) // And(x19626,b12820)
    val x19628 = LoadBanks(List(x19428_d39_b0), List(x19625, b12819)).name("x19628").ctrl(x19632) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19625, b12819),Const(0),x19627)
    val x19629 = ReadMem(x19584_d0).name("x19629").ctrl(x19632) // RegRead(x19584)
    val x19630 = OpDef(op=FixSub, inputs=List(x19629, x19628)).name("x19630").ctrl(x19632) // FixSub(x19629,x19628)
    val x19631 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19625, b12819), x19630).name("x19631").ctrl(x19632) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19625, b12819),Const(0),x19630,x19627)
    val x19635 = Reg(init=Some(0.0)).name("x19635").ctrl(x19715) // x19635 = RegNew(Const(0))
    isAccum(x19635) = false
    val x19641 = UnitController(style=SeqPipe, level=InnerControl).name("x19641").ctrl(x19715) // UnitPipe(List(b12915, b12820),Block(Const(())))
    val x19636 = ReadMem(x19572_d3).name("x19636").ctrl(x19641) // RegRead(x19572)
    val x19637 = OpDef(op=FixAdd, inputs=List(x19636, Const(3))).name("x19637").ctrl(x19641) // FixAdd(x19636,Const(3))
    val x19638 = OpDef(op=BitAnd, inputs=List(b12915, b12820)).name("x19638").ctrl(x19641) // And(b12915,b12820)
    val x19639 = LoadBanks(List(x19427_d31_b0), List(x19637, b12819)).name("x19639").ctrl(x19641) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19637, b12819),Const(0),x19638)
    val x19640_x19635 = WriteMem(x19635, x19639).name("x19640_x19635").ctrl(x19641) // RegWrite(x19635,x19639,x19638)
    val x19649 = UnitController(style=SeqPipe, level=InnerControl).name("x19649").ctrl(x19715) // UnitPipe(List(b12915, b12820),Block(x19648))
    val x19642 = ReadMem(x19572_d2).name("x19642").ctrl(x19649) // RegRead(x19572)
    val x19643 = OpDef(op=FixAdd, inputs=List(x19642, Const(3))).name("x19643").ctrl(x19649) // FixAdd(x19642,Const(3))
    val x19644 = OpDef(op=BitAnd, inputs=List(b12915, b12820)).name("x19644").ctrl(x19649) // And(b12915,b12820)
    val x19645 = LoadBanks(List(x19428_d38_b0), List(x19643, b12819)).name("x19645").ctrl(x19649) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19643, b12819),Const(0),x19644)
    val x19646 = OpDef(op=FixMul, inputs=List(x19645, Const(-1.0))).name("x19646").ctrl(x19649) // FixMul(x19645,Const(-1))
    val x19647 = OpDef(op=FixNeg, inputs=List(x19646)).name("x19647").ctrl(x19649) // FixNeg(x19646)
    val x19648 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19643, b12819), x19647).name("x19648").ctrl(x19649) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19643, b12819),Const(0),x19647,x19644)
    val x19657 = UnitController(style=SeqPipe, level=InnerControl).name("x19657").ctrl(x19715) // UnitPipe(List(b12915, b12820),Block(x19656))
    val x19650 = ReadMem(x19572_d1).name("x19650").ctrl(x19657) // RegRead(x19572)
    val x19651 = OpDef(op=FixAdd, inputs=List(x19650, Const(3))).name("x19651").ctrl(x19657) // FixAdd(x19650,Const(3))
    val x19652 = ReadMem(x19635).name("x19652").ctrl(x19657) // RegRead(x19635)
    val x19653 = OpDef(op=FixMul, inputs=List(x19652, Const(-1.0))).name("x19653").ctrl(x19657) // FixMul(x19652,Const(-1))
    val x19654 = OpDef(op=BitAnd, inputs=List(b12915, b12820)).name("x19654").ctrl(x19657) // And(b12915,b12820)
    val x19655 = LoadBanks(List(x19428_d37_b0), List(x19651, b12819)).name("x19655").ctrl(x19657) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19651, b12819),Const(0),x19654)
    val x19656 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19651, b12819), x19653).name("x19656").ctrl(x19657) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19651, b12819),Const(0),x19653,x19654)
    val x19658 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x19658").ctrl(x19715) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x19659 = CounterChain(List(x19658)).name("x19659").ctrl(x19715) // CounterChainNew(List(x19658))
    val x19714 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19659).name("x19714").ctrl(x19715) // UnrolledForeach(List(b12915, b12820),x19659,Block(Const(())),List(List(b13006)),List(List(b13007)))
    val b13006 = CounterIter(x19658, Some(0)).ctrl(x19714).name("b13006")
    val b13007 = DummyOp().ctrl(x19714).name("b13007")
    val x19713 = UnitController(style=SeqPipe, level=OuterControl).name("x19713").ctrl(x19714) // UnitPipe(List(b13007, b12915, b12820),Block(Const(())))
    val x19660_d0 = Reg(init=Some(0)).name("x19660_d0").ctrl(x19713) // x19660 = RegNew(Const(0))
    isAccum(x19660_d0) = false
    val x19660_d1 = Reg(init=Some(0)).name("x19660_d1").ctrl(x19713) // x19660 = RegNew(Const(0))
    isAccum(x19660_d1) = false
    val x19661_d0 = Reg(init=Some(0)).name("x19661_d0").ctrl(x19713) // x19661 = RegNew(Const(0))
    isAccum(x19661_d0) = false
    val x19661_d1 = Reg(init=Some(0)).name("x19661_d1").ctrl(x19713) // x19661 = RegNew(Const(0))
    isAccum(x19661_d1) = false
    val x19661_d2 = Reg(init=Some(0)).name("x19661_d2").ctrl(x19713) // x19661 = RegNew(Const(0))
    isAccum(x19661_d2) = false
    val x19661_d3 = Reg(init=Some(0)).name("x19661_d3").ctrl(x19713) // x19661 = RegNew(Const(0))
    isAccum(x19661_d3) = false
    val x19662_d0 = Reg(init=Some(0.0)).name("x19662_d0").ctrl(x19713) // x19662 = RegNew(Const(0))
    isAccum(x19662_d0) = false
    val x19662_d1 = Reg(init=Some(0.0)).name("x19662_d1").ctrl(x19713) // x19662 = RegNew(Const(0))
    isAccum(x19662_d1) = false
    val x19663_d0 = Reg(init=Some(0.0)).name("x19663_d0").ctrl(x19713) // x19663 = RegNew(Const(0))
    isAccum(x19663_d0) = false
    val x19663_d1 = Reg(init=Some(0.0)).name("x19663_d1").ctrl(x19713) // x19663 = RegNew(Const(0))
    isAccum(x19663_d1) = false
    val x19678 = UnitController(style=SeqPipe, level=InnerControl).name("x19678").ctrl(x19713) // UnitPipe(List(b13007, b12915, b12820),Block(Const(())))
    val x19664 = b13006 // FixConvert(b13006,TRUE,_32,_0)
    val x19665 = OpDef(op=FixMul, inputs=List(Const(2), x19664)).name("x19665").ctrl(x19678) // FixMul(Const(2),x19664)
    val x19666 = ReadMem(x19572_d0).name("x19666").ctrl(x19678) // RegRead(x19572)
    val x19667 = OpDef(op=FixAdd, inputs=List(x19666, x19665)).name("x19667").ctrl(x19678) // FixAdd(x19666,x19665)
    val x19668 = OpDef(op=FixAdd, inputs=List(Const(1), x19666)).name("x19668").ctrl(x19678) // FixAdd(Const(1),x19666)
    val x19669 = OpDef(op=FixAdd, inputs=List(x19668, x19665)).name("x19669").ctrl(x19678) // FixAdd(x19668,x19665)
    val x19670 = OpDef(op=BitAnd, inputs=List(b13007, b12915)).name("x19670").ctrl(x19678) // And(b13007,b12915)
    val x19671 = OpDef(op=BitAnd, inputs=List(x19670, b12820)).name("x19671").ctrl(x19678) // And(x19670,b12820)
    val x19672 = LoadBanks(List(x19427_d30_b0), List(x19667, b12819)).name("x19672").ctrl(x19678) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19667, b12819),Const(0),x19671)
    val x19673 = LoadBanks(List(x19428_d36_b0), List(x19667, b12819)).name("x19673").ctrl(x19678) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19667, b12819),Const(0),x19671)
    val x19674_x19660_d0 = WriteMem(x19660_d0, x19667).name("x19674_x19660_d0").ctrl(x19678) // RegWrite(x19660,x19667,x19671)
    val x19674_x19660_d1 = WriteMem(x19660_d1, x19667).name("x19674_x19660_d1").ctrl(x19678) // RegWrite(x19660,x19667,x19671)
    val x19675_x19661_d0 = WriteMem(x19661_d0, x19669).name("x19675_x19661_d0").ctrl(x19678) // RegWrite(x19661,x19669,x19671)
    val x19675_x19661_d1 = WriteMem(x19661_d1, x19669).name("x19675_x19661_d1").ctrl(x19678) // RegWrite(x19661,x19669,x19671)
    val x19675_x19661_d2 = WriteMem(x19661_d2, x19669).name("x19675_x19661_d2").ctrl(x19678) // RegWrite(x19661,x19669,x19671)
    val x19675_x19661_d3 = WriteMem(x19661_d3, x19669).name("x19675_x19661_d3").ctrl(x19678) // RegWrite(x19661,x19669,x19671)
    val x19676_x19662_d0 = WriteMem(x19662_d0, x19672).name("x19676_x19662_d0").ctrl(x19678) // RegWrite(x19662,x19672,x19671)
    val x19676_x19662_d1 = WriteMem(x19662_d1, x19672).name("x19676_x19662_d1").ctrl(x19678) // RegWrite(x19662,x19672,x19671)
    val x19677_x19663_d0 = WriteMem(x19663_d0, x19673).name("x19677_x19663_d0").ctrl(x19678) // RegWrite(x19663,x19673,x19671)
    val x19677_x19663_d1 = WriteMem(x19663_d1, x19673).name("x19677_x19663_d1").ctrl(x19678) // RegWrite(x19663,x19673,x19671)
    val x19687 = UnitController(style=SeqPipe, level=InnerControl).name("x19687").ctrl(x19713) // UnitPipe(List(b13007, b12915, b12820),Block(x19686))
    val x19679 = ReadMem(x19661_d3).name("x19679").ctrl(x19687) // RegRead(x19661)
    val x19680 = OpDef(op=BitAnd, inputs=List(b13007, b12915)).name("x19680").ctrl(x19687) // And(b13007,b12915)
    val x19681 = OpDef(op=BitAnd, inputs=List(x19680, b12820)).name("x19681").ctrl(x19687) // And(x19680,b12820)
    val x19682 = LoadBanks(List(x19427_d29_b0), List(x19679, b12819)).name("x19682").ctrl(x19687) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19679, b12819),Const(0),x19681)
    val x19683 = ReadMem(x19662_d1).name("x19683").ctrl(x19687) // RegRead(x19662)
    val x19684 = OpDef(op=FixAdd, inputs=List(x19683, x19682)).name("x19684").ctrl(x19687) // FixAdd(x19683,x19682)
    val x19685 = ReadMem(x19660_d1).name("x19685").ctrl(x19687) // RegRead(x19660)
    val x19686 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19685, b12819), x19684).name("x19686").ctrl(x19687) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19685, b12819),Const(0),x19684,x19681)
    val x19696 = UnitController(style=SeqPipe, level=InnerControl).name("x19696").ctrl(x19713) // UnitPipe(List(b13007, b12915, b12820),Block(x19695))
    val x19688 = ReadMem(x19661_d2).name("x19688").ctrl(x19696) // RegRead(x19661)
    val x19689 = OpDef(op=BitAnd, inputs=List(b13007, b12915)).name("x19689").ctrl(x19696) // And(b13007,b12915)
    val x19690 = OpDef(op=BitAnd, inputs=List(x19689, b12820)).name("x19690").ctrl(x19696) // And(x19689,b12820)
    val x19691 = LoadBanks(List(x19428_d35_b0), List(x19688, b12819)).name("x19691").ctrl(x19696) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19688, b12819),Const(0),x19690)
    val x19692 = ReadMem(x19663_d1).name("x19692").ctrl(x19696) // RegRead(x19663)
    val x19693 = OpDef(op=FixAdd, inputs=List(x19692, x19691)).name("x19693").ctrl(x19696) // FixAdd(x19692,x19691)
    val x19694 = ReadMem(x19660_d0).name("x19694").ctrl(x19696) // RegRead(x19660)
    val x19695 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19694, b12819), x19693).name("x19695").ctrl(x19696) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19694, b12819),Const(0),x19693,x19690)
    val x19704 = UnitController(style=SeqPipe, level=InnerControl).name("x19704").ctrl(x19713) // UnitPipe(List(b13007, b12915, b12820),Block(x19703))
    val x19697 = ReadMem(x19661_d1).name("x19697").ctrl(x19704) // RegRead(x19661)
    val x19698 = OpDef(op=BitAnd, inputs=List(b13007, b12915)).name("x19698").ctrl(x19704) // And(b13007,b12915)
    val x19699 = OpDef(op=BitAnd, inputs=List(x19698, b12820)).name("x19699").ctrl(x19704) // And(x19698,b12820)
    val x19700 = LoadBanks(List(x19427_d28_b0), List(x19697, b12819)).name("x19700").ctrl(x19704) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19697, b12819),Const(0),x19699)
    val x19701 = ReadMem(x19662_d0).name("x19701").ctrl(x19704) // RegRead(x19662)
    val x19702 = OpDef(op=FixSub, inputs=List(x19701, x19700)).name("x19702").ctrl(x19704) // FixSub(x19701,x19700)
    val x19703 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19697, b12819), x19702).name("x19703").ctrl(x19704) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19697, b12819),Const(0),x19702,x19699)
    val x19712 = UnitController(style=SeqPipe, level=InnerControl).name("x19712").ctrl(x19713) // UnitPipe(List(b13007, b12915, b12820),Block(x19711))
    val x19705 = ReadMem(x19661_d0).name("x19705").ctrl(x19712) // RegRead(x19661)
    val x19706 = OpDef(op=BitAnd, inputs=List(b13007, b12915)).name("x19706").ctrl(x19712) // And(b13007,b12915)
    val x19707 = OpDef(op=BitAnd, inputs=List(x19706, b12820)).name("x19707").ctrl(x19712) // And(x19706,b12820)
    val x19708 = LoadBanks(List(x19428_d34_b0), List(x19705, b12819)).name("x19708").ctrl(x19712) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19705, b12819),Const(0),x19707)
    val x19709 = ReadMem(x19663_d0).name("x19709").ctrl(x19712) // RegRead(x19663)
    val x19710 = OpDef(op=FixSub, inputs=List(x19709, x19708)).name("x19710").ctrl(x19712) // FixSub(x19709,x19708)
    val x19711 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19705, b12819), x19710).name("x19711").ctrl(x19712) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19705, b12819),Const(0),x19710,x19707)
    val x19716 = Counter(min=Const(1), max=Const(8), step=Const(1), par=1).name("x19716").ctrl(x19783) // CounterNew(Const(1),Const(8),Const(1),Const(1))
    val x19717 = CounterChain(List(x19716)).name("x19717").ctrl(x19783) // CounterChainNew(List(x19716))
    val x19782 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19717).name("x19782").ctrl(x19783) // UnrolledForeach(List(b12820),x19717,Block(Const(())),List(List(b13066)),List(List(b13067)))
    val b13066 = CounterIter(x19716, Some(0)).ctrl(x19782).name("b13066")
    val b13067 = DummyOp().ctrl(x19782).name("b13067")
    val x19718_d0 = Reg(init=Some(0.0)).name("x19718_d0").ctrl(x19782) // x19718 = RegNew(Const(0))
    isAccum(x19718_d0) = false
    val x19718_d1 = Reg(init=Some(0.0)).name("x19718_d1").ctrl(x19782) // x19718 = RegNew(Const(0))
    isAccum(x19718_d1) = false
    val x19719_d0 = Reg(init=Some(0.0)).name("x19719_d0").ctrl(x19782) // x19719 = RegNew(Const(0))
    isAccum(x19719_d0) = false
    val x19719_d1 = Reg(init=Some(0.0)).name("x19719_d1").ctrl(x19782) // x19719 = RegNew(Const(0))
    isAccum(x19719_d1) = false
    val x19720_d0 = Reg(init=Some(0.0)).name("x19720_d0").ctrl(x19782) // x19720 = RegNew(Const(0))
    isAccum(x19720_d0) = false
    val x19720_d1 = Reg(init=Some(0.0)).name("x19720_d1").ctrl(x19782) // x19720 = RegNew(Const(0))
    isAccum(x19720_d1) = false
    val x19761 = UnitController(style=SeqPipe, level=InnerControl).name("x19761").ctrl(x19782) // UnitPipe(List(b13067, b12820),Block(Const(())))
    // x19721 = FixConvert(b12819,TRUE,_16,_16) x.tp=FixPt[TRUE,_32,_0] {
    val x19721_int1 = OpDef(op=BitAnd, inputs=List(b12819, Const("01111111111111111111111111111111"))).ctrl(x19761).name("x19721_int1")
    val x19721_int2 = OpDef(op=FixSla, inputs=List(x19721_int1, Const(16))).ctrl(x19761).name("x19721_int2")
    val x19721_frac1 = OpDef(op=BitAnd, inputs=List(b12819, Const("00000000000000000000000000000000"))).ctrl(x19761).name("x19721_frac1")
    val x19721_frac2 = OpDef(op=FixSla, inputs=List(x19721_frac1, Const(16))).ctrl(x19761).name("x19721_frac2")
    val x19721 = OpDef(op=BitOr, inputs=List(x19721_int2, x19721_frac2)).ctrl(x19761).name("x19721")
    // }
    val x19722 = OpDef(op=BitAnd, inputs=List(b13067, b12820)).name("x19722").ctrl(x19761) // And(b13067,b12820)
    val x19723 = LoadBanks(List(x19480_d3_b0), List(b13066)).name("x19723").ctrl(x19761) // SRAMLoad(x19480,List(Const(8)),List(b13066),Const(0),x19722)
    // x19724 = FixConvert(x19723,TRUE,_16,_16) x.tp=FixPt[TRUE,_32,_0] {
    val x19724_int1 = OpDef(op=BitAnd, inputs=List(x19723, Const("01111111111111111111111111111111"))).ctrl(x19761).name("x19724_int1")
    val x19724_int2 = OpDef(op=FixSla, inputs=List(x19724_int1, Const(16))).ctrl(x19761).name("x19724_int2")
    val x19724_frac1 = OpDef(op=BitAnd, inputs=List(x19723, Const("00000000000000000000000000000000"))).ctrl(x19761).name("x19724_frac1")
    val x19724_frac2 = OpDef(op=FixSla, inputs=List(x19724_frac1, Const(16))).ctrl(x19761).name("x19724_frac2")
    val x19724 = OpDef(op=BitOr, inputs=List(x19724_int2, x19724_frac2)).ctrl(x19761).name("x19724")
    // }
    val x19725 = OpDef(op=FixMul, inputs=List(x19721, x19724)).name("x19725").ctrl(x19761) // FixMul(x19721,x19724)
    // x19726 = FixConvert(Const(512),TRUE,_16,_16) x.tp=FixPt[TRUE,_32,_0] {
    val x19726_int1 = OpDef(op=BitAnd, inputs=List(Const(512), Const("01111111111111111111111111111111"))).ctrl(x19761).name("x19726_int1")
    val x19726_int2 = OpDef(op=FixSla, inputs=List(x19726_int1, Const(16))).ctrl(x19761).name("x19726_int2")
    val x19726_frac1 = OpDef(op=BitAnd, inputs=List(Const(512), Const("00000000000000000000000000000000"))).ctrl(x19761).name("x19726_frac1")
    val x19726_frac2 = OpDef(op=FixSla, inputs=List(x19726_frac1, Const(16))).ctrl(x19761).name("x19726_frac2")
    val x19726 = OpDef(op=BitOr, inputs=List(x19726_int2, x19726_frac2)).ctrl(x19761).name("x19726")
    // }
    val x19727 = OpDef(op=FixDiv, inputs=List(x19725, x19726)).name("x19727").ctrl(x19761) // FixDiv(x19725,x19726)
    val x19728 = OpDef(op=FixMul, inputs=List(Const(-6.2831726), x19727)).name("x19728").ctrl(x19761) // FixMul(Const(-6.283172607421875),x19727)
    val x19729 = OpDef(op=FixAdd, inputs=List(x19728, Const(3.1415863))).name("x19729").ctrl(x19761) // FixAdd(x19728,Const(3.1415863037109375))
    val x19730 = Const(6.2831726) // FixConvert(Const(6.283172607421875),TRUE,_16,_16)
    val x19731 = OpDef(op=FixNeg, inputs=List(x19730)).name("x19731").ctrl(x19761) // FixNeg(x19730)
    val x19732 = OpDef(op=FixSra, inputs=List(x19731, Const(2))).name("x19732").ctrl(x19761) // FixRsh(x19731,Const(2))
    val x19733 = OpDef(op=FixLt, inputs=List(x19729, x19732)).name("x19733").ctrl(x19761) // FixLt(x19729,x19732)
    val x19734 = OpDef(op=FixSra, inputs=List(x19730, Const(2))).name("x19734").ctrl(x19761) // FixRsh(x19730,Const(2))
    val x19735 = OpDef(op=FixLt, inputs=List(x19734, x19729)).name("x19735").ctrl(x19761) // FixLt(x19734,x19729)
    val x19736 = OpDef(op=FixSra, inputs=List(x19730, Const(1))).name("x19736").ctrl(x19761) // FixRsh(x19730,Const(1))
    val x19737 = OpDef(op=FixAdd, inputs=List(x19729, x19736)).name("x19737").ctrl(x19761) // FixAdd(x19729,x19736)
    val x19738 = OpDef(op=FixSub, inputs=List(x19729, x19736)).name("x19738").ctrl(x19761) // FixSub(x19729,x19736)
    val x19739 = OpDef(op=MuxOp, inputs=List(x19735, x19738, x19729)).name("x19739").ctrl(x19761) // Mux(x19735,x19738,x19729)
    val x19740 = OpDef(op=MuxOp, inputs=List(x19733, x19737, x19739)).name("x19740").ctrl(x19761) // Mux(x19733,x19737,x19739)
    val x19741 = OpDef(op=FixMul, inputs=List(x19740, x19740)).name("x19741").ctrl(x19761) // FixMul(x19740,x19740)
    val x19742 = OpDef(op=FixSra, inputs=List(x19741, Const(1))).name("x19742").ctrl(x19761) // FixRsh(x19741,Const(1))
    val x19743 = OpDef(op=FixSub, inputs=List(Const(1.0), x19742)).name("x19743").ctrl(x19761) // FixSub(Const(1),x19742)
    val x19744 = OpDef(op=FixMul, inputs=List(x19741, x19740)).name("x19744").ctrl(x19761) // FixMul(x19741,x19740)
    val x19745 = OpDef(op=FixMul, inputs=List(x19744, x19740)).name("x19745").ctrl(x19761) // FixMul(x19744,x19740)
    val x19746 = OpDef(op=FixDiv, inputs=List(x19745, Const(24.0))).name("x19746").ctrl(x19761) // FixDiv(x19745,Const(24))
    val x19747 = OpDef(op=FixAdd, inputs=List(x19743, x19746)).name("x19747").ctrl(x19761) // FixAdd(x19743,x19746)
    val x19748 = OpDef(op=BitOr, inputs=List(x19733, x19735)).name("x19748").ctrl(x19761) // Or(x19733,x19735)
    val x19749 = OpDef(op=MuxOp, inputs=List(x19748, Const(1.0), Const(-1.0))).name("x19749").ctrl(x19761) // Mux(x19748,Const(1),Const(-1))
    val x19750 = OpDef(op=FixMul, inputs=List(x19747, x19749)).name("x19750").ctrl(x19761) // FixMul(x19747,x19749)
    val x19751 = OpDef(op=FixDiv, inputs=List(x19744, Const(6.0))).name("x19751").ctrl(x19761) // FixDiv(x19744,Const(6))
    val x19752 = OpDef(op=FixSub, inputs=List(x19740, x19751)).name("x19752").ctrl(x19761) // FixSub(x19740,x19751)
    val x19753 = OpDef(op=FixMul, inputs=List(x19745, x19740)).name("x19753").ctrl(x19761) // FixMul(x19745,x19740)
    val x19754 = OpDef(op=FixDiv, inputs=List(x19753, Const(120.0))).name("x19754").ctrl(x19761) // FixDiv(x19753,Const(120))
    val x19755 = OpDef(op=FixAdd, inputs=List(x19752, x19754)).name("x19755").ctrl(x19761) // FixAdd(x19752,x19754)
    val x19756 = OpDef(op=FixMul, inputs=List(x19755, x19749)).name("x19756").ctrl(x19761) // FixMul(x19755,x19749)
    val x19757 = LoadBanks(List(x19427_d27_b0), List(b13066, b12819)).name("x19757").ctrl(x19761) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(b13066, b12819),Const(0),x19722)
    val x19758_x19718_d0 = WriteMem(x19718_d0, x19750).name("x19758_x19718_d0").ctrl(x19761) // RegWrite(x19718,x19750,x19722)
    val x19758_x19718_d1 = WriteMem(x19718_d1, x19750).name("x19758_x19718_d1").ctrl(x19761) // RegWrite(x19718,x19750,x19722)
    val x19759_x19719_d0 = WriteMem(x19719_d0, x19756).name("x19759_x19719_d0").ctrl(x19761) // RegWrite(x19719,x19756,x19722)
    val x19759_x19719_d1 = WriteMem(x19719_d1, x19756).name("x19759_x19719_d1").ctrl(x19761) // RegWrite(x19719,x19756,x19722)
    val x19760_x19720_d0 = WriteMem(x19720_d0, x19757).name("x19760_x19720_d0").ctrl(x19761) // RegWrite(x19720,x19757,x19722)
    val x19760_x19720_d1 = WriteMem(x19720_d1, x19757).name("x19760_x19720_d1").ctrl(x19761) // RegWrite(x19720,x19757,x19722)
    val x19771 = UnitController(style=SeqPipe, level=InnerControl).name("x19771").ctrl(x19782) // UnitPipe(List(b13067, b12820),Block(x19770))
    val x19762 = ReadMem(x19720_d1).name("x19762").ctrl(x19771) // RegRead(x19720)
    val x19763 = ReadMem(x19718_d1).name("x19763").ctrl(x19771) // RegRead(x19718)
    val x19764 = OpDef(op=FixMul, inputs=List(x19762, x19763)).name("x19764").ctrl(x19771) // FixMul(x19762,x19763)
    val x19765 = OpDef(op=BitAnd, inputs=List(b13067, b12820)).name("x19765").ctrl(x19771) // And(b13067,b12820)
    val x19766 = LoadBanks(List(x19428_d33_b0), List(b13066, b12819)).name("x19766").ctrl(x19771) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(b13066, b12819),Const(0),x19765)
    val x19767 = ReadMem(x19719_d1).name("x19767").ctrl(x19771) // RegRead(x19719)
    val x19768 = OpDef(op=FixMul, inputs=List(x19766, x19767)).name("x19768").ctrl(x19771) // FixMul(x19766,x19767)
    val x19769 = OpDef(op=FixSub, inputs=List(x19764, x19768)).name("x19769").ctrl(x19771) // FixSub(x19764,x19768)
    val x19770 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(b13066, b12819), x19769).name("x19770").ctrl(x19771) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(b13066, b12819),Const(0),x19769,x19765)
    val x19781 = UnitController(style=SeqPipe, level=InnerControl).name("x19781").ctrl(x19782) // UnitPipe(List(b13067, b12820),Block(x19780))
    val x19772 = ReadMem(x19720_d0).name("x19772").ctrl(x19781) // RegRead(x19720)
    val x19773 = ReadMem(x19719_d0).name("x19773").ctrl(x19781) // RegRead(x19719)
    val x19774 = OpDef(op=FixMul, inputs=List(x19772, x19773)).name("x19774").ctrl(x19781) // FixMul(x19772,x19773)
    val x19775 = OpDef(op=BitAnd, inputs=List(b13067, b12820)).name("x19775").ctrl(x19781) // And(b13067,b12820)
    val x19776 = LoadBanks(List(x19428_d32_b0), List(b13066, b12819)).name("x19776").ctrl(x19781) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(b13066, b12819),Const(0),x19775)
    val x19777 = ReadMem(x19718_d0).name("x19777").ctrl(x19781) // RegRead(x19718)
    val x19778 = OpDef(op=FixMul, inputs=List(x19776, x19777)).name("x19778").ctrl(x19781) // FixMul(x19776,x19777)
    val x19779 = OpDef(op=FixAdd, inputs=List(x19774, x19778)).name("x19779").ctrl(x19781) // FixAdd(x19774,x19778)
    val x19780 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b13066, b12819), x19779).name("x19780").ctrl(x19781) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(b13066, b12819),Const(0),x19779,x19775)
    val x19784_d0_b0 = SRAM(size=8, banking=NoBanking()).name("x19784_d0_b0").ctrl(x20605) // x19784 = SRAMNew(List(Const(8)))
    isAccum(x19784_d0_b0) = false
    val x19784_d1_b0 = SRAM(size=8, banking=NoBanking()).name("x19784_d1_b0").ctrl(x20605) // x19784 = SRAMNew(List(Const(8)))
    isAccum(x19784_d1_b0) = false
    val x19784_d2_b0 = SRAM(size=8, banking=NoBanking()).name("x19784_d2_b0").ctrl(x20605) // x19784 = SRAMNew(List(Const(8)))
    isAccum(x19784_d2_b0) = false
    val x19784_d3_b0 = SRAM(size=8, banking=NoBanking()).name("x19784_d3_b0").ctrl(x20605) // x19784 = SRAMNew(List(Const(8)))
    isAccum(x19784_d3_b0) = false
    val x19784_d4_b0 = SRAM(size=8, banking=NoBanking()).name("x19784_d4_b0").ctrl(x20605) // x19784 = SRAMNew(List(Const(8)))
    isAccum(x19784_d4_b0) = false
    val x19784_d5_b0 = SRAM(size=8, banking=NoBanking()).name("x19784_d5_b0").ctrl(x20605) // x19784 = SRAMNew(List(Const(8)))
    isAccum(x19784_d5_b0) = false
    val x19785_d0_b0 = SRAM(size=8, banking=NoBanking()).name("x19785_d0_b0").ctrl(x20605) // x19785 = SRAMNew(List(Const(8)))
    isAccum(x19785_d0_b0) = false
    val x19785_d1_b0 = SRAM(size=8, banking=NoBanking()).name("x19785_d1_b0").ctrl(x20605) // x19785 = SRAMNew(List(Const(8)))
    isAccum(x19785_d1_b0) = false
    val x19785_d2_b0 = SRAM(size=8, banking=NoBanking()).name("x19785_d2_b0").ctrl(x20605) // x19785 = SRAMNew(List(Const(8)))
    isAccum(x19785_d2_b0) = false
    val x19785_d3_b0 = SRAM(size=8, banking=NoBanking()).name("x19785_d3_b0").ctrl(x20605) // x19785 = SRAMNew(List(Const(8)))
    isAccum(x19785_d3_b0) = false
    val x19786 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x19786").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x19787 = CounterChain(List(x19786)).name("x19787").ctrl(x20605) // CounterChainNew(List(x19786))
    val x19810 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19787).name("x19810").ctrl(x20605) // UnrolledForeach(List(Const(true)),x19787,Block(Const(())),List(List(b13138)),List(List(b13139)))
    val b13138 = CounterIter(x19786, Some(0)).ctrl(x19810).name("b13138")
    val b13139 = DummyOp().ctrl(x19810).name("b13139")
    val x19788 = Reg(init=Some(0)).name("x19788").ctrl(x19810) // x19788 = RegNew(Const(0))
    isAccum(x19788) = false
    val x19795 = UnitController(style=SeqPipe, level=InnerControl).name("x19795").ctrl(x19810) // UnitPipe(List(b13139),Block(Const(())))
    val x19789 = b13138 // FixConvert(b13138,TRUE,_32,_0)
    val x19790 = OpDef(op=FixSra, inputs=List(x19789, Const(3))).name("x19790").ctrl(x19795) // FixRsh(x19789,Const(3))
    val x19791 = OpDef(op=BitAnd, inputs=List(x19789, Const(7))).name("x19791").ctrl(x19795) // FixAnd(x19789,Const(7))
    val x19792 = OpDef(op=FixSla, inputs=List(x19790, Const(3))).name("x19792").ctrl(x19795) // FixLsh(x19790,Const(3))
    val x19793 = OpDef(op=FixAdd, inputs=List(x19792, x19791)).name("x19793").ctrl(x19795) // FixAdd(x19792,x19791)
    val x19794_x19788 = WriteMem(x19788, x19793).name("x19794_x19788").ctrl(x19795) // RegWrite(x19788,x19793,b13139)
    val x19796 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x19796").ctrl(x19810) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x19797 = CounterChain(List(x19796)).name("x19797").ctrl(x19810) // CounterChainNew(List(x19796))
    val x19809 = LoopController(style=SeqPipe, level=InnerControl, cchain=x19797).name("x19809").ctrl(x19810) // UnrolledForeach(List(b13139),x19797,Block(Const(())),List(List(b13150)),List(List(b13151)))
    val b13150 = CounterIter(x19796, None).ctrl(x19809).name("b13150")
    val b13151 = DummyOp().ctrl(x19809).name("b13151")
    val x19798 = OpDef(op=BitAnd, inputs=List(b13151, b13139)).name("x19798").ctrl(x19809) // And(b13151,b13139)
    val x19799 = LoadBanks(List(x19784_d5_b0), List(b13150)).name("x19799").ctrl(x19809) // ParSRAMLoad(x19784,List(List(b13150)),List(x19798))
    val x19800 = x19799 // x19800 = VectorApply(x19799,0)
    val x19801 = LoadBanks(List(x19785_d3_b0), List(b13150)).name("x19801").ctrl(x19809) // ParSRAMLoad(x19785,List(List(b13150)),List(x19798))
    val x19802 = x19801 // x19802 = VectorApply(x19801,0)
    val x19803 = OpDef(op=FixMul, inputs=List(x19800, Const(66))).name("x19803").ctrl(x19809) // FixMul(x19800,Const(66))
    val x19804 = ReadMem(x19788).name("x19804").ctrl(x19809) // RegRead(x19788)
    val x19805 = OpDef(op=FixAdd, inputs=List(x19803, x19804)).name("x19805").ctrl(x19809) // FixAdd(x19803,x19804)
    val x19806 = LoadBanks(List(x19427_d26_b0), List(x19802, b13138)).name("x19806").ctrl(x19809) // ParSRAMLoad(x19427,List(List(x19802, b13138)),List(x19798))
    val x19807 = x19806 // x19807 = VectorApply(x19806,0)
    val x19808 = StoreBanks(List(x19429_d0_b0, x19429_d1_b0, x19429_d2_b0, x19429_d3_b0), List(x19805), x19807).name("x19808").ctrl(x19809) // ParSRAMStore(x19429,List(List(x19805)),List(x19807),List(x19798))
    val x19811 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x19811").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x19812 = CounterChain(List(x19811)).name("x19812").ctrl(x20605) // CounterChainNew(List(x19811))
    val x19833 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19812).name("x19833").ctrl(x20605) // UnrolledForeach(List(Const(true)),x19812,Block(Const(())),List(List(b13167)),List(List(b13168)))
    val b13167 = CounterIter(x19811, Some(0)).ctrl(x19833).name("b13167")
    val b13168 = DummyOp().ctrl(x19833).name("b13168")
    val x19813 = Reg(init=Some(0)).name("x19813").ctrl(x19833) // x19813 = RegNew(Const(0))
    isAccum(x19813) = false
    val x19820 = UnitController(style=SeqPipe, level=InnerControl).name("x19820").ctrl(x19833) // UnitPipe(List(b13168),Block(Const(())))
    val x19814 = b13167 // FixConvert(b13167,TRUE,_32,_0)
    val x19815 = OpDef(op=FixSra, inputs=List(x19814, Const(3))).name("x19815").ctrl(x19820) // FixRsh(x19814,Const(3))
    val x19816 = OpDef(op=BitAnd, inputs=List(x19814, Const(7))).name("x19816").ctrl(x19820) // FixAnd(x19814,Const(7))
    val x19817 = OpDef(op=FixMul, inputs=List(x19816, Const(66))).name("x19817").ctrl(x19820) // FixMul(x19816,Const(66))
    val x19818 = OpDef(op=FixAdd, inputs=List(x19817, x19815)).name("x19818").ctrl(x19820) // FixAdd(x19817,x19815)
    val x19819_x19813 = WriteMem(x19813, x19818).name("x19819_x19813").ctrl(x19820) // RegWrite(x19813,x19818,b13168)
    val x19821 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x19821").ctrl(x19833) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x19822 = CounterChain(List(x19821)).name("x19822").ctrl(x19833) // CounterChainNew(List(x19821))
    val x19832 = LoopController(style=SeqPipe, level=InnerControl, cchain=x19822).name("x19832").ctrl(x19833) // UnrolledForeach(List(b13168),x19822,Block(Const(())),List(List(b13179)),List(List(b13180)))
    val b13179 = CounterIter(x19821, None).ctrl(x19832).name("b13179")
    val b13180 = DummyOp().ctrl(x19832).name("b13180")
    val x19823 = OpDef(op=BitAnd, inputs=List(b13180, b13168)).name("x19823").ctrl(x19832) // And(b13180,b13168)
    val x19824 = LoadBanks(List(x19784_d4_b0), List(b13179)).name("x19824").ctrl(x19832) // ParSRAMLoad(x19784,List(List(b13179)),List(x19823))
    val x19825 = x19824 // x19825 = VectorApply(x19824,0)
    val x19826 = OpDef(op=FixSla, inputs=List(x19825, Const(3))).name("x19826").ctrl(x19832) // FixLsh(x19825,Const(3))
    val x19827 = ReadMem(x19813).name("x19827").ctrl(x19832) // RegRead(x19813)
    val x19828 = OpDef(op=FixAdd, inputs=List(x19826, x19827)).name("x19828").ctrl(x19832) // FixAdd(x19826,x19827)
    val x19829 = LoadBanks(List(x19429_d3_b0), List(x19828)).name("x19829").ctrl(x19832) // ParSRAMLoad(x19429,List(List(x19828)),List(x19823))
    val x19830 = x19829 // x19830 = VectorApply(x19829,0)
    val x19831 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19825, b13167), x19830).name("x19831").ctrl(x19832) // ParSRAMStore(x19427,List(List(x19825, b13167)),List(x19830),List(x19823))
    val x19834 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x19834").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x19835 = CounterChain(List(x19834)).name("x19835").ctrl(x20605) // CounterChainNew(List(x19834))
    val x19858 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19835).name("x19858").ctrl(x20605) // UnrolledForeach(List(Const(true)),x19835,Block(Const(())),List(List(b13194)),List(List(b13195)))
    val b13194 = CounterIter(x19834, Some(0)).ctrl(x19858).name("b13194")
    val b13195 = DummyOp().ctrl(x19858).name("b13195")
    val x19836 = Reg(init=Some(0)).name("x19836").ctrl(x19858) // x19836 = RegNew(Const(0))
    isAccum(x19836) = false
    val x19843 = UnitController(style=SeqPipe, level=InnerControl).name("x19843").ctrl(x19858) // UnitPipe(List(b13195),Block(Const(())))
    val x19837 = b13194 // FixConvert(b13194,TRUE,_32,_0)
    val x19838 = OpDef(op=FixSra, inputs=List(x19837, Const(3))).name("x19838").ctrl(x19843) // FixRsh(x19837,Const(3))
    val x19839 = OpDef(op=BitAnd, inputs=List(x19837, Const(7))).name("x19839").ctrl(x19843) // FixAnd(x19837,Const(7))
    val x19840 = OpDef(op=FixSla, inputs=List(x19838, Const(3))).name("x19840").ctrl(x19843) // FixLsh(x19838,Const(3))
    val x19841 = OpDef(op=FixAdd, inputs=List(x19840, x19839)).name("x19841").ctrl(x19843) // FixAdd(x19840,x19839)
    val x19842_x19836 = WriteMem(x19836, x19841).name("x19842_x19836").ctrl(x19843) // RegWrite(x19836,x19841,b13195)
    val x19844 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x19844").ctrl(x19858) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x19845 = CounterChain(List(x19844)).name("x19845").ctrl(x19858) // CounterChainNew(List(x19844))
    val x19857 = LoopController(style=SeqPipe, level=InnerControl, cchain=x19845).name("x19857").ctrl(x19858) // UnrolledForeach(List(b13195),x19845,Block(Const(())),List(List(b13206)),List(List(b13207)))
    val b13206 = CounterIter(x19844, None).ctrl(x19857).name("b13206")
    val b13207 = DummyOp().ctrl(x19857).name("b13207")
    val x19846 = OpDef(op=BitAnd, inputs=List(b13207, b13195)).name("x19846").ctrl(x19857) // And(b13207,b13195)
    val x19847 = LoadBanks(List(x19784_d3_b0), List(b13206)).name("x19847").ctrl(x19857) // ParSRAMLoad(x19784,List(List(b13206)),List(x19846))
    val x19848 = x19847 // x19848 = VectorApply(x19847,0)
    val x19849 = LoadBanks(List(x19785_d2_b0), List(b13206)).name("x19849").ctrl(x19857) // ParSRAMLoad(x19785,List(List(b13206)),List(x19846))
    val x19850 = x19849 // x19850 = VectorApply(x19849,0)
    val x19851 = OpDef(op=FixMul, inputs=List(x19848, Const(66))).name("x19851").ctrl(x19857) // FixMul(x19848,Const(66))
    val x19852 = ReadMem(x19836).name("x19852").ctrl(x19857) // RegRead(x19836)
    val x19853 = OpDef(op=FixAdd, inputs=List(x19851, x19852)).name("x19853").ctrl(x19857) // FixAdd(x19851,x19852)
    val x19854 = LoadBanks(List(x19428_d31_b0), List(x19850, b13194)).name("x19854").ctrl(x19857) // ParSRAMLoad(x19428,List(List(x19850, b13194)),List(x19846))
    val x19855 = x19854 // x19855 = VectorApply(x19854,0)
    val x19856 = StoreBanks(List(x19429_d0_b0, x19429_d1_b0, x19429_d2_b0, x19429_d3_b0), List(x19853), x19855).name("x19856").ctrl(x19857) // ParSRAMStore(x19429,List(List(x19853)),List(x19855),List(x19846))
    val x19859 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x19859").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x19860 = CounterChain(List(x19859)).name("x19860").ctrl(x20605) // CounterChainNew(List(x19859))
    val x19880 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19860).name("x19880").ctrl(x20605) // UnrolledForeach(List(Const(true)),x19860,Block(Const(())),List(List(b13223)),List(List(b13224)))
    val b13223 = CounterIter(x19859, Some(0)).ctrl(x19880).name("b13223")
    val b13224 = DummyOp().ctrl(x19880).name("b13224")
    val x19861 = Reg(init=Some(0)).name("x19861").ctrl(x19880) // x19861 = RegNew(Const(0))
    isAccum(x19861) = false
    val x19868 = UnitController(style=SeqPipe, level=InnerControl).name("x19868").ctrl(x19880) // UnitPipe(List(b13224),Block(Const(())))
    val x19862 = b13223 // FixConvert(b13223,TRUE,_32,_0)
    val x19863 = OpDef(op=FixSra, inputs=List(x19862, Const(3))).name("x19863").ctrl(x19868) // FixRsh(x19862,Const(3))
    val x19864 = OpDef(op=BitAnd, inputs=List(x19862, Const(7))).name("x19864").ctrl(x19868) // FixAnd(x19862,Const(7))
    val x19865 = OpDef(op=FixMul, inputs=List(x19864, Const(66))).name("x19865").ctrl(x19868) // FixMul(x19864,Const(66))
    val x19866 = OpDef(op=FixAdd, inputs=List(x19865, x19863)).name("x19866").ctrl(x19868) // FixAdd(x19865,x19863)
    val x19867_x19861 = WriteMem(x19861, x19866).name("x19867_x19861").ctrl(x19868) // RegWrite(x19861,x19866,b13224)
    val x19869 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x19869").ctrl(x19880) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x19870 = CounterChain(List(x19869)).name("x19870").ctrl(x19880) // CounterChainNew(List(x19869))
    val x19879 = LoopController(style=SeqPipe, level=InnerControl, cchain=x19870).name("x19879").ctrl(x19880) // UnrolledForeach(List(b13224),x19870,Block(Const(())),List(List(b13235)),List(List(b13236)))
    val b13235 = CounterIter(x19869, None).ctrl(x19879).name("b13235")
    val b13236 = DummyOp().ctrl(x19879).name("b13236")
    val x19871 = b13235 // FixConvert(b13235,TRUE,_32,_0)
    val x19872 = OpDef(op=FixSla, inputs=List(x19871, Const(3))).name("x19872").ctrl(x19879) // FixLsh(x19871,Const(3))
    val x19873 = ReadMem(x19861).name("x19873").ctrl(x19879) // RegRead(x19861)
    val x19874 = OpDef(op=FixAdd, inputs=List(x19872, x19873)).name("x19874").ctrl(x19879) // FixAdd(x19872,x19873)
    val x19875 = OpDef(op=BitAnd, inputs=List(b13236, b13224)).name("x19875").ctrl(x19879) // And(b13236,b13224)
    val x19876 = LoadBanks(List(x19429_d2_b0), List(x19874)).name("x19876").ctrl(x19879) // ParSRAMLoad(x19429,List(List(x19874)),List(x19875))
    val x19877 = x19876 // x19877 = VectorApply(x19876,0)
    val x19878 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b13235, b13223), x19877).name("x19878").ctrl(x19879) // ParSRAMStore(x19428,List(List(b13235, b13223)),List(x19877),List(x19875))
    val x19881 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x19881").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x19882 = CounterChain(List(x19881)).name("x19882").ctrl(x20605) // CounterChainNew(List(x19881))
    val x20189 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19882).name("x20189").ctrl(x20605) // UnrolledForeach(List(Const(true)),x19882,Block(Const(())),List(List(b13249)),List(List(b13250)))
    val b13249 = CounterIter(x19881, Some(0)).ctrl(x20189).name("b13249")
    val b13250 = DummyOp().ctrl(x20189).name("b13250")
    val x19883 = Counter(min=Const(0), max=Const(4), step=Const(1), par=1).name("x19883").ctrl(x20189) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x19884 = CounterChain(List(x19883)).name("x19884").ctrl(x20189) // CounterChainNew(List(x19883))
    val x19926 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19884).name("x19926").ctrl(x20189) // UnrolledForeach(List(b13250),x19884,Block(Const(())),List(List(b13253)),List(List(b13254)))
    val b13253 = CounterIter(x19883, Some(0)).ctrl(x19926).name("b13253")
    val b13254 = DummyOp().ctrl(x19926).name("b13254")
    val x19925 = UnitController(style=SeqPipe, level=OuterControl).name("x19925").ctrl(x19926) // UnitPipe(List(b13254, b13250),Block(Const(())))
    val x19885_d0 = Reg(init=Some(0)).name("x19885_d0").ctrl(x19925) // x19885 = RegNew(Const(0))
    isAccum(x19885_d0) = false
    val x19885_d1 = Reg(init=Some(0)).name("x19885_d1").ctrl(x19925) // x19885 = RegNew(Const(0))
    isAccum(x19885_d1) = false
    val x19885_d2 = Reg(init=Some(0)).name("x19885_d2").ctrl(x19925) // x19885 = RegNew(Const(0))
    isAccum(x19885_d2) = false
    val x19885_d3 = Reg(init=Some(0)).name("x19885_d3").ctrl(x19925) // x19885 = RegNew(Const(0))
    isAccum(x19885_d3) = false
    val x19886_d0 = Reg(init=Some(0.0)).name("x19886_d0").ctrl(x19925) // x19886 = RegNew(Const(0))
    isAccum(x19886_d0) = false
    val x19886_d1 = Reg(init=Some(0.0)).name("x19886_d1").ctrl(x19925) // x19886 = RegNew(Const(0))
    isAccum(x19886_d1) = false
    val x19887_d0 = Reg(init=Some(0.0)).name("x19887_d0").ctrl(x19925) // x19887 = RegNew(Const(0))
    isAccum(x19887_d0) = false
    val x19887_d1 = Reg(init=Some(0.0)).name("x19887_d1").ctrl(x19925) // x19887 = RegNew(Const(0))
    isAccum(x19887_d1) = false
    val x19896 = UnitController(style=SeqPipe, level=InnerControl).name("x19896").ctrl(x19925) // UnitPipe(List(b13254, b13250),Block(Const(())))
    val x19888 = b13253 // FixConvert(b13253,TRUE,_32,_0)
    val x19889 = OpDef(op=FixAdd, inputs=List(Const(4), x19888)).name("x19889").ctrl(x19896) // FixAdd(Const(4),x19888)
    val x19890 = OpDef(op=BitAnd, inputs=List(b13254, b13250)).name("x19890").ctrl(x19896) // And(b13254,b13250)
    val x19891 = LoadBanks(List(x19427_d25_b0), List(b13253, b13249)).name("x19891").ctrl(x19896) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(b13253, b13249),Const(0),x19890)
    val x19892 = LoadBanks(List(x19428_d30_b0), List(b13253, b13249)).name("x19892").ctrl(x19896) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(b13253, b13249),Const(0),x19890)
    val x19893_x19885_d0 = WriteMem(x19885_d0, x19889).name("x19893_x19885_d0").ctrl(x19896) // RegWrite(x19885,x19889,x19890)
    val x19893_x19885_d1 = WriteMem(x19885_d1, x19889).name("x19893_x19885_d1").ctrl(x19896) // RegWrite(x19885,x19889,x19890)
    val x19893_x19885_d2 = WriteMem(x19885_d2, x19889).name("x19893_x19885_d2").ctrl(x19896) // RegWrite(x19885,x19889,x19890)
    val x19893_x19885_d3 = WriteMem(x19885_d3, x19889).name("x19893_x19885_d3").ctrl(x19896) // RegWrite(x19885,x19889,x19890)
    val x19894_x19886_d0 = WriteMem(x19886_d0, x19891).name("x19894_x19886_d0").ctrl(x19896) // RegWrite(x19886,x19891,x19890)
    val x19894_x19886_d1 = WriteMem(x19886_d1, x19891).name("x19894_x19886_d1").ctrl(x19896) // RegWrite(x19886,x19891,x19890)
    val x19895_x19887_d0 = WriteMem(x19887_d0, x19892).name("x19895_x19887_d0").ctrl(x19896) // RegWrite(x19887,x19892,x19890)
    val x19895_x19887_d1 = WriteMem(x19887_d1, x19892).name("x19895_x19887_d1").ctrl(x19896) // RegWrite(x19887,x19892,x19890)
    val x19903 = UnitController(style=SeqPipe, level=InnerControl).name("x19903").ctrl(x19925) // UnitPipe(List(b13254, b13250),Block(x19902))
    val x19897 = ReadMem(x19885_d3).name("x19897").ctrl(x19903) // RegRead(x19885)
    val x19898 = OpDef(op=BitAnd, inputs=List(b13254, b13250)).name("x19898").ctrl(x19903) // And(b13254,b13250)
    val x19899 = LoadBanks(List(x19427_d24_b0), List(x19897, b13249)).name("x19899").ctrl(x19903) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19897, b13249),Const(0),x19898)
    val x19900 = ReadMem(x19886_d1).name("x19900").ctrl(x19903) // RegRead(x19886)
    val x19901 = OpDef(op=FixAdd, inputs=List(x19900, x19899)).name("x19901").ctrl(x19903) // FixAdd(x19900,x19899)
    val x19902 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(b13253, b13249), x19901).name("x19902").ctrl(x19903) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(b13253, b13249),Const(0),x19901,x19898)
    val x19910 = UnitController(style=SeqPipe, level=InnerControl).name("x19910").ctrl(x19925) // UnitPipe(List(b13254, b13250),Block(x19909))
    val x19904 = ReadMem(x19885_d2).name("x19904").ctrl(x19910) // RegRead(x19885)
    val x19905 = OpDef(op=BitAnd, inputs=List(b13254, b13250)).name("x19905").ctrl(x19910) // And(b13254,b13250)
    val x19906 = LoadBanks(List(x19428_d29_b0), List(x19904, b13249)).name("x19906").ctrl(x19910) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19904, b13249),Const(0),x19905)
    val x19907 = ReadMem(x19887_d1).name("x19907").ctrl(x19910) // RegRead(x19887)
    val x19908 = OpDef(op=FixAdd, inputs=List(x19907, x19906)).name("x19908").ctrl(x19910) // FixAdd(x19907,x19906)
    val x19909 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b13253, b13249), x19908).name("x19909").ctrl(x19910) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(b13253, b13249),Const(0),x19908,x19905)
    val x19917 = UnitController(style=SeqPipe, level=InnerControl).name("x19917").ctrl(x19925) // UnitPipe(List(b13254, b13250),Block(x19916))
    val x19911 = ReadMem(x19885_d1).name("x19911").ctrl(x19917) // RegRead(x19885)
    val x19912 = OpDef(op=BitAnd, inputs=List(b13254, b13250)).name("x19912").ctrl(x19917) // And(b13254,b13250)
    val x19913 = LoadBanks(List(x19427_d23_b0), List(x19911, b13249)).name("x19913").ctrl(x19917) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19911, b13249),Const(0),x19912)
    val x19914 = ReadMem(x19886_d0).name("x19914").ctrl(x19917) // RegRead(x19886)
    val x19915 = OpDef(op=FixSub, inputs=List(x19914, x19913)).name("x19915").ctrl(x19917) // FixSub(x19914,x19913)
    val x19916 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19911, b13249), x19915).name("x19916").ctrl(x19917) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19911, b13249),Const(0),x19915,x19912)
    val x19924 = UnitController(style=SeqPipe, level=InnerControl).name("x19924").ctrl(x19925) // UnitPipe(List(b13254, b13250),Block(x19923))
    val x19918 = ReadMem(x19885_d0).name("x19918").ctrl(x19924) // RegRead(x19885)
    val x19919 = OpDef(op=BitAnd, inputs=List(b13254, b13250)).name("x19919").ctrl(x19924) // And(b13254,b13250)
    val x19920 = LoadBanks(List(x19428_d28_b0), List(x19918, b13249)).name("x19920").ctrl(x19924) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19918, b13249),Const(0),x19919)
    val x19921 = ReadMem(x19887_d0).name("x19921").ctrl(x19924) // RegRead(x19887)
    val x19922 = OpDef(op=FixSub, inputs=List(x19921, x19920)).name("x19922").ctrl(x19924) // FixSub(x19921,x19920)
    val x19923 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19918, b13249), x19922).name("x19923").ctrl(x19924) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19918, b13249),Const(0),x19922,x19919)
    val x19927 = Counter(min=Const(0), max=Const(3), step=Const(1), par=1).name("x19927").ctrl(x20189) // CounterNew(Const(0),Const(3),Const(1),Const(1))
    val x19928 = CounterChain(List(x19927)).name("x19928").ctrl(x20189) // CounterChainNew(List(x19927))
    val x19969 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19928).name("x19969").ctrl(x20189) // UnrolledForeach(List(b13250),x19928,Block(Const(())),List(List(b13299)),List(List(b13300)))
    val b13299 = CounterIter(x19927, Some(0)).ctrl(x19969).name("b13299")
    val b13300 = DummyOp().ctrl(x19969).name("b13300")
    val x19929_d0_b0 = SRAM(size=6, banking=NoBanking()).name("x19929_d0_b0").ctrl(x19969) // x19929 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x19929_d0_b0) = false
    val x19929_d1_b0 = SRAM(size=6, banking=NoBanking()).name("x19929_d1_b0").ctrl(x19969) // x19929 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x19929_d1_b0) = false
    val x19929_d2_b0 = SRAM(size=6, banking=NoBanking()).name("x19929_d2_b0").ctrl(x19969) // x19929 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x19929_d2_b0) = false
    val x19929_d3_b0 = SRAM(size=6, banking=NoBanking()).name("x19929_d3_b0").ctrl(x19969) // x19929 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x19929_d3_b0) = false
    val x19930_d0 = Reg(init=Some(0.0)).name("x19930_d0").ctrl(x19969) // x19930 = RegNew(Const(0))
    isAccum(x19930_d0) = false
    val x19930_d1 = Reg(init=Some(0.0)).name("x19930_d1").ctrl(x19969) // x19930 = RegNew(Const(0))
    isAccum(x19930_d1) = false
    val x19931_d0 = Reg(init=Some(0.0)).name("x19931_d0").ctrl(x19969) // x19931 = RegNew(Const(0))
    isAccum(x19931_d0) = false
    val x19931_d1 = Reg(init=Some(0.0)).name("x19931_d1").ctrl(x19969) // x19931 = RegNew(Const(0))
    isAccum(x19931_d1) = false
    val x19940 = UnitController(style=SeqPipe, level=InnerControl).name("x19940").ctrl(x19969) // UnitPipe(List(b13300, b13250),Block(Const(())))
    val x19932 = b13299 // FixConvert(b13299,TRUE,_32,_0)
    val x19933 = OpDef(op=FixAdd, inputs=List(Const(5), x19932)).name("x19933").ctrl(x19940) // FixAdd(Const(5),x19932)
    val x19934 = OpDef(op=BitAnd, inputs=List(b13300, b13250)).name("x19934").ctrl(x19940) // And(b13300,b13250)
    val x19935 = LoadBanks(List(x19427_d22_b0), List(x19933, b13249)).name("x19935").ctrl(x19940) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19933, b13249),Const(0),x19934)
    val x19936 = OpDef(op=FixEql, inputs=List(x19932, Const(1))).name("x19936").ctrl(x19940) // FixEql(x19932,Const(1))
    val x19937 = OpDef(op=MuxOp, inputs=List(x19936, Const(1.0), Const(0.7070923))).name("x19937").ctrl(x19940) // Mux(x19936,Const(1),Const(0.70709228515625))
    val x19938_x19930_d0 = WriteMem(x19930_d0, x19935).name("x19938_x19930_d0").ctrl(x19940) // RegWrite(x19930,x19935,x19934)
    val x19938_x19930_d1 = WriteMem(x19930_d1, x19935).name("x19938_x19930_d1").ctrl(x19940) // RegWrite(x19930,x19935,x19934)
    val x19939_x19931_d0 = WriteMem(x19931_d0, x19937).name("x19939_x19931_d0").ctrl(x19940) // RegWrite(x19931,x19937,x19934)
    val x19939_x19931_d1 = WriteMem(x19931_d1, x19937).name("x19939_x19931_d1").ctrl(x19940) // RegWrite(x19931,x19937,x19934)
    val x19954 = UnitController(style=SeqPipe, level=InnerControl).name("x19954").ctrl(x19969) // UnitPipe(List(b13300, b13250),Block(x19953))
    val x19941 = b13299 // FixConvert(b13299,TRUE,_32,_0)
    val x19942 = OpDef(op=FixAdd, inputs=List(Const(5), x19941)).name("x19942").ctrl(x19954) // FixAdd(Const(5),x19941)
    val x19943 = OpDef(op=BitAnd, inputs=List(b13300, b13250)).name("x19943").ctrl(x19954) // And(b13300,b13250)
    val x19944 = LoadBanks(List(x19929_d3_b0), List(Const(0), b13299)).name("x19944").ctrl(x19954) // SRAMLoad(x19929,List(Const(2), Const(3)),List(Const(0), b13299),Const(0),x19943)
    val x19945 = ReadMem(x19930_d1).name("x19945").ctrl(x19954) // RegRead(x19930)
    val x19946 = OpDef(op=FixMul, inputs=List(x19945, x19944)).name("x19946").ctrl(x19954) // FixMul(x19945,x19944)
    val x19947 = LoadBanks(List(x19428_d27_b0), List(x19942, b13249)).name("x19947").ctrl(x19954) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19942, b13249),Const(0),x19943)
    val x19948 = LoadBanks(List(x19929_d2_b0), List(Const(1), b13299)).name("x19948").ctrl(x19954) // SRAMLoad(x19929,List(Const(2), Const(3)),List(Const(1), b13299),Const(0),x19943)
    val x19949 = OpDef(op=FixMul, inputs=List(x19947, x19948)).name("x19949").ctrl(x19954) // FixMul(x19947,x19948)
    val x19950 = OpDef(op=FixSub, inputs=List(x19946, x19949)).name("x19950").ctrl(x19954) // FixSub(x19946,x19949)
    val x19951 = ReadMem(x19931_d1).name("x19951").ctrl(x19954) // RegRead(x19931)
    val x19952 = OpDef(op=FixMul, inputs=List(x19950, x19951)).name("x19952").ctrl(x19954) // FixMul(x19950,x19951)
    val x19953 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x19942, b13249), x19952).name("x19953").ctrl(x19954) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x19942, b13249),Const(0),x19952,x19943)
    val x19968 = UnitController(style=SeqPipe, level=InnerControl).name("x19968").ctrl(x19969) // UnitPipe(List(b13300, b13250),Block(x19967))
    val x19955 = b13299 // FixConvert(b13299,TRUE,_32,_0)
    val x19956 = OpDef(op=FixAdd, inputs=List(Const(5), x19955)).name("x19956").ctrl(x19968) // FixAdd(Const(5),x19955)
    val x19957 = OpDef(op=BitAnd, inputs=List(b13300, b13250)).name("x19957").ctrl(x19968) // And(b13300,b13250)
    val x19958 = LoadBanks(List(x19929_d1_b0), List(Const(1), b13299)).name("x19958").ctrl(x19968) // SRAMLoad(x19929,List(Const(2), Const(3)),List(Const(1), b13299),Const(0),x19957)
    val x19959 = ReadMem(x19930_d0).name("x19959").ctrl(x19968) // RegRead(x19930)
    val x19960 = OpDef(op=FixMul, inputs=List(x19959, x19958)).name("x19960").ctrl(x19968) // FixMul(x19959,x19958)
    val x19961 = LoadBanks(List(x19428_d26_b0), List(x19956, b13249)).name("x19961").ctrl(x19968) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19956, b13249),Const(0),x19957)
    val x19962 = LoadBanks(List(x19929_d0_b0), List(Const(0), b13299)).name("x19962").ctrl(x19968) // SRAMLoad(x19929,List(Const(2), Const(3)),List(Const(0), b13299),Const(0),x19957)
    val x19963 = OpDef(op=FixMul, inputs=List(x19961, x19962)).name("x19963").ctrl(x19968) // FixMul(x19961,x19962)
    val x19964 = OpDef(op=FixAdd, inputs=List(x19960, x19963)).name("x19964").ctrl(x19968) // FixAdd(x19960,x19963)
    val x19965 = ReadMem(x19931_d0).name("x19965").ctrl(x19968) // RegRead(x19931)
    val x19966 = OpDef(op=FixMul, inputs=List(x19964, x19965)).name("x19966").ctrl(x19968) // FixMul(x19964,x19965)
    val x19967 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x19956, b13249), x19966).name("x19967").ctrl(x19968) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x19956, b13249),Const(0),x19966,x19957)
    val x19970 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x19970").ctrl(x20189) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x19971 = CounterChain(List(x19970)).name("x19971").ctrl(x20189) // CounterChainNew(List(x19970))
    val x20115 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19971).name("x20115").ctrl(x20189) // UnrolledForeach(List(b13250),x19971,Block(Const(())),List(List(b13344)),List(List(b13345)))
    val b13344 = CounterIter(x19970, Some(0)).ctrl(x20115).name("b13344")
    val b13345 = DummyOp().ctrl(x20115).name("b13345")
    val x19972_d0 = Reg(init=Some(0)).name("x19972_d0").ctrl(x20115) // x19972 = RegNew(Const(0))
    isAccum(x19972_d0) = false
    val x19972_d1 = Reg(init=Some(0)).name("x19972_d1").ctrl(x20115) // x19972 = RegNew(Const(0))
    isAccum(x19972_d1) = false
    val x19972_d2 = Reg(init=Some(0)).name("x19972_d2").ctrl(x20115) // x19972 = RegNew(Const(0))
    isAccum(x19972_d2) = false
    val x19972_d3 = Reg(init=Some(0)).name("x19972_d3").ctrl(x20115) // x19972 = RegNew(Const(0))
    isAccum(x19972_d3) = false
    val x19972_d4 = Reg(init=Some(0)).name("x19972_d4").ctrl(x20115) // x19972 = RegNew(Const(0))
    isAccum(x19972_d4) = false
    val x19978 = UnitController(style=SeqPipe, level=InnerControl).name("x19978").ctrl(x20115) // UnitPipe(List(b13345, b13250),Block(Const(())))
    val x19974 = b13344 // FixConvert(b13344,TRUE,_32,_0)
    val x19975 = OpDef(op=FixMul, inputs=List(Const(4), x19974)).name("x19975").ctrl(x19978) // FixMul(Const(4),x19974)
    val x19976 = OpDef(op=BitAnd, inputs=List(b13345, b13250)).name("x19976").ctrl(x19978) // And(b13345,b13250)
    val x19977_x19972_d0 = WriteMem(x19972_d0, x19975).name("x19977_x19972_d0").ctrl(x19978) // RegWrite(x19972,x19975,x19976)
    val x19977_x19972_d1 = WriteMem(x19972_d1, x19975).name("x19977_x19972_d1").ctrl(x19978) // RegWrite(x19972,x19975,x19976)
    val x19977_x19972_d2 = WriteMem(x19972_d2, x19975).name("x19977_x19972_d2").ctrl(x19978) // RegWrite(x19972,x19975,x19976)
    val x19977_x19972_d3 = WriteMem(x19972_d3, x19975).name("x19977_x19972_d3").ctrl(x19978) // RegWrite(x19972,x19975,x19976)
    val x19977_x19972_d4 = WriteMem(x19972_d4, x19975).name("x19977_x19972_d4").ctrl(x19978) // RegWrite(x19972,x19975,x19976)
    val x19979 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x19979").ctrl(x20115) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x19980 = CounterChain(List(x19979)).name("x19980").ctrl(x20115) // CounterChainNew(List(x19979))
    val x20034 = LoopController(style=SeqPipe, level=OuterControl, cchain=x19980).name("x20034").ctrl(x20115) // UnrolledForeach(List(b13345, b13250),x19980,Block(Const(())),List(List(b13355)),List(List(b13356)))
    val b13355 = CounterIter(x19979, Some(0)).ctrl(x20034).name("b13355")
    val b13356 = DummyOp().ctrl(x20034).name("b13356")
    val x20033 = UnitController(style=SeqPipe, level=OuterControl).name("x20033").ctrl(x20034) // UnitPipe(List(b13356, b13345, b13250),Block(Const(())))
    val x19981_d0 = Reg(init=Some(0)).name("x19981_d0").ctrl(x20033) // x19981 = RegNew(Const(0))
    isAccum(x19981_d0) = false
    val x19981_d1 = Reg(init=Some(0)).name("x19981_d1").ctrl(x20033) // x19981 = RegNew(Const(0))
    isAccum(x19981_d1) = false
    val x19982_d0 = Reg(init=Some(0)).name("x19982_d0").ctrl(x20033) // x19982 = RegNew(Const(0))
    isAccum(x19982_d0) = false
    val x19982_d1 = Reg(init=Some(0)).name("x19982_d1").ctrl(x20033) // x19982 = RegNew(Const(0))
    isAccum(x19982_d1) = false
    val x19982_d2 = Reg(init=Some(0)).name("x19982_d2").ctrl(x20033) // x19982 = RegNew(Const(0))
    isAccum(x19982_d2) = false
    val x19982_d3 = Reg(init=Some(0)).name("x19982_d3").ctrl(x20033) // x19982 = RegNew(Const(0))
    isAccum(x19982_d3) = false
    val x19983_d0 = Reg(init=Some(0.0)).name("x19983_d0").ctrl(x20033) // x19983 = RegNew(Const(0))
    isAccum(x19983_d0) = false
    val x19983_d1 = Reg(init=Some(0.0)).name("x19983_d1").ctrl(x20033) // x19983 = RegNew(Const(0))
    isAccum(x19983_d1) = false
    val x19984_d0 = Reg(init=Some(0.0)).name("x19984_d0").ctrl(x20033) // x19984 = RegNew(Const(0))
    isAccum(x19984_d0) = false
    val x19984_d1 = Reg(init=Some(0.0)).name("x19984_d1").ctrl(x20033) // x19984 = RegNew(Const(0))
    isAccum(x19984_d1) = false
    val x19998 = UnitController(style=SeqPipe, level=InnerControl).name("x19998").ctrl(x20033) // UnitPipe(List(b13356, b13345, b13250),Block(Const(())))
    val x19985 = b13355 // FixConvert(b13355,TRUE,_32,_0)
    val x19986 = ReadMem(x19972_d4).name("x19986").ctrl(x19998) // RegRead(x19972)
    val x19987 = OpDef(op=FixAdd, inputs=List(x19986, x19985)).name("x19987").ctrl(x19998) // FixAdd(x19986,x19985)
    val x19988 = OpDef(op=FixAdd, inputs=List(Const(2), x19986)).name("x19988").ctrl(x19998) // FixAdd(Const(2),x19986)
    val x19989 = OpDef(op=FixAdd, inputs=List(x19988, x19985)).name("x19989").ctrl(x19998) // FixAdd(x19988,x19985)
    val x19990 = OpDef(op=BitAnd, inputs=List(b13356, b13345)).name("x19990").ctrl(x19998) // And(b13356,b13345)
    val x19991 = OpDef(op=BitAnd, inputs=List(x19990, b13250)).name("x19991").ctrl(x19998) // And(x19990,b13250)
    val x19992 = LoadBanks(List(x19427_d21_b0), List(x19987, b13249)).name("x19992").ctrl(x19998) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19987, b13249),Const(0),x19991)
    val x19993 = LoadBanks(List(x19428_d25_b0), List(x19987, b13249)).name("x19993").ctrl(x19998) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x19987, b13249),Const(0),x19991)
    val x19994_x19981_d0 = WriteMem(x19981_d0, x19987).name("x19994_x19981_d0").ctrl(x19998) // RegWrite(x19981,x19987,x19991)
    val x19994_x19981_d1 = WriteMem(x19981_d1, x19987).name("x19994_x19981_d1").ctrl(x19998) // RegWrite(x19981,x19987,x19991)
    val x19995_x19982_d0 = WriteMem(x19982_d0, x19989).name("x19995_x19982_d0").ctrl(x19998) // RegWrite(x19982,x19989,x19991)
    val x19995_x19982_d1 = WriteMem(x19982_d1, x19989).name("x19995_x19982_d1").ctrl(x19998) // RegWrite(x19982,x19989,x19991)
    val x19995_x19982_d2 = WriteMem(x19982_d2, x19989).name("x19995_x19982_d2").ctrl(x19998) // RegWrite(x19982,x19989,x19991)
    val x19995_x19982_d3 = WriteMem(x19982_d3, x19989).name("x19995_x19982_d3").ctrl(x19998) // RegWrite(x19982,x19989,x19991)
    val x19996_x19983_d0 = WriteMem(x19983_d0, x19992).name("x19996_x19983_d0").ctrl(x19998) // RegWrite(x19983,x19992,x19991)
    val x19996_x19983_d1 = WriteMem(x19983_d1, x19992).name("x19996_x19983_d1").ctrl(x19998) // RegWrite(x19983,x19992,x19991)
    val x19997_x19984_d0 = WriteMem(x19984_d0, x19993).name("x19997_x19984_d0").ctrl(x19998) // RegWrite(x19984,x19993,x19991)
    val x19997_x19984_d1 = WriteMem(x19984_d1, x19993).name("x19997_x19984_d1").ctrl(x19998) // RegWrite(x19984,x19993,x19991)
    val x20007 = UnitController(style=SeqPipe, level=InnerControl).name("x20007").ctrl(x20033) // UnitPipe(List(b13356, b13345, b13250),Block(x20006))
    val x19999 = ReadMem(x19982_d3).name("x19999").ctrl(x20007) // RegRead(x19982)
    val x20000 = OpDef(op=BitAnd, inputs=List(b13356, b13345)).name("x20000").ctrl(x20007) // And(b13356,b13345)
    val x20001 = OpDef(op=BitAnd, inputs=List(x20000, b13250)).name("x20001").ctrl(x20007) // And(x20000,b13250)
    val x20002 = LoadBanks(List(x19427_d20_b0), List(x19999, b13249)).name("x20002").ctrl(x20007) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x19999, b13249),Const(0),x20001)
    val x20003 = ReadMem(x19983_d1).name("x20003").ctrl(x20007) // RegRead(x19983)
    val x20004 = OpDef(op=FixAdd, inputs=List(x20003, x20002)).name("x20004").ctrl(x20007) // FixAdd(x20003,x20002)
    val x20005 = ReadMem(x19981_d1).name("x20005").ctrl(x20007) // RegRead(x19981)
    val x20006 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20005, b13249), x20004).name("x20006").ctrl(x20007) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20005, b13249),Const(0),x20004,x20001)
    val x20016 = UnitController(style=SeqPipe, level=InnerControl).name("x20016").ctrl(x20033) // UnitPipe(List(b13356, b13345, b13250),Block(x20015))
    val x20008 = ReadMem(x19982_d2).name("x20008").ctrl(x20016) // RegRead(x19982)
    val x20009 = OpDef(op=BitAnd, inputs=List(b13356, b13345)).name("x20009").ctrl(x20016) // And(b13356,b13345)
    val x20010 = OpDef(op=BitAnd, inputs=List(x20009, b13250)).name("x20010").ctrl(x20016) // And(x20009,b13250)
    val x20011 = LoadBanks(List(x19428_d24_b0), List(x20008, b13249)).name("x20011").ctrl(x20016) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20008, b13249),Const(0),x20010)
    val x20012 = ReadMem(x19984_d1).name("x20012").ctrl(x20016) // RegRead(x19984)
    val x20013 = OpDef(op=FixAdd, inputs=List(x20012, x20011)).name("x20013").ctrl(x20016) // FixAdd(x20012,x20011)
    val x20014 = ReadMem(x19981_d0).name("x20014").ctrl(x20016) // RegRead(x19981)
    val x20015 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20014, b13249), x20013).name("x20015").ctrl(x20016) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20014, b13249),Const(0),x20013,x20010)
    
  def main2():Unit = {
    val x20024 = UnitController(style=SeqPipe, level=InnerControl).name("x20024").ctrl(x20033) // UnitPipe(List(b13356, b13345, b13250),Block(x20023))
    val x20017 = ReadMem(x19982_d1).name("x20017").ctrl(x20024) // RegRead(x19982)
    val x20018 = OpDef(op=BitAnd, inputs=List(b13356, b13345)).name("x20018").ctrl(x20024) // And(b13356,b13345)
    val x20019 = OpDef(op=BitAnd, inputs=List(x20018, b13250)).name("x20019").ctrl(x20024) // And(x20018,b13250)
    val x20020 = LoadBanks(List(x19427_d19_b0), List(x20017, b13249)).name("x20020").ctrl(x20024) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20017, b13249),Const(0),x20019)
    val x20021 = ReadMem(x19983_d0).name("x20021").ctrl(x20024) // RegRead(x19983)
    val x20022 = OpDef(op=FixSub, inputs=List(x20021, x20020)).name("x20022").ctrl(x20024) // FixSub(x20021,x20020)
    val x20023 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20017, b13249), x20022).name("x20023").ctrl(x20024) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20017, b13249),Const(0),x20022,x20019)
    val x20032 = UnitController(style=SeqPipe, level=InnerControl).name("x20032").ctrl(x20033) // UnitPipe(List(b13356, b13345, b13250),Block(x20031))
    val x20025 = ReadMem(x19982_d0).name("x20025").ctrl(x20032) // RegRead(x19982)
    val x20026 = OpDef(op=BitAnd, inputs=List(b13356, b13345)).name("x20026").ctrl(x20032) // And(b13356,b13345)
    val x20027 = OpDef(op=BitAnd, inputs=List(x20026, b13250)).name("x20027").ctrl(x20032) // And(x20026,b13250)
    val x20028 = LoadBanks(List(x19428_d23_b0), List(x20025, b13249)).name("x20028").ctrl(x20032) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20025, b13249),Const(0),x20027)
    val x20029 = ReadMem(x19984_d0).name("x20029").ctrl(x20032) // RegRead(x19984)
    val x20030 = OpDef(op=FixSub, inputs=List(x20029, x20028)).name("x20030").ctrl(x20032) // FixSub(x20029,x20028)
    val x20031 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20025, b13249), x20030).name("x20031").ctrl(x20032) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20025, b13249),Const(0),x20030,x20027)
    val x20035 = Reg(init=Some(0.0)).name("x20035").ctrl(x20115) // x20035 = RegNew(Const(0))
    isAccum(x20035) = false
    val x20041 = UnitController(style=SeqPipe, level=InnerControl).name("x20041").ctrl(x20115) // UnitPipe(List(b13345, b13250),Block(Const(())))
    val x20036 = ReadMem(x19972_d3).name("x20036").ctrl(x20041) // RegRead(x19972)
    val x20037 = OpDef(op=FixAdd, inputs=List(x20036, Const(3))).name("x20037").ctrl(x20041) // FixAdd(x20036,Const(3))
    val x20038 = OpDef(op=BitAnd, inputs=List(b13345, b13250)).name("x20038").ctrl(x20041) // And(b13345,b13250)
    val x20039 = LoadBanks(List(x19427_d18_b0), List(x20037, b13249)).name("x20039").ctrl(x20041) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20037, b13249),Const(0),x20038)
    val x20040_x20035 = WriteMem(x20035, x20039).name("x20040_x20035").ctrl(x20041) // RegWrite(x20035,x20039,x20038)
    val x20049 = UnitController(style=SeqPipe, level=InnerControl).name("x20049").ctrl(x20115) // UnitPipe(List(b13345, b13250),Block(x20048))
    val x20042 = ReadMem(x19972_d2).name("x20042").ctrl(x20049) // RegRead(x19972)
    val x20043 = OpDef(op=FixAdd, inputs=List(x20042, Const(3))).name("x20043").ctrl(x20049) // FixAdd(x20042,Const(3))
    val x20044 = OpDef(op=BitAnd, inputs=List(b13345, b13250)).name("x20044").ctrl(x20049) // And(b13345,b13250)
    val x20045 = LoadBanks(List(x19428_d22_b0), List(x20043, b13249)).name("x20045").ctrl(x20049) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20043, b13249),Const(0),x20044)
    val x20046 = OpDef(op=FixMul, inputs=List(x20045, Const(-1.0))).name("x20046").ctrl(x20049) // FixMul(x20045,Const(-1))
    val x20047 = OpDef(op=FixNeg, inputs=List(x20046)).name("x20047").ctrl(x20049) // FixNeg(x20046)
    val x20048 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20043, b13249), x20047).name("x20048").ctrl(x20049) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20043, b13249),Const(0),x20047,x20044)
    val x20057 = UnitController(style=SeqPipe, level=InnerControl).name("x20057").ctrl(x20115) // UnitPipe(List(b13345, b13250),Block(x20056))
    val x20050 = ReadMem(x19972_d1).name("x20050").ctrl(x20057) // RegRead(x19972)
    val x20051 = OpDef(op=FixAdd, inputs=List(x20050, Const(3))).name("x20051").ctrl(x20057) // FixAdd(x20050,Const(3))
    val x20052 = ReadMem(x20035).name("x20052").ctrl(x20057) // RegRead(x20035)
    val x20053 = OpDef(op=FixMul, inputs=List(x20052, Const(-1.0))).name("x20053").ctrl(x20057) // FixMul(x20052,Const(-1))
    val x20054 = OpDef(op=BitAnd, inputs=List(b13345, b13250)).name("x20054").ctrl(x20057) // And(b13345,b13250)
    val x20055 = LoadBanks(List(x19428_d21_b0), List(x20051, b13249)).name("x20055").ctrl(x20057) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20051, b13249),Const(0),x20054)
    val x20056 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20051, b13249), x20053).name("x20056").ctrl(x20057) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20051, b13249),Const(0),x20053,x20054)
    val x20058 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x20058").ctrl(x20115) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x20059 = CounterChain(List(x20058)).name("x20059").ctrl(x20115) // CounterChainNew(List(x20058))
    val x20114 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20059).name("x20114").ctrl(x20115) // UnrolledForeach(List(b13345, b13250),x20059,Block(Const(())),List(List(b13436)),List(List(b13437)))
    val b13436 = CounterIter(x20058, Some(0)).ctrl(x20114).name("b13436")
    val b13437 = DummyOp().ctrl(x20114).name("b13437")
    val x20113 = UnitController(style=SeqPipe, level=OuterControl).name("x20113").ctrl(x20114) // UnitPipe(List(b13437, b13345, b13250),Block(Const(())))
    val x20060_d0 = Reg(init=Some(0)).name("x20060_d0").ctrl(x20113) // x20060 = RegNew(Const(0))
    isAccum(x20060_d0) = false
    val x20060_d1 = Reg(init=Some(0)).name("x20060_d1").ctrl(x20113) // x20060 = RegNew(Const(0))
    isAccum(x20060_d1) = false
    val x20061_d0 = Reg(init=Some(0)).name("x20061_d0").ctrl(x20113) // x20061 = RegNew(Const(0))
    isAccum(x20061_d0) = false
    val x20061_d1 = Reg(init=Some(0)).name("x20061_d1").ctrl(x20113) // x20061 = RegNew(Const(0))
    isAccum(x20061_d1) = false
    val x20061_d2 = Reg(init=Some(0)).name("x20061_d2").ctrl(x20113) // x20061 = RegNew(Const(0))
    isAccum(x20061_d2) = false
    val x20061_d3 = Reg(init=Some(0)).name("x20061_d3").ctrl(x20113) // x20061 = RegNew(Const(0))
    isAccum(x20061_d3) = false
    val x20062_d0 = Reg(init=Some(0.0)).name("x20062_d0").ctrl(x20113) // x20062 = RegNew(Const(0))
    isAccum(x20062_d0) = false
    val x20062_d1 = Reg(init=Some(0.0)).name("x20062_d1").ctrl(x20113) // x20062 = RegNew(Const(0))
    isAccum(x20062_d1) = false
    val x20063_d0 = Reg(init=Some(0.0)).name("x20063_d0").ctrl(x20113) // x20063 = RegNew(Const(0))
    isAccum(x20063_d0) = false
    val x20063_d1 = Reg(init=Some(0.0)).name("x20063_d1").ctrl(x20113) // x20063 = RegNew(Const(0))
    isAccum(x20063_d1) = false
    val x20078 = UnitController(style=SeqPipe, level=InnerControl).name("x20078").ctrl(x20113) // UnitPipe(List(b13437, b13345, b13250),Block(Const(())))
    val x20064 = b13436 // FixConvert(b13436,TRUE,_32,_0)
    val x20065 = OpDef(op=FixMul, inputs=List(Const(2), x20064)).name("x20065").ctrl(x20078) // FixMul(Const(2),x20064)
    val x20066 = ReadMem(x19972_d0).name("x20066").ctrl(x20078) // RegRead(x19972)
    val x20067 = OpDef(op=FixAdd, inputs=List(x20066, x20065)).name("x20067").ctrl(x20078) // FixAdd(x20066,x20065)
    val x20068 = OpDef(op=FixAdd, inputs=List(Const(1), x20066)).name("x20068").ctrl(x20078) // FixAdd(Const(1),x20066)
    val x20069 = OpDef(op=FixAdd, inputs=List(x20068, x20065)).name("x20069").ctrl(x20078) // FixAdd(x20068,x20065)
    val x20070 = OpDef(op=BitAnd, inputs=List(b13437, b13345)).name("x20070").ctrl(x20078) // And(b13437,b13345)
    val x20071 = OpDef(op=BitAnd, inputs=List(x20070, b13250)).name("x20071").ctrl(x20078) // And(x20070,b13250)
    val x20072 = LoadBanks(List(x19427_d17_b0), List(x20067, b13249)).name("x20072").ctrl(x20078) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20067, b13249),Const(0),x20071)
    val x20073 = LoadBanks(List(x19428_d20_b0), List(x20067, b13249)).name("x20073").ctrl(x20078) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20067, b13249),Const(0),x20071)
    val x20074_x20060_d0 = WriteMem(x20060_d0, x20067).name("x20074_x20060_d0").ctrl(x20078) // RegWrite(x20060,x20067,x20071)
    val x20074_x20060_d1 = WriteMem(x20060_d1, x20067).name("x20074_x20060_d1").ctrl(x20078) // RegWrite(x20060,x20067,x20071)
    val x20075_x20061_d0 = WriteMem(x20061_d0, x20069).name("x20075_x20061_d0").ctrl(x20078) // RegWrite(x20061,x20069,x20071)
    val x20075_x20061_d1 = WriteMem(x20061_d1, x20069).name("x20075_x20061_d1").ctrl(x20078) // RegWrite(x20061,x20069,x20071)
    val x20075_x20061_d2 = WriteMem(x20061_d2, x20069).name("x20075_x20061_d2").ctrl(x20078) // RegWrite(x20061,x20069,x20071)
    val x20075_x20061_d3 = WriteMem(x20061_d3, x20069).name("x20075_x20061_d3").ctrl(x20078) // RegWrite(x20061,x20069,x20071)
    val x20076_x20062_d0 = WriteMem(x20062_d0, x20072).name("x20076_x20062_d0").ctrl(x20078) // RegWrite(x20062,x20072,x20071)
    val x20076_x20062_d1 = WriteMem(x20062_d1, x20072).name("x20076_x20062_d1").ctrl(x20078) // RegWrite(x20062,x20072,x20071)
    val x20077_x20063_d0 = WriteMem(x20063_d0, x20073).name("x20077_x20063_d0").ctrl(x20078) // RegWrite(x20063,x20073,x20071)
    val x20077_x20063_d1 = WriteMem(x20063_d1, x20073).name("x20077_x20063_d1").ctrl(x20078) // RegWrite(x20063,x20073,x20071)
    val x20087 = UnitController(style=SeqPipe, level=InnerControl).name("x20087").ctrl(x20113) // UnitPipe(List(b13437, b13345, b13250),Block(x20086))
    val x20079 = ReadMem(x20061_d3).name("x20079").ctrl(x20087) // RegRead(x20061)
    val x20080 = OpDef(op=BitAnd, inputs=List(b13437, b13345)).name("x20080").ctrl(x20087) // And(b13437,b13345)
    val x20081 = OpDef(op=BitAnd, inputs=List(x20080, b13250)).name("x20081").ctrl(x20087) // And(x20080,b13250)
    val x20082 = LoadBanks(List(x19427_d16_b0), List(x20079, b13249)).name("x20082").ctrl(x20087) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20079, b13249),Const(0),x20081)
    val x20083 = ReadMem(x20062_d1).name("x20083").ctrl(x20087) // RegRead(x20062)
    val x20084 = OpDef(op=FixAdd, inputs=List(x20083, x20082)).name("x20084").ctrl(x20087) // FixAdd(x20083,x20082)
    val x20085 = ReadMem(x20060_d1).name("x20085").ctrl(x20087) // RegRead(x20060)
    val x20086 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20085, b13249), x20084).name("x20086").ctrl(x20087) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20085, b13249),Const(0),x20084,x20081)
    val x20096 = UnitController(style=SeqPipe, level=InnerControl).name("x20096").ctrl(x20113) // UnitPipe(List(b13437, b13345, b13250),Block(x20095))
    val x20088 = ReadMem(x20061_d2).name("x20088").ctrl(x20096) // RegRead(x20061)
    val x20089 = OpDef(op=BitAnd, inputs=List(b13437, b13345)).name("x20089").ctrl(x20096) // And(b13437,b13345)
    val x20090 = OpDef(op=BitAnd, inputs=List(x20089, b13250)).name("x20090").ctrl(x20096) // And(x20089,b13250)
    val x20091 = LoadBanks(List(x19428_d19_b0), List(x20088, b13249)).name("x20091").ctrl(x20096) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20088, b13249),Const(0),x20090)
    val x20092 = ReadMem(x20063_d1).name("x20092").ctrl(x20096) // RegRead(x20063)
    val x20093 = OpDef(op=FixAdd, inputs=List(x20092, x20091)).name("x20093").ctrl(x20096) // FixAdd(x20092,x20091)
    val x20094 = ReadMem(x20060_d0).name("x20094").ctrl(x20096) // RegRead(x20060)
    val x20095 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20094, b13249), x20093).name("x20095").ctrl(x20096) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20094, b13249),Const(0),x20093,x20090)
    val x20104 = UnitController(style=SeqPipe, level=InnerControl).name("x20104").ctrl(x20113) // UnitPipe(List(b13437, b13345, b13250),Block(x20103))
    val x20097 = ReadMem(x20061_d1).name("x20097").ctrl(x20104) // RegRead(x20061)
    val x20098 = OpDef(op=BitAnd, inputs=List(b13437, b13345)).name("x20098").ctrl(x20104) // And(b13437,b13345)
    val x20099 = OpDef(op=BitAnd, inputs=List(x20098, b13250)).name("x20099").ctrl(x20104) // And(x20098,b13250)
    val x20100 = LoadBanks(List(x19427_d15_b0), List(x20097, b13249)).name("x20100").ctrl(x20104) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20097, b13249),Const(0),x20099)
    val x20101 = ReadMem(x20062_d0).name("x20101").ctrl(x20104) // RegRead(x20062)
    val x20102 = OpDef(op=FixSub, inputs=List(x20101, x20100)).name("x20102").ctrl(x20104) // FixSub(x20101,x20100)
    val x20103 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20097, b13249), x20102).name("x20103").ctrl(x20104) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20097, b13249),Const(0),x20102,x20099)
    val x20112 = UnitController(style=SeqPipe, level=InnerControl).name("x20112").ctrl(x20113) // UnitPipe(List(b13437, b13345, b13250),Block(x20111))
    val x20105 = ReadMem(x20061_d0).name("x20105").ctrl(x20112) // RegRead(x20061)
    val x20106 = OpDef(op=BitAnd, inputs=List(b13437, b13345)).name("x20106").ctrl(x20112) // And(b13437,b13345)
    val x20107 = OpDef(op=BitAnd, inputs=List(x20106, b13250)).name("x20107").ctrl(x20112) // And(x20106,b13250)
    val x20108 = LoadBanks(List(x19428_d18_b0), List(x20105, b13249)).name("x20108").ctrl(x20112) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20105, b13249),Const(0),x20107)
    val x20109 = ReadMem(x20063_d0).name("x20109").ctrl(x20112) // RegRead(x20063)
    val x20110 = OpDef(op=FixSub, inputs=List(x20109, x20108)).name("x20110").ctrl(x20112) // FixSub(x20109,x20108)
    val x20111 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20105, b13249), x20110).name("x20111").ctrl(x20112) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20105, b13249),Const(0),x20110,x20107)
    val x20116 = Reg(init=Some(0)).name("x20116").ctrl(x20189) // x20116 = RegNew(Const(0))
    isAccum(x20116) = false
    val x20120 = UnitController(style=SeqPipe, level=InnerControl).name("x20120").ctrl(x20189) // UnitPipe(List(b13250),Block(Const(())))
    val x20117 = b13249 // FixConvert(b13249,TRUE,_32,_0)
    val x20118 = OpDef(op=FixSra, inputs=List(x20117, Const(3))).name("x20118").ctrl(x20120) // FixRsh(x20117,Const(3))
    val x20119_x20116 = WriteMem(x20116, x20118).name("x20119_x20116").ctrl(x20120) // RegWrite(x20116,x20118,b13250)
    val x20121 = Counter(min=Const(1), max=Const(8), step=Const(1), par=1).name("x20121").ctrl(x20189) // CounterNew(Const(1),Const(8),Const(1),Const(1))
    val x20122 = CounterChain(List(x20121)).name("x20122").ctrl(x20189) // CounterChainNew(List(x20121))
    val x20188 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20122).name("x20188").ctrl(x20189) // UnrolledForeach(List(b13250),x20122,Block(Const(())),List(List(b13501)),List(List(b13502)))
    val b13501 = CounterIter(x20121, Some(0)).ctrl(x20188).name("b13501")
    val b13502 = DummyOp().ctrl(x20188).name("b13502")
    val x20123_d0 = Reg(init=Some(0.0)).name("x20123_d0").ctrl(x20188) // x20123 = RegNew(Const(0))
    isAccum(x20123_d0) = false
    val x20123_d1 = Reg(init=Some(0.0)).name("x20123_d1").ctrl(x20188) // x20123 = RegNew(Const(0))
    isAccum(x20123_d1) = false
    val x20124_d0 = Reg(init=Some(0.0)).name("x20124_d0").ctrl(x20188) // x20124 = RegNew(Const(0))
    isAccum(x20124_d0) = false
    val x20124_d1 = Reg(init=Some(0.0)).name("x20124_d1").ctrl(x20188) // x20124 = RegNew(Const(0))
    isAccum(x20124_d1) = false
    val x20125_d0 = Reg(init=Some(0.0)).name("x20125_d0").ctrl(x20188) // x20125 = RegNew(Const(0))
    isAccum(x20125_d0) = false
    val x20125_d1 = Reg(init=Some(0.0)).name("x20125_d1").ctrl(x20188) // x20125 = RegNew(Const(0))
    isAccum(x20125_d1) = false
    val x20167 = UnitController(style=SeqPipe, level=InnerControl).name("x20167").ctrl(x20188) // UnitPipe(List(b13502, b13250),Block(Const(())))
    val x20126 = ReadMem(x20116).name("x20126").ctrl(x20167) // RegRead(x20116)
    // x20127 = FixConvert(x20126,TRUE,_16,_16) x.tp=FixPt[TRUE,_32,_0] {
    val x20127_int1 = OpDef(op=BitAnd, inputs=List(x20126, Const("01111111111111111111111111111111"))).ctrl(x20167).name("x20127_int1")
    val x20127_int2 = OpDef(op=FixSla, inputs=List(x20127_int1, Const(16))).ctrl(x20167).name("x20127_int2")
    val x20127_frac1 = OpDef(op=BitAnd, inputs=List(x20126, Const("00000000000000000000000000000000"))).ctrl(x20167).name("x20127_frac1")
    val x20127_frac2 = OpDef(op=FixSla, inputs=List(x20127_frac1, Const(16))).ctrl(x20167).name("x20127_frac2")
    val x20127 = OpDef(op=BitOr, inputs=List(x20127_int2, x20127_frac2)).ctrl(x20167).name("x20127")
    // }
    val x20128 = OpDef(op=BitAnd, inputs=List(b13502, b13250)).name("x20128").ctrl(x20167) // And(b13502,b13250)
    val x20129 = LoadBanks(List(x19480_d2_b0), List(b13501)).name("x20129").ctrl(x20167) // SRAMLoad(x19480,List(Const(8)),List(b13501),Const(0),x20128)
    // x20130 = FixConvert(x20129,TRUE,_16,_16) x.tp=FixPt[TRUE,_32,_0] {
    val x20130_int1 = OpDef(op=BitAnd, inputs=List(x20129, Const("01111111111111111111111111111111"))).ctrl(x20167).name("x20130_int1")
    val x20130_int2 = OpDef(op=FixSla, inputs=List(x20130_int1, Const(16))).ctrl(x20167).name("x20130_int2")
    val x20130_frac1 = OpDef(op=BitAnd, inputs=List(x20129, Const("00000000000000000000000000000000"))).ctrl(x20167).name("x20130_frac1")
    val x20130_frac2 = OpDef(op=FixSla, inputs=List(x20130_frac1, Const(16))).ctrl(x20167).name("x20130_frac2")
    val x20130 = OpDef(op=BitOr, inputs=List(x20130_int2, x20130_frac2)).ctrl(x20167).name("x20130")
    // }
    val x20131 = OpDef(op=FixMul, inputs=List(x20127, x20130)).name("x20131").ctrl(x20167) // FixMul(x20127,x20130)
    // x20132 = FixConvert(Const(64),TRUE,_16,_16) x.tp=FixPt[TRUE,_32,_0] {
    val x20132_int1 = OpDef(op=BitAnd, inputs=List(Const(64), Const("01111111111111111111111111111111"))).ctrl(x20167).name("x20132_int1")
    val x20132_int2 = OpDef(op=FixSla, inputs=List(x20132_int1, Const(16))).ctrl(x20167).name("x20132_int2")
    val x20132_frac1 = OpDef(op=BitAnd, inputs=List(Const(64), Const("00000000000000000000000000000000"))).ctrl(x20167).name("x20132_frac1")
    val x20132_frac2 = OpDef(op=FixSla, inputs=List(x20132_frac1, Const(16))).ctrl(x20167).name("x20132_frac2")
    val x20132 = OpDef(op=BitOr, inputs=List(x20132_int2, x20132_frac2)).ctrl(x20167).name("x20132")
    // }
    val x20133 = OpDef(op=FixDiv, inputs=List(x20131, x20132)).name("x20133").ctrl(x20167) // FixDiv(x20131,x20132)
    val x20134 = OpDef(op=FixMul, inputs=List(Const(-6.2831726), x20133)).name("x20134").ctrl(x20167) // FixMul(Const(-6.283172607421875),x20133)
    val x20135 = OpDef(op=FixAdd, inputs=List(x20134, Const(3.1415863))).name("x20135").ctrl(x20167) // FixAdd(x20134,Const(3.1415863037109375))
    val x20136 = Const(6.2831726) // FixConvert(Const(6.283172607421875),TRUE,_16,_16)
    val x20137 = OpDef(op=FixNeg, inputs=List(x20136)).name("x20137").ctrl(x20167) // FixNeg(x20136)
    val x20138 = OpDef(op=FixSra, inputs=List(x20137, Const(2))).name("x20138").ctrl(x20167) // FixRsh(x20137,Const(2))
    val x20139 = OpDef(op=FixLt, inputs=List(x20135, x20138)).name("x20139").ctrl(x20167) // FixLt(x20135,x20138)
    val x20140 = OpDef(op=FixSra, inputs=List(x20136, Const(2))).name("x20140").ctrl(x20167) // FixRsh(x20136,Const(2))
    val x20141 = OpDef(op=FixLt, inputs=List(x20140, x20135)).name("x20141").ctrl(x20167) // FixLt(x20140,x20135)
    val x20142 = OpDef(op=FixSra, inputs=List(x20136, Const(1))).name("x20142").ctrl(x20167) // FixRsh(x20136,Const(1))
    val x20143 = OpDef(op=FixAdd, inputs=List(x20135, x20142)).name("x20143").ctrl(x20167) // FixAdd(x20135,x20142)
    val x20144 = OpDef(op=FixSub, inputs=List(x20135, x20142)).name("x20144").ctrl(x20167) // FixSub(x20135,x20142)
    val x20145 = OpDef(op=MuxOp, inputs=List(x20141, x20144, x20135)).name("x20145").ctrl(x20167) // Mux(x20141,x20144,x20135)
    val x20146 = OpDef(op=MuxOp, inputs=List(x20139, x20143, x20145)).name("x20146").ctrl(x20167) // Mux(x20139,x20143,x20145)
    val x20147 = OpDef(op=FixMul, inputs=List(x20146, x20146)).name("x20147").ctrl(x20167) // FixMul(x20146,x20146)
    val x20148 = OpDef(op=FixSra, inputs=List(x20147, Const(1))).name("x20148").ctrl(x20167) // FixRsh(x20147,Const(1))
    val x20149 = OpDef(op=FixSub, inputs=List(Const(1.0), x20148)).name("x20149").ctrl(x20167) // FixSub(Const(1),x20148)
    val x20150 = OpDef(op=FixMul, inputs=List(x20147, x20146)).name("x20150").ctrl(x20167) // FixMul(x20147,x20146)
    val x20151 = OpDef(op=FixMul, inputs=List(x20150, x20146)).name("x20151").ctrl(x20167) // FixMul(x20150,x20146)
    val x20152 = OpDef(op=FixDiv, inputs=List(x20151, Const(24.0))).name("x20152").ctrl(x20167) // FixDiv(x20151,Const(24))
    val x20153 = OpDef(op=FixAdd, inputs=List(x20149, x20152)).name("x20153").ctrl(x20167) // FixAdd(x20149,x20152)
    val x20154 = OpDef(op=BitOr, inputs=List(x20139, x20141)).name("x20154").ctrl(x20167) // Or(x20139,x20141)
    val x20155 = OpDef(op=MuxOp, inputs=List(x20154, Const(1.0), Const(-1.0))).name("x20155").ctrl(x20167) // Mux(x20154,Const(1),Const(-1))
    val x20156 = OpDef(op=FixMul, inputs=List(x20153, x20155)).name("x20156").ctrl(x20167) // FixMul(x20153,x20155)
    val x20157 = OpDef(op=FixDiv, inputs=List(x20150, Const(6.0))).name("x20157").ctrl(x20167) // FixDiv(x20150,Const(6))
    val x20158 = OpDef(op=FixSub, inputs=List(x20146, x20157)).name("x20158").ctrl(x20167) // FixSub(x20146,x20157)
    val x20159 = OpDef(op=FixMul, inputs=List(x20151, x20146)).name("x20159").ctrl(x20167) // FixMul(x20151,x20146)
    val x20160 = OpDef(op=FixDiv, inputs=List(x20159, Const(120.0))).name("x20160").ctrl(x20167) // FixDiv(x20159,Const(120))
    val x20161 = OpDef(op=FixAdd, inputs=List(x20158, x20160)).name("x20161").ctrl(x20167) // FixAdd(x20158,x20160)
    val x20162 = OpDef(op=FixMul, inputs=List(x20161, x20155)).name("x20162").ctrl(x20167) // FixMul(x20161,x20155)
    val x20163 = LoadBanks(List(x19427_d14_b0), List(b13501, b13249)).name("x20163").ctrl(x20167) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(b13501, b13249),Const(0),x20128)
    val x20164_x20123_d0 = WriteMem(x20123_d0, x20156).name("x20164_x20123_d0").ctrl(x20167) // RegWrite(x20123,x20156,x20128)
    val x20164_x20123_d1 = WriteMem(x20123_d1, x20156).name("x20164_x20123_d1").ctrl(x20167) // RegWrite(x20123,x20156,x20128)
    val x20165_x20124_d0 = WriteMem(x20124_d0, x20162).name("x20165_x20124_d0").ctrl(x20167) // RegWrite(x20124,x20162,x20128)
    val x20165_x20124_d1 = WriteMem(x20124_d1, x20162).name("x20165_x20124_d1").ctrl(x20167) // RegWrite(x20124,x20162,x20128)
    val x20166_x20125_d0 = WriteMem(x20125_d0, x20163).name("x20166_x20125_d0").ctrl(x20167) // RegWrite(x20125,x20163,x20128)
    val x20166_x20125_d1 = WriteMem(x20125_d1, x20163).name("x20166_x20125_d1").ctrl(x20167) // RegWrite(x20125,x20163,x20128)
    val x20177 = UnitController(style=SeqPipe, level=InnerControl).name("x20177").ctrl(x20188) // UnitPipe(List(b13502, b13250),Block(x20176))
    val x20168 = ReadMem(x20125_d1).name("x20168").ctrl(x20177) // RegRead(x20125)
    val x20169 = ReadMem(x20123_d1).name("x20169").ctrl(x20177) // RegRead(x20123)
    val x20170 = OpDef(op=FixMul, inputs=List(x20168, x20169)).name("x20170").ctrl(x20177) // FixMul(x20168,x20169)
    val x20171 = OpDef(op=BitAnd, inputs=List(b13502, b13250)).name("x20171").ctrl(x20177) // And(b13502,b13250)
    val x20172 = LoadBanks(List(x19428_d17_b0), List(b13501, b13249)).name("x20172").ctrl(x20177) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(b13501, b13249),Const(0),x20171)
    val x20173 = ReadMem(x20124_d1).name("x20173").ctrl(x20177) // RegRead(x20124)
    val x20174 = OpDef(op=FixMul, inputs=List(x20172, x20173)).name("x20174").ctrl(x20177) // FixMul(x20172,x20173)
    val x20175 = OpDef(op=FixSub, inputs=List(x20170, x20174)).name("x20175").ctrl(x20177) // FixSub(x20170,x20174)
    val x20176 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(b13501, b13249), x20175).name("x20176").ctrl(x20177) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(b13501, b13249),Const(0),x20175,x20171)
    val x20187 = UnitController(style=SeqPipe, level=InnerControl).name("x20187").ctrl(x20188) // UnitPipe(List(b13502, b13250),Block(x20186))
    val x20178 = ReadMem(x20125_d0).name("x20178").ctrl(x20187) // RegRead(x20125)
    val x20179 = ReadMem(x20124_d0).name("x20179").ctrl(x20187) // RegRead(x20124)
    val x20180 = OpDef(op=FixMul, inputs=List(x20178, x20179)).name("x20180").ctrl(x20187) // FixMul(x20178,x20179)
    val x20181 = OpDef(op=BitAnd, inputs=List(b13502, b13250)).name("x20181").ctrl(x20187) // And(b13502,b13250)
    val x20182 = LoadBanks(List(x19428_d16_b0), List(b13501, b13249)).name("x20182").ctrl(x20187) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(b13501, b13249),Const(0),x20181)
    val x20183 = ReadMem(x20123_d0).name("x20183").ctrl(x20187) // RegRead(x20123)
    val x20184 = OpDef(op=FixMul, inputs=List(x20182, x20183)).name("x20184").ctrl(x20187) // FixMul(x20182,x20183)
    val x20185 = OpDef(op=FixAdd, inputs=List(x20180, x20184)).name("x20185").ctrl(x20187) // FixAdd(x20180,x20184)
    val x20186 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b13501, b13249), x20185).name("x20186").ctrl(x20187) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(b13501, b13249),Const(0),x20185,x20181)
    val x20190 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x20190").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x20191 = CounterChain(List(x20190)).name("x20191").ctrl(x20605) // CounterChainNew(List(x20190))
    val x20214 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20191).name("x20214").ctrl(x20605) // UnrolledForeach(List(Const(true)),x20191,Block(Const(())),List(List(b13572)),List(List(b13573)))
    val b13572 = CounterIter(x20190, Some(0)).ctrl(x20214).name("b13572")
    val b13573 = DummyOp().ctrl(x20214).name("b13573")
    val x20192 = Reg(init=Some(0)).name("x20192").ctrl(x20214) // x20192 = RegNew(Const(0))
    isAccum(x20192) = false
    val x20199 = UnitController(style=SeqPipe, level=InnerControl).name("x20199").ctrl(x20214) // UnitPipe(List(b13573),Block(Const(())))
    val x20193 = b13572 // FixConvert(b13572,TRUE,_32,_0)
    val x20194 = OpDef(op=FixSra, inputs=List(x20193, Const(3))).name("x20194").ctrl(x20199) // FixRsh(x20193,Const(3))
    val x20195 = OpDef(op=BitAnd, inputs=List(x20193, Const(7))).name("x20195").ctrl(x20199) // FixAnd(x20193,Const(7))
    val x20196 = OpDef(op=FixSla, inputs=List(x20194, Const(3))).name("x20196").ctrl(x20199) // FixLsh(x20194,Const(3))
    val x20197 = OpDef(op=FixAdd, inputs=List(x20196, x20195)).name("x20197").ctrl(x20199) // FixAdd(x20196,x20195)
    val x20198_x20192 = WriteMem(x20192, x20197).name("x20198_x20192").ctrl(x20199) // RegWrite(x20192,x20197,b13573)
    val x20200 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x20200").ctrl(x20214) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x20201 = CounterChain(List(x20200)).name("x20201").ctrl(x20214) // CounterChainNew(List(x20200))
    val x20213 = LoopController(style=SeqPipe, level=InnerControl, cchain=x20201).name("x20213").ctrl(x20214) // UnrolledForeach(List(b13573),x20201,Block(Const(())),List(List(b13584)),List(List(b13585)))
    val b13584 = CounterIter(x20200, None).ctrl(x20213).name("b13584")
    val b13585 = DummyOp().ctrl(x20213).name("b13585")
    val x20202 = OpDef(op=BitAnd, inputs=List(b13585, b13573)).name("x20202").ctrl(x20213) // And(b13585,b13573)
    val x20203 = LoadBanks(List(x19784_d2_b0), List(b13584)).name("x20203").ctrl(x20213) // ParSRAMLoad(x19784,List(List(b13584)),List(x20202))
    val x20204 = x20203 // x20204 = VectorApply(x20203,0)
    val x20205 = LoadBanks(List(x19785_d1_b0), List(b13584)).name("x20205").ctrl(x20213) // ParSRAMLoad(x19785,List(List(b13584)),List(x20202))
    val x20206 = x20205 // x20206 = VectorApply(x20205,0)
    val x20207 = OpDef(op=FixMul, inputs=List(x20204, Const(72))).name("x20207").ctrl(x20213) // FixMul(x20204,Const(72))
    val x20208 = ReadMem(x20192).name("x20208").ctrl(x20213) // RegRead(x20192)
    val x20209 = OpDef(op=FixAdd, inputs=List(x20207, x20208)).name("x20209").ctrl(x20213) // FixAdd(x20207,x20208)
    val x20210 = LoadBanks(List(x19427_d13_b0), List(x20206, b13572)).name("x20210").ctrl(x20213) // ParSRAMLoad(x19427,List(List(x20206, b13572)),List(x20202))
    val x20211 = x20210 // x20211 = VectorApply(x20210,0)
    val x20212 = StoreBanks(List(x19429_d0_b0, x19429_d1_b0, x19429_d2_b0, x19429_d3_b0), List(x20209), x20211).name("x20212").ctrl(x20213) // ParSRAMStore(x19429,List(List(x20209)),List(x20211),List(x20202))
    val x20215 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x20215").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x20216 = CounterChain(List(x20215)).name("x20216").ctrl(x20605) // CounterChainNew(List(x20215))
    val x20237 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20216).name("x20237").ctrl(x20605) // UnrolledForeach(List(Const(true)),x20216,Block(Const(())),List(List(b13601)),List(List(b13602)))
    val b13601 = CounterIter(x20215, Some(0)).ctrl(x20237).name("b13601")
    val b13602 = DummyOp().ctrl(x20237).name("b13602")
    val x20217 = Reg(init=Some(0)).name("x20217").ctrl(x20237) // x20217 = RegNew(Const(0))
    isAccum(x20217) = false
    val x20224 = UnitController(style=SeqPipe, level=InnerControl).name("x20224").ctrl(x20237) // UnitPipe(List(b13602),Block(Const(())))
    val x20218 = b13601 // FixConvert(b13601,TRUE,_32,_0)
    val x20219 = OpDef(op=FixSra, inputs=List(x20218, Const(3))).name("x20219").ctrl(x20224) // FixRsh(x20218,Const(3))
    val x20220 = OpDef(op=BitAnd, inputs=List(x20218, Const(7))).name("x20220").ctrl(x20224) // FixAnd(x20218,Const(7))
    val x20221 = OpDef(op=FixMul, inputs=List(x20219, Const(72))).name("x20221").ctrl(x20224) // FixMul(x20219,Const(72))
    val x20222 = OpDef(op=FixAdd, inputs=List(x20221, x20220)).name("x20222").ctrl(x20224) // FixAdd(x20221,x20220)
    val x20223_x20217 = WriteMem(x20217, x20222).name("x20223_x20217").ctrl(x20224) // RegWrite(x20217,x20222,b13602)
    val x20225 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x20225").ctrl(x20237) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x20226 = CounterChain(List(x20225)).name("x20226").ctrl(x20237) // CounterChainNew(List(x20225))
    val x20236 = LoopController(style=SeqPipe, level=InnerControl, cchain=x20226).name("x20236").ctrl(x20237) // UnrolledForeach(List(b13602),x20226,Block(Const(())),List(List(b13613)),List(List(b13614)))
    val b13613 = CounterIter(x20225, None).ctrl(x20236).name("b13613")
    val b13614 = DummyOp().ctrl(x20236).name("b13614")
    val x20227 = OpDef(op=BitAnd, inputs=List(b13614, b13602)).name("x20227").ctrl(x20236) // And(b13614,b13602)
    val x20228 = LoadBanks(List(x19784_d1_b0), List(b13613)).name("x20228").ctrl(x20236) // ParSRAMLoad(x19784,List(List(b13613)),List(x20227))
    val x20229 = x20228 // x20229 = VectorApply(x20228,0)
    val x20230 = OpDef(op=FixSla, inputs=List(x20229, Const(3))).name("x20230").ctrl(x20236) // FixLsh(x20229,Const(3))
    val x20231 = ReadMem(x20217).name("x20231").ctrl(x20236) // RegRead(x20217)
    val x20232 = OpDef(op=FixAdd, inputs=List(x20230, x20231)).name("x20232").ctrl(x20236) // FixAdd(x20230,x20231)
    val x20233 = LoadBanks(List(x19429_d1_b0), List(x20232)).name("x20233").ctrl(x20236) // ParSRAMLoad(x19429,List(List(x20232)),List(x20227))
    val x20234 = x20233 // x20234 = VectorApply(x20233,0)
    val x20235 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20229, b13601), x20234).name("x20235").ctrl(x20236) // ParSRAMStore(x19427,List(List(x20229, b13601)),List(x20234),List(x20227))
    val x20238 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x20238").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x20239 = CounterChain(List(x20238)).name("x20239").ctrl(x20605) // CounterChainNew(List(x20238))
    val x20262 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20239).name("x20262").ctrl(x20605) // UnrolledForeach(List(Const(true)),x20239,Block(Const(())),List(List(b13628)),List(List(b13629)))
    val b13628 = CounterIter(x20238, Some(0)).ctrl(x20262).name("b13628")
    val b13629 = DummyOp().ctrl(x20262).name("b13629")
    val x20240 = Reg(init=Some(0)).name("x20240").ctrl(x20262) // x20240 = RegNew(Const(0))
    isAccum(x20240) = false
    val x20247 = UnitController(style=SeqPipe, level=InnerControl).name("x20247").ctrl(x20262) // UnitPipe(List(b13629),Block(Const(())))
    val x20241 = b13628 // FixConvert(b13628,TRUE,_32,_0)
    val x20242 = OpDef(op=FixSra, inputs=List(x20241, Const(3))).name("x20242").ctrl(x20247) // FixRsh(x20241,Const(3))
    val x20243 = OpDef(op=BitAnd, inputs=List(x20241, Const(7))).name("x20243").ctrl(x20247) // FixAnd(x20241,Const(7))
    val x20244 = OpDef(op=FixSla, inputs=List(x20242, Const(3))).name("x20244").ctrl(x20247) // FixLsh(x20242,Const(3))
    val x20245 = OpDef(op=FixAdd, inputs=List(x20244, x20243)).name("x20245").ctrl(x20247) // FixAdd(x20244,x20243)
    val x20246_x20240 = WriteMem(x20240, x20245).name("x20246_x20240").ctrl(x20247) // RegWrite(x20240,x20245,b13629)
    val x20248 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x20248").ctrl(x20262) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x20249 = CounterChain(List(x20248)).name("x20249").ctrl(x20262) // CounterChainNew(List(x20248))
    val x20261 = LoopController(style=SeqPipe, level=InnerControl, cchain=x20249).name("x20261").ctrl(x20262) // UnrolledForeach(List(b13629),x20249,Block(Const(())),List(List(b13640)),List(List(b13641)))
    val b13640 = CounterIter(x20248, None).ctrl(x20261).name("b13640")
    val b13641 = DummyOp().ctrl(x20261).name("b13641")
    val x20250 = OpDef(op=BitAnd, inputs=List(b13641, b13629)).name("x20250").ctrl(x20261) // And(b13641,b13629)
    val x20251 = LoadBanks(List(x19784_d0_b0), List(b13640)).name("x20251").ctrl(x20261) // ParSRAMLoad(x19784,List(List(b13640)),List(x20250))
    val x20252 = x20251 // x20252 = VectorApply(x20251,0)
    val x20253 = LoadBanks(List(x19785_d0_b0), List(b13640)).name("x20253").ctrl(x20261) // ParSRAMLoad(x19785,List(List(b13640)),List(x20250))
    val x20254 = x20253 // x20254 = VectorApply(x20253,0)
    val x20255 = OpDef(op=FixMul, inputs=List(x20252, Const(72))).name("x20255").ctrl(x20261) // FixMul(x20252,Const(72))
    val x20256 = ReadMem(x20240).name("x20256").ctrl(x20261) // RegRead(x20240)
    val x20257 = OpDef(op=FixAdd, inputs=List(x20255, x20256)).name("x20257").ctrl(x20261) // FixAdd(x20255,x20256)
    val x20258 = LoadBanks(List(x19428_d15_b0), List(x20254, b13628)).name("x20258").ctrl(x20261) // ParSRAMLoad(x19428,List(List(x20254, b13628)),List(x20250))
    val x20259 = x20258 // x20259 = VectorApply(x20258,0)
    val x20260 = StoreBanks(List(x19429_d0_b0, x19429_d1_b0, x19429_d2_b0, x19429_d3_b0), List(x20257), x20259).name("x20260").ctrl(x20261) // ParSRAMStore(x19429,List(List(x20257)),List(x20259),List(x20250))
    val x20263 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x20263").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x20264 = CounterChain(List(x20263)).name("x20264").ctrl(x20605) // CounterChainNew(List(x20263))
    val x20284 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20264).name("x20284").ctrl(x20605) // UnrolledForeach(List(Const(true)),x20264,Block(Const(())),List(List(b13657)),List(List(b13658)))
    val b13657 = CounterIter(x20263, Some(0)).ctrl(x20284).name("b13657")
    val b13658 = DummyOp().ctrl(x20284).name("b13658")
    val x20265 = Reg(init=Some(0)).name("x20265").ctrl(x20284) // x20265 = RegNew(Const(0))
    isAccum(x20265) = false
    val x20272 = UnitController(style=SeqPipe, level=InnerControl).name("x20272").ctrl(x20284) // UnitPipe(List(b13658),Block(Const(())))
    val x20266 = b13657 // FixConvert(b13657,TRUE,_32,_0)
    val x20267 = OpDef(op=FixSra, inputs=List(x20266, Const(3))).name("x20267").ctrl(x20272) // FixRsh(x20266,Const(3))
    val x20268 = OpDef(op=BitAnd, inputs=List(x20266, Const(7))).name("x20268").ctrl(x20272) // FixAnd(x20266,Const(7))
    val x20269 = OpDef(op=FixMul, inputs=List(x20267, Const(72))).name("x20269").ctrl(x20272) // FixMul(x20267,Const(72))
    val x20270 = OpDef(op=FixAdd, inputs=List(x20269, x20268)).name("x20270").ctrl(x20272) // FixAdd(x20269,x20268)
    val x20271_x20265 = WriteMem(x20265, x20270).name("x20271_x20265").ctrl(x20272) // RegWrite(x20265,x20270,b13658)
    val x20273 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x20273").ctrl(x20284) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x20274 = CounterChain(List(x20273)).name("x20274").ctrl(x20284) // CounterChainNew(List(x20273))
    val x20283 = LoopController(style=SeqPipe, level=InnerControl, cchain=x20274).name("x20283").ctrl(x20284) // UnrolledForeach(List(b13658),x20274,Block(Const(())),List(List(b13669)),List(List(b13670)))
    val b13669 = CounterIter(x20273, None).ctrl(x20283).name("b13669")
    val b13670 = DummyOp().ctrl(x20283).name("b13670")
    val x20275 = b13669 // FixConvert(b13669,TRUE,_32,_0)
    val x20276 = OpDef(op=FixSla, inputs=List(x20275, Const(3))).name("x20276").ctrl(x20283) // FixLsh(x20275,Const(3))
    val x20277 = ReadMem(x20265).name("x20277").ctrl(x20283) // RegRead(x20265)
    val x20278 = OpDef(op=FixAdd, inputs=List(x20276, x20277)).name("x20278").ctrl(x20283) // FixAdd(x20276,x20277)
    val x20279 = OpDef(op=BitAnd, inputs=List(b13670, b13658)).name("x20279").ctrl(x20283) // And(b13670,b13658)
    val x20280 = LoadBanks(List(x19429_d0_b0), List(x20278)).name("x20280").ctrl(x20283) // ParSRAMLoad(x19429,List(List(x20278)),List(x20279))
    val x20281 = x20280 // x20281 = VectorApply(x20280,0)
    val x20282 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b13669, b13657), x20281).name("x20282").ctrl(x20283) // ParSRAMStore(x19428,List(List(b13669, b13657)),List(x20281),List(x20279))
    val x20285 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x20285").ctrl(x20605) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x20286 = CounterChain(List(x20285)).name("x20286").ctrl(x20605) // CounterChainNew(List(x20285))
    val x20546 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20286).name("x20546").ctrl(x20605) // UnrolledForeach(List(Const(true)),x20286,Block(Const(())),List(List(b13683)),List(List(b13684)))
    val b13683 = CounterIter(x20285, Some(0)).ctrl(x20546).name("b13683")
    val b13684 = DummyOp().ctrl(x20546).name("b13684")
    val x20287 = Counter(min=Const(0), max=Const(4), step=Const(1), par=1).name("x20287").ctrl(x20546) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x20288 = CounterChain(List(x20287)).name("x20288").ctrl(x20546) // CounterChainNew(List(x20287))
    val x20330 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20288).name("x20330").ctrl(x20546) // UnrolledForeach(List(b13684),x20288,Block(Const(())),List(List(b13687)),List(List(b13688)))
    val b13687 = CounterIter(x20287, Some(0)).ctrl(x20330).name("b13687")
    val b13688 = DummyOp().ctrl(x20330).name("b13688")
    val x20329 = UnitController(style=SeqPipe, level=OuterControl).name("x20329").ctrl(x20330) // UnitPipe(List(b13688, b13684),Block(Const(())))
    val x20289_d0 = Reg(init=Some(0)).name("x20289_d0").ctrl(x20329) // x20289 = RegNew(Const(0))
    isAccum(x20289_d0) = false
    val x20289_d1 = Reg(init=Some(0)).name("x20289_d1").ctrl(x20329) // x20289 = RegNew(Const(0))
    isAccum(x20289_d1) = false
    val x20289_d2 = Reg(init=Some(0)).name("x20289_d2").ctrl(x20329) // x20289 = RegNew(Const(0))
    isAccum(x20289_d2) = false
    val x20289_d3 = Reg(init=Some(0)).name("x20289_d3").ctrl(x20329) // x20289 = RegNew(Const(0))
    isAccum(x20289_d3) = false
    val x20290_d0 = Reg(init=Some(0.0)).name("x20290_d0").ctrl(x20329) // x20290 = RegNew(Const(0))
    isAccum(x20290_d0) = false
    val x20290_d1 = Reg(init=Some(0.0)).name("x20290_d1").ctrl(x20329) // x20290 = RegNew(Const(0))
    isAccum(x20290_d1) = false
    val x20291_d0 = Reg(init=Some(0.0)).name("x20291_d0").ctrl(x20329) // x20291 = RegNew(Const(0))
    isAccum(x20291_d0) = false
    val x20291_d1 = Reg(init=Some(0.0)).name("x20291_d1").ctrl(x20329) // x20291 = RegNew(Const(0))
    isAccum(x20291_d1) = false
    val x20300 = UnitController(style=SeqPipe, level=InnerControl).name("x20300").ctrl(x20329) // UnitPipe(List(b13688, b13684),Block(Const(())))
    val x20292 = b13687 // FixConvert(b13687,TRUE,_32,_0)
    val x20293 = OpDef(op=FixAdd, inputs=List(Const(4), x20292)).name("x20293").ctrl(x20300) // FixAdd(Const(4),x20292)
    val x20294 = OpDef(op=BitAnd, inputs=List(b13688, b13684)).name("x20294").ctrl(x20300) // And(b13688,b13684)
    val x20295 = LoadBanks(List(x19427_d12_b0), List(b13687, b13683)).name("x20295").ctrl(x20300) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(b13687, b13683),Const(0),x20294)
    val x20296 = LoadBanks(List(x19428_d14_b0), List(b13687, b13683)).name("x20296").ctrl(x20300) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(b13687, b13683),Const(0),x20294)
    val x20297_x20289_d0 = WriteMem(x20289_d0, x20293).name("x20297_x20289_d0").ctrl(x20300) // RegWrite(x20289,x20293,x20294)
    val x20297_x20289_d1 = WriteMem(x20289_d1, x20293).name("x20297_x20289_d1").ctrl(x20300) // RegWrite(x20289,x20293,x20294)
    val x20297_x20289_d2 = WriteMem(x20289_d2, x20293).name("x20297_x20289_d2").ctrl(x20300) // RegWrite(x20289,x20293,x20294)
    val x20297_x20289_d3 = WriteMem(x20289_d3, x20293).name("x20297_x20289_d3").ctrl(x20300) // RegWrite(x20289,x20293,x20294)
    val x20298_x20290_d0 = WriteMem(x20290_d0, x20295).name("x20298_x20290_d0").ctrl(x20300) // RegWrite(x20290,x20295,x20294)
    val x20298_x20290_d1 = WriteMem(x20290_d1, x20295).name("x20298_x20290_d1").ctrl(x20300) // RegWrite(x20290,x20295,x20294)
    val x20299_x20291_d0 = WriteMem(x20291_d0, x20296).name("x20299_x20291_d0").ctrl(x20300) // RegWrite(x20291,x20296,x20294)
    val x20299_x20291_d1 = WriteMem(x20291_d1, x20296).name("x20299_x20291_d1").ctrl(x20300) // RegWrite(x20291,x20296,x20294)
    val x20307 = UnitController(style=SeqPipe, level=InnerControl).name("x20307").ctrl(x20329) // UnitPipe(List(b13688, b13684),Block(x20306))
    val x20301 = ReadMem(x20289_d3).name("x20301").ctrl(x20307) // RegRead(x20289)
    val x20302 = OpDef(op=BitAnd, inputs=List(b13688, b13684)).name("x20302").ctrl(x20307) // And(b13688,b13684)
    val x20303 = LoadBanks(List(x19427_d11_b0), List(x20301, b13683)).name("x20303").ctrl(x20307) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20301, b13683),Const(0),x20302)
    val x20304 = ReadMem(x20290_d1).name("x20304").ctrl(x20307) // RegRead(x20290)
    val x20305 = OpDef(op=FixAdd, inputs=List(x20304, x20303)).name("x20305").ctrl(x20307) // FixAdd(x20304,x20303)
    val x20306 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(b13687, b13683), x20305).name("x20306").ctrl(x20307) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(b13687, b13683),Const(0),x20305,x20302)
    val x20314 = UnitController(style=SeqPipe, level=InnerControl).name("x20314").ctrl(x20329) // UnitPipe(List(b13688, b13684),Block(x20313))
    val x20308 = ReadMem(x20289_d2).name("x20308").ctrl(x20314) // RegRead(x20289)
    val x20309 = OpDef(op=BitAnd, inputs=List(b13688, b13684)).name("x20309").ctrl(x20314) // And(b13688,b13684)
    val x20310 = LoadBanks(List(x19428_d13_b0), List(x20308, b13683)).name("x20310").ctrl(x20314) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20308, b13683),Const(0),x20309)
    val x20311 = ReadMem(x20291_d1).name("x20311").ctrl(x20314) // RegRead(x20291)
    val x20312 = OpDef(op=FixAdd, inputs=List(x20311, x20310)).name("x20312").ctrl(x20314) // FixAdd(x20311,x20310)
    val x20313 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b13687, b13683), x20312).name("x20313").ctrl(x20314) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(b13687, b13683),Const(0),x20312,x20309)
    val x20321 = UnitController(style=SeqPipe, level=InnerControl).name("x20321").ctrl(x20329) // UnitPipe(List(b13688, b13684),Block(x20320))
    val x20315 = ReadMem(x20289_d1).name("x20315").ctrl(x20321) // RegRead(x20289)
    val x20316 = OpDef(op=BitAnd, inputs=List(b13688, b13684)).name("x20316").ctrl(x20321) // And(b13688,b13684)
    val x20317 = LoadBanks(List(x19427_d10_b0), List(x20315, b13683)).name("x20317").ctrl(x20321) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20315, b13683),Const(0),x20316)
    val x20318 = ReadMem(x20290_d0).name("x20318").ctrl(x20321) // RegRead(x20290)
    val x20319 = OpDef(op=FixSub, inputs=List(x20318, x20317)).name("x20319").ctrl(x20321) // FixSub(x20318,x20317)
    val x20320 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20315, b13683), x20319).name("x20320").ctrl(x20321) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20315, b13683),Const(0),x20319,x20316)
    val x20328 = UnitController(style=SeqPipe, level=InnerControl).name("x20328").ctrl(x20329) // UnitPipe(List(b13688, b13684),Block(x20327))
    val x20322 = ReadMem(x20289_d0).name("x20322").ctrl(x20328) // RegRead(x20289)
    val x20323 = OpDef(op=BitAnd, inputs=List(b13688, b13684)).name("x20323").ctrl(x20328) // And(b13688,b13684)
    val x20324 = LoadBanks(List(x19428_d12_b0), List(x20322, b13683)).name("x20324").ctrl(x20328) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20322, b13683),Const(0),x20323)
    val x20325 = ReadMem(x20291_d0).name("x20325").ctrl(x20328) // RegRead(x20291)
    val x20326 = OpDef(op=FixSub, inputs=List(x20325, x20324)).name("x20326").ctrl(x20328) // FixSub(x20325,x20324)
    val x20327 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20322, b13683), x20326).name("x20327").ctrl(x20328) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20322, b13683),Const(0),x20326,x20323)
    val x20331 = Counter(min=Const(0), max=Const(3), step=Const(1), par=1).name("x20331").ctrl(x20546) // CounterNew(Const(0),Const(3),Const(1),Const(1))
    val x20332 = CounterChain(List(x20331)).name("x20332").ctrl(x20546) // CounterChainNew(List(x20331))
    val x20373 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20332).name("x20373").ctrl(x20546) // UnrolledForeach(List(b13684),x20332,Block(Const(())),List(List(b13733)),List(List(b13734)))
    val b13733 = CounterIter(x20331, Some(0)).ctrl(x20373).name("b13733")
    val b13734 = DummyOp().ctrl(x20373).name("b13734")
    val x20333_d0_b0 = SRAM(size=6, banking=NoBanking()).name("x20333_d0_b0").ctrl(x20373) // x20333 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x20333_d0_b0) = false
    val x20333_d1_b0 = SRAM(size=6, banking=NoBanking()).name("x20333_d1_b0").ctrl(x20373) // x20333 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x20333_d1_b0) = false
    val x20333_d2_b0 = SRAM(size=6, banking=NoBanking()).name("x20333_d2_b0").ctrl(x20373) // x20333 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x20333_d2_b0) = false
    val x20333_d3_b0 = SRAM(size=6, banking=NoBanking()).name("x20333_d3_b0").ctrl(x20373) // x20333 = SRAMNew(List(Const(2), Const(3)))
    isAccum(x20333_d3_b0) = false
    val x20334_d0 = Reg(init=Some(0.0)).name("x20334_d0").ctrl(x20373) // x20334 = RegNew(Const(0))
    isAccum(x20334_d0) = false
    val x20334_d1 = Reg(init=Some(0.0)).name("x20334_d1").ctrl(x20373) // x20334 = RegNew(Const(0))
    isAccum(x20334_d1) = false
    val x20335_d0 = Reg(init=Some(0.0)).name("x20335_d0").ctrl(x20373) // x20335 = RegNew(Const(0))
    isAccum(x20335_d0) = false
    val x20335_d1 = Reg(init=Some(0.0)).name("x20335_d1").ctrl(x20373) // x20335 = RegNew(Const(0))
    isAccum(x20335_d1) = false
    val x20344 = UnitController(style=SeqPipe, level=InnerControl).name("x20344").ctrl(x20373) // UnitPipe(List(b13734, b13684),Block(Const(())))
    val x20336 = b13733 // FixConvert(b13733,TRUE,_32,_0)
    val x20337 = OpDef(op=FixAdd, inputs=List(Const(5), x20336)).name("x20337").ctrl(x20344) // FixAdd(Const(5),x20336)
    val x20338 = OpDef(op=BitAnd, inputs=List(b13734, b13684)).name("x20338").ctrl(x20344) // And(b13734,b13684)
    val x20339 = LoadBanks(List(x19427_d9_b0), List(x20337, b13683)).name("x20339").ctrl(x20344) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20337, b13683),Const(0),x20338)
    val x20340 = OpDef(op=FixEql, inputs=List(x20336, Const(1))).name("x20340").ctrl(x20344) // FixEql(x20336,Const(1))
    val x20341 = OpDef(op=MuxOp, inputs=List(x20340, Const(1.0), Const(0.7070923))).name("x20341").ctrl(x20344) // Mux(x20340,Const(1),Const(0.70709228515625))
    val x20342_x20334_d0 = WriteMem(x20334_d0, x20339).name("x20342_x20334_d0").ctrl(x20344) // RegWrite(x20334,x20339,x20338)
    val x20342_x20334_d1 = WriteMem(x20334_d1, x20339).name("x20342_x20334_d1").ctrl(x20344) // RegWrite(x20334,x20339,x20338)
    val x20343_x20335_d0 = WriteMem(x20335_d0, x20341).name("x20343_x20335_d0").ctrl(x20344) // RegWrite(x20335,x20341,x20338)
    val x20343_x20335_d1 = WriteMem(x20335_d1, x20341).name("x20343_x20335_d1").ctrl(x20344) // RegWrite(x20335,x20341,x20338)
    val x20358 = UnitController(style=SeqPipe, level=InnerControl).name("x20358").ctrl(x20373) // UnitPipe(List(b13734, b13684),Block(x20357))
    val x20345 = b13733 // FixConvert(b13733,TRUE,_32,_0)
    val x20346 = OpDef(op=FixAdd, inputs=List(Const(5), x20345)).name("x20346").ctrl(x20358) // FixAdd(Const(5),x20345)
    val x20347 = OpDef(op=BitAnd, inputs=List(b13734, b13684)).name("x20347").ctrl(x20358) // And(b13734,b13684)
    val x20348 = LoadBanks(List(x20333_d3_b0), List(Const(0), b13733)).name("x20348").ctrl(x20358) // SRAMLoad(x20333,List(Const(2), Const(3)),List(Const(0), b13733),Const(0),x20347)
    val x20349 = ReadMem(x20334_d1).name("x20349").ctrl(x20358) // RegRead(x20334)
    val x20350 = OpDef(op=FixMul, inputs=List(x20349, x20348)).name("x20350").ctrl(x20358) // FixMul(x20349,x20348)
    val x20351 = LoadBanks(List(x19428_d11_b0), List(x20346, b13683)).name("x20351").ctrl(x20358) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20346, b13683),Const(0),x20347)
    val x20352 = LoadBanks(List(x20333_d2_b0), List(Const(1), b13733)).name("x20352").ctrl(x20358) // SRAMLoad(x20333,List(Const(2), Const(3)),List(Const(1), b13733),Const(0),x20347)
    val x20353 = OpDef(op=FixMul, inputs=List(x20351, x20352)).name("x20353").ctrl(x20358) // FixMul(x20351,x20352)
    val x20354 = OpDef(op=FixSub, inputs=List(x20350, x20353)).name("x20354").ctrl(x20358) // FixSub(x20350,x20353)
    val x20355 = ReadMem(x20335_d1).name("x20355").ctrl(x20358) // RegRead(x20335)
    val x20356 = OpDef(op=FixMul, inputs=List(x20354, x20355)).name("x20356").ctrl(x20358) // FixMul(x20354,x20355)
    val x20357 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20346, b13683), x20356).name("x20357").ctrl(x20358) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20346, b13683),Const(0),x20356,x20347)
    val x20372 = UnitController(style=SeqPipe, level=InnerControl).name("x20372").ctrl(x20373) // UnitPipe(List(b13734, b13684),Block(x20371))
    val x20359 = b13733 // FixConvert(b13733,TRUE,_32,_0)
    val x20360 = OpDef(op=FixAdd, inputs=List(Const(5), x20359)).name("x20360").ctrl(x20372) // FixAdd(Const(5),x20359)
    val x20361 = OpDef(op=BitAnd, inputs=List(b13734, b13684)).name("x20361").ctrl(x20372) // And(b13734,b13684)
    val x20362 = LoadBanks(List(x20333_d1_b0), List(Const(1), b13733)).name("x20362").ctrl(x20372) // SRAMLoad(x20333,List(Const(2), Const(3)),List(Const(1), b13733),Const(0),x20361)
    val x20363 = ReadMem(x20334_d0).name("x20363").ctrl(x20372) // RegRead(x20334)
    val x20364 = OpDef(op=FixMul, inputs=List(x20363, x20362)).name("x20364").ctrl(x20372) // FixMul(x20363,x20362)
    val x20365 = LoadBanks(List(x19428_d10_b0), List(x20360, b13683)).name("x20365").ctrl(x20372) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20360, b13683),Const(0),x20361)
    val x20366 = LoadBanks(List(x20333_d0_b0), List(Const(0), b13733)).name("x20366").ctrl(x20372) // SRAMLoad(x20333,List(Const(2), Const(3)),List(Const(0), b13733),Const(0),x20361)
    val x20367 = OpDef(op=FixMul, inputs=List(x20365, x20366)).name("x20367").ctrl(x20372) // FixMul(x20365,x20366)
    val x20368 = OpDef(op=FixAdd, inputs=List(x20364, x20367)).name("x20368").ctrl(x20372) // FixAdd(x20364,x20367)
    val x20369 = ReadMem(x20335_d0).name("x20369").ctrl(x20372) // RegRead(x20335)
    val x20370 = OpDef(op=FixMul, inputs=List(x20368, x20369)).name("x20370").ctrl(x20372) // FixMul(x20368,x20369)
    val x20371 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20360, b13683), x20370).name("x20371").ctrl(x20372) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20360, b13683),Const(0),x20370,x20361)
    val x20374 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x20374").ctrl(x20546) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x20375 = CounterChain(List(x20374)).name("x20375").ctrl(x20546) // CounterChainNew(List(x20374))
    val x20519 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20375).name("x20519").ctrl(x20546) // UnrolledForeach(List(b13684),x20375,Block(Const(())),List(List(b13778)),List(List(b13779)))
    val b13778 = CounterIter(x20374, Some(0)).ctrl(x20519).name("b13778")
    val b13779 = DummyOp().ctrl(x20519).name("b13779")
    val x20376_d0 = Reg(init=Some(0)).name("x20376_d0").ctrl(x20519) // x20376 = RegNew(Const(0))
    isAccum(x20376_d0) = false
    val x20376_d1 = Reg(init=Some(0)).name("x20376_d1").ctrl(x20519) // x20376 = RegNew(Const(0))
    isAccum(x20376_d1) = false
    val x20376_d2 = Reg(init=Some(0)).name("x20376_d2").ctrl(x20519) // x20376 = RegNew(Const(0))
    isAccum(x20376_d2) = false
    val x20376_d3 = Reg(init=Some(0)).name("x20376_d3").ctrl(x20519) // x20376 = RegNew(Const(0))
    isAccum(x20376_d3) = false
    val x20376_d4 = Reg(init=Some(0)).name("x20376_d4").ctrl(x20519) // x20376 = RegNew(Const(0))
    isAccum(x20376_d4) = false
    val x20382 = UnitController(style=SeqPipe, level=InnerControl).name("x20382").ctrl(x20519) // UnitPipe(List(b13779, b13684),Block(Const(())))
    val x20378 = b13778 // FixConvert(b13778,TRUE,_32,_0)
    val x20379 = OpDef(op=FixMul, inputs=List(Const(4), x20378)).name("x20379").ctrl(x20382) // FixMul(Const(4),x20378)
    val x20380 = OpDef(op=BitAnd, inputs=List(b13779, b13684)).name("x20380").ctrl(x20382) // And(b13779,b13684)
    val x20381_x20376_d0 = WriteMem(x20376_d0, x20379).name("x20381_x20376_d0").ctrl(x20382) // RegWrite(x20376,x20379,x20380)
    val x20381_x20376_d1 = WriteMem(x20376_d1, x20379).name("x20381_x20376_d1").ctrl(x20382) // RegWrite(x20376,x20379,x20380)
    val x20381_x20376_d2 = WriteMem(x20376_d2, x20379).name("x20381_x20376_d2").ctrl(x20382) // RegWrite(x20376,x20379,x20380)
    val x20381_x20376_d3 = WriteMem(x20376_d3, x20379).name("x20381_x20376_d3").ctrl(x20382) // RegWrite(x20376,x20379,x20380)
    val x20381_x20376_d4 = WriteMem(x20376_d4, x20379).name("x20381_x20376_d4").ctrl(x20382) // RegWrite(x20376,x20379,x20380)
    val x20383 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x20383").ctrl(x20519) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x20384 = CounterChain(List(x20383)).name("x20384").ctrl(x20519) // CounterChainNew(List(x20383))
    val x20438 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20384).name("x20438").ctrl(x20519) // UnrolledForeach(List(b13779, b13684),x20384,Block(Const(())),List(List(b13789)),List(List(b13790)))
    val b13789 = CounterIter(x20383, Some(0)).ctrl(x20438).name("b13789")
    val b13790 = DummyOp().ctrl(x20438).name("b13790")
    val x20437 = UnitController(style=SeqPipe, level=OuterControl).name("x20437").ctrl(x20438) // UnitPipe(List(b13790, b13779, b13684),Block(Const(())))
    val x20385_d0 = Reg(init=Some(0)).name("x20385_d0").ctrl(x20437) // x20385 = RegNew(Const(0))
    isAccum(x20385_d0) = false
    val x20385_d1 = Reg(init=Some(0)).name("x20385_d1").ctrl(x20437) // x20385 = RegNew(Const(0))
    isAccum(x20385_d1) = false
    val x20386_d0 = Reg(init=Some(0)).name("x20386_d0").ctrl(x20437) // x20386 = RegNew(Const(0))
    isAccum(x20386_d0) = false
    val x20386_d1 = Reg(init=Some(0)).name("x20386_d1").ctrl(x20437) // x20386 = RegNew(Const(0))
    isAccum(x20386_d1) = false
    val x20386_d2 = Reg(init=Some(0)).name("x20386_d2").ctrl(x20437) // x20386 = RegNew(Const(0))
    isAccum(x20386_d2) = false
    val x20386_d3 = Reg(init=Some(0)).name("x20386_d3").ctrl(x20437) // x20386 = RegNew(Const(0))
    isAccum(x20386_d3) = false
    val x20387_d0 = Reg(init=Some(0.0)).name("x20387_d0").ctrl(x20437) // x20387 = RegNew(Const(0))
    isAccum(x20387_d0) = false
    val x20387_d1 = Reg(init=Some(0.0)).name("x20387_d1").ctrl(x20437) // x20387 = RegNew(Const(0))
    isAccum(x20387_d1) = false
    val x20388_d0 = Reg(init=Some(0.0)).name("x20388_d0").ctrl(x20437) // x20388 = RegNew(Const(0))
    isAccum(x20388_d0) = false
    val x20388_d1 = Reg(init=Some(0.0)).name("x20388_d1").ctrl(x20437) // x20388 = RegNew(Const(0))
    isAccum(x20388_d1) = false
    val x20402 = UnitController(style=SeqPipe, level=InnerControl).name("x20402").ctrl(x20437) // UnitPipe(List(b13790, b13779, b13684),Block(Const(())))
    val x20389 = b13789 // FixConvert(b13789,TRUE,_32,_0)
    val x20390 = ReadMem(x20376_d4).name("x20390").ctrl(x20402) // RegRead(x20376)
    val x20391 = OpDef(op=FixAdd, inputs=List(x20390, x20389)).name("x20391").ctrl(x20402) // FixAdd(x20390,x20389)
    val x20392 = OpDef(op=FixAdd, inputs=List(Const(2), x20390)).name("x20392").ctrl(x20402) // FixAdd(Const(2),x20390)
    val x20393 = OpDef(op=FixAdd, inputs=List(x20392, x20389)).name("x20393").ctrl(x20402) // FixAdd(x20392,x20389)
    val x20394 = OpDef(op=BitAnd, inputs=List(b13790, b13779)).name("x20394").ctrl(x20402) // And(b13790,b13779)
    val x20395 = OpDef(op=BitAnd, inputs=List(x20394, b13684)).name("x20395").ctrl(x20402) // And(x20394,b13684)
    val x20396 = LoadBanks(List(x19427_d8_b0), List(x20391, b13683)).name("x20396").ctrl(x20402) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20391, b13683),Const(0),x20395)
    val x20397 = LoadBanks(List(x19428_d9_b0), List(x20391, b13683)).name("x20397").ctrl(x20402) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20391, b13683),Const(0),x20395)
    val x20398_x20385_d0 = WriteMem(x20385_d0, x20391).name("x20398_x20385_d0").ctrl(x20402) // RegWrite(x20385,x20391,x20395)
    val x20398_x20385_d1 = WriteMem(x20385_d1, x20391).name("x20398_x20385_d1").ctrl(x20402) // RegWrite(x20385,x20391,x20395)
    val x20399_x20386_d0 = WriteMem(x20386_d0, x20393).name("x20399_x20386_d0").ctrl(x20402) // RegWrite(x20386,x20393,x20395)
    val x20399_x20386_d1 = WriteMem(x20386_d1, x20393).name("x20399_x20386_d1").ctrl(x20402) // RegWrite(x20386,x20393,x20395)
    val x20399_x20386_d2 = WriteMem(x20386_d2, x20393).name("x20399_x20386_d2").ctrl(x20402) // RegWrite(x20386,x20393,x20395)
    val x20399_x20386_d3 = WriteMem(x20386_d3, x20393).name("x20399_x20386_d3").ctrl(x20402) // RegWrite(x20386,x20393,x20395)
    val x20400_x20387_d0 = WriteMem(x20387_d0, x20396).name("x20400_x20387_d0").ctrl(x20402) // RegWrite(x20387,x20396,x20395)
    val x20400_x20387_d1 = WriteMem(x20387_d1, x20396).name("x20400_x20387_d1").ctrl(x20402) // RegWrite(x20387,x20396,x20395)
    val x20401_x20388_d0 = WriteMem(x20388_d0, x20397).name("x20401_x20388_d0").ctrl(x20402) // RegWrite(x20388,x20397,x20395)
    val x20401_x20388_d1 = WriteMem(x20388_d1, x20397).name("x20401_x20388_d1").ctrl(x20402) // RegWrite(x20388,x20397,x20395)
    val x20411 = UnitController(style=SeqPipe, level=InnerControl).name("x20411").ctrl(x20437) // UnitPipe(List(b13790, b13779, b13684),Block(x20410))
    val x20403 = ReadMem(x20386_d3).name("x20403").ctrl(x20411) // RegRead(x20386)
    val x20404 = OpDef(op=BitAnd, inputs=List(b13790, b13779)).name("x20404").ctrl(x20411) // And(b13790,b13779)
    val x20405 = OpDef(op=BitAnd, inputs=List(x20404, b13684)).name("x20405").ctrl(x20411) // And(x20404,b13684)
    val x20406 = LoadBanks(List(x19427_d7_b0), List(x20403, b13683)).name("x20406").ctrl(x20411) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20403, b13683),Const(0),x20405)
    val x20407 = ReadMem(x20387_d1).name("x20407").ctrl(x20411) // RegRead(x20387)
    val x20408 = OpDef(op=FixAdd, inputs=List(x20407, x20406)).name("x20408").ctrl(x20411) // FixAdd(x20407,x20406)
    val x20409 = ReadMem(x20385_d1).name("x20409").ctrl(x20411) // RegRead(x20385)
    val x20410 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20409, b13683), x20408).name("x20410").ctrl(x20411) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20409, b13683),Const(0),x20408,x20405)
    val x20420 = UnitController(style=SeqPipe, level=InnerControl).name("x20420").ctrl(x20437) // UnitPipe(List(b13790, b13779, b13684),Block(x20419))
    val x20412 = ReadMem(x20386_d2).name("x20412").ctrl(x20420) // RegRead(x20386)
    val x20413 = OpDef(op=BitAnd, inputs=List(b13790, b13779)).name("x20413").ctrl(x20420) // And(b13790,b13779)
    val x20414 = OpDef(op=BitAnd, inputs=List(x20413, b13684)).name("x20414").ctrl(x20420) // And(x20413,b13684)
    val x20415 = LoadBanks(List(x19428_d8_b0), List(x20412, b13683)).name("x20415").ctrl(x20420) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20412, b13683),Const(0),x20414)
    val x20416 = ReadMem(x20388_d1).name("x20416").ctrl(x20420) // RegRead(x20388)
    val x20417 = OpDef(op=FixAdd, inputs=List(x20416, x20415)).name("x20417").ctrl(x20420) // FixAdd(x20416,x20415)
    val x20418 = ReadMem(x20385_d0).name("x20418").ctrl(x20420) // RegRead(x20385)
    val x20419 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20418, b13683), x20417).name("x20419").ctrl(x20420) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20418, b13683),Const(0),x20417,x20414)
    val x20428 = UnitController(style=SeqPipe, level=InnerControl).name("x20428").ctrl(x20437) // UnitPipe(List(b13790, b13779, b13684),Block(x20427))
    val x20421 = ReadMem(x20386_d1).name("x20421").ctrl(x20428) // RegRead(x20386)
    val x20422 = OpDef(op=BitAnd, inputs=List(b13790, b13779)).name("x20422").ctrl(x20428) // And(b13790,b13779)
    val x20423 = OpDef(op=BitAnd, inputs=List(x20422, b13684)).name("x20423").ctrl(x20428) // And(x20422,b13684)
    val x20424 = LoadBanks(List(x19427_d6_b0), List(x20421, b13683)).name("x20424").ctrl(x20428) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20421, b13683),Const(0),x20423)
    val x20425 = ReadMem(x20387_d0).name("x20425").ctrl(x20428) // RegRead(x20387)
    val x20426 = OpDef(op=FixSub, inputs=List(x20425, x20424)).name("x20426").ctrl(x20428) // FixSub(x20425,x20424)
    val x20427 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20421, b13683), x20426).name("x20427").ctrl(x20428) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20421, b13683),Const(0),x20426,x20423)
    val x20436 = UnitController(style=SeqPipe, level=InnerControl).name("x20436").ctrl(x20437) // UnitPipe(List(b13790, b13779, b13684),Block(x20435))
    val x20429 = ReadMem(x20386_d0).name("x20429").ctrl(x20436) // RegRead(x20386)
    val x20430 = OpDef(op=BitAnd, inputs=List(b13790, b13779)).name("x20430").ctrl(x20436) // And(b13790,b13779)
    val x20431 = OpDef(op=BitAnd, inputs=List(x20430, b13684)).name("x20431").ctrl(x20436) // And(x20430,b13684)
    val x20432 = LoadBanks(List(x19428_d7_b0), List(x20429, b13683)).name("x20432").ctrl(x20436) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20429, b13683),Const(0),x20431)
    val x20433 = ReadMem(x20388_d0).name("x20433").ctrl(x20436) // RegRead(x20388)
    val x20434 = OpDef(op=FixSub, inputs=List(x20433, x20432)).name("x20434").ctrl(x20436) // FixSub(x20433,x20432)
    val x20435 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20429, b13683), x20434).name("x20435").ctrl(x20436) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20429, b13683),Const(0),x20434,x20431)
    val x20439 = Reg(init=Some(0.0)).name("x20439").ctrl(x20519) // x20439 = RegNew(Const(0))
    isAccum(x20439) = false
    val x20445 = UnitController(style=SeqPipe, level=InnerControl).name("x20445").ctrl(x20519) // UnitPipe(List(b13779, b13684),Block(Const(())))
    val x20440 = ReadMem(x20376_d3).name("x20440").ctrl(x20445) // RegRead(x20376)
    val x20441 = OpDef(op=FixAdd, inputs=List(x20440, Const(3))).name("x20441").ctrl(x20445) // FixAdd(x20440,Const(3))
    val x20442 = OpDef(op=BitAnd, inputs=List(b13779, b13684)).name("x20442").ctrl(x20445) // And(b13779,b13684)
    val x20443 = LoadBanks(List(x19427_d5_b0), List(x20441, b13683)).name("x20443").ctrl(x20445) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20441, b13683),Const(0),x20442)
    val x20444_x20439 = WriteMem(x20439, x20443).name("x20444_x20439").ctrl(x20445) // RegWrite(x20439,x20443,x20442)
    val x20453 = UnitController(style=SeqPipe, level=InnerControl).name("x20453").ctrl(x20519) // UnitPipe(List(b13779, b13684),Block(x20452))
    val x20446 = ReadMem(x20376_d2).name("x20446").ctrl(x20453) // RegRead(x20376)
    val x20447 = OpDef(op=FixAdd, inputs=List(x20446, Const(3))).name("x20447").ctrl(x20453) // FixAdd(x20446,Const(3))
    val x20448 = OpDef(op=BitAnd, inputs=List(b13779, b13684)).name("x20448").ctrl(x20453) // And(b13779,b13684)
    val x20449 = LoadBanks(List(x19428_d6_b0), List(x20447, b13683)).name("x20449").ctrl(x20453) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20447, b13683),Const(0),x20448)
    val x20450 = OpDef(op=FixMul, inputs=List(x20449, Const(-1.0))).name("x20450").ctrl(x20453) // FixMul(x20449,Const(-1))
    val x20451 = OpDef(op=FixNeg, inputs=List(x20450)).name("x20451").ctrl(x20453) // FixNeg(x20450)
    val x20452 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20447, b13683), x20451).name("x20452").ctrl(x20453) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20447, b13683),Const(0),x20451,x20448)
    val x20461 = UnitController(style=SeqPipe, level=InnerControl).name("x20461").ctrl(x20519) // UnitPipe(List(b13779, b13684),Block(x20460))
    val x20454 = ReadMem(x20376_d1).name("x20454").ctrl(x20461) // RegRead(x20376)
    val x20455 = OpDef(op=FixAdd, inputs=List(x20454, Const(3))).name("x20455").ctrl(x20461) // FixAdd(x20454,Const(3))
    val x20456 = ReadMem(x20439).name("x20456").ctrl(x20461) // RegRead(x20439)
    val x20457 = OpDef(op=FixMul, inputs=List(x20456, Const(-1.0))).name("x20457").ctrl(x20461) // FixMul(x20456,Const(-1))
    val x20458 = OpDef(op=BitAnd, inputs=List(b13779, b13684)).name("x20458").ctrl(x20461) // And(b13779,b13684)
    val x20459 = LoadBanks(List(x19428_d5_b0), List(x20455, b13683)).name("x20459").ctrl(x20461) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20455, b13683),Const(0),x20458)
    val x20460 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20455, b13683), x20457).name("x20460").ctrl(x20461) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20455, b13683),Const(0),x20457,x20458)
    val x20462 = Counter(min=Const(0), max=Const(2), step=Const(1), par=1).name("x20462").ctrl(x20519) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x20463 = CounterChain(List(x20462)).name("x20463").ctrl(x20519) // CounterChainNew(List(x20462))
    val x20518 = LoopController(style=SeqPipe, level=OuterControl, cchain=x20463).name("x20518").ctrl(x20519) // UnrolledForeach(List(b13779, b13684),x20463,Block(Const(())),List(List(b13870)),List(List(b13871)))
    val b13870 = CounterIter(x20462, Some(0)).ctrl(x20518).name("b13870")
    val b13871 = DummyOp().ctrl(x20518).name("b13871")
    val x20517 = UnitController(style=SeqPipe, level=OuterControl).name("x20517").ctrl(x20518) // UnitPipe(List(b13871, b13779, b13684),Block(Const(())))
    val x20464_d0 = Reg(init=Some(0)).name("x20464_d0").ctrl(x20517) // x20464 = RegNew(Const(0))
    isAccum(x20464_d0) = false
    val x20464_d1 = Reg(init=Some(0)).name("x20464_d1").ctrl(x20517) // x20464 = RegNew(Const(0))
    isAccum(x20464_d1) = false
    val x20465_d0 = Reg(init=Some(0)).name("x20465_d0").ctrl(x20517) // x20465 = RegNew(Const(0))
    isAccum(x20465_d0) = false
    val x20465_d1 = Reg(init=Some(0)).name("x20465_d1").ctrl(x20517) // x20465 = RegNew(Const(0))
    isAccum(x20465_d1) = false
    val x20465_d2 = Reg(init=Some(0)).name("x20465_d2").ctrl(x20517) // x20465 = RegNew(Const(0))
    isAccum(x20465_d2) = false
    val x20465_d3 = Reg(init=Some(0)).name("x20465_d3").ctrl(x20517) // x20465 = RegNew(Const(0))
    isAccum(x20465_d3) = false
    val x20466_d0 = Reg(init=Some(0.0)).name("x20466_d0").ctrl(x20517) // x20466 = RegNew(Const(0))
    isAccum(x20466_d0) = false
    val x20466_d1 = Reg(init=Some(0.0)).name("x20466_d1").ctrl(x20517) // x20466 = RegNew(Const(0))
    isAccum(x20466_d1) = false
    val x20467_d0 = Reg(init=Some(0.0)).name("x20467_d0").ctrl(x20517) // x20467 = RegNew(Const(0))
    isAccum(x20467_d0) = false
    val x20467_d1 = Reg(init=Some(0.0)).name("x20467_d1").ctrl(x20517) // x20467 = RegNew(Const(0))
    isAccum(x20467_d1) = false
    val x20482 = UnitController(style=SeqPipe, level=InnerControl).name("x20482").ctrl(x20517) // UnitPipe(List(b13871, b13779, b13684),Block(Const(())))
    val x20468 = b13870 // FixConvert(b13870,TRUE,_32,_0)
    val x20469 = OpDef(op=FixMul, inputs=List(Const(2), x20468)).name("x20469").ctrl(x20482) // FixMul(Const(2),x20468)
    val x20470 = ReadMem(x20376_d0).name("x20470").ctrl(x20482) // RegRead(x20376)
    val x20471 = OpDef(op=FixAdd, inputs=List(x20470, x20469)).name("x20471").ctrl(x20482) // FixAdd(x20470,x20469)
    val x20472 = OpDef(op=FixAdd, inputs=List(Const(1), x20470)).name("x20472").ctrl(x20482) // FixAdd(Const(1),x20470)
    val x20473 = OpDef(op=FixAdd, inputs=List(x20472, x20469)).name("x20473").ctrl(x20482) // FixAdd(x20472,x20469)
    val x20474 = OpDef(op=BitAnd, inputs=List(b13871, b13779)).name("x20474").ctrl(x20482) // And(b13871,b13779)
    val x20475 = OpDef(op=BitAnd, inputs=List(x20474, b13684)).name("x20475").ctrl(x20482) // And(x20474,b13684)
    val x20476 = LoadBanks(List(x19427_d4_b0), List(x20471, b13683)).name("x20476").ctrl(x20482) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20471, b13683),Const(0),x20475)
    val x20477 = LoadBanks(List(x19428_d4_b0), List(x20471, b13683)).name("x20477").ctrl(x20482) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20471, b13683),Const(0),x20475)
    val x20478_x20464_d0 = WriteMem(x20464_d0, x20471).name("x20478_x20464_d0").ctrl(x20482) // RegWrite(x20464,x20471,x20475)
    val x20478_x20464_d1 = WriteMem(x20464_d1, x20471).name("x20478_x20464_d1").ctrl(x20482) // RegWrite(x20464,x20471,x20475)
    val x20479_x20465_d0 = WriteMem(x20465_d0, x20473).name("x20479_x20465_d0").ctrl(x20482) // RegWrite(x20465,x20473,x20475)
    val x20479_x20465_d1 = WriteMem(x20465_d1, x20473).name("x20479_x20465_d1").ctrl(x20482) // RegWrite(x20465,x20473,x20475)
    val x20479_x20465_d2 = WriteMem(x20465_d2, x20473).name("x20479_x20465_d2").ctrl(x20482) // RegWrite(x20465,x20473,x20475)
    val x20479_x20465_d3 = WriteMem(x20465_d3, x20473).name("x20479_x20465_d3").ctrl(x20482) // RegWrite(x20465,x20473,x20475)
    val x20480_x20466_d0 = WriteMem(x20466_d0, x20476).name("x20480_x20466_d0").ctrl(x20482) // RegWrite(x20466,x20476,x20475)
    val x20480_x20466_d1 = WriteMem(x20466_d1, x20476).name("x20480_x20466_d1").ctrl(x20482) // RegWrite(x20466,x20476,x20475)
    val x20481_x20467_d0 = WriteMem(x20467_d0, x20477).name("x20481_x20467_d0").ctrl(x20482) // RegWrite(x20467,x20477,x20475)
    val x20481_x20467_d1 = WriteMem(x20467_d1, x20477).name("x20481_x20467_d1").ctrl(x20482) // RegWrite(x20467,x20477,x20475)
    val x20491 = UnitController(style=SeqPipe, level=InnerControl).name("x20491").ctrl(x20517) // UnitPipe(List(b13871, b13779, b13684),Block(x20490))
    val x20483 = ReadMem(x20465_d3).name("x20483").ctrl(x20491) // RegRead(x20465)
    val x20484 = OpDef(op=BitAnd, inputs=List(b13871, b13779)).name("x20484").ctrl(x20491) // And(b13871,b13779)
    val x20485 = OpDef(op=BitAnd, inputs=List(x20484, b13684)).name("x20485").ctrl(x20491) // And(x20484,b13684)
    val x20486 = LoadBanks(List(x19427_d3_b0), List(x20483, b13683)).name("x20486").ctrl(x20491) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20483, b13683),Const(0),x20485)
    val x20487 = ReadMem(x20466_d1).name("x20487").ctrl(x20491) // RegRead(x20466)
    val x20488 = OpDef(op=FixAdd, inputs=List(x20487, x20486)).name("x20488").ctrl(x20491) // FixAdd(x20487,x20486)
    val x20489 = ReadMem(x20464_d1).name("x20489").ctrl(x20491) // RegRead(x20464)
    val x20490 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20489, b13683), x20488).name("x20490").ctrl(x20491) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20489, b13683),Const(0),x20488,x20485)
    val x20500 = UnitController(style=SeqPipe, level=InnerControl).name("x20500").ctrl(x20517) // UnitPipe(List(b13871, b13779, b13684),Block(x20499))
    val x20492 = ReadMem(x20465_d2).name("x20492").ctrl(x20500) // RegRead(x20465)
    val x20493 = OpDef(op=BitAnd, inputs=List(b13871, b13779)).name("x20493").ctrl(x20500) // And(b13871,b13779)
    val x20494 = OpDef(op=BitAnd, inputs=List(x20493, b13684)).name("x20494").ctrl(x20500) // And(x20493,b13684)
    val x20495 = LoadBanks(List(x19428_d3_b0), List(x20492, b13683)).name("x20495").ctrl(x20500) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20492, b13683),Const(0),x20494)
    val x20496 = ReadMem(x20467_d1).name("x20496").ctrl(x20500) // RegRead(x20467)
    val x20497 = OpDef(op=FixAdd, inputs=List(x20496, x20495)).name("x20497").ctrl(x20500) // FixAdd(x20496,x20495)
    val x20498 = ReadMem(x20464_d0).name("x20498").ctrl(x20500) // RegRead(x20464)
    val x20499 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20498, b13683), x20497).name("x20499").ctrl(x20500) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20498, b13683),Const(0),x20497,x20494)
    val x20508 = UnitController(style=SeqPipe, level=InnerControl).name("x20508").ctrl(x20517) // UnitPipe(List(b13871, b13779, b13684),Block(x20507))
    val x20501 = ReadMem(x20465_d1).name("x20501").ctrl(x20508) // RegRead(x20465)
    val x20502 = OpDef(op=BitAnd, inputs=List(b13871, b13779)).name("x20502").ctrl(x20508) // And(b13871,b13779)
    val x20503 = OpDef(op=BitAnd, inputs=List(x20502, b13684)).name("x20503").ctrl(x20508) // And(x20502,b13684)
    val x20504 = LoadBanks(List(x19427_d2_b0), List(x20501, b13683)).name("x20504").ctrl(x20508) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(x20501, b13683),Const(0),x20503)
    val x20505 = ReadMem(x20466_d0).name("x20505").ctrl(x20508) // RegRead(x20466)
    val x20506 = OpDef(op=FixSub, inputs=List(x20505, x20504)).name("x20506").ctrl(x20508) // FixSub(x20505,x20504)
    val x20507 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(x20501, b13683), x20506).name("x20507").ctrl(x20508) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(x20501, b13683),Const(0),x20506,x20503)
    val x20516 = UnitController(style=SeqPipe, level=InnerControl).name("x20516").ctrl(x20517) // UnitPipe(List(b13871, b13779, b13684),Block(x20515))
    val x20509 = ReadMem(x20465_d0).name("x20509").ctrl(x20516) // RegRead(x20465)
    val x20510 = OpDef(op=BitAnd, inputs=List(b13871, b13779)).name("x20510").ctrl(x20516) // And(b13871,b13779)
    val x20511 = OpDef(op=BitAnd, inputs=List(x20510, b13684)).name("x20511").ctrl(x20516) // And(x20510,b13684)
    val x20512 = LoadBanks(List(x19428_d2_b0), List(x20509, b13683)).name("x20512").ctrl(x20516) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(x20509, b13683),Const(0),x20511)
    val x20513 = ReadMem(x20467_d0).name("x20513").ctrl(x20516) // RegRead(x20467)
    val x20514 = OpDef(op=FixSub, inputs=List(x20513, x20512)).name("x20514").ctrl(x20516) // FixSub(x20513,x20512)
    val x20515 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(x20509, b13683), x20514).name("x20515").ctrl(x20516) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(x20509, b13683),Const(0),x20514,x20511)
    val x20520_d0_b0 = SRAM(size=8, banking=NoBanking()).name("x20520_d0_b0").ctrl(x20546) // x20520 = SRAMNew(ArrayBuffer(Const(8)))
    isAccum(x20520_d0_b0) = false
    val x20521_d0_b0 = SRAM(size=8, banking=NoBanking()).name("x20521_d0_b0").ctrl(x20546) // x20521 = SRAMNew(ArrayBuffer(Const(8)))
    isAccum(x20521_d0_b0) = false
    val x20522 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x20522").ctrl(x20546) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x20523 = CounterChain(List(x20522)).name("x20523").ctrl(x20546) // CounterChainNew(List(x20522))
    val x20534 = LoopController(style=MetaPipe, level=OuterControl, cchain=x20523).name("x20534").ctrl(x20546) // UnrolledForeach(List(b13684),x20523,Block(Const(())),List(List(b13932)),List(List(b13933)))
    val b13932 = CounterIter(x20522, Some(0)).ctrl(x20534).name("b13932")
    val b13933 = DummyOp().ctrl(x20534).name("b13933")
    val x20528 = UnitController(style=SeqPipe, level=InnerControl).name("x20528").ctrl(x20534) // UnitPipe(List(b13933, b13684),Block(x20527))
    val x20524 = OpDef(op=BitAnd, inputs=List(b13933, b13684)).name("x20524").ctrl(x20528) // And(b13933,b13684)
    val x20525 = LoadBanks(List(x19480_d1_b0), List(b13932)).name("x20525").ctrl(x20528) // SRAMLoad(x19480,List(Const(8)),List(b13932),Const(0),x20524)
    val x20526 = LoadBanks(List(x19427_d1_b0), List(b13932, b13683)).name("x20526").ctrl(x20528) // SRAMLoad(x19427,ArrayBuffer(Const(8), Const(64)),List(b13932, b13683),Const(0),x20524)
    val x20527 = StoreBanks(List(x20520_d0_b0), List(x20525), x20526).name("x20527").ctrl(x20528) // SRAMStore(x20520,ArrayBuffer(Const(8)),List(x20525),Const(0),x20526,x20524)
    val x20533 = UnitController(style=SeqPipe, level=InnerControl).name("x20533").ctrl(x20534) // UnitPipe(List(b13933, b13684),Block(x20532))
    val x20529 = OpDef(op=BitAnd, inputs=List(b13933, b13684)).name("x20529").ctrl(x20533) // And(b13933,b13684)
    val x20530 = LoadBanks(List(x19480_d0_b0), List(b13932)).name("x20530").ctrl(x20533) // SRAMLoad(x19480,List(Const(8)),List(b13932),Const(0),x20529)
    val x20531 = LoadBanks(List(x19428_d1_b0), List(b13932, b13683)).name("x20531").ctrl(x20533) // SRAMLoad(x19428,ArrayBuffer(Const(8), Const(64)),List(b13932, b13683),Const(0),x20529)
    val x20532 = StoreBanks(List(x20521_d0_b0), List(x20530), x20531).name("x20532").ctrl(x20533) // SRAMStore(x20521,ArrayBuffer(Const(8)),List(x20530),Const(0),x20531,x20529)
    val x20535 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x20535").ctrl(x20546) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x20536 = CounterChain(List(x20535)).name("x20536").ctrl(x20546) // CounterChainNew(List(x20535))
    val x20545 = LoopController(style=MetaPipe, level=OuterControl, cchain=x20536).name("x20545").ctrl(x20546) // UnrolledForeach(List(b13684),x20536,Block(Const(())),List(List(b13947)),List(List(b13948)))
    val b13947 = CounterIter(x20535, Some(0)).ctrl(x20545).name("b13947")
    val b13948 = DummyOp().ctrl(x20545).name("b13948")
    val x20540 = UnitController(style=SeqPipe, level=InnerControl).name("x20540").ctrl(x20545) // UnitPipe(List(b13948, b13684),Block(x20539))
    val x20537 = OpDef(op=BitAnd, inputs=List(b13948, b13684)).name("x20537").ctrl(x20540) // And(b13948,b13684)
    val x20538 = LoadBanks(List(x20520_d0_b0), List(b13947)).name("x20538").ctrl(x20540) // SRAMLoad(x20520,ArrayBuffer(Const(8)),List(b13947),Const(0),x20537)
    val x20539 = StoreBanks(List(x19427_d0_b0, x19427_d5_b0, x19427_d10_b0, x19427_d24_b0, x19427_d37_b0, x19427_d25_b0, x19427_d14_b0, x19427_d20_b0, x19427_d29_b0, x19427_d1_b0, x19427_d6_b0, x19427_d28_b0, x19427_d38_b0, x19427_d21_b0, x19427_d33_b0, x19427_d9_b0, x19427_d13_b0, x19427_d2_b0, x19427_d32_b0, x19427_d34_b0, x19427_d17_b0, x19427_d22_b0, x19427_d27_b0, x19427_d12_b0, x19427_d7_b0, x19427_d3_b0, x19427_d35_b0, x19427_d18_b0, x19427_d16_b0, x19427_d31_b0, x19427_d11_b0, x19427_d26_b0, x19427_d23_b0, x19427_d8_b0, x19427_d36_b0, x19427_d30_b0, x19427_d19_b0, x19427_d4_b0, x19427_d15_b0), List(b13947, b13683), x20538).name("x20539").ctrl(x20540) // SRAMStore(x19427,ArrayBuffer(Const(8), Const(64)),List(b13947, b13683),Const(0),x20538,x20537)
    val x20544 = UnitController(style=SeqPipe, level=InnerControl).name("x20544").ctrl(x20545) // UnitPipe(List(b13948, b13684),Block(x20543))
    val x20541 = OpDef(op=BitAnd, inputs=List(b13948, b13684)).name("x20541").ctrl(x20544) // And(b13948,b13684)
    val x20542 = LoadBanks(List(x20521_d0_b0), List(b13947)).name("x20542").ctrl(x20544) // SRAMLoad(x20521,ArrayBuffer(Const(8)),List(b13947),Const(0),x20541)
    val x20543 = StoreBanks(List(x19428_d0_b0, x19428_d5_b0, x19428_d10_b0, x19428_d42_b0, x19428_d24_b0, x19428_d37_b0, x19428_d25_b0, x19428_d14_b0, x19428_d20_b0, x19428_d46_b0, x19428_d29_b0, x19428_d1_b0, x19428_d6_b0, x19428_d28_b0, x19428_d38_b0, x19428_d21_b0, x19428_d33_b0, x19428_d9_b0, x19428_d13_b0, x19428_d41_b0, x19428_d2_b0, x19428_d32_b0, x19428_d34_b0, x19428_d45_b0, x19428_d17_b0, x19428_d22_b0, x19428_d44_b0, x19428_d27_b0, x19428_d12_b0, x19428_d7_b0, x19428_d39_b0, x19428_d3_b0, x19428_d35_b0, x19428_d18_b0, x19428_d16_b0, x19428_d31_b0, x19428_d11_b0, x19428_d43_b0, x19428_d40_b0, x19428_d26_b0, x19428_d23_b0, x19428_d8_b0, x19428_d36_b0, x19428_d30_b0, x19428_d19_b0, x19428_d4_b0, x19428_d15_b0), List(b13947, b13683), x20542).name("x20543").ctrl(x20544) // SRAMStore(x19428,ArrayBuffer(Const(8), Const(64)),List(b13947, b13683),Const(0),x20542,x20541)
    val x20547 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x20547").ctrl(x20605) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x20548 = CounterChain(List(x20547)).name("x20548").ctrl(x20605) // CounterChainNew(ArrayBuffer(x20547))
    val x20575 = LoopController(style=StreamPipe, level=OuterControl, cchain=x20548).name("x20575").ctrl(x20605) // UnrolledForeach(List(Const(true)),x20548,Block(Const(())),ArrayBuffer(List(b13961)),ArrayBuffer(List(b13962)))
    val b13961 = CounterIter(x20547, Some(0)).ctrl(x20575).name("b13961")
    val b13962 = DummyOp().ctrl(x20575).name("b13962")
    val b20713 = StreamOut(field="offset").name("b20713").ctrl(x20575) // x20549 = StreamOutNew(BurstCmdBus)
    val b20714 = StreamOut(field="size").name("b20714").ctrl(x20575) // x20549 = StreamOutNew(BurstCmdBus)
    val x20550 = StreamOut(field="data").name("x20550").ctrl(x20575) // x20550 = StreamOutNew(BurstFullDataBus())
    val x20551 = StreamIn(field="ack").name("x20551").ctrl(x20575) // x20551 = StreamInNew(BurstAckBus)
    val x20563 = UnitController(style=SeqPipe, level=InnerControl).name("x20563").ctrl(x20575) // UnitPipe(List(b13962),Block(x20562))
    val x20552 = b13961 // FixConvert(b13961,TRUE,_32,_0)
    val x20553 = OpDef(op=FixSla, inputs=List(x20552, Const(6))).name("x20553").ctrl(x20563) // FixLsh(x20552,Const(6))
    val x20554 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x20555 = OpDef(op=FixAdd, inputs=List(x20553, x20554)).name("x20555").ctrl(x20563) // FixAdd(x20553,x20554)
    val x20556 = OpDef(op=FixSla, inputs=List(x20555, Const(2))).name("x20556").ctrl(x20563) // FixLsh(x20555,Const(2))
    val x20557 = x20556 // FixConvert(x20556,TRUE,_64,_0)
    val x20558 = top.argFringe.dramAddress(x19423).name("x20558").ctrl(x20563) // GetDRAMAddress(x19423)
    val x20559 = OpDef(op=FixAdd, inputs=List(x20557, x20558)).name("x20559").ctrl(x20563) // FixAdd(x20557,x20558)
    val x20561_x20560 = x20559 // FixConvert(x20559,TRUE,_64,_0)
    // x20561 = SimpleStruct(ArrayBuffer((offset,x20560), (size,Const(256)), (isLoad,Const(false))))
    val b20715_b20713 = WriteMem(b20713, x20561_x20560).name("b20715_b20713").ctrl(x20563) // StreamWrite(x20549,x20561,b13962)
    val b20716_b20714 = WriteMem(b20714, Const(256)).name("b20716_b20714").ctrl(x20563) // StreamWrite(x20549,x20561,b13962)
    val x20564 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x20564").ctrl(x20575) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x20565 = CounterChain(List(x20564)).name("x20565").ctrl(x20575) // CounterChainNew(List(x20564))
    val x20571 = LoopController(style=InnerPipe, level=InnerControl, cchain=x20565).name("x20571").ctrl(x20575) // UnrolledForeach(ArrayBuffer(b13962),x20565,Block(Const(())),List(List(b13980)),List(List(b13981)))
    val b13980 = CounterIter(x20564, None).ctrl(x20571).name("b13980")
    val b13981 = DummyOp().ctrl(x20571).name("b13981")
    val x20566 = OpDef(op=BitAnd, inputs=List(b13981, b13962)).name("x20566").ctrl(x20571) // And(b13981,b13962)
    val x20567 = LoadBanks(List(x19427_d0_b0), List(b13961, b13980)).name("x20567").ctrl(x20571) // ParSRAMLoad(x19427,List(List(b13961, b13980)),List(x20566))
    val x20569_x20568 = x20567 // x20568 = VectorApply(x20567,0)
    // x20569 = SimpleStruct(ArrayBuffer((_1,x20568), (_2,Const(true))))
    val x20570_x20550 = WriteMem(x20550, x20569_x20568).name("x20570_x20550").ctrl(x20571) // ParStreamWrite(x20550,List(x20569),List(x20566))
    val x20572 = FringeContainer(x19423,b20713,b20714,x20550,x20551).name("x20572").ctrl(x20575) // FringeDenseStore(x19423,x20549,x20550,x20551)
    val x20574 = UnitController(style=SeqPipe, level=InnerControl).name("x20574").ctrl(x20575) // UnitPipe(List(b13962),Block(Const(())))
    val x20573_x20573 = ReadMem(x20551).name("x20573").ctrl(x20574) // StreamRead(x20551,b13962)
    val x20576 = Counter(min=Const(0), max=Const(8), step=Const(1), par=1).name("x20576").ctrl(x20605) // CounterNew(Const(0),Const(8),Const(1),Const(1))
    val x20577 = CounterChain(List(x20576)).name("x20577").ctrl(x20605) // CounterChainNew(ArrayBuffer(x20576))
    val x20604 = LoopController(style=StreamPipe, level=OuterControl, cchain=x20577).name("x20604").ctrl(x20605) // UnrolledForeach(List(Const(true)),x20577,Block(Const(())),ArrayBuffer(List(b13994)),ArrayBuffer(List(b13995)))
    val b13994 = CounterIter(x20576, Some(0)).ctrl(x20604).name("b13994")
    val b13995 = DummyOp().ctrl(x20604).name("b13995")
    // x20590 = SimpleStruct(ArrayBuffer((offset,x20589), (size,Const(256)), (isLoad,Const(false))))
    val b20717 = StreamOut(field="offset").name("b20717").ctrl(x20604) // x20578 = StreamOutNew(BurstCmdBus)
    val b20718 = StreamOut(field="size").name("b20718").ctrl(x20604) // x20578 = StreamOutNew(BurstCmdBus)
    val x20579 = StreamOut(field="data").name("x20579").ctrl(x20604) // x20579 = StreamOutNew(BurstFullDataBus())
    val x20580 = StreamIn(field="ack").name("x20580").ctrl(x20604) // x20580 = StreamInNew(BurstAckBus)
    val x20592 = UnitController(style=SeqPipe, level=InnerControl).name("x20592").ctrl(x20604) // UnitPipe(List(b13995),Block(x20591))
    val x20581 = b13994 // FixConvert(b13994,TRUE,_32,_0)
    val x20582 = OpDef(op=FixSla, inputs=List(x20581, Const(6))).name("x20582").ctrl(x20592) // FixLsh(x20581,Const(6))
    val x20583 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x20584 = OpDef(op=FixAdd, inputs=List(x20582, x20583)).name("x20584").ctrl(x20592) // FixAdd(x20582,x20583)
    val x20585 = OpDef(op=FixSla, inputs=List(x20584, Const(2))).name("x20585").ctrl(x20592) // FixLsh(x20584,Const(2))
    val x20586 = x20585 // FixConvert(x20585,TRUE,_64,_0)
    val x20587 = top.argFringe.dramAddress(x19424).name("x20587").ctrl(x20592) // GetDRAMAddress(x19424)
    val x20588 = OpDef(op=FixAdd, inputs=List(x20586, x20587)).name("x20588").ctrl(x20592) // FixAdd(x20586,x20587)
    val x20590_x20589 = x20588 // FixConvert(x20588,TRUE,_64,_0)
    val b20719_b20717 = WriteMem(b20717, x20590_x20589).name("b20719_b20717").ctrl(x20592) // StreamWrite(x20578,x20590,b13995)
    val b20720_b20718 = WriteMem(b20718, Const(256)).name("b20720_b20718").ctrl(x20592) // StreamWrite(x20578,x20590,b13995)
    val x20593 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x20593").ctrl(x20604) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x20594 = CounterChain(List(x20593)).name("x20594").ctrl(x20604) // CounterChainNew(List(x20593))
    val x20600 = LoopController(style=InnerPipe, level=InnerControl, cchain=x20594).name("x20600").ctrl(x20604) // UnrolledForeach(ArrayBuffer(b13995),x20594,Block(Const(())),List(List(b14013)),List(List(b14014)))
    val b14013 = CounterIter(x20593, None).ctrl(x20600).name("b14013")
    val b14014 = DummyOp().ctrl(x20600).name("b14014")
    val x20595 = OpDef(op=BitAnd, inputs=List(b14014, b13995)).name("x20595").ctrl(x20600) // And(b14014,b13995)
    val x20596 = LoadBanks(List(x19428_d0_b0), List(b13994, b14013)).name("x20596").ctrl(x20600) // ParSRAMLoad(x19428,List(List(b13994, b14013)),List(x20595))
    val x20598_x20597 = x20596 // x20597 = VectorApply(x20596,0)
    // x20598 = SimpleStruct(ArrayBuffer((_1,x20597), (_2,Const(true))))
    val x20599_x20579 = WriteMem(x20579, x20598_x20597).name("x20599_x20579").ctrl(x20600) // ParStreamWrite(x20579,List(x20598),List(x20595))
    val x20601 = FringeContainer(x19424,b20717,b20718,x20579,x20580).name("x20601").ctrl(x20604) // FringeDenseStore(x19424,x20578,x20579,x20580)
    val x20603 = UnitController(style=SeqPipe, level=InnerControl).name("x20603").ctrl(x20604) // UnitPipe(List(b13995),Block(Const(())))
    val x20602_x20602 = ReadMem(x20580).name("x20602").ctrl(x20603) // StreamRead(x20580,b13995)
  }
    main2
  }

}
