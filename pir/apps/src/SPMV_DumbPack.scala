import pir._
import pir.node._
import arch._
import prism.enums._

object SPMV_DumbPack extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x5197 = top.argFringe.argIn(init=0).name("x5197").ctrl(top) // ArgInNew(Const(0))
    val x5199 = DRAM().name("x5199").ctrl(top) // x5199 = DRAMNew(ArrayBuffer(Const(3840), Const(60)),Const(0))
    val x5200 = DRAM().name("x5200").ctrl(top) // x5200 = DRAMNew(ArrayBuffer(Const(3840), Const(60)),Const(0))
    val x5201 = DRAM().name("x5201").ctrl(top) // x5201 = DRAMNew(ArrayBuffer(Const(3840)),Const(0))
    val x5202 = DRAM().name("x5202").ctrl(top) // x5202 = DRAMNew(ArrayBuffer(Const(3840)),Const(0))
    val x5203 = ReadMem(x5197).name("x5203").ctrl(top) // RegRead(x5197)
    val x5204 = DRAM().name("x5204").ctrl(top) // x5204 = DRAMNew(ArrayBuffer(x5203),Const(0))
    val x5785 = UnitController(style=SeqPipe, level=OuterControl).name("x5785").ctrl(top) // Hwblock(Block(Const(())),false)
    val x5211 = ReadMem(x5197).name("x5211").ctrl(x5785) // RegRead(x5197)
    val x5212 = Counter(min=Const(0), max=x5211, step=Const(384), par=2).name("x5212").ctrl(x5785) // CounterNew(Const(0),x5211,Const(384),Const(2))
    val x5213 = CounterChain(List(x5212)).name("x5213").ctrl(x5785) // CounterChainNew(List(x5212))
    val x5784 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5213).name("x5784").ctrl(x5785) // UnrolledForeach(List(Const(true)),x5213,Block(Const(())),List(List(b2071, b2072)),List(List(b2073, b2074)))
    val b2071 = CounterIter(x5212, Some(0)).ctrl(x5784).name("b2071")
    val b2073 = DummyOp().ctrl(x5784).name("b2073")
    val b2072 = CounterIter(x5212, Some(1)).ctrl(x5784).name("b2072")
    val b2074 = DummyOp().ctrl(x5784).name("b2074")
    val x5214_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5214_d0_b0").ctrl(x5784) // x5214 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5214_d0_b0) = false
    val x5215_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5215_d0_b0").ctrl(x5784) // x5215 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5215_d0_b0) = false
    val x5216_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5216_d0_b0").ctrl(x5784) // x5216 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5216_d0_b0) = false
    val x5217_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5217_d0_b0").ctrl(x5784) // x5217 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5217_d0_b0) = false
    val x5219 = UnitController(style=SeqPipe, level=InnerControl).name("x5219").ctrl(x5784) // UnitPipe(List(b2073),Block(Const(())))
    val x5218 = OpDef(op=FixAdd, inputs=List(b2071, Const(384))).name("x5218").ctrl(x5219) // FixAdd(b2071,Const(384))
    val x5221 = UnitController(style=SeqPipe, level=InnerControl).name("x5221").ctrl(x5784) // UnitPipe(List(b2074),Block(Const(())))
    val x5220 = OpDef(op=FixAdd, inputs=List(b2072, Const(384))).name("x5220").ctrl(x5221) // FixAdd(b2072,Const(384))
    val x5241 = UnitController(style=StreamPipe, level=OuterControl).name("x5241").ctrl(x5784) // UnitPipe(List(b2073),Block(Const(())))
    val b5825 = StreamOut(field="offset").name("b5825").ctrl(x5241) // x5222 = StreamOutNew(BurstCmdBus)
    val b5826 = StreamOut(field="size").name("b5826").ctrl(x5241) // x5222 = StreamOutNew(BurstCmdBus)
    val x5223 = StreamIn(field="data").name("x5223").ctrl(x5241) // x5223 = StreamInNew(BurstDataBus())
    val x5232 = UnitController(style=SeqPipe, level=InnerControl).name("x5232").ctrl(x5241) // UnitPipe(List(b2073),Block(x5231))
    val x5224 = b2071 // FixConvert(b2071,TRUE,_32,_0)
    val x5225 = OpDef(op=FixSla, inputs=List(x5224, Const(2))).name("x5225").ctrl(x5232) // FixLsh(x5224,Const(2))
    val x5226 = x5225 // FixConvert(x5225,TRUE,_64,_0)
    val x5227 = top.argFringe.dramAddress(x5201).name("x5227").ctrl(x5232) // GetDRAMAddress(x5201)
    val x5228 = OpDef(op=FixAdd, inputs=List(x5226, x5227)).name("x5228").ctrl(x5232) // FixAdd(x5226,x5227)
    val x5230_x5229 = x5228 // FixConvert(x5228,TRUE,_64,_0)
    // x5230 = SimpleStruct(ArrayBuffer((offset,x5229), (size,Const(1536)), (isLoad,Const(true))))
    val b5827_b5825 = WriteMem(b5825, x5230_x5229).name("b5827_b5825").ctrl(x5232) // StreamWrite(x5222,x5230,b2073)
    val b5828_b5826 = WriteMem(b5826, Const(1536)).name("b5828_b5826").ctrl(x5232) // StreamWrite(x5222,x5230,b2073)
    val x5233 = FringeContainer(x5201,b5825,b5826,x5223).name("x5233").ctrl(x5241) // FringeDenseLoad(x5201,x5222,x5223)
    val x5234 = Counter(min=Const(0), max=Const(384), step=Const(1), par=1).name("x5234").ctrl(x5241) // CounterNew(Const(0),Const(384),Const(1),Const(1))
    val x5235 = CounterChain(List(x5234)).name("x5235").ctrl(x5241) // CounterChainNew(List(x5234))
    val x5240 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5235).name("x5240").ctrl(x5241) // UnrolledForeach(List(b2073),x5235,Block(Const(())),List(List(b2098)),List(List(b2099)))
    val b2098 = CounterIter(x5234, None).ctrl(x5240).name("b2098")
    val b2099 = DummyOp().ctrl(x5240).name("b2099")
    val x5236 = OpDef(op=BitAnd, inputs=List(b2099, b2073)).name("x5236").ctrl(x5240) // And(b2099,b2073)
    val x5237_x5237 = ReadMem(x5223).name("x5237").ctrl(x5240) // ParStreamRead(x5223,List(x5236))
    val x5238_x5238 = x5237_x5237 // x5238 = VectorApply(x5237,0)
    val x5239 = StoreBanks(List(x5216_d0_b0), List(b2098), x5238_x5238).name("x5239").ctrl(x5240) // ParSRAMStore(x5216,List(List(b2098)),List(x5238),List(x5236))
    val x5261 = UnitController(style=StreamPipe, level=OuterControl).name("x5261").ctrl(x5784) // UnitPipe(List(b2074),Block(Const(())))
    val b5829 = StreamOut(field="offset").name("b5829").ctrl(x5261) // x5242 = StreamOutNew(BurstCmdBus)
    val b5830 = StreamOut(field="size").name("b5830").ctrl(x5261) // x5242 = StreamOutNew(BurstCmdBus)
    val x5243 = StreamIn(field="data").name("x5243").ctrl(x5261) // x5243 = StreamInNew(BurstDataBus())
    val x5252 = UnitController(style=SeqPipe, level=InnerControl).name("x5252").ctrl(x5261) // UnitPipe(List(b2074),Block(x5251))
    val x5244 = b2072 // FixConvert(b2072,TRUE,_32,_0)
    val x5245 = OpDef(op=FixSla, inputs=List(x5244, Const(2))).name("x5245").ctrl(x5252) // FixLsh(x5244,Const(2))
    val x5246 = x5245 // FixConvert(x5245,TRUE,_64,_0)
    val x5247 = top.argFringe.dramAddress(x5201).name("x5247").ctrl(x5252) // GetDRAMAddress(x5201)
    val x5248 = OpDef(op=FixAdd, inputs=List(x5246, x5247)).name("x5248").ctrl(x5252) // FixAdd(x5246,x5247)
    val x5250_x5249 = x5248 // FixConvert(x5248,TRUE,_64,_0)
    // x5250 = SimpleStruct(ArrayBuffer((offset,x5249), (size,Const(1536)), (isLoad,Const(true))))
    val b5831_b5829 = WriteMem(b5829, x5250_x5249).name("b5831_b5829").ctrl(x5252) // StreamWrite(x5242,x5250,b2074)
    val b5832_b5830 = WriteMem(b5830, Const(1536)).name("b5832_b5830").ctrl(x5252) // StreamWrite(x5242,x5250,b2074)
    val x5253 = FringeContainer(x5201,b5829,b5830,x5243).name("x5253").ctrl(x5261) // FringeDenseLoad(x5201,x5242,x5243)
    val x5254 = Counter(min=Const(0), max=Const(384), step=Const(1), par=1).name("x5254").ctrl(x5261) // CounterNew(Const(0),Const(384),Const(1),Const(1))
    val x5255 = CounterChain(List(x5254)).name("x5255").ctrl(x5261) // CounterChainNew(List(x5254))
    val x5260 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5255).name("x5260").ctrl(x5261) // UnrolledForeach(List(b2074),x5255,Block(Const(())),List(List(b2120)),List(List(b2121)))
    val b2120 = CounterIter(x5254, None).ctrl(x5260).name("b2120")
    val b2121 = DummyOp().ctrl(x5260).name("b2121")
    val x5256 = OpDef(op=BitAnd, inputs=List(b2121, b2074)).name("x5256").ctrl(x5260) // And(b2121,b2074)
    val x5257_x5257 = ReadMem(x5243).name("x5257").ctrl(x5260) // ParStreamRead(x5243,List(x5256))
    val x5258_x5258 = x5257_x5257 // x5258 = VectorApply(x5257,0)
    val x5259 = StoreBanks(List(x5217_d0_b0), List(b2120), x5258_x5258).name("x5259").ctrl(x5260) // ParSRAMStore(x5217,List(List(b2120)),List(x5258),List(x5256))
    val x5262 = Counter(min=Const(0), max=Const(384), step=Const(1), par=1).name("x5262").ctrl(x5784) // CounterNew(Const(0),Const(384),Const(1),Const(1))
    val x5263 = CounterChain(List(x5262)).name("x5263").ctrl(x5784) // CounterChainNew(List(x5262))
    val x5498 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5263).name("x5498").ctrl(x5784) // UnrolledForeach(List(b2073),x5263,Block(Const(())),List(List(b2133)),List(List(b2134)))
    val b2133 = CounterIter(x5262, Some(0)).ctrl(x5498).name("b2133")
    val b2134 = DummyOp().ctrl(x5498).name("b2134")
    val x5264_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5264_d0_b0").ctrl(x5498) // x5264 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5264_d0_b0) = false
    val x5265_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5265_d0_b0").ctrl(x5498) // x5265 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5265_d0_b0) = false
    val x5266_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5266_d0_b0").ctrl(x5498) // x5266 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5266_d0_b0) = false
    val x5267_d0 = Reg(init=0).name("x5267_d0").ctrl(x5498) // x5267 = RegNew(Const(0))
    isAccum(x5267_d0) = false
    val x5267_d1 = Reg(init=0).name("x5267_d1").ctrl(x5498) // x5267 = RegNew(Const(0))
    isAccum(x5267_d1) = false
    val x5267_d2 = Reg(init=0).name("x5267_d2").ctrl(x5498) // x5267 = RegNew(Const(0))
    isAccum(x5267_d2) = false
    val x5267_d3 = Reg(init=0).name("x5267_d3").ctrl(x5498) // x5267 = RegNew(Const(0))
    isAccum(x5267_d3) = false
    val x5267_d4 = Reg(init=0).name("x5267_d4").ctrl(x5498) // x5267 = RegNew(Const(0))
    isAccum(x5267_d4) = false
    val x5267_d5 = Reg(init=0).name("x5267_d5").ctrl(x5498) // x5267 = RegNew(Const(0))
    isAccum(x5267_d5) = false
    val x5268_d0 = Reg(init=0).name("x5268_d0").ctrl(x5498) // x5268 = RegNew(Const(0))
    isAccum(x5268_d0) = false
    val x5268_d1 = Reg(init=0).name("x5268_d1").ctrl(x5498) // x5268 = RegNew(Const(0))
    isAccum(x5268_d1) = false
    val x5268_d2 = Reg(init=0).name("x5268_d2").ctrl(x5498) // x5268 = RegNew(Const(0))
    isAccum(x5268_d2) = false
    val x5274 = UnitController(style=SeqPipe, level=InnerControl).name("x5274").ctrl(x5498) // UnitPipe(List(b2134, b2073),Block(Const(())))
    val x5269 = OpDef(op=BitAnd, inputs=List(b2134, b2073)).name("x5269").ctrl(x5274) // And(b2134,b2073)
    val x5270 = LoadBanks(List(x5216_d0_b0), List(b2133)).name("x5270").ctrl(x5274) // SRAMLoad(x5216,ArrayBuffer(Const(384)),List(b2133),Const(0),x5269)
    val x5271 = OpDef(op=FixAdd, inputs=List(b2071, b2133)).name("x5271").ctrl(x5274) // FixAdd(b2071,b2133)
    val x5272_x5267_d0 = WriteMem(x5267_d0, x5270).name("x5272_x5267_d0").ctrl(x5274) // RegWrite(x5267,x5270,x5269)
    val x5272_x5267_d5 = WriteMem(x5267_d5, x5270).name("x5272_x5267_d5").ctrl(x5274) // RegWrite(x5267,x5270,x5269)
    val x5272_x5267_d1 = WriteMem(x5267_d1, x5270).name("x5272_x5267_d1").ctrl(x5274) // RegWrite(x5267,x5270,x5269)
    val x5272_x5267_d2 = WriteMem(x5267_d2, x5270).name("x5272_x5267_d2").ctrl(x5274) // RegWrite(x5267,x5270,x5269)
    val x5272_x5267_d3 = WriteMem(x5267_d3, x5270).name("x5272_x5267_d3").ctrl(x5274) // RegWrite(x5267,x5270,x5269)
    val x5272_x5267_d4 = WriteMem(x5267_d4, x5270).name("x5272_x5267_d4").ctrl(x5274) // RegWrite(x5267,x5270,x5269)
    val x5273_x5268_d0 = WriteMem(x5268_d0, x5271).name("x5273_x5268_d0").ctrl(x5274) // RegWrite(x5268,x5271,x5269)
    val x5273_x5268_d1 = WriteMem(x5268_d1, x5271).name("x5273_x5268_d1").ctrl(x5274) // RegWrite(x5268,x5271,x5269)
    val x5273_x5268_d2 = WriteMem(x5268_d2, x5271).name("x5273_x5268_d2").ctrl(x5274) // RegWrite(x5268,x5271,x5269)
    val x5277 = UnitController(style=SeqPipe, level=InnerControl).name("x5277").ctrl(x5498) // UnitPipe(List(b2134, b2073),Block(Const(())))
    val x5275 = ReadMem(x5268_d2).name("x5275").ctrl(x5277) // RegRead(x5268)
    val x5276 = OpDef(op=FixAdd, inputs=List(x5275, Const(1))).name("x5276").ctrl(x5277) // FixAdd(x5275,Const(1))
    val x5278 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x5278").ctrl(x5498) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x5279 = CounterChain(List(x5278)).name("x5279").ctrl(x5498) // CounterChainNew(List(x5278))
    val x5353 = LoopController(style=StreamPipe, level=OuterControl, cchain=x5279).name("x5353").ctrl(x5498) // UnrolledForeach(List(b2134, b2073),x5279,Block(Const(())),List(List(b2151)),List(List(b2152)))
    val b2151 = CounterIter(x5278, Some(0)).ctrl(x5353).name("b2151")
    val b2152 = DummyOp().ctrl(x5353).name("b2152")
    val b5833 = StreamOut(field="offset").name("b5833").ctrl(x5353) // x5280 = StreamOutNew(BurstCmdBus)
    val b5834 = StreamOut(field="size").name("b5834").ctrl(x5353) // x5280 = StreamOutNew(BurstCmdBus)
    val b5835 = FIFO(size=16).name("b5835").ctrl(x5353) // x5281 = FIFONew(Const(16))
    isAccum(b5835) = false
    val b5836 = FIFO(size=16).name("b5836").ctrl(x5353) // x5281 = FIFONew(Const(16))
    isAccum(b5836) = false
    val b5837 = FIFO(size=16).name("b5837").ctrl(x5353) // x5281 = FIFONew(Const(16))
    isAccum(b5837) = false
    val x5282 = StreamIn(field="data").name("x5282").ctrl(x5353) // x5282 = StreamInNew(BurstDataBus())
    val x5320 = UnitController(style=SeqPipe, level=InnerControl).name("x5320").ctrl(x5353) // UnitPipe(List(b2152, b2134, b2073),Block(x5319))
    val x5283 = ReadMem(x5268_d1).name("x5283").ctrl(x5320) // RegRead(x5268)
    val x5284 = OpDef(op=FixAdd, inputs=List(x5283, b2151)).name("x5284").ctrl(x5320) // FixAdd(x5283,b2151)
    val x5285 = x5284 // FixConvert(x5284,TRUE,_32,_0)
    val x5286 = OpDef(op=FixMul, inputs=List(x5285, Const(60))).name("x5286").ctrl(x5320) // FixMul(x5285,Const(60))
    val x5287 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5288 = OpDef(op=FixAdd, inputs=List(x5286, x5287)).name("x5288").ctrl(x5320) // FixAdd(x5286,x5287)
    val x5289 = OpDef(op=FixSla, inputs=List(x5288, Const(2))).name("x5289").ctrl(x5320) // FixLsh(x5288,Const(2))
    val x5290 = x5289 // x5290 = DataAsBits(x5289)
    val x5291 = OpDef(op=BitAnd, inputs=List(x5290, Const(31))).name("x5291").ctrl(x5320) // VectorSlice(x5290,5,0) strMask=00000000000000000000000000011111
    val x5292 = x5291 // x5292 = BitsAsData(x5291,FixPt[TRUE,_32,_0])
    val x5293 = ReadMem(x5267_d5).name("x5293").ctrl(x5320) // RegRead(x5267)
    val x5294 = OpDef(op=FixSla, inputs=List(x5293, Const(2))).name("x5294").ctrl(x5320) // FixLsh(x5293,Const(2))
    val x5295 = OpDef(op=FixSub, inputs=List(x5289, x5292)).name("x5295").ctrl(x5320) // FixSub(x5289,x5292)
    val x5296 = OpDef(op=FixAdd, inputs=List(x5289, x5294)).name("x5296").ctrl(x5320) // FixAdd(x5289,x5294)
    val x5297 = x5296 // x5297 = DataAsBits(x5296)
    val x5298 = OpDef(op=BitAnd, inputs=List(x5297, Const(31))).name("x5298").ctrl(x5320) // VectorSlice(x5297,5,0) strMask=00000000000000000000000000011111
    val x5299 = x5298 // x5299 = BitsAsData(x5298,FixPt[TRUE,_32,_0])
    val x5300 = OpDef(op=FixEql, inputs=List(x5299, Const(0))).name("x5300").ctrl(x5320) // FixEql(x5299,Const(0))
    val x5301 = OpDef(op=FixSub, inputs=List(Const(64), x5299)).name("x5301").ctrl(x5320) // FixSub(Const(64),x5299)
    val x5302 = OpDef(op=MuxOp, inputs=List(x5300, Const(0), x5301)).name("x5302").ctrl(x5320) // Mux(x5300,Const(0),x5301)
    val x5318_x5303 = OpDef(op=FixSra, inputs=List(x5292, Const(2))).name("x5303").ctrl(x5320) // FixRsh(x5292,Const(2))
    val x5304 = OpDef(op=FixSra, inputs=List(x5302, Const(2))).name("x5304").ctrl(x5320) // FixRsh(x5302,Const(2))
    val x5318_x5305 = OpDef(op=FixAdd, inputs=List(x5318_x5303, x5293)).name("x5305").ctrl(x5320) // FixAdd(x5303,x5293)
    val x5306 = OpDef(op=FixAdd, inputs=List(x5293, x5318_x5303)).name("x5306").ctrl(x5320) // FixAdd(x5293,x5303)
    val x5318_x5307 = OpDef(op=FixAdd, inputs=List(x5306, x5304)).name("x5307").ctrl(x5320) // FixAdd(x5306,x5304)
    val x5308 = OpDef(op=FixAdd, inputs=List(x5294, x5292)).name("x5308").ctrl(x5320) // FixAdd(x5294,x5292)
    val x5314_x5309 = OpDef(op=FixAdd, inputs=List(x5308, x5302)).name("x5309").ctrl(x5320) // FixAdd(x5308,x5302)
    val x5310 = x5295 // FixConvert(x5295,TRUE,_64,_0)
    val x5311 = top.argFringe.dramAddress(x5199).name("x5311").ctrl(x5320) // GetDRAMAddress(x5199)
    val x5312 = OpDef(op=FixAdd, inputs=List(x5310, x5311)).name("x5312").ctrl(x5320) // FixAdd(x5310,x5311)
    val x5314_x5313 = x5312 // FixConvert(x5312,TRUE,_64,_0)
    // x5314 = SimpleStruct(ArrayBuffer((offset,x5313), (size,x5309), (isLoad,Const(true))))
    val x5315 = OpDef(op=BitAnd, inputs=List(b2152, b2134)).name("x5315").ctrl(x5320) // And(b2152,b2134)
    val x5316 = OpDef(op=BitAnd, inputs=List(x5315, b2073)).name("x5316").ctrl(x5320) // And(x5315,b2073)
    val b5838_b5833 = WriteMem(b5833, x5314_x5313).name("b5838_b5833").ctrl(x5320) // StreamWrite(x5280,x5314,x5316)
    val b5839_b5834 = WriteMem(b5834, x5314_x5309).name("b5839_b5834").ctrl(x5320) // StreamWrite(x5280,x5314,x5316)
    // x5318 = SimpleStruct(ArrayBuffer((size,x5307), (start,x5303), (end,x5305)))
    val b5840_b5835 = WriteMem(b5835, x5318_x5307).name("b5840_b5835").ctrl(x5320) // FIFOEnq(x5281,x5318,x5316)
    val b5841_b5836 = WriteMem(b5836, x5318_x5303).name("b5841_b5836").ctrl(x5320) // FIFOEnq(x5281,x5318,x5316)
    val b5842_b5837 = WriteMem(b5837, x5318_x5305).name("b5842_b5837").ctrl(x5320) // FIFOEnq(x5281,x5318,x5316)
    val x5321 = FringeContainer(x5199,b5833,b5834,x5282).name("x5321").ctrl(x5353) // FringeDenseLoad(x5199,x5280,x5282)
    val x5352 = UnitController(style=SeqPipe, level=OuterControl).name("x5352").ctrl(x5353) // UnitPipe(List(b2152, b2134, b2073),Block(Const(())))
    val x5322 = Reg(init=0).name("x5322").ctrl(x5352) // x5322 = RegNew(Const(0))
    isAccum(x5322) = false
    val x5323 = Reg(init=0).name("x5323").ctrl(x5352) // x5323 = RegNew(Const(0))
    isAccum(x5323) = false
    val x5324 = Reg(init=0).name("x5324").ctrl(x5352) // x5324 = RegNew(Const(0))
    isAccum(x5324) = false
    val x5334 = UnitController(style=SeqPipe, level=InnerControl).name("x5334").ctrl(x5352) // UnitPipe(List(b2152, b2134, b2073),Block(x5333))
    val x5325 = OpDef(op=BitAnd, inputs=List(b2152, b2134)).name("x5325").ctrl(x5334) // And(b2152,b2134)
    val x5326 = OpDef(op=BitAnd, inputs=List(x5325, b2073)).name("x5326").ctrl(x5334) // And(x5325,b2073)
    val x5327_b5843 = ReadMem(b5835).name("b5843").ctrl(x5334) // FIFODeq(x5281,x5326)
    val x5327_b5844 = ReadMem(b5836).name("b5844").ctrl(x5334) // FIFODeq(x5281,x5326)
    val x5327_b5845 = ReadMem(b5837).name("b5845").ctrl(x5334) // FIFODeq(x5281,x5326)
    val x5328 = x5327_b5844 // x5328 = FieldApply(x5327,start)
    val x5329_x5322 = WriteMem(x5322, x5328).name("x5329_x5322").ctrl(x5334) // RegWrite(x5322,x5328,x5326)
    val x5330 = x5327_b5845 // x5330 = FieldApply(x5327,end)
    val x5331_x5323 = WriteMem(x5323, x5330).name("x5331_x5323").ctrl(x5334) // RegWrite(x5323,x5330,x5326)
    val x5332 = x5327_b5843 // x5332 = FieldApply(x5327,size)
    val x5333_x5324 = WriteMem(x5324, x5332).name("x5333_x5324").ctrl(x5334) // RegWrite(x5324,x5332,x5326)
    val x5335 = ReadMem(x5324).name("x5335").ctrl(x5352) // RegRead(x5324)
    val x5336 = Counter(min=Const(0), max=x5335, step=Const(1), par=1).name("x5336").ctrl(x5352) // CounterNew(Const(0),x5335,Const(1),Const(1))
    val x5337 = CounterChain(List(x5336)).name("x5337").ctrl(x5352) // CounterChainNew(List(x5336))
    val x5351 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5337).name("x5351").ctrl(x5352) // UnrolledForeach(List(b2152, b2134, b2073),x5337,Block(Const(())),List(List(b2207)),List(List(b2208)))
    val b2207 = CounterIter(x5336, None).ctrl(x5351).name("b2207")
    val b2208 = DummyOp().ctrl(x5351).name("b2208")
    val x5338 = ReadMem(x5322).name("x5338").ctrl(x5351) // RegRead(x5322)
    val x5339 = OpDef(op=FixLeq, inputs=List(x5338, b2207)).name("x5339").ctrl(x5351) // FixLeq(x5338,b2207)
    val x5340 = ReadMem(x5323).name("x5340").ctrl(x5351) // RegRead(x5323)
    val x5341 = OpDef(op=FixLt, inputs=List(b2207, x5340)).name("x5341").ctrl(x5351) // FixLt(b2207,x5340)
    val x5342 = OpDef(op=BitAnd, inputs=List(x5339, x5341)).name("x5342").ctrl(x5351) // And(x5339,x5341)
    val x5343 = OpDef(op=FixSub, inputs=List(b2207, x5338)).name("x5343").ctrl(x5351) // FixSub(b2207,x5338)
    val x5344 = OpDef(op=BitAnd, inputs=List(b2208, b2152)).name("x5344").ctrl(x5351) // And(b2208,b2152)
    val x5345 = OpDef(op=BitAnd, inputs=List(b2134, b2073)).name("x5345").ctrl(x5351) // And(b2134,b2073)
    val x5346 = OpDef(op=BitAnd, inputs=List(x5344, x5345)).name("x5346").ctrl(x5351) // And(x5344,x5345)
    val x5347_x5347 = ReadMem(x5282).name("x5347").ctrl(x5351) // ParStreamRead(x5282,List(x5346))
    val x5348_x5348 = x5347_x5347 // x5348 = VectorApply(x5347,0)
    val x5349 = OpDef(op=BitAnd, inputs=List(x5342, x5346)).name("x5349").ctrl(x5351) // And(x5342,x5346)
    val x5350 = StoreBanks(List(x5264_d0_b0), List(x5343), x5348_x5348).name("x5350").ctrl(x5351) // ParSRAMStore(x5264,List(List(x5343)),List(x5348),List(x5349))
    val x5354 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x5354").ctrl(x5498) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x5355 = CounterChain(List(x5354)).name("x5355").ctrl(x5498) // CounterChainNew(List(x5354))
    val x5429 = LoopController(style=StreamPipe, level=OuterControl, cchain=x5355).name("x5429").ctrl(x5498) // UnrolledForeach(List(b2134, b2073),x5355,Block(Const(())),List(List(b2227)),List(List(b2228)))
    val b2227 = CounterIter(x5354, Some(0)).ctrl(x5429).name("b2227")
    val b2228 = DummyOp().ctrl(x5429).name("b2228")
    val b5846 = StreamOut(field="offset").name("b5846").ctrl(x5429) // x5356 = StreamOutNew(BurstCmdBus)
    val b5847 = StreamOut(field="size").name("b5847").ctrl(x5429) // x5356 = StreamOutNew(BurstCmdBus)
    val b5848 = FIFO(size=16).name("b5848").ctrl(x5429) // x5357 = FIFONew(Const(16))
    isAccum(b5848) = false
    val b5849 = FIFO(size=16).name("b5849").ctrl(x5429) // x5357 = FIFONew(Const(16))
    isAccum(b5849) = false
    val b5850 = FIFO(size=16).name("b5850").ctrl(x5429) // x5357 = FIFONew(Const(16))
    isAccum(b5850) = false
    val x5358 = StreamIn(field="data").name("x5358").ctrl(x5429) // x5358 = StreamInNew(BurstDataBus())
    val x5396 = UnitController(style=SeqPipe, level=InnerControl).name("x5396").ctrl(x5429) // UnitPipe(List(b2228, b2134, b2073),Block(x5395))
    val x5359 = ReadMem(x5268_d0).name("x5359").ctrl(x5396) // RegRead(x5268)
    val x5360 = OpDef(op=FixAdd, inputs=List(x5359, b2227)).name("x5360").ctrl(x5396) // FixAdd(x5359,b2227)
    val x5361 = x5360 // FixConvert(x5360,TRUE,_32,_0)
    val x5362 = OpDef(op=FixMul, inputs=List(x5361, Const(60))).name("x5362").ctrl(x5396) // FixMul(x5361,Const(60))
    val x5363 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5364 = OpDef(op=FixAdd, inputs=List(x5362, x5363)).name("x5364").ctrl(x5396) // FixAdd(x5362,x5363)
    val x5365 = OpDef(op=FixSla, inputs=List(x5364, Const(2))).name("x5365").ctrl(x5396) // FixLsh(x5364,Const(2))
    val x5366 = x5365 // x5366 = DataAsBits(x5365)
    val x5367 = OpDef(op=BitAnd, inputs=List(x5366, Const(31))).name("x5367").ctrl(x5396) // VectorSlice(x5366,5,0) strMask=00000000000000000000000000011111
    val x5368 = x5367 // x5368 = BitsAsData(x5367,FixPt[TRUE,_32,_0])
    val x5369 = ReadMem(x5267_d4).name("x5369").ctrl(x5396) // RegRead(x5267)
    val x5370 = OpDef(op=FixSla, inputs=List(x5369, Const(2))).name("x5370").ctrl(x5396) // FixLsh(x5369,Const(2))
    val x5371 = OpDef(op=FixSub, inputs=List(x5365, x5368)).name("x5371").ctrl(x5396) // FixSub(x5365,x5368)
    val x5372 = OpDef(op=FixAdd, inputs=List(x5365, x5370)).name("x5372").ctrl(x5396) // FixAdd(x5365,x5370)
    val x5373 = x5372 // x5373 = DataAsBits(x5372)
    val x5374 = OpDef(op=BitAnd, inputs=List(x5373, Const(31))).name("x5374").ctrl(x5396) // VectorSlice(x5373,5,0) strMask=00000000000000000000000000011111
    val x5375 = x5374 // x5375 = BitsAsData(x5374,FixPt[TRUE,_32,_0])
    val x5376 = OpDef(op=FixEql, inputs=List(x5375, Const(0))).name("x5376").ctrl(x5396) // FixEql(x5375,Const(0))
    val x5377 = OpDef(op=FixSub, inputs=List(Const(64), x5375)).name("x5377").ctrl(x5396) // FixSub(Const(64),x5375)
    val x5378 = OpDef(op=MuxOp, inputs=List(x5376, Const(0), x5377)).name("x5378").ctrl(x5396) // Mux(x5376,Const(0),x5377)
    val x5394_x5379 = OpDef(op=FixSra, inputs=List(x5368, Const(2))).name("x5379").ctrl(x5396) // FixRsh(x5368,Const(2))
    val x5380 = OpDef(op=FixSra, inputs=List(x5378, Const(2))).name("x5380").ctrl(x5396) // FixRsh(x5378,Const(2))
    val x5394_x5381 = OpDef(op=FixAdd, inputs=List(x5394_x5379, x5369)).name("x5381").ctrl(x5396) // FixAdd(x5379,x5369)
    val x5382 = OpDef(op=FixAdd, inputs=List(x5369, x5394_x5379)).name("x5382").ctrl(x5396) // FixAdd(x5369,x5379)
    val x5394_x5383 = OpDef(op=FixAdd, inputs=List(x5382, x5380)).name("x5383").ctrl(x5396) // FixAdd(x5382,x5380)
    val x5384 = OpDef(op=FixAdd, inputs=List(x5370, x5368)).name("x5384").ctrl(x5396) // FixAdd(x5370,x5368)
    val x5390_x5385 = OpDef(op=FixAdd, inputs=List(x5384, x5378)).name("x5385").ctrl(x5396) // FixAdd(x5384,x5378)
    val x5386 = x5371 // FixConvert(x5371,TRUE,_64,_0)
    val x5387 = top.argFringe.dramAddress(x5200).name("x5387").ctrl(x5396) // GetDRAMAddress(x5200)
    val x5388 = OpDef(op=FixAdd, inputs=List(x5386, x5387)).name("x5388").ctrl(x5396) // FixAdd(x5386,x5387)
    val x5390_x5389 = x5388 // FixConvert(x5388,TRUE,_64,_0)
    // x5390 = SimpleStruct(ArrayBuffer((offset,x5389), (size,x5385), (isLoad,Const(true))))
    val x5391 = OpDef(op=BitAnd, inputs=List(b2228, b2134)).name("x5391").ctrl(x5396) // And(b2228,b2134)
    val x5392 = OpDef(op=BitAnd, inputs=List(x5391, b2073)).name("x5392").ctrl(x5396) // And(x5391,b2073)
    val b5851_b5846 = WriteMem(b5846, x5390_x5389).name("b5851_b5846").ctrl(x5396) // StreamWrite(x5356,x5390,x5392)
    val b5852_b5847 = WriteMem(b5847, x5390_x5385).name("b5852_b5847").ctrl(x5396) // StreamWrite(x5356,x5390,x5392)
    // x5394 = SimpleStruct(ArrayBuffer((size,x5383), (start,x5379), (end,x5381)))
    val b5853_b5848 = WriteMem(b5848, x5394_x5383).name("b5853_b5848").ctrl(x5396) // FIFOEnq(x5357,x5394,x5392)
    val b5854_b5849 = WriteMem(b5849, x5394_x5379).name("b5854_b5849").ctrl(x5396) // FIFOEnq(x5357,x5394,x5392)
    val b5855_b5850 = WriteMem(b5850, x5394_x5381).name("b5855_b5850").ctrl(x5396) // FIFOEnq(x5357,x5394,x5392)
    val x5397 = FringeContainer(x5200,b5846,b5847,x5358).name("x5397").ctrl(x5429) // FringeDenseLoad(x5200,x5356,x5358)
    val x5428 = UnitController(style=SeqPipe, level=OuterControl).name("x5428").ctrl(x5429) // UnitPipe(List(b2228, b2134, b2073),Block(Const(())))
    val x5398 = Reg(init=0).name("x5398").ctrl(x5428) // x5398 = RegNew(Const(0))
    isAccum(x5398) = false
    val x5399 = Reg(init=0).name("x5399").ctrl(x5428) // x5399 = RegNew(Const(0))
    isAccum(x5399) = false
    val x5400 = Reg(init=0).name("x5400").ctrl(x5428) // x5400 = RegNew(Const(0))
    isAccum(x5400) = false
    val x5410 = UnitController(style=SeqPipe, level=InnerControl).name("x5410").ctrl(x5428) // UnitPipe(List(b2228, b2134, b2073),Block(x5409))
    val x5401 = OpDef(op=BitAnd, inputs=List(b2228, b2134)).name("x5401").ctrl(x5410) // And(b2228,b2134)
    val x5402 = OpDef(op=BitAnd, inputs=List(x5401, b2073)).name("x5402").ctrl(x5410) // And(x5401,b2073)
    val x5403_b5856 = ReadMem(b5848).name("b5856").ctrl(x5410) // FIFODeq(x5357,x5402)
    val x5403_b5857 = ReadMem(b5849).name("b5857").ctrl(x5410) // FIFODeq(x5357,x5402)
    val x5403_b5858 = ReadMem(b5850).name("b5858").ctrl(x5410) // FIFODeq(x5357,x5402)
    val x5404 = x5403_b5857 // x5404 = FieldApply(x5403,start)
    val x5405_x5398 = WriteMem(x5398, x5404).name("x5405_x5398").ctrl(x5410) // RegWrite(x5398,x5404,x5402)
    val x5406 = x5403_b5858 // x5406 = FieldApply(x5403,end)
    val x5407_x5399 = WriteMem(x5399, x5406).name("x5407_x5399").ctrl(x5410) // RegWrite(x5399,x5406,x5402)
    val x5408 = x5403_b5856 // x5408 = FieldApply(x5403,size)
    val x5409_x5400 = WriteMem(x5400, x5408).name("x5409_x5400").ctrl(x5410) // RegWrite(x5400,x5408,x5402)
    val x5411 = ReadMem(x5400).name("x5411").ctrl(x5428) // RegRead(x5400)
    val x5412 = Counter(min=Const(0), max=x5411, step=Const(1), par=1).name("x5412").ctrl(x5428) // CounterNew(Const(0),x5411,Const(1),Const(1))
    val x5413 = CounterChain(List(x5412)).name("x5413").ctrl(x5428) // CounterChainNew(List(x5412))
    val x5427 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5413).name("x5427").ctrl(x5428) // UnrolledForeach(List(b2228, b2134, b2073),x5413,Block(Const(())),List(List(b2283)),List(List(b2284)))
    val b2283 = CounterIter(x5412, None).ctrl(x5427).name("b2283")
    val b2284 = DummyOp().ctrl(x5427).name("b2284")
    val x5414 = ReadMem(x5398).name("x5414").ctrl(x5427) // RegRead(x5398)
    val x5415 = OpDef(op=FixLeq, inputs=List(x5414, b2283)).name("x5415").ctrl(x5427) // FixLeq(x5414,b2283)
    val x5416 = ReadMem(x5399).name("x5416").ctrl(x5427) // RegRead(x5399)
    val x5417 = OpDef(op=FixLt, inputs=List(b2283, x5416)).name("x5417").ctrl(x5427) // FixLt(b2283,x5416)
    val x5418 = OpDef(op=BitAnd, inputs=List(x5415, x5417)).name("x5418").ctrl(x5427) // And(x5415,x5417)
    val x5419 = OpDef(op=FixSub, inputs=List(b2283, x5414)).name("x5419").ctrl(x5427) // FixSub(b2283,x5414)
    val x5420 = OpDef(op=BitAnd, inputs=List(b2284, b2228)).name("x5420").ctrl(x5427) // And(b2284,b2228)
    val x5421 = OpDef(op=BitAnd, inputs=List(b2134, b2073)).name("x5421").ctrl(x5427) // And(b2134,b2073)
    val x5422 = OpDef(op=BitAnd, inputs=List(x5420, x5421)).name("x5422").ctrl(x5427) // And(x5420,x5421)
    val x5423_x5423 = ReadMem(x5358).name("x5423").ctrl(x5427) // ParStreamRead(x5358,List(x5422))
    val x5424_x5424 = x5423_x5423 // x5424 = VectorApply(x5423,0)
    val x5425 = OpDef(op=BitAnd, inputs=List(x5418, x5422)).name("x5425").ctrl(x5427) // And(x5418,x5422)
    val x5426 = StoreBanks(List(x5265_d0_b0), List(x5419), x5424_x5424).name("x5426").ctrl(x5427) // ParSRAMStore(x5265,List(List(x5419)),List(x5424),List(x5425))
    val x5430_d0 = Reg(init=0).name("x5430_d0").ctrl(x5498) // x5430 = RegNew(Const(0))
    isAccum(x5430_d0) = false
    val x5430_d1 = Reg(init=0).name("x5430_d1").ctrl(x5498) // x5430 = RegNew(Const(0))
    isAccum(x5430_d1) = false
    val x5443 = UnitController(style=SeqPipe, level=InnerControl).name("x5443").ctrl(x5498) // UnitPipe(List(b2134, b2073),Block(x5442))
    val x5431 = ReadMem(x5267_d3).name("x5431").ctrl(x5443) // RegRead(x5267)
    val x5432 = OpDef(op=FixLt, inputs=List(x5431, Const(16))).name("x5432").ctrl(x5443) // FixLt(x5431,Const(16))
    val x5433 = x5431 // x5433 = DataAsBits(x5431)
    val x5434 = OpDef(op=BitAnd, inputs=List(x5433, Const(7))).name("x5434").ctrl(x5443) // VectorSlice(x5433,3,0) strMask=00000000000000000000000000000111
    val x5435 = x5434 // x5435 = BitsAsData(x5434,FixPt[TRUE,_32,_0])
    val x5436 = OpDef(op=FixEql, inputs=List(x5435, Const(0))).name("x5436").ctrl(x5443) // FixEql(x5435,Const(0))
    val x5437 = OpDef(op=FixAdd, inputs=List(x5431, Const(16))).name("x5437").ctrl(x5443) // FixAdd(x5431,Const(16))
    val x5438 = OpDef(op=FixSub, inputs=List(x5437, x5435)).name("x5438").ctrl(x5443) // FixSub(x5437,x5435)
    val x5439 = OpDef(op=MuxOp, inputs=List(x5436, x5431, x5438)).name("x5439").ctrl(x5443) // Mux(x5436,x5431,x5438)
    val x5440 = OpDef(op=MuxOp, inputs=List(x5432, Const(16), x5439)).name("x5440").ctrl(x5443) // Mux(x5432,Const(16),x5439)
    val x5441 = OpDef(op=BitAnd, inputs=List(b2134, b2073)).name("x5441").ctrl(x5443) // And(b2134,b2073)
    val x5442_x5430_d0 = WriteMem(x5430_d0, x5440).name("x5442_x5430_d0").ctrl(x5443) // RegWrite(x5430,x5440,x5441)
    val x5442_x5430_d1 = WriteMem(x5430_d1, x5440).name("x5442_x5430_d1").ctrl(x5443) // RegWrite(x5430,x5440,x5441)
    val x5476 = UnitController(style=StreamPipe, level=OuterControl).name("x5476").ctrl(x5498) // UnitPipe(List(b2134, b2073),Block(Const(())))
    val x5444 = StreamOut(field="addr").name("x5444").ctrl(x5476) // x5444 = StreamOutNew(GatherAddrBus)
    val x5445 = StreamIn(field="data").name("x5445").ctrl(x5476) // x5445 = StreamInNew(GatherDataBus())
    val x5446 = ReadMem(x5430_d1).name("x5446").ctrl(x5476) // RegRead(x5430)
    val x5447 = Counter(min=Const(0), max=x5446, step=Const(1), par=1).name("x5447").ctrl(x5476) // CounterNew(Const(0),x5446,Const(1),Const(1))
    val x5448 = CounterChain(List(x5447)).name("x5448").ctrl(x5476) // CounterChainNew(List(x5447))
    val x5462 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5448).name("x5462").ctrl(x5476) // UnrolledForeach(List(b2134, b2073),x5448,Block(Const(())),List(List(b2319)),List(List(b2320)))
    val b2319 = CounterIter(x5447, None).ctrl(x5462).name("b2319")
    val b2320 = DummyOp().ctrl(x5462).name("b2320")
    val x5449 = ReadMem(x5267_d2).name("x5449").ctrl(x5462) // RegRead(x5267)
    val x5450 = OpDef(op=FixLeq, inputs=List(x5449, b2319)).name("x5450").ctrl(x5462) // FixLeq(x5449,b2319)
    val x5451 = top.argFringe.dramAddress(x5202).name("x5451").ctrl(x5462) // GetDRAMAddress(x5202)
    val x5452 = x5451 // FixConvert(x5451,TRUE,_64,_0)
    val x5453 = OpDef(op=BitAnd, inputs=List(b2320, b2134)).name("x5453").ctrl(x5462) // And(b2320,b2134)
    val x5454 = OpDef(op=BitAnd, inputs=List(x5453, b2073)).name("x5454").ctrl(x5462) // And(x5453,b2073)
    val x5455 = LoadBanks(List(x5264_d0_b0), List(b2319)).name("x5455").ctrl(x5462) // ParSRAMLoad(x5264,List(List(b2319)),List(x5454))
    val x5456 = x5455 // x5456 = VectorApply(x5455,0)
    val x5457 = OpDef(op=FixSla, inputs=List(x5456, Const(2))).name("x5457").ctrl(x5462) // FixLsh(x5456,Const(2))
    val x5458 = x5457 // FixConvert(x5457,TRUE,_64,_0)
    val x5459 = OpDef(op=FixAdd, inputs=List(x5458, x5451)).name("x5459").ctrl(x5462) // FixAdd(x5458,x5451)
    val x5460 = OpDef(op=MuxOp, inputs=List(x5450, x5452, x5459)).name("x5460").ctrl(x5462) // Mux(x5450,x5452,x5459)
    val x5461_x5444 = WriteMem(x5444, x5460).name("x5461_x5444").ctrl(x5462) // ParStreamWrite(x5444,List(x5460),List(x5454))
    val x5463 = FringeContainer(x5202,x5444,x5445).name("x5463").ctrl(x5476) // FringeSparseLoad(x5202,x5444,x5445)
    val x5464 = ReadMem(x5430_d0).name("x5464").ctrl(x5476) // RegRead(x5430)
    val x5465 = Counter(min=Const(0), max=x5464, step=Const(1), par=1).name("x5465").ctrl(x5476) // CounterNew(Const(0),x5464,Const(1),Const(1))
    val x5466 = CounterChain(List(x5465)).name("x5466").ctrl(x5476) // CounterChainNew(List(x5465))
    val x5475 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5466).name("x5475").ctrl(x5476) // UnrolledForeach(List(b2134, b2073),x5466,Block(Const(())),List(List(b2339)),List(List(b2340)))
    val b2339 = CounterIter(x5465, None).ctrl(x5475).name("b2339")
    val b2340 = DummyOp().ctrl(x5475).name("b2340")
    val x5467 = OpDef(op=BitAnd, inputs=List(b2340, b2134)).name("x5467").ctrl(x5475) // And(b2340,b2134)
    val x5468 = OpDef(op=BitAnd, inputs=List(x5467, b2073)).name("x5468").ctrl(x5475) // And(x5467,b2073)
    val x5469_x5469 = ReadMem(x5445).name("x5469").ctrl(x5475) // ParStreamRead(x5445,List(x5468))
    val x5470_x5470 = x5469_x5469 // x5470 = VectorApply(x5469,0)
    val x5471 = ReadMem(x5267_d1).name("x5471").ctrl(x5475) // RegRead(x5267)
    val x5472 = OpDef(op=FixLt, inputs=List(b2339, x5471)).name("x5472").ctrl(x5475) // FixLt(b2339,x5471)
    val x5473 = OpDef(op=BitAnd, inputs=List(x5472, x5468)).name("x5473").ctrl(x5475) // And(x5472,x5468)
    val x5474 = StoreBanks(List(x5266_d0_b0), List(b2339), x5470_x5470).name("x5474").ctrl(x5475) // ParSRAMStore(x5266,List(List(b2339)),List(x5470),List(x5473))
    val x5477_d0 = Reg(init=0).name("x5477_d0").ctrl(x5498) // x5477 = RegNew(Const(0))
    isAccum(x5477_d0) = false
    val x5477_d1 = Reg(init=0).name("x5477_d1").ctrl(x5498) // x5477 = RegNew(Const(0))
    isAccum(x5477_d1) = true
    val x5478 = ReadMem(x5267_d0).name("x5478").ctrl(x5498) // RegRead(x5267)
    val x5479 = Counter(min=Const(0), max=x5478, step=Const(1), par=1).name("x5479").ctrl(x5498) // CounterNew(Const(0),x5478,Const(1),Const(1))
    val x5480 = CounterChain(List(x5479)).name("x5480").ctrl(x5498) // CounterChainNew(List(x5479))
    val x5493 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5480).name("x5493").ctrl(x5498) // UnrolledReduce(List(b2134, b2073),x5480,x5477,Block((x5477) => Const(())),List(List(b2355)),List(List(b2356)))
    val b2355 = CounterIter(x5479, None).ctrl(x5493).name("b2355")
    val b2356 = DummyOp().ctrl(x5493).name("b2356")
    val x5481 = OpDef(op=BitAnd, inputs=List(b2356, b2134)).name("x5481").ctrl(x5493) // And(b2356,b2134)
    val x5482 = OpDef(op=BitAnd, inputs=List(x5481, b2073)).name("x5482").ctrl(x5493) // And(x5481,b2073)
    val x5483 = LoadBanks(List(x5265_d0_b0), List(b2355)).name("x5483").ctrl(x5493) // ParSRAMLoad(x5265,List(List(b2355)),List(x5482))
    val x5484 = x5483 // x5484 = VectorApply(x5483,0)
    val x5485 = LoadBanks(List(x5266_d0_b0), List(b2355)).name("x5485").ctrl(x5493) // ParSRAMLoad(x5266,List(List(b2355)),List(x5482))
    val x5486 = x5485 // x5486 = VectorApply(x5485,0)
    val x5487 = OpDef(op=FixMul, inputs=List(x5484, x5486)).name("x5487").ctrl(x5493) // FixMul(x5484,x5486)
    val x5488 = ReadMem(x5477_d1).name("x5488").ctrl(x5493) // RegRead(x5477)
    val x5489 = OpDef(op=FixEql, inputs=List(b2355, Const(0))).name("x5489").ctrl(x5493) // FixEql(b2355,Const(0))
    val x5490 = ReduceAccumOp(op=FixAdd, input=x5487, accum=x5488).name("x5490").ctrl(x5493) // FixAdd(x5487,x5488)
    val x5491 = OpDef(op=BitAnd, inputs=List(b2134, b2073)).name("x5491").ctrl(x5493) // And(b2134,b2073)
    val x5492_x5477_d0 = WriteMem(x5477_d0, x5490).name("x5492_x5477_d0").ctrl(x5493) // RegWrite(x5477,x5490,x5491)
    val x5492_x5477_d1 = WriteMem(x5477_d1, x5490).name("x5492_x5477_d1").ctrl(x5493) // RegWrite(x5477,x5490,x5491)
    val x5497 = UnitController(style=SeqPipe, level=InnerControl).name("x5497").ctrl(x5498) // UnitPipe(List(b2134, b2073),Block(Const(())))
    val x5494 = ReadMem(x5477_d0).name("x5494").ctrl(x5497) // RegRead(x5477)
    val x5495 = OpDef(op=BitAnd, inputs=List(b2134, b2073)).name("x5495").ctrl(x5497) // And(b2134,b2073)
    val x5496 = StoreBanks(List(x5214_d0_b0), List(b2133), x5494).name("x5496").ctrl(x5497) // SRAMStore(x5214,ArrayBuffer(Const(384)),List(b2133),Const(0),x5494,x5495)
    val x5499 = Counter(min=Const(0), max=Const(384), step=Const(1), par=1).name("x5499").ctrl(x5784) // CounterNew(Const(0),Const(384),Const(1),Const(1))
    val x5500 = CounterChain(List(x5499)).name("x5500").ctrl(x5784) // CounterChainNew(List(x5499))
    val x5735 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5500).name("x5735").ctrl(x5784) // UnrolledForeach(List(b2074),x5500,Block(Const(())),List(List(b2375)),List(List(b2376)))
    val b2375 = CounterIter(x5499, Some(0)).ctrl(x5735).name("b2375")
    val b2376 = DummyOp().ctrl(x5735).name("b2376")
    val x5501_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5501_d0_b0").ctrl(x5735) // x5501 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5501_d0_b0) = false
    val x5502_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5502_d0_b0").ctrl(x5735) // x5502 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5502_d0_b0) = false
    val x5503_d0_b0 = SRAM(size=384, banking=NoBanking()).name("x5503_d0_b0").ctrl(x5735) // x5503 = SRAMNew(ArrayBuffer(Const(384)))
    isAccum(x5503_d0_b0) = false
    val x5504_d0 = Reg(init=0).name("x5504_d0").ctrl(x5735) // x5504 = RegNew(Const(0))
    isAccum(x5504_d0) = false
    val x5504_d1 = Reg(init=0).name("x5504_d1").ctrl(x5735) // x5504 = RegNew(Const(0))
    isAccum(x5504_d1) = false
    val x5504_d2 = Reg(init=0).name("x5504_d2").ctrl(x5735) // x5504 = RegNew(Const(0))
    isAccum(x5504_d2) = false
    val x5504_d3 = Reg(init=0).name("x5504_d3").ctrl(x5735) // x5504 = RegNew(Const(0))
    isAccum(x5504_d3) = false
    val x5504_d4 = Reg(init=0).name("x5504_d4").ctrl(x5735) // x5504 = RegNew(Const(0))
    isAccum(x5504_d4) = false
    val x5504_d5 = Reg(init=0).name("x5504_d5").ctrl(x5735) // x5504 = RegNew(Const(0))
    isAccum(x5504_d5) = false
    val x5505_d0 = Reg(init=0).name("x5505_d0").ctrl(x5735) // x5505 = RegNew(Const(0))
    isAccum(x5505_d0) = false
    val x5505_d1 = Reg(init=0).name("x5505_d1").ctrl(x5735) // x5505 = RegNew(Const(0))
    isAccum(x5505_d1) = false
    val x5505_d2 = Reg(init=0).name("x5505_d2").ctrl(x5735) // x5505 = RegNew(Const(0))
    isAccum(x5505_d2) = false
    val x5511 = UnitController(style=SeqPipe, level=InnerControl).name("x5511").ctrl(x5735) // UnitPipe(List(b2376, b2074),Block(Const(())))
    val x5506 = OpDef(op=BitAnd, inputs=List(b2376, b2074)).name("x5506").ctrl(x5511) // And(b2376,b2074)
    val x5507 = LoadBanks(List(x5217_d0_b0), List(b2375)).name("x5507").ctrl(x5511) // SRAMLoad(x5217,ArrayBuffer(Const(384)),List(b2375),Const(0),x5506)
    val x5508 = OpDef(op=FixAdd, inputs=List(b2072, b2375)).name("x5508").ctrl(x5511) // FixAdd(b2072,b2375)
    val x5509_x5504_d0 = WriteMem(x5504_d0, x5507).name("x5509_x5504_d0").ctrl(x5511) // RegWrite(x5504,x5507,x5506)
    val x5509_x5504_d5 = WriteMem(x5504_d5, x5507).name("x5509_x5504_d5").ctrl(x5511) // RegWrite(x5504,x5507,x5506)
    val x5509_x5504_d1 = WriteMem(x5504_d1, x5507).name("x5509_x5504_d1").ctrl(x5511) // RegWrite(x5504,x5507,x5506)
    val x5509_x5504_d2 = WriteMem(x5504_d2, x5507).name("x5509_x5504_d2").ctrl(x5511) // RegWrite(x5504,x5507,x5506)
    val x5509_x5504_d3 = WriteMem(x5504_d3, x5507).name("x5509_x5504_d3").ctrl(x5511) // RegWrite(x5504,x5507,x5506)
    val x5509_x5504_d4 = WriteMem(x5504_d4, x5507).name("x5509_x5504_d4").ctrl(x5511) // RegWrite(x5504,x5507,x5506)
    val x5510_x5505_d0 = WriteMem(x5505_d0, x5508).name("x5510_x5505_d0").ctrl(x5511) // RegWrite(x5505,x5508,x5506)
    val x5510_x5505_d1 = WriteMem(x5505_d1, x5508).name("x5510_x5505_d1").ctrl(x5511) // RegWrite(x5505,x5508,x5506)
    val x5510_x5505_d2 = WriteMem(x5505_d2, x5508).name("x5510_x5505_d2").ctrl(x5511) // RegWrite(x5505,x5508,x5506)
    val x5514 = UnitController(style=SeqPipe, level=InnerControl).name("x5514").ctrl(x5735) // UnitPipe(List(b2376, b2074),Block(Const(())))
    val x5512 = ReadMem(x5505_d2).name("x5512").ctrl(x5514) // RegRead(x5505)
    val x5513 = OpDef(op=FixAdd, inputs=List(x5512, Const(1))).name("x5513").ctrl(x5514) // FixAdd(x5512,Const(1))
    val x5515 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x5515").ctrl(x5735) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x5516 = CounterChain(List(x5515)).name("x5516").ctrl(x5735) // CounterChainNew(List(x5515))
    val x5590 = LoopController(style=StreamPipe, level=OuterControl, cchain=x5516).name("x5590").ctrl(x5735) // UnrolledForeach(List(b2376, b2074),x5516,Block(Const(())),List(List(b2393)),List(List(b2394)))
    val b2393 = CounterIter(x5515, Some(0)).ctrl(x5590).name("b2393")
    val b2394 = DummyOp().ctrl(x5590).name("b2394")
    val b5859 = StreamOut(field="offset").name("b5859").ctrl(x5590) // x5517 = StreamOutNew(BurstCmdBus)
    val b5860 = StreamOut(field="size").name("b5860").ctrl(x5590) // x5517 = StreamOutNew(BurstCmdBus)
    val b5861 = FIFO(size=16).name("b5861").ctrl(x5590) // x5518 = FIFONew(Const(16))
    isAccum(b5861) = false
    val b5862 = FIFO(size=16).name("b5862").ctrl(x5590) // x5518 = FIFONew(Const(16))
    isAccum(b5862) = false
    val b5863 = FIFO(size=16).name("b5863").ctrl(x5590) // x5518 = FIFONew(Const(16))
    isAccum(b5863) = false
    val x5519 = StreamIn(field="data").name("x5519").ctrl(x5590) // x5519 = StreamInNew(BurstDataBus())
    val x5557 = UnitController(style=SeqPipe, level=InnerControl).name("x5557").ctrl(x5590) // UnitPipe(List(b2394, b2376, b2074),Block(x5556))
    val x5520 = ReadMem(x5505_d1).name("x5520").ctrl(x5557) // RegRead(x5505)
    val x5521 = OpDef(op=FixAdd, inputs=List(x5520, b2393)).name("x5521").ctrl(x5557) // FixAdd(x5520,b2393)
    val x5522 = x5521 // FixConvert(x5521,TRUE,_32,_0)
    val x5523 = OpDef(op=FixMul, inputs=List(x5522, Const(60))).name("x5523").ctrl(x5557) // FixMul(x5522,Const(60))
    val x5524 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5525 = OpDef(op=FixAdd, inputs=List(x5523, x5524)).name("x5525").ctrl(x5557) // FixAdd(x5523,x5524)
    val x5526 = OpDef(op=FixSla, inputs=List(x5525, Const(2))).name("x5526").ctrl(x5557) // FixLsh(x5525,Const(2))
    val x5527 = x5526 // x5527 = DataAsBits(x5526)
    val x5528 = OpDef(op=BitAnd, inputs=List(x5527, Const(31))).name("x5528").ctrl(x5557) // VectorSlice(x5527,5,0) strMask=00000000000000000000000000011111
    val x5529 = x5528 // x5529 = BitsAsData(x5528,FixPt[TRUE,_32,_0])
    val x5530 = ReadMem(x5504_d5).name("x5530").ctrl(x5557) // RegRead(x5504)
    val x5531 = OpDef(op=FixSla, inputs=List(x5530, Const(2))).name("x5531").ctrl(x5557) // FixLsh(x5530,Const(2))
    val x5532 = OpDef(op=FixSub, inputs=List(x5526, x5529)).name("x5532").ctrl(x5557) // FixSub(x5526,x5529)
    val x5533 = OpDef(op=FixAdd, inputs=List(x5526, x5531)).name("x5533").ctrl(x5557) // FixAdd(x5526,x5531)
    val x5534 = x5533 // x5534 = DataAsBits(x5533)
    val x5535 = OpDef(op=BitAnd, inputs=List(x5534, Const(31))).name("x5535").ctrl(x5557) // VectorSlice(x5534,5,0) strMask=00000000000000000000000000011111
    val x5536 = x5535 // x5536 = BitsAsData(x5535,FixPt[TRUE,_32,_0])
    val x5537 = OpDef(op=FixEql, inputs=List(x5536, Const(0))).name("x5537").ctrl(x5557) // FixEql(x5536,Const(0))
    val x5538 = OpDef(op=FixSub, inputs=List(Const(64), x5536)).name("x5538").ctrl(x5557) // FixSub(Const(64),x5536)
    val x5539 = OpDef(op=MuxOp, inputs=List(x5537, Const(0), x5538)).name("x5539").ctrl(x5557) // Mux(x5537,Const(0),x5538)
    val x5555_x5540 = OpDef(op=FixSra, inputs=List(x5529, Const(2))).name("x5540").ctrl(x5557) // FixRsh(x5529,Const(2))
    val x5541 = OpDef(op=FixSra, inputs=List(x5539, Const(2))).name("x5541").ctrl(x5557) // FixRsh(x5539,Const(2))
    val x5555_x5542 = OpDef(op=FixAdd, inputs=List(x5555_x5540, x5530)).name("x5542").ctrl(x5557) // FixAdd(x5540,x5530)
    val x5543 = OpDef(op=FixAdd, inputs=List(x5530, x5555_x5540)).name("x5543").ctrl(x5557) // FixAdd(x5530,x5540)
    val x5555_x5544 = OpDef(op=FixAdd, inputs=List(x5543, x5541)).name("x5544").ctrl(x5557) // FixAdd(x5543,x5541)
    val x5545 = OpDef(op=FixAdd, inputs=List(x5531, x5529)).name("x5545").ctrl(x5557) // FixAdd(x5531,x5529)
    val x5551_x5546 = OpDef(op=FixAdd, inputs=List(x5545, x5539)).name("x5546").ctrl(x5557) // FixAdd(x5545,x5539)
    val x5547 = x5532 // FixConvert(x5532,TRUE,_64,_0)
    val x5548 = top.argFringe.dramAddress(x5199).name("x5548").ctrl(x5557) // GetDRAMAddress(x5199)
    val x5549 = OpDef(op=FixAdd, inputs=List(x5547, x5548)).name("x5549").ctrl(x5557) // FixAdd(x5547,x5548)
    val x5551_x5550 = x5549 // FixConvert(x5549,TRUE,_64,_0)
    // x5551 = SimpleStruct(ArrayBuffer((offset,x5550), (size,x5546), (isLoad,Const(true))))
    val x5552 = OpDef(op=BitAnd, inputs=List(b2394, b2376)).name("x5552").ctrl(x5557) // And(b2394,b2376)
    val x5553 = OpDef(op=BitAnd, inputs=List(x5552, b2074)).name("x5553").ctrl(x5557) // And(x5552,b2074)
    val b5864_b5859 = WriteMem(b5859, x5551_x5550).name("b5864_b5859").ctrl(x5557) // StreamWrite(x5517,x5551,x5553)
    val b5865_b5860 = WriteMem(b5860, x5551_x5546).name("b5865_b5860").ctrl(x5557) // StreamWrite(x5517,x5551,x5553)
    // x5555 = SimpleStruct(ArrayBuffer((size,x5544), (start,x5540), (end,x5542)))
    val b5866_b5861 = WriteMem(b5861, x5555_x5544).name("b5866_b5861").ctrl(x5557) // FIFOEnq(x5518,x5555,x5553)
    val b5867_b5862 = WriteMem(b5862, x5555_x5540).name("b5867_b5862").ctrl(x5557) // FIFOEnq(x5518,x5555,x5553)
    val b5868_b5863 = WriteMem(b5863, x5555_x5542).name("b5868_b5863").ctrl(x5557) // FIFOEnq(x5518,x5555,x5553)
    val x5558 = FringeContainer(x5199,b5859,b5860,x5519).name("x5558").ctrl(x5590) // FringeDenseLoad(x5199,x5517,x5519)
    val x5589 = UnitController(style=SeqPipe, level=OuterControl).name("x5589").ctrl(x5590) // UnitPipe(List(b2394, b2376, b2074),Block(Const(())))
    val x5559 = Reg(init=0).name("x5559").ctrl(x5589) // x5559 = RegNew(Const(0))
    isAccum(x5559) = false
    val x5560 = Reg(init=0).name("x5560").ctrl(x5589) // x5560 = RegNew(Const(0))
    isAccum(x5560) = false
    val x5561 = Reg(init=0).name("x5561").ctrl(x5589) // x5561 = RegNew(Const(0))
    isAccum(x5561) = false
    val x5571 = UnitController(style=SeqPipe, level=InnerControl).name("x5571").ctrl(x5589) // UnitPipe(List(b2394, b2376, b2074),Block(x5570))
    val x5562 = OpDef(op=BitAnd, inputs=List(b2394, b2376)).name("x5562").ctrl(x5571) // And(b2394,b2376)
    val x5563 = OpDef(op=BitAnd, inputs=List(x5562, b2074)).name("x5563").ctrl(x5571) // And(x5562,b2074)
    val x5564_b5869 = ReadMem(b5861).name("b5869").ctrl(x5571) // FIFODeq(x5518,x5563)
    val x5564_b5870 = ReadMem(b5862).name("b5870").ctrl(x5571) // FIFODeq(x5518,x5563)
    val x5564_b5871 = ReadMem(b5863).name("b5871").ctrl(x5571) // FIFODeq(x5518,x5563)
    val x5565 = x5564_b5870 // x5565 = FieldApply(x5564,start)
    val x5566_x5559 = WriteMem(x5559, x5565).name("x5566_x5559").ctrl(x5571) // RegWrite(x5559,x5565,x5563)
    val x5567 = x5564_b5871 // x5567 = FieldApply(x5564,end)
    val x5568_x5560 = WriteMem(x5560, x5567).name("x5568_x5560").ctrl(x5571) // RegWrite(x5560,x5567,x5563)
    val x5569 = x5564_b5869 // x5569 = FieldApply(x5564,size)
    val x5570_x5561 = WriteMem(x5561, x5569).name("x5570_x5561").ctrl(x5571) // RegWrite(x5561,x5569,x5563)
    val x5572 = ReadMem(x5561).name("x5572").ctrl(x5589) // RegRead(x5561)
    val x5573 = Counter(min=Const(0), max=x5572, step=Const(1), par=1).name("x5573").ctrl(x5589) // CounterNew(Const(0),x5572,Const(1),Const(1))
    val x5574 = CounterChain(List(x5573)).name("x5574").ctrl(x5589) // CounterChainNew(List(x5573))
    val x5588 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5574).name("x5588").ctrl(x5589) // UnrolledForeach(List(b2394, b2376, b2074),x5574,Block(Const(())),List(List(b2449)),List(List(b2450)))
    val b2449 = CounterIter(x5573, None).ctrl(x5588).name("b2449")
    val b2450 = DummyOp().ctrl(x5588).name("b2450")
    val x5575 = ReadMem(x5559).name("x5575").ctrl(x5588) // RegRead(x5559)
    val x5576 = OpDef(op=FixLeq, inputs=List(x5575, b2449)).name("x5576").ctrl(x5588) // FixLeq(x5575,b2449)
    val x5577 = ReadMem(x5560).name("x5577").ctrl(x5588) // RegRead(x5560)
    val x5578 = OpDef(op=FixLt, inputs=List(b2449, x5577)).name("x5578").ctrl(x5588) // FixLt(b2449,x5577)
    val x5579 = OpDef(op=BitAnd, inputs=List(x5576, x5578)).name("x5579").ctrl(x5588) // And(x5576,x5578)
    val x5580 = OpDef(op=FixSub, inputs=List(b2449, x5575)).name("x5580").ctrl(x5588) // FixSub(b2449,x5575)
    val x5581 = OpDef(op=BitAnd, inputs=List(b2450, b2394)).name("x5581").ctrl(x5588) // And(b2450,b2394)
    val x5582 = OpDef(op=BitAnd, inputs=List(b2376, b2074)).name("x5582").ctrl(x5588) // And(b2376,b2074)
    val x5583 = OpDef(op=BitAnd, inputs=List(x5581, x5582)).name("x5583").ctrl(x5588) // And(x5581,x5582)
    val x5584_x5584 = ReadMem(x5519).name("x5584").ctrl(x5588) // ParStreamRead(x5519,List(x5583))
    val x5585_x5585 = x5584_x5584 // x5585 = VectorApply(x5584,0)
    val x5586 = OpDef(op=BitAnd, inputs=List(x5579, x5583)).name("x5586").ctrl(x5588) // And(x5579,x5583)
    val x5587 = StoreBanks(List(x5501_d0_b0), List(x5580), x5585_x5585).name("x5587").ctrl(x5588) // ParSRAMStore(x5501,List(List(x5580)),List(x5585),List(x5586))
    val x5591 = Counter(min=Const(0), max=Const(1), step=Const(1), par=1).name("x5591").ctrl(x5735) // CounterNew(Const(0),Const(1),Const(1),Const(1))
    val x5592 = CounterChain(List(x5591)).name("x5592").ctrl(x5735) // CounterChainNew(List(x5591))
    val x5666 = LoopController(style=StreamPipe, level=OuterControl, cchain=x5592).name("x5666").ctrl(x5735) // UnrolledForeach(List(b2376, b2074),x5592,Block(Const(())),List(List(b2469)),List(List(b2470)))
    val b2469 = CounterIter(x5591, Some(0)).ctrl(x5666).name("b2469")
    val b2470 = DummyOp().ctrl(x5666).name("b2470")
    val b5872 = StreamOut(field="offset").name("b5872").ctrl(x5666) // x5593 = StreamOutNew(BurstCmdBus)
    val b5873 = StreamOut(field="size").name("b5873").ctrl(x5666) // x5593 = StreamOutNew(BurstCmdBus)
    val b5874 = FIFO(size=16).name("b5874").ctrl(x5666) // x5594 = FIFONew(Const(16))
    isAccum(b5874) = false
    val b5875 = FIFO(size=16).name("b5875").ctrl(x5666) // x5594 = FIFONew(Const(16))
    isAccum(b5875) = false
    val b5876 = FIFO(size=16).name("b5876").ctrl(x5666) // x5594 = FIFONew(Const(16))
    isAccum(b5876) = false
    val x5595 = StreamIn(field="data").name("x5595").ctrl(x5666) // x5595 = StreamInNew(BurstDataBus())
    val x5633 = UnitController(style=SeqPipe, level=InnerControl).name("x5633").ctrl(x5666) // UnitPipe(List(b2470, b2376, b2074),Block(x5632))
    val x5596 = ReadMem(x5505_d0).name("x5596").ctrl(x5633) // RegRead(x5505)
    val x5597 = OpDef(op=FixAdd, inputs=List(x5596, b2469)).name("x5597").ctrl(x5633) // FixAdd(x5596,b2469)
    val x5598 = x5597 // FixConvert(x5597,TRUE,_32,_0)
    val x5599 = OpDef(op=FixMul, inputs=List(x5598, Const(60))).name("x5599").ctrl(x5633) // FixMul(x5598,Const(60))
    val x5600 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5601 = OpDef(op=FixAdd, inputs=List(x5599, x5600)).name("x5601").ctrl(x5633) // FixAdd(x5599,x5600)
    val x5602 = OpDef(op=FixSla, inputs=List(x5601, Const(2))).name("x5602").ctrl(x5633) // FixLsh(x5601,Const(2))
    val x5603 = x5602 // x5603 = DataAsBits(x5602)
    val x5604 = OpDef(op=BitAnd, inputs=List(x5603, Const(31))).name("x5604").ctrl(x5633) // VectorSlice(x5603,5,0) strMask=00000000000000000000000000011111
    val x5605 = x5604 // x5605 = BitsAsData(x5604,FixPt[TRUE,_32,_0])
    val x5606 = ReadMem(x5504_d4).name("x5606").ctrl(x5633) // RegRead(x5504)
    val x5607 = OpDef(op=FixSla, inputs=List(x5606, Const(2))).name("x5607").ctrl(x5633) // FixLsh(x5606,Const(2))
    val x5608 = OpDef(op=FixSub, inputs=List(x5602, x5605)).name("x5608").ctrl(x5633) // FixSub(x5602,x5605)
    val x5609 = OpDef(op=FixAdd, inputs=List(x5602, x5607)).name("x5609").ctrl(x5633) // FixAdd(x5602,x5607)
    val x5610 = x5609 // x5610 = DataAsBits(x5609)
    val x5611 = OpDef(op=BitAnd, inputs=List(x5610, Const(31))).name("x5611").ctrl(x5633) // VectorSlice(x5610,5,0) strMask=00000000000000000000000000011111
    val x5612 = x5611 // x5612 = BitsAsData(x5611,FixPt[TRUE,_32,_0])
    val x5613 = OpDef(op=FixEql, inputs=List(x5612, Const(0))).name("x5613").ctrl(x5633) // FixEql(x5612,Const(0))
    val x5614 = OpDef(op=FixSub, inputs=List(Const(64), x5612)).name("x5614").ctrl(x5633) // FixSub(Const(64),x5612)
    val x5615 = OpDef(op=MuxOp, inputs=List(x5613, Const(0), x5614)).name("x5615").ctrl(x5633) // Mux(x5613,Const(0),x5614)
    val x5631_x5616 = OpDef(op=FixSra, inputs=List(x5605, Const(2))).name("x5616").ctrl(x5633) // FixRsh(x5605,Const(2))
    val x5617 = OpDef(op=FixSra, inputs=List(x5615, Const(2))).name("x5617").ctrl(x5633) // FixRsh(x5615,Const(2))
    val x5631_x5618 = OpDef(op=FixAdd, inputs=List(x5631_x5616, x5606)).name("x5618").ctrl(x5633) // FixAdd(x5616,x5606)
    val x5619 = OpDef(op=FixAdd, inputs=List(x5606, x5631_x5616)).name("x5619").ctrl(x5633) // FixAdd(x5606,x5616)
    val x5631_x5620 = OpDef(op=FixAdd, inputs=List(x5619, x5617)).name("x5620").ctrl(x5633) // FixAdd(x5619,x5617)
    val x5621 = OpDef(op=FixAdd, inputs=List(x5607, x5605)).name("x5621").ctrl(x5633) // FixAdd(x5607,x5605)
    val x5627_x5622 = OpDef(op=FixAdd, inputs=List(x5621, x5615)).name("x5622").ctrl(x5633) // FixAdd(x5621,x5615)
    val x5623 = x5608 // FixConvert(x5608,TRUE,_64,_0)
    val x5624 = top.argFringe.dramAddress(x5200).name("x5624").ctrl(x5633) // GetDRAMAddress(x5200)
    val x5625 = OpDef(op=FixAdd, inputs=List(x5623, x5624)).name("x5625").ctrl(x5633) // FixAdd(x5623,x5624)
    val x5627_x5626 = x5625 // FixConvert(x5625,TRUE,_64,_0)
    // x5627 = SimpleStruct(ArrayBuffer((offset,x5626), (size,x5622), (isLoad,Const(true))))
    val x5628 = OpDef(op=BitAnd, inputs=List(b2470, b2376)).name("x5628").ctrl(x5633) // And(b2470,b2376)
    val x5629 = OpDef(op=BitAnd, inputs=List(x5628, b2074)).name("x5629").ctrl(x5633) // And(x5628,b2074)
    val b5877_b5872 = WriteMem(b5872, x5627_x5626).name("b5877_b5872").ctrl(x5633) // StreamWrite(x5593,x5627,x5629)
    val b5878_b5873 = WriteMem(b5873, x5627_x5622).name("b5878_b5873").ctrl(x5633) // StreamWrite(x5593,x5627,x5629)
    // x5631 = SimpleStruct(ArrayBuffer((size,x5620), (start,x5616), (end,x5618)))
    val b5879_b5874 = WriteMem(b5874, x5631_x5620).name("b5879_b5874").ctrl(x5633) // FIFOEnq(x5594,x5631,x5629)
    val b5880_b5875 = WriteMem(b5875, x5631_x5616).name("b5880_b5875").ctrl(x5633) // FIFOEnq(x5594,x5631,x5629)
    val b5881_b5876 = WriteMem(b5876, x5631_x5618).name("b5881_b5876").ctrl(x5633) // FIFOEnq(x5594,x5631,x5629)
    val x5634 = FringeContainer(x5200,b5872,b5873,x5595).name("x5634").ctrl(x5666) // FringeDenseLoad(x5200,x5593,x5595)
    val x5665 = UnitController(style=SeqPipe, level=OuterControl).name("x5665").ctrl(x5666) // UnitPipe(List(b2470, b2376, b2074),Block(Const(())))
    val x5635 = Reg(init=0).name("x5635").ctrl(x5665) // x5635 = RegNew(Const(0))
    isAccum(x5635) = false
    val x5636 = Reg(init=0).name("x5636").ctrl(x5665) // x5636 = RegNew(Const(0))
    isAccum(x5636) = false
    val x5637 = Reg(init=0).name("x5637").ctrl(x5665) // x5637 = RegNew(Const(0))
    isAccum(x5637) = false
    val x5647 = UnitController(style=SeqPipe, level=InnerControl).name("x5647").ctrl(x5665) // UnitPipe(List(b2470, b2376, b2074),Block(x5646))
    val x5638 = OpDef(op=BitAnd, inputs=List(b2470, b2376)).name("x5638").ctrl(x5647) // And(b2470,b2376)
    val x5639 = OpDef(op=BitAnd, inputs=List(x5638, b2074)).name("x5639").ctrl(x5647) // And(x5638,b2074)
    val x5640_b5882 = ReadMem(b5874).name("b5882").ctrl(x5647) // FIFODeq(x5594,x5639)
    val x5640_b5883 = ReadMem(b5875).name("b5883").ctrl(x5647) // FIFODeq(x5594,x5639)
    val x5640_b5884 = ReadMem(b5876).name("b5884").ctrl(x5647) // FIFODeq(x5594,x5639)
    val x5641 = x5640_b5883 // x5641 = FieldApply(x5640,start)
    val x5642_x5635 = WriteMem(x5635, x5641).name("x5642_x5635").ctrl(x5647) // RegWrite(x5635,x5641,x5639)
    val x5643 = x5640_b5884 // x5643 = FieldApply(x5640,end)
    val x5644_x5636 = WriteMem(x5636, x5643).name("x5644_x5636").ctrl(x5647) // RegWrite(x5636,x5643,x5639)
    val x5645 = x5640_b5882 // x5645 = FieldApply(x5640,size)
    val x5646_x5637 = WriteMem(x5637, x5645).name("x5646_x5637").ctrl(x5647) // RegWrite(x5637,x5645,x5639)
    val x5648 = ReadMem(x5637).name("x5648").ctrl(x5665) // RegRead(x5637)
    val x5649 = Counter(min=Const(0), max=x5648, step=Const(1), par=1).name("x5649").ctrl(x5665) // CounterNew(Const(0),x5648,Const(1),Const(1))
    val x5650 = CounterChain(List(x5649)).name("x5650").ctrl(x5665) // CounterChainNew(List(x5649))
    val x5664 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5650).name("x5664").ctrl(x5665) // UnrolledForeach(List(b2470, b2376, b2074),x5650,Block(Const(())),List(List(b2525)),List(List(b2526)))
    val b2525 = CounterIter(x5649, None).ctrl(x5664).name("b2525")
    val b2526 = DummyOp().ctrl(x5664).name("b2526")
    val x5651 = ReadMem(x5635).name("x5651").ctrl(x5664) // RegRead(x5635)
    val x5652 = OpDef(op=FixLeq, inputs=List(x5651, b2525)).name("x5652").ctrl(x5664) // FixLeq(x5651,b2525)
    val x5653 = ReadMem(x5636).name("x5653").ctrl(x5664) // RegRead(x5636)
    val x5654 = OpDef(op=FixLt, inputs=List(b2525, x5653)).name("x5654").ctrl(x5664) // FixLt(b2525,x5653)
    val x5655 = OpDef(op=BitAnd, inputs=List(x5652, x5654)).name("x5655").ctrl(x5664) // And(x5652,x5654)
    val x5656 = OpDef(op=FixSub, inputs=List(b2525, x5651)).name("x5656").ctrl(x5664) // FixSub(b2525,x5651)
    val x5657 = OpDef(op=BitAnd, inputs=List(b2526, b2470)).name("x5657").ctrl(x5664) // And(b2526,b2470)
    val x5658 = OpDef(op=BitAnd, inputs=List(b2376, b2074)).name("x5658").ctrl(x5664) // And(b2376,b2074)
    val x5659 = OpDef(op=BitAnd, inputs=List(x5657, x5658)).name("x5659").ctrl(x5664) // And(x5657,x5658)
    val x5660_x5660 = ReadMem(x5595).name("x5660").ctrl(x5664) // ParStreamRead(x5595,List(x5659))
    val x5661_x5661 = x5660_x5660 // x5661 = VectorApply(x5660,0)
    val x5662 = OpDef(op=BitAnd, inputs=List(x5655, x5659)).name("x5662").ctrl(x5664) // And(x5655,x5659)
    val x5663 = StoreBanks(List(x5502_d0_b0), List(x5656), x5661_x5661).name("x5663").ctrl(x5664) // ParSRAMStore(x5502,List(List(x5656)),List(x5661),List(x5662))
    val x5667_d0 = Reg(init=0).name("x5667_d0").ctrl(x5735) // x5667 = RegNew(Const(0))
    isAccum(x5667_d0) = false
    val x5667_d1 = Reg(init=0).name("x5667_d1").ctrl(x5735) // x5667 = RegNew(Const(0))
    isAccum(x5667_d1) = false
    val x5680 = UnitController(style=SeqPipe, level=InnerControl).name("x5680").ctrl(x5735) // UnitPipe(List(b2376, b2074),Block(x5679))
    val x5668 = ReadMem(x5504_d3).name("x5668").ctrl(x5680) // RegRead(x5504)
    val x5669 = OpDef(op=FixLt, inputs=List(x5668, Const(16))).name("x5669").ctrl(x5680) // FixLt(x5668,Const(16))
    val x5670 = x5668 // x5670 = DataAsBits(x5668)
    val x5671 = OpDef(op=BitAnd, inputs=List(x5670, Const(7))).name("x5671").ctrl(x5680) // VectorSlice(x5670,3,0) strMask=00000000000000000000000000000111
    val x5672 = x5671 // x5672 = BitsAsData(x5671,FixPt[TRUE,_32,_0])
    val x5673 = OpDef(op=FixEql, inputs=List(x5672, Const(0))).name("x5673").ctrl(x5680) // FixEql(x5672,Const(0))
    val x5674 = OpDef(op=FixAdd, inputs=List(x5668, Const(16))).name("x5674").ctrl(x5680) // FixAdd(x5668,Const(16))
    val x5675 = OpDef(op=FixSub, inputs=List(x5674, x5672)).name("x5675").ctrl(x5680) // FixSub(x5674,x5672)
    val x5676 = OpDef(op=MuxOp, inputs=List(x5673, x5668, x5675)).name("x5676").ctrl(x5680) // Mux(x5673,x5668,x5675)
    val x5677 = OpDef(op=MuxOp, inputs=List(x5669, Const(16), x5676)).name("x5677").ctrl(x5680) // Mux(x5669,Const(16),x5676)
    val x5678 = OpDef(op=BitAnd, inputs=List(b2376, b2074)).name("x5678").ctrl(x5680) // And(b2376,b2074)
    val x5679_x5667_d0 = WriteMem(x5667_d0, x5677).name("x5679_x5667_d0").ctrl(x5680) // RegWrite(x5667,x5677,x5678)
    val x5679_x5667_d1 = WriteMem(x5667_d1, x5677).name("x5679_x5667_d1").ctrl(x5680) // RegWrite(x5667,x5677,x5678)
    val x5713 = UnitController(style=StreamPipe, level=OuterControl).name("x5713").ctrl(x5735) // UnitPipe(List(b2376, b2074),Block(Const(())))
    val x5681 = StreamOut(field="addr").name("x5681").ctrl(x5713) // x5681 = StreamOutNew(GatherAddrBus)
    val x5682 = StreamIn(field="data").name("x5682").ctrl(x5713) // x5682 = StreamInNew(GatherDataBus())
    val x5683 = ReadMem(x5667_d1).name("x5683").ctrl(x5713) // RegRead(x5667)
    val x5684 = Counter(min=Const(0), max=x5683, step=Const(1), par=1).name("x5684").ctrl(x5713) // CounterNew(Const(0),x5683,Const(1),Const(1))
    val x5685 = CounterChain(List(x5684)).name("x5685").ctrl(x5713) // CounterChainNew(List(x5684))
    val x5699 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5685).name("x5699").ctrl(x5713) // UnrolledForeach(List(b2376, b2074),x5685,Block(Const(())),List(List(b2561)),List(List(b2562)))
    val b2561 = CounterIter(x5684, None).ctrl(x5699).name("b2561")
    val b2562 = DummyOp().ctrl(x5699).name("b2562")
    val x5686 = ReadMem(x5504_d2).name("x5686").ctrl(x5699) // RegRead(x5504)
    val x5687 = OpDef(op=FixLeq, inputs=List(x5686, b2561)).name("x5687").ctrl(x5699) // FixLeq(x5686,b2561)
    val x5688 = top.argFringe.dramAddress(x5202).name("x5688").ctrl(x5699) // GetDRAMAddress(x5202)
    val x5689 = x5688 // FixConvert(x5688,TRUE,_64,_0)
    val x5690 = OpDef(op=BitAnd, inputs=List(b2562, b2376)).name("x5690").ctrl(x5699) // And(b2562,b2376)
    val x5691 = OpDef(op=BitAnd, inputs=List(x5690, b2074)).name("x5691").ctrl(x5699) // And(x5690,b2074)
    val x5692 = LoadBanks(List(x5501_d0_b0), List(b2561)).name("x5692").ctrl(x5699) // ParSRAMLoad(x5501,List(List(b2561)),List(x5691))
    val x5693 = x5692 // x5693 = VectorApply(x5692,0)
    val x5694 = OpDef(op=FixSla, inputs=List(x5693, Const(2))).name("x5694").ctrl(x5699) // FixLsh(x5693,Const(2))
    val x5695 = x5694 // FixConvert(x5694,TRUE,_64,_0)
    val x5696 = OpDef(op=FixAdd, inputs=List(x5695, x5688)).name("x5696").ctrl(x5699) // FixAdd(x5695,x5688)
    val x5697 = OpDef(op=MuxOp, inputs=List(x5687, x5689, x5696)).name("x5697").ctrl(x5699) // Mux(x5687,x5689,x5696)
    val x5698_x5681 = WriteMem(x5681, x5697).name("x5698_x5681").ctrl(x5699) // ParStreamWrite(x5681,List(x5697),List(x5691))
    val x5700 = FringeContainer(x5202,x5681,x5682).name("x5700").ctrl(x5713) // FringeSparseLoad(x5202,x5681,x5682)
    val x5701 = ReadMem(x5667_d0).name("x5701").ctrl(x5713) // RegRead(x5667)
    val x5702 = Counter(min=Const(0), max=x5701, step=Const(1), par=1).name("x5702").ctrl(x5713) // CounterNew(Const(0),x5701,Const(1),Const(1))
    val x5703 = CounterChain(List(x5702)).name("x5703").ctrl(x5713) // CounterChainNew(List(x5702))
    val x5712 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5703).name("x5712").ctrl(x5713) // UnrolledForeach(List(b2376, b2074),x5703,Block(Const(())),List(List(b2581)),List(List(b2582)))
    val b2581 = CounterIter(x5702, None).ctrl(x5712).name("b2581")
    val b2582 = DummyOp().ctrl(x5712).name("b2582")
    val x5704 = OpDef(op=BitAnd, inputs=List(b2582, b2376)).name("x5704").ctrl(x5712) // And(b2582,b2376)
    val x5705 = OpDef(op=BitAnd, inputs=List(x5704, b2074)).name("x5705").ctrl(x5712) // And(x5704,b2074)
    val x5706_x5706 = ReadMem(x5682).name("x5706").ctrl(x5712) // ParStreamRead(x5682,List(x5705))
    val x5707_x5707 = x5706_x5706 // x5707 = VectorApply(x5706,0)
    val x5708 = ReadMem(x5504_d1).name("x5708").ctrl(x5712) // RegRead(x5504)
    val x5709 = OpDef(op=FixLt, inputs=List(b2581, x5708)).name("x5709").ctrl(x5712) // FixLt(b2581,x5708)
    val x5710 = OpDef(op=BitAnd, inputs=List(x5709, x5705)).name("x5710").ctrl(x5712) // And(x5709,x5705)
    val x5711 = StoreBanks(List(x5503_d0_b0), List(b2581), x5707_x5707).name("x5711").ctrl(x5712) // ParSRAMStore(x5503,List(List(b2581)),List(x5707),List(x5710))
    val x5714_d0 = Reg(init=0).name("x5714_d0").ctrl(x5735) // x5714 = RegNew(Const(0))
    isAccum(x5714_d0) = false
    val x5714_d1 = Reg(init=0).name("x5714_d1").ctrl(x5735) // x5714 = RegNew(Const(0))
    isAccum(x5714_d1) = true
    val x5715 = ReadMem(x5504_d0).name("x5715").ctrl(x5735) // RegRead(x5504)
    val x5716 = Counter(min=Const(0), max=x5715, step=Const(1), par=1).name("x5716").ctrl(x5735) // CounterNew(Const(0),x5715,Const(1),Const(1))
    val x5717 = CounterChain(List(x5716)).name("x5717").ctrl(x5735) // CounterChainNew(List(x5716))
    val x5730 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5717).name("x5730").ctrl(x5735) // UnrolledReduce(List(b2376, b2074),x5717,x5714,Block((x5714) => Const(())),List(List(b2597)),List(List(b2598)))
    val b2597 = CounterIter(x5716, None).ctrl(x5730).name("b2597")
    val b2598 = DummyOp().ctrl(x5730).name("b2598")
    val x5718 = OpDef(op=BitAnd, inputs=List(b2598, b2376)).name("x5718").ctrl(x5730) // And(b2598,b2376)
    val x5719 = OpDef(op=BitAnd, inputs=List(x5718, b2074)).name("x5719").ctrl(x5730) // And(x5718,b2074)
    val x5720 = LoadBanks(List(x5502_d0_b0), List(b2597)).name("x5720").ctrl(x5730) // ParSRAMLoad(x5502,List(List(b2597)),List(x5719))
    val x5721 = x5720 // x5721 = VectorApply(x5720,0)
    val x5722 = LoadBanks(List(x5503_d0_b0), List(b2597)).name("x5722").ctrl(x5730) // ParSRAMLoad(x5503,List(List(b2597)),List(x5719))
    val x5723 = x5722 // x5723 = VectorApply(x5722,0)
    val x5724 = OpDef(op=FixMul, inputs=List(x5721, x5723)).name("x5724").ctrl(x5730) // FixMul(x5721,x5723)
    val x5725 = ReadMem(x5714_d1).name("x5725").ctrl(x5730) // RegRead(x5714)
    val x5726 = OpDef(op=FixEql, inputs=List(b2597, Const(0))).name("x5726").ctrl(x5730) // FixEql(b2597,Const(0))
    val x5727 = ReduceAccumOp(op=FixAdd, input=x5724, accum=x5725).name("x5727").ctrl(x5730) // FixAdd(x5724,x5725)
    val x5728 = OpDef(op=BitAnd, inputs=List(b2376, b2074)).name("x5728").ctrl(x5730) // And(b2376,b2074)
    val x5729_x5714_d0 = WriteMem(x5714_d0, x5727).name("x5729_x5714_d0").ctrl(x5730) // RegWrite(x5714,x5727,x5728)
    val x5729_x5714_d1 = WriteMem(x5714_d1, x5727).name("x5729_x5714_d1").ctrl(x5730) // RegWrite(x5714,x5727,x5728)
    val x5734 = UnitController(style=SeqPipe, level=InnerControl).name("x5734").ctrl(x5735) // UnitPipe(List(b2376, b2074),Block(Const(())))
    val x5731 = ReadMem(x5714_d0).name("x5731").ctrl(x5734) // RegRead(x5714)
    val x5732 = OpDef(op=BitAnd, inputs=List(b2376, b2074)).name("x5732").ctrl(x5734) // And(b2376,b2074)
    val x5733 = StoreBanks(List(x5215_d0_b0), List(b2375), x5731).name("x5733").ctrl(x5734) // SRAMStore(x5215,ArrayBuffer(Const(384)),List(b2375),Const(0),x5731,x5732)
    val x5759 = UnitController(style=StreamPipe, level=OuterControl).name("x5759").ctrl(x5784) // UnitPipe(List(b2073),Block(Const(())))
    val b5885 = StreamOut(field="offset").name("b5885").ctrl(x5759) // x5736 = StreamOutNew(BurstCmdBus)
    val b5886 = StreamOut(field="size").name("b5886").ctrl(x5759) // x5736 = StreamOutNew(BurstCmdBus)
    val x5737 = StreamOut(field="data").name("x5737").ctrl(x5759) // x5737 = StreamOutNew(BurstFullDataBus())
    val x5738 = StreamIn(field="ack").name("x5738").ctrl(x5759) // x5738 = StreamInNew(BurstAckBus)
    val x5747 = UnitController(style=SeqPipe, level=InnerControl).name("x5747").ctrl(x5759) // UnitPipe(List(b2073),Block(x5746))
    val x5739 = b2071 // FixConvert(b2071,TRUE,_32,_0)
    val x5740 = OpDef(op=FixSla, inputs=List(x5739, Const(2))).name("x5740").ctrl(x5747) // FixLsh(x5739,Const(2))
    val x5741 = x5740 // FixConvert(x5740,TRUE,_64,_0)
    val x5742 = top.argFringe.dramAddress(x5204).name("x5742").ctrl(x5747) // GetDRAMAddress(x5204)
    val x5743 = OpDef(op=FixAdd, inputs=List(x5741, x5742)).name("x5743").ctrl(x5747) // FixAdd(x5741,x5742)
    val x5745_x5744 = x5743 // FixConvert(x5743,TRUE,_64,_0)
    // x5745 = SimpleStruct(ArrayBuffer((offset,x5744), (size,Const(1536)), (isLoad,Const(false))))
    val b5887_b5885 = WriteMem(b5885, x5745_x5744).name("b5887_b5885").ctrl(x5747) // StreamWrite(x5736,x5745,b2073)
    val b5888_b5886 = WriteMem(b5886, Const(1536)).name("b5888_b5886").ctrl(x5747) // StreamWrite(x5736,x5745,b2073)
    val x5748 = Counter(min=Const(0), max=Const(384), step=Const(1), par=1).name("x5748").ctrl(x5759) // CounterNew(Const(0),Const(384),Const(1),Const(1))
    val x5749 = CounterChain(List(x5748)).name("x5749").ctrl(x5759) // CounterChainNew(List(x5748))
    val x5755 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5749).name("x5755").ctrl(x5759) // UnrolledForeach(List(b2073),x5749,Block(Const(())),List(List(b2632)),List(List(b2633)))
    val b2632 = CounterIter(x5748, None).ctrl(x5755).name("b2632")
    val b2633 = DummyOp().ctrl(x5755).name("b2633")
    val x5750 = OpDef(op=BitAnd, inputs=List(b2633, b2073)).name("x5750").ctrl(x5755) // And(b2633,b2073)
    val x5751 = LoadBanks(List(x5214_d0_b0), List(b2632)).name("x5751").ctrl(x5755) // ParSRAMLoad(x5214,List(List(b2632)),List(x5750))
    val x5753_x5752 = x5751 // x5752 = VectorApply(x5751,0)
    // x5753 = SimpleStruct(ArrayBuffer((_1,x5752), (_2,Const(true))))
    val x5754_x5737 = WriteMem(x5737, x5753_x5752).name("x5754_x5737").ctrl(x5755) // ParStreamWrite(x5737,List(x5753),List(x5750))
    val x5756 = FringeContainer(x5204,b5885,b5886,x5737,x5738).name("x5756").ctrl(x5759) // FringeDenseStore(x5204,x5736,x5737,x5738)
    val x5758 = UnitController(style=SeqPipe, level=InnerControl).name("x5758").ctrl(x5759) // UnitPipe(List(b2073),Block(Const(())))
    val x5757_x5757 = ReadMem(x5738).name("x5757").ctrl(x5758) // StreamRead(x5738,b2073)
    val x5783 = UnitController(style=StreamPipe, level=OuterControl).name("x5783").ctrl(x5784) // UnitPipe(List(b2074),Block(Const(())))
    val b5889 = StreamOut(field="offset").name("b5889").ctrl(x5783) // x5760 = StreamOutNew(BurstCmdBus)
    val b5890 = StreamOut(field="size").name("b5890").ctrl(x5783) // x5760 = StreamOutNew(BurstCmdBus)
    val x5761 = StreamOut(field="data").name("x5761").ctrl(x5783) // x5761 = StreamOutNew(BurstFullDataBus())
    val x5762 = StreamIn(field="ack").name("x5762").ctrl(x5783) // x5762 = StreamInNew(BurstAckBus)
    val x5771 = UnitController(style=SeqPipe, level=InnerControl).name("x5771").ctrl(x5783) // UnitPipe(List(b2074),Block(x5770))
    val x5763 = b2072 // FixConvert(b2072,TRUE,_32,_0)
    val x5764 = OpDef(op=FixSla, inputs=List(x5763, Const(2))).name("x5764").ctrl(x5771) // FixLsh(x5763,Const(2))
    val x5765 = x5764 // FixConvert(x5764,TRUE,_64,_0)
    val x5766 = top.argFringe.dramAddress(x5204).name("x5766").ctrl(x5771) // GetDRAMAddress(x5204)
    val x5767 = OpDef(op=FixAdd, inputs=List(x5765, x5766)).name("x5767").ctrl(x5771) // FixAdd(x5765,x5766)
    val x5769_x5768 = x5767 // FixConvert(x5767,TRUE,_64,_0)
    // x5769 = SimpleStruct(ArrayBuffer((offset,x5768), (size,Const(1536)), (isLoad,Const(false))))
    val b5891_b5889 = WriteMem(b5889, x5769_x5768).name("b5891_b5889").ctrl(x5771) // StreamWrite(x5760,x5769,b2074)
    val b5892_b5890 = WriteMem(b5890, Const(1536)).name("b5892_b5890").ctrl(x5771) // StreamWrite(x5760,x5769,b2074)
    val x5772 = Counter(min=Const(0), max=Const(384), step=Const(1), par=1).name("x5772").ctrl(x5783) // CounterNew(Const(0),Const(384),Const(1),Const(1))
    val x5773 = CounterChain(List(x5772)).name("x5773").ctrl(x5783) // CounterChainNew(List(x5772))
    val x5779 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5773).name("x5779").ctrl(x5783) // UnrolledForeach(List(b2074),x5773,Block(Const(())),List(List(b2658)),List(List(b2659)))
    val b2658 = CounterIter(x5772, None).ctrl(x5779).name("b2658")
    val b2659 = DummyOp().ctrl(x5779).name("b2659")
    val x5774 = OpDef(op=BitAnd, inputs=List(b2659, b2074)).name("x5774").ctrl(x5779) // And(b2659,b2074)
    val x5775 = LoadBanks(List(x5215_d0_b0), List(b2658)).name("x5775").ctrl(x5779) // ParSRAMLoad(x5215,List(List(b2658)),List(x5774))
    val x5777_x5776 = x5775 // x5776 = VectorApply(x5775,0)
    // x5777 = SimpleStruct(ArrayBuffer((_1,x5776), (_2,Const(true))))
    val x5778_x5761 = WriteMem(x5761, x5777_x5776).name("x5778_x5761").ctrl(x5779) // ParStreamWrite(x5761,List(x5777),List(x5774))
    val x5780 = FringeContainer(x5204,b5889,b5890,x5761,x5762).name("x5780").ctrl(x5783) // FringeDenseStore(x5204,x5760,x5761,x5762)
    val x5782 = UnitController(style=SeqPipe, level=InnerControl).name("x5782").ctrl(x5783) // UnitPipe(List(b2074),Block(Const(())))
    val x5781_x5781 = ReadMem(x5762).name("x5781").ctrl(x5782) // StreamRead(x5762,b2074)
    
  }
}
