import pir._
import pir.node._
import arch._
import prism.enums._

object DotProduct extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x3713 = top.argFringe.argIn(init=0).name("x3713").ctrl(top) // ArgInNew(Const(0))
    boundOf(x3713) = Some(1920000)
    val x3716 = ReadMem(x3713).name("x3716").ctrl(top) // RegRead(x3713)
    val x3717 = DRAM().name("x3717").ctrl(top) // x3717 = DRAMNew(ArrayBuffer(x3716),Const(0))
    val x3718 = ReadMem(x3713).name("x3718").ctrl(top) // RegRead(x3713)
    val x3719 = DRAM().name("x3719").ctrl(top) // x3719 = DRAMNew(ArrayBuffer(x3718),Const(0))
    val x3720 = top.argFringe.argOut(init=0).name("x3720").ctrl(top) // ArgOutNew(Const(0))
    val x4229 = UnitController(style=SeqPipe, level=OuterControl).name("x4229").ctrl(top) // Hwblock(Block(Const(())),false)
    val x3723_d0 = Reg(init=Some(0)).name("x3723_d0").ctrl(x4229) // x3723 = RegNew(Const(0))
    isAccum(x3723_d0) = false
    val x3723_d1 = Reg(init=Some(0)).name("x3723_d1").ctrl(x4229) // x3723 = RegNew(Const(0))
    isAccum(x3723_d1) = true
    val x3724 = ReadMem(x3713).name("x3724").ctrl(x4229) // RegRead(x3713)
    val x3725 = Counter(min=Const(0), max=x3724, step=Const(16), par=8).name("x3725").ctrl(x4229) // CounterNew(Const(0),x3724,Const(16),Const(8))
    val x3726 = CounterChain(List(x3725)).name("x3726").ctrl(x4229) // CounterChainNew(List(x3725))
    val x4225 = LoopController(style=MetaPipe, level=OuterControl, cchain=x3726).name("x4225").ctrl(x4229) // UnrolledReduce(List(Const(true)),x3726,x3723,Block((x3723) => Const(())),List(List(b928, b929, b930, b931, b932, b933, b934, b935)),List(List(b936, b937, b938, b939, b940, b941, b942, b943)))
    val b928 = CounterIter(x3725, Some(0)).ctrl(x4225).name("b928")
    val b936 = DummyOp().ctrl(x4225).name("b936")
    val b929 = CounterIter(x3725, Some(1)).ctrl(x4225).name("b929")
    val b937 = DummyOp().ctrl(x4225).name("b937")
    val b930 = CounterIter(x3725, Some(2)).ctrl(x4225).name("b930")
    val b938 = DummyOp().ctrl(x4225).name("b938")
    val b931 = CounterIter(x3725, Some(3)).ctrl(x4225).name("b931")
    val b939 = DummyOp().ctrl(x4225).name("b939")
    val b932 = CounterIter(x3725, Some(4)).ctrl(x4225).name("b932")
    val b940 = DummyOp().ctrl(x4225).name("b940")
    val b933 = CounterIter(x3725, Some(5)).ctrl(x4225).name("b933")
    val b941 = DummyOp().ctrl(x4225).name("b941")
    val b934 = CounterIter(x3725, Some(6)).ctrl(x4225).name("b934")
    val b942 = DummyOp().ctrl(x4225).name("b942")
    val b935 = CounterIter(x3725, Some(7)).ctrl(x4225).name("b935")
    val b943 = DummyOp().ctrl(x4225).name("b943")
    val x3727_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3727_d0_b0").ctrl(x4225) // x3727 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3727_d0_b0) = false
    val x3728_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3728_d0_b0").ctrl(x4225) // x3728 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3728_d0_b0) = false
    val x3729_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3729_d0_b0").ctrl(x4225) // x3729 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3729_d0_b0) = false
    val x3730_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3730_d0_b0").ctrl(x4225) // x3730 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3730_d0_b0) = false
    val x3731_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3731_d0_b0").ctrl(x4225) // x3731 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3731_d0_b0) = false
    val x3732_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3732_d0_b0").ctrl(x4225) // x3732 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3732_d0_b0) = false
    val x3733_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3733_d0_b0").ctrl(x4225) // x3733 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3733_d0_b0) = false
    val x3734_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3734_d0_b0").ctrl(x4225) // x3734 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3734_d0_b0) = false
    val x3735_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3735_d0_b0").ctrl(x4225) // x3735 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3735_d0_b0) = false
    val x3736_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3736_d0_b0").ctrl(x4225) // x3736 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3736_d0_b0) = false
    val x3737_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3737_d0_b0").ctrl(x4225) // x3737 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3737_d0_b0) = false
    val x3738_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3738_d0_b0").ctrl(x4225) // x3738 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3738_d0_b0) = false
    val x3739_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3739_d0_b0").ctrl(x4225) // x3739 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3739_d0_b0) = false
    val x3740_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3740_d0_b0").ctrl(x4225) // x3740 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3740_d0_b0) = false
    val x3741_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3741_d0_b0").ctrl(x4225) // x3741 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3741_d0_b0) = false
    val x3742_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x3742_d0_b0").ctrl(x4225) // x3742 = SRAMNew(ArrayBuffer(Const(16)))
    isAccum(x3742_d0_b0) = false
    val x3744 = UnitController(style=SeqPipe, level=InnerControl).name("x3744").ctrl(x4225) // UnitPipe(List(b936),Block(Const(())))
    val x3743 = OpDef(op=FixAdd, inputs=List(b928, Const(16))).name("x3743").ctrl(x3744) // FixAdd(b928,Const(16))
    val x3764 = UnitController(style=StreamPipe, level=OuterControl).name("x3764").ctrl(x4225) // UnitPipe(List(b936),Block(Const(())))
    val b4248 = StreamOut(field="offset").name("b4248").ctrl(x3764) // x3745 = StreamOutNew(BurstCmdBus)
    val b4249 = StreamOut(field="size").name("b4249").ctrl(x3764) // x3745 = StreamOutNew(BurstCmdBus)
    val x3746 = StreamIn(field="data").name("x3746").ctrl(x3764) // x3746 = StreamInNew(BurstDataBus())
    val x3755 = UnitController(style=SeqPipe, level=InnerControl).name("x3755").ctrl(x3764) // UnitPipe(List(b936),Block(x3754))
    val x3747 = b928 // FixConvert(b928,TRUE,_32,_0)
    val x3748 = OpDef(op=FixSla, inputs=List(x3747, Const(2))).name("x3748").ctrl(x3755) // FixLsh(x3747,Const(2))
    val x3749 = x3748 // FixConvert(x3748,TRUE,_64,_0)
    val x3750 = top.argFringe.dramAddress(x3717).name("x3750").ctrl(x3755) // GetDRAMAddress(x3717)
    val x3751 = OpDef(op=FixAdd, inputs=List(x3749, x3750)).name("x3751").ctrl(x3755) // FixAdd(x3749,x3750)
    val x3753_x3752 = x3751 // FixConvert(x3751,TRUE,_64,_0)
    // x3753 = SimpleStruct(ArrayBuffer((offset,x3752), (size,Const(64)), (isLoad,Const(true))))
    val b4250_b4248 = WriteMem(b4248, x3753_x3752).name("b4250_b4248").ctrl(x3755) // StreamWrite(x3745,x3753,b936)
    val b4251_b4249 = WriteMem(b4249, Const(64)).name("b4251_b4249").ctrl(x3755) // StreamWrite(x3745,x3753,b936)
    val x3756 = FringeContainer(x3717,b4248,b4249,x3746).name("x3756").ctrl(x3764) // FringeDenseLoad(x3717,x3745,x3746)
    val x3757 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3757").ctrl(x3764) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3758 = CounterChain(List(x3757)).name("x3758").ctrl(x3764) // CounterChainNew(List(x3757))
    val x3763 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3758).name("x3763").ctrl(x3764) // UnrolledForeach(List(b936),x3758,Block(Const(())),List(List(b976)),List(List(b977)))
    val b976 = CounterIter(x3757, None).ctrl(x3763).name("b976")
    val b977 = DummyOp().ctrl(x3763).name("b977")
    val x3759 = OpDef(op=BitAnd, inputs=List(b977, b936)).name("x3759").ctrl(x3763) // And(b977,b936)
    val x3760_x3760 = ReadMem(x3746).name("x3760").ctrl(x3763) // ParStreamRead(x3746,List(x3759))
    val x3761_x3761 = x3760_x3760 // x3761 = VectorApply(x3760,0)
    val x3762 = StoreBanks(List(x3727_d0_b0), List(b976), x3761_x3761).name("x3762").ctrl(x3763) // ParSRAMStore(x3727,List(List(b976)),List(x3761),List(x3759))
    val x3784 = UnitController(style=StreamPipe, level=OuterControl).name("x3784").ctrl(x4225) // UnitPipe(List(b936),Block(Const(())))
    val b4252 = StreamOut(field="offset").name("b4252").ctrl(x3784) // x3765 = StreamOutNew(BurstCmdBus)
    val b4253 = StreamOut(field="size").name("b4253").ctrl(x3784) // x3765 = StreamOutNew(BurstCmdBus)
    val x3766 = StreamIn(field="data").name("x3766").ctrl(x3784) // x3766 = StreamInNew(BurstDataBus())
    val x3775 = UnitController(style=SeqPipe, level=InnerControl).name("x3775").ctrl(x3784) // UnitPipe(List(b936),Block(x3774))
    val x3767 = b928 // FixConvert(b928,TRUE,_32,_0)
    val x3768 = OpDef(op=FixSla, inputs=List(x3767, Const(2))).name("x3768").ctrl(x3775) // FixLsh(x3767,Const(2))
    val x3769 = x3768 // FixConvert(x3768,TRUE,_64,_0)
    val x3770 = top.argFringe.dramAddress(x3719).name("x3770").ctrl(x3775) // GetDRAMAddress(x3719)
    val x3771 = OpDef(op=FixAdd, inputs=List(x3769, x3770)).name("x3771").ctrl(x3775) // FixAdd(x3769,x3770)
    val x3773_x3772 = x3771 // FixConvert(x3771,TRUE,_64,_0)
    // x3773 = SimpleStruct(ArrayBuffer((offset,x3772), (size,Const(64)), (isLoad,Const(true))))
    val b4254_b4252 = WriteMem(b4252, x3773_x3772).name("b4254_b4252").ctrl(x3775) // StreamWrite(x3765,x3773,b936)
    val b4255_b4253 = WriteMem(b4253, Const(64)).name("b4255_b4253").ctrl(x3775) // StreamWrite(x3765,x3773,b936)
    val x3776 = FringeContainer(x3719,b4252,b4253,x3766).name("x3776").ctrl(x3784) // FringeDenseLoad(x3719,x3765,x3766)
    val x3777 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3777").ctrl(x3784) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3778 = CounterChain(List(x3777)).name("x3778").ctrl(x3784) // CounterChainNew(List(x3777))
    val x3783 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3778).name("x3783").ctrl(x3784) // UnrolledForeach(List(b936),x3778,Block(Const(())),List(List(b998)),List(List(b999)))
    val b998 = CounterIter(x3777, None).ctrl(x3783).name("b998")
    val b999 = DummyOp().ctrl(x3783).name("b999")
    val x3779 = OpDef(op=BitAnd, inputs=List(b999, b936)).name("x3779").ctrl(x3783) // And(b999,b936)
    val x3780_x3780 = ReadMem(x3766).name("x3780").ctrl(x3783) // ParStreamRead(x3766,List(x3779))
    val x3781_x3781 = x3780_x3780 // x3781 = VectorApply(x3780,0)
    val x3782 = StoreBanks(List(x3735_d0_b0), List(b998), x3781_x3781).name("x3782").ctrl(x3783) // ParSRAMStore(x3735,List(List(b998)),List(x3781),List(x3779))
    val x3786 = UnitController(style=SeqPipe, level=InnerControl).name("x3786").ctrl(x4225) // UnitPipe(List(b937),Block(Const(())))
    val x3785 = OpDef(op=FixAdd, inputs=List(b929, Const(16))).name("x3785").ctrl(x3786) // FixAdd(b929,Const(16))
    val x3806 = UnitController(style=StreamPipe, level=OuterControl).name("x3806").ctrl(x4225) // UnitPipe(List(b937),Block(Const(())))
    val b4256 = StreamOut(field="offset").name("b4256").ctrl(x3806) // x3787 = StreamOutNew(BurstCmdBus)
    val b4257 = StreamOut(field="size").name("b4257").ctrl(x3806) // x3787 = StreamOutNew(BurstCmdBus)
    val x3788 = StreamIn(field="data").name("x3788").ctrl(x3806) // x3788 = StreamInNew(BurstDataBus())
    val x3797 = UnitController(style=SeqPipe, level=InnerControl).name("x3797").ctrl(x3806) // UnitPipe(List(b937),Block(x3796))
    val x3789 = b929 // FixConvert(b929,TRUE,_32,_0)
    val x3790 = OpDef(op=FixSla, inputs=List(x3789, Const(2))).name("x3790").ctrl(x3797) // FixLsh(x3789,Const(2))
    val x3791 = x3790 // FixConvert(x3790,TRUE,_64,_0)
    val x3792 = top.argFringe.dramAddress(x3717).name("x3792").ctrl(x3797) // GetDRAMAddress(x3717)
    val x3793 = OpDef(op=FixAdd, inputs=List(x3791, x3792)).name("x3793").ctrl(x3797) // FixAdd(x3791,x3792)
    val x3795_x3794 = x3793 // FixConvert(x3793,TRUE,_64,_0)
    // x3795 = SimpleStruct(ArrayBuffer((offset,x3794), (size,Const(64)), (isLoad,Const(true))))
    val b4258_b4256 = WriteMem(b4256, x3795_x3794).name("b4258_b4256").ctrl(x3797) // StreamWrite(x3787,x3795,b937)
    val b4259_b4257 = WriteMem(b4257, Const(64)).name("b4259_b4257").ctrl(x3797) // StreamWrite(x3787,x3795,b937)
    val x3798 = FringeContainer(x3717,b4256,b4257,x3788).name("x3798").ctrl(x3806) // FringeDenseLoad(x3717,x3787,x3788)
    val x3799 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3799").ctrl(x3806) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3800 = CounterChain(List(x3799)).name("x3800").ctrl(x3806) // CounterChainNew(List(x3799))
    val x3805 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3800).name("x3805").ctrl(x3806) // UnrolledForeach(List(b937),x3800,Block(Const(())),List(List(b1023)),List(List(b1024)))
    val b1023 = CounterIter(x3799, None).ctrl(x3805).name("b1023")
    val b1024 = DummyOp().ctrl(x3805).name("b1024")
    val x3801 = OpDef(op=BitAnd, inputs=List(b1024, b937)).name("x3801").ctrl(x3805) // And(b1024,b937)
    val x3802_x3802 = ReadMem(x3788).name("x3802").ctrl(x3805) // ParStreamRead(x3788,List(x3801))
    val x3803_x3803 = x3802_x3802 // x3803 = VectorApply(x3802,0)
    val x3804 = StoreBanks(List(x3728_d0_b0), List(b1023), x3803_x3803).name("x3804").ctrl(x3805) // ParSRAMStore(x3728,List(List(b1023)),List(x3803),List(x3801))
    val x3826 = UnitController(style=StreamPipe, level=OuterControl).name("x3826").ctrl(x4225) // UnitPipe(List(b937),Block(Const(())))
    val b4260 = StreamOut(field="offset").name("b4260").ctrl(x3826) // x3807 = StreamOutNew(BurstCmdBus)
    val b4261 = StreamOut(field="size").name("b4261").ctrl(x3826) // x3807 = StreamOutNew(BurstCmdBus)
    val x3808 = StreamIn(field="data").name("x3808").ctrl(x3826) // x3808 = StreamInNew(BurstDataBus())
    val x3817 = UnitController(style=SeqPipe, level=InnerControl).name("x3817").ctrl(x3826) // UnitPipe(List(b937),Block(x3816))
    val x3809 = b929 // FixConvert(b929,TRUE,_32,_0)
    val x3810 = OpDef(op=FixSla, inputs=List(x3809, Const(2))).name("x3810").ctrl(x3817) // FixLsh(x3809,Const(2))
    val x3811 = x3810 // FixConvert(x3810,TRUE,_64,_0)
    val x3812 = top.argFringe.dramAddress(x3719).name("x3812").ctrl(x3817) // GetDRAMAddress(x3719)
    val x3813 = OpDef(op=FixAdd, inputs=List(x3811, x3812)).name("x3813").ctrl(x3817) // FixAdd(x3811,x3812)
    val x3815_x3814 = x3813 // FixConvert(x3813,TRUE,_64,_0)
    // x3815 = SimpleStruct(ArrayBuffer((offset,x3814), (size,Const(64)), (isLoad,Const(true))))
    val b4262_b4260 = WriteMem(b4260, x3815_x3814).name("b4262_b4260").ctrl(x3817) // StreamWrite(x3807,x3815,b937)
    val b4263_b4261 = WriteMem(b4261, Const(64)).name("b4263_b4261").ctrl(x3817) // StreamWrite(x3807,x3815,b937)
    val x3818 = FringeContainer(x3719,b4260,b4261,x3808).name("x3818").ctrl(x3826) // FringeDenseLoad(x3719,x3807,x3808)
    val x3819 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3819").ctrl(x3826) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3820 = CounterChain(List(x3819)).name("x3820").ctrl(x3826) // CounterChainNew(List(x3819))
    val x3825 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3820).name("x3825").ctrl(x3826) // UnrolledForeach(List(b937),x3820,Block(Const(())),List(List(b1045)),List(List(b1046)))
    val b1045 = CounterIter(x3819, None).ctrl(x3825).name("b1045")
    val b1046 = DummyOp().ctrl(x3825).name("b1046")
    val x3821 = OpDef(op=BitAnd, inputs=List(b1046, b937)).name("x3821").ctrl(x3825) // And(b1046,b937)
    val x3822_x3822 = ReadMem(x3808).name("x3822").ctrl(x3825) // ParStreamRead(x3808,List(x3821))
    val x3823_x3823 = x3822_x3822 // x3823 = VectorApply(x3822,0)
    val x3824 = StoreBanks(List(x3736_d0_b0), List(b1045), x3823_x3823).name("x3824").ctrl(x3825) // ParSRAMStore(x3736,List(List(b1045)),List(x3823),List(x3821))
    val x3828 = UnitController(style=SeqPipe, level=InnerControl).name("x3828").ctrl(x4225) // UnitPipe(List(b938),Block(Const(())))
    val x3827 = OpDef(op=FixAdd, inputs=List(b930, Const(16))).name("x3827").ctrl(x3828) // FixAdd(b930,Const(16))
    val x3848 = UnitController(style=StreamPipe, level=OuterControl).name("x3848").ctrl(x4225) // UnitPipe(List(b938),Block(Const(())))
    val b4264 = StreamOut(field="offset").name("b4264").ctrl(x3848) // x3829 = StreamOutNew(BurstCmdBus)
    val b4265 = StreamOut(field="size").name("b4265").ctrl(x3848) // x3829 = StreamOutNew(BurstCmdBus)
    val x3830 = StreamIn(field="data").name("x3830").ctrl(x3848) // x3830 = StreamInNew(BurstDataBus())
    val x3839 = UnitController(style=SeqPipe, level=InnerControl).name("x3839").ctrl(x3848) // UnitPipe(List(b938),Block(x3838))
    val x3831 = b930 // FixConvert(b930,TRUE,_32,_0)
    val x3832 = OpDef(op=FixSla, inputs=List(x3831, Const(2))).name("x3832").ctrl(x3839) // FixLsh(x3831,Const(2))
    val x3833 = x3832 // FixConvert(x3832,TRUE,_64,_0)
    val x3834 = top.argFringe.dramAddress(x3717).name("x3834").ctrl(x3839) // GetDRAMAddress(x3717)
    val x3835 = OpDef(op=FixAdd, inputs=List(x3833, x3834)).name("x3835").ctrl(x3839) // FixAdd(x3833,x3834)
    val x3837_x3836 = x3835 // FixConvert(x3835,TRUE,_64,_0)
    // x3837 = SimpleStruct(ArrayBuffer((offset,x3836), (size,Const(64)), (isLoad,Const(true))))
    val b4266_b4264 = WriteMem(b4264, x3837_x3836).name("b4266_b4264").ctrl(x3839) // StreamWrite(x3829,x3837,b938)
    val b4267_b4265 = WriteMem(b4265, Const(64)).name("b4267_b4265").ctrl(x3839) // StreamWrite(x3829,x3837,b938)
    val x3840 = FringeContainer(x3717,b4264,b4265,x3830).name("x3840").ctrl(x3848) // FringeDenseLoad(x3717,x3829,x3830)
    val x3841 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3841").ctrl(x3848) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3842 = CounterChain(List(x3841)).name("x3842").ctrl(x3848) // CounterChainNew(List(x3841))
    val x3847 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3842).name("x3847").ctrl(x3848) // UnrolledForeach(List(b938),x3842,Block(Const(())),List(List(b1070)),List(List(b1071)))
    val b1070 = CounterIter(x3841, None).ctrl(x3847).name("b1070")
    val b1071 = DummyOp().ctrl(x3847).name("b1071")
    val x3843 = OpDef(op=BitAnd, inputs=List(b1071, b938)).name("x3843").ctrl(x3847) // And(b1071,b938)
    val x3844_x3844 = ReadMem(x3830).name("x3844").ctrl(x3847) // ParStreamRead(x3830,List(x3843))
    val x3845_x3845 = x3844_x3844 // x3845 = VectorApply(x3844,0)
    val x3846 = StoreBanks(List(x3729_d0_b0), List(b1070), x3845_x3845).name("x3846").ctrl(x3847) // ParSRAMStore(x3729,List(List(b1070)),List(x3845),List(x3843))
    val x3868 = UnitController(style=StreamPipe, level=OuterControl).name("x3868").ctrl(x4225) // UnitPipe(List(b938),Block(Const(())))
    val b4268 = StreamOut(field="offset").name("b4268").ctrl(x3868) // x3849 = StreamOutNew(BurstCmdBus)
    val b4269 = StreamOut(field="size").name("b4269").ctrl(x3868) // x3849 = StreamOutNew(BurstCmdBus)
    val x3850 = StreamIn(field="data").name("x3850").ctrl(x3868) // x3850 = StreamInNew(BurstDataBus())
    val x3859 = UnitController(style=SeqPipe, level=InnerControl).name("x3859").ctrl(x3868) // UnitPipe(List(b938),Block(x3858))
    val x3851 = b930 // FixConvert(b930,TRUE,_32,_0)
    val x3852 = OpDef(op=FixSla, inputs=List(x3851, Const(2))).name("x3852").ctrl(x3859) // FixLsh(x3851,Const(2))
    val x3853 = x3852 // FixConvert(x3852,TRUE,_64,_0)
    val x3854 = top.argFringe.dramAddress(x3719).name("x3854").ctrl(x3859) // GetDRAMAddress(x3719)
    val x3855 = OpDef(op=FixAdd, inputs=List(x3853, x3854)).name("x3855").ctrl(x3859) // FixAdd(x3853,x3854)
    val x3857_x3856 = x3855 // FixConvert(x3855,TRUE,_64,_0)
    // x3857 = SimpleStruct(ArrayBuffer((offset,x3856), (size,Const(64)), (isLoad,Const(true))))
    val b4270_b4268 = WriteMem(b4268, x3857_x3856).name("b4270_b4268").ctrl(x3859) // StreamWrite(x3849,x3857,b938)
    val b4271_b4269 = WriteMem(b4269, Const(64)).name("b4271_b4269").ctrl(x3859) // StreamWrite(x3849,x3857,b938)
    val x3860 = FringeContainer(x3719,b4268,b4269,x3850).name("x3860").ctrl(x3868) // FringeDenseLoad(x3719,x3849,x3850)
    val x3861 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3861").ctrl(x3868) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3862 = CounterChain(List(x3861)).name("x3862").ctrl(x3868) // CounterChainNew(List(x3861))
    val x3867 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3862).name("x3867").ctrl(x3868) // UnrolledForeach(List(b938),x3862,Block(Const(())),List(List(b1092)),List(List(b1093)))
    val b1092 = CounterIter(x3861, None).ctrl(x3867).name("b1092")
    val b1093 = DummyOp().ctrl(x3867).name("b1093")
    val x3863 = OpDef(op=BitAnd, inputs=List(b1093, b938)).name("x3863").ctrl(x3867) // And(b1093,b938)
    val x3864_x3864 = ReadMem(x3850).name("x3864").ctrl(x3867) // ParStreamRead(x3850,List(x3863))
    val x3865_x3865 = x3864_x3864 // x3865 = VectorApply(x3864,0)
    val x3866 = StoreBanks(List(x3737_d0_b0), List(b1092), x3865_x3865).name("x3866").ctrl(x3867) // ParSRAMStore(x3737,List(List(b1092)),List(x3865),List(x3863))
    val x3870 = UnitController(style=SeqPipe, level=InnerControl).name("x3870").ctrl(x4225) // UnitPipe(List(b939),Block(Const(())))
    val x3869 = OpDef(op=FixAdd, inputs=List(b931, Const(16))).name("x3869").ctrl(x3870) // FixAdd(b931,Const(16))
    val x3890 = UnitController(style=StreamPipe, level=OuterControl).name("x3890").ctrl(x4225) // UnitPipe(List(b939),Block(Const(())))
    val b4272 = StreamOut(field="offset").name("b4272").ctrl(x3890) // x3871 = StreamOutNew(BurstCmdBus)
    val b4273 = StreamOut(field="size").name("b4273").ctrl(x3890) // x3871 = StreamOutNew(BurstCmdBus)
    val x3872 = StreamIn(field="data").name("x3872").ctrl(x3890) // x3872 = StreamInNew(BurstDataBus())
    val x3881 = UnitController(style=SeqPipe, level=InnerControl).name("x3881").ctrl(x3890) // UnitPipe(List(b939),Block(x3880))
    val x3873 = b931 // FixConvert(b931,TRUE,_32,_0)
    val x3874 = OpDef(op=FixSla, inputs=List(x3873, Const(2))).name("x3874").ctrl(x3881) // FixLsh(x3873,Const(2))
    val x3875 = x3874 // FixConvert(x3874,TRUE,_64,_0)
    val x3876 = top.argFringe.dramAddress(x3717).name("x3876").ctrl(x3881) // GetDRAMAddress(x3717)
    val x3877 = OpDef(op=FixAdd, inputs=List(x3875, x3876)).name("x3877").ctrl(x3881) // FixAdd(x3875,x3876)
    val x3879_x3878 = x3877 // FixConvert(x3877,TRUE,_64,_0)
    // x3879 = SimpleStruct(ArrayBuffer((offset,x3878), (size,Const(64)), (isLoad,Const(true))))
    val b4274_b4272 = WriteMem(b4272, x3879_x3878).name("b4274_b4272").ctrl(x3881) // StreamWrite(x3871,x3879,b939)
    val b4275_b4273 = WriteMem(b4273, Const(64)).name("b4275_b4273").ctrl(x3881) // StreamWrite(x3871,x3879,b939)
    val x3882 = FringeContainer(x3717,b4272,b4273,x3872).name("x3882").ctrl(x3890) // FringeDenseLoad(x3717,x3871,x3872)
    val x3883 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3883").ctrl(x3890) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3884 = CounterChain(List(x3883)).name("x3884").ctrl(x3890) // CounterChainNew(List(x3883))
    val x3889 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3884).name("x3889").ctrl(x3890) // UnrolledForeach(List(b939),x3884,Block(Const(())),List(List(b1117)),List(List(b1118)))
    val b1117 = CounterIter(x3883, None).ctrl(x3889).name("b1117")
    val b1118 = DummyOp().ctrl(x3889).name("b1118")
    val x3885 = OpDef(op=BitAnd, inputs=List(b1118, b939)).name("x3885").ctrl(x3889) // And(b1118,b939)
    val x3886_x3886 = ReadMem(x3872).name("x3886").ctrl(x3889) // ParStreamRead(x3872,List(x3885))
    val x3887_x3887 = x3886_x3886 // x3887 = VectorApply(x3886,0)
    val x3888 = StoreBanks(List(x3730_d0_b0), List(b1117), x3887_x3887).name("x3888").ctrl(x3889) // ParSRAMStore(x3730,List(List(b1117)),List(x3887),List(x3885))
    val x3910 = UnitController(style=StreamPipe, level=OuterControl).name("x3910").ctrl(x4225) // UnitPipe(List(b939),Block(Const(())))
    val b4276 = StreamOut(field="offset").name("b4276").ctrl(x3910) // x3891 = StreamOutNew(BurstCmdBus)
    val b4277 = StreamOut(field="size").name("b4277").ctrl(x3910) // x3891 = StreamOutNew(BurstCmdBus)
    val x3892 = StreamIn(field="data").name("x3892").ctrl(x3910) // x3892 = StreamInNew(BurstDataBus())
    val x3901 = UnitController(style=SeqPipe, level=InnerControl).name("x3901").ctrl(x3910) // UnitPipe(List(b939),Block(x3900))
    val x3893 = b931 // FixConvert(b931,TRUE,_32,_0)
    val x3894 = OpDef(op=FixSla, inputs=List(x3893, Const(2))).name("x3894").ctrl(x3901) // FixLsh(x3893,Const(2))
    val x3895 = x3894 // FixConvert(x3894,TRUE,_64,_0)
    val x3896 = top.argFringe.dramAddress(x3719).name("x3896").ctrl(x3901) // GetDRAMAddress(x3719)
    val x3897 = OpDef(op=FixAdd, inputs=List(x3895, x3896)).name("x3897").ctrl(x3901) // FixAdd(x3895,x3896)
    val x3899_x3898 = x3897 // FixConvert(x3897,TRUE,_64,_0)
    // x3899 = SimpleStruct(ArrayBuffer((offset,x3898), (size,Const(64)), (isLoad,Const(true))))
    val b4278_b4276 = WriteMem(b4276, x3899_x3898).name("b4278_b4276").ctrl(x3901) // StreamWrite(x3891,x3899,b939)
    val b4279_b4277 = WriteMem(b4277, Const(64)).name("b4279_b4277").ctrl(x3901) // StreamWrite(x3891,x3899,b939)
    val x3902 = FringeContainer(x3719,b4276,b4277,x3892).name("x3902").ctrl(x3910) // FringeDenseLoad(x3719,x3891,x3892)
    val x3903 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3903").ctrl(x3910) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3904 = CounterChain(List(x3903)).name("x3904").ctrl(x3910) // CounterChainNew(List(x3903))
    val x3909 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3904).name("x3909").ctrl(x3910) // UnrolledForeach(List(b939),x3904,Block(Const(())),List(List(b1139)),List(List(b1140)))
    val b1139 = CounterIter(x3903, None).ctrl(x3909).name("b1139")
    val b1140 = DummyOp().ctrl(x3909).name("b1140")
    val x3905 = OpDef(op=BitAnd, inputs=List(b1140, b939)).name("x3905").ctrl(x3909) // And(b1140,b939)
    val x3906_x3906 = ReadMem(x3892).name("x3906").ctrl(x3909) // ParStreamRead(x3892,List(x3905))
    val x3907_x3907 = x3906_x3906 // x3907 = VectorApply(x3906,0)
    val x3908 = StoreBanks(List(x3738_d0_b0), List(b1139), x3907_x3907).name("x3908").ctrl(x3909) // ParSRAMStore(x3738,List(List(b1139)),List(x3907),List(x3905))
    val x3912 = UnitController(style=SeqPipe, level=InnerControl).name("x3912").ctrl(x4225) // UnitPipe(List(b940),Block(Const(())))
    val x3911 = OpDef(op=FixAdd, inputs=List(b932, Const(16))).name("x3911").ctrl(x3912) // FixAdd(b932,Const(16))
    val x3932 = UnitController(style=StreamPipe, level=OuterControl).name("x3932").ctrl(x4225) // UnitPipe(List(b940),Block(Const(())))
    val b4280 = StreamOut(field="offset").name("b4280").ctrl(x3932) // x3913 = StreamOutNew(BurstCmdBus)
    val b4281 = StreamOut(field="size").name("b4281").ctrl(x3932) // x3913 = StreamOutNew(BurstCmdBus)
    val x3914 = StreamIn(field="data").name("x3914").ctrl(x3932) // x3914 = StreamInNew(BurstDataBus())
    val x3923 = UnitController(style=SeqPipe, level=InnerControl).name("x3923").ctrl(x3932) // UnitPipe(List(b940),Block(x3922))
    val x3915 = b932 // FixConvert(b932,TRUE,_32,_0)
    val x3916 = OpDef(op=FixSla, inputs=List(x3915, Const(2))).name("x3916").ctrl(x3923) // FixLsh(x3915,Const(2))
    val x3917 = x3916 // FixConvert(x3916,TRUE,_64,_0)
    val x3918 = top.argFringe.dramAddress(x3717).name("x3918").ctrl(x3923) // GetDRAMAddress(x3717)
    val x3919 = OpDef(op=FixAdd, inputs=List(x3917, x3918)).name("x3919").ctrl(x3923) // FixAdd(x3917,x3918)
    val x3921_x3920 = x3919 // FixConvert(x3919,TRUE,_64,_0)
    // x3921 = SimpleStruct(ArrayBuffer((offset,x3920), (size,Const(64)), (isLoad,Const(true))))
    val b4282_b4280 = WriteMem(b4280, x3921_x3920).name("b4282_b4280").ctrl(x3923) // StreamWrite(x3913,x3921,b940)
    val b4283_b4281 = WriteMem(b4281, Const(64)).name("b4283_b4281").ctrl(x3923) // StreamWrite(x3913,x3921,b940)
    val x3924 = FringeContainer(x3717,b4280,b4281,x3914).name("x3924").ctrl(x3932) // FringeDenseLoad(x3717,x3913,x3914)
    val x3925 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3925").ctrl(x3932) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3926 = CounterChain(List(x3925)).name("x3926").ctrl(x3932) // CounterChainNew(List(x3925))
    val x3931 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3926).name("x3931").ctrl(x3932) // UnrolledForeach(List(b940),x3926,Block(Const(())),List(List(b1164)),List(List(b1165)))
    val b1164 = CounterIter(x3925, None).ctrl(x3931).name("b1164")
    val b1165 = DummyOp().ctrl(x3931).name("b1165")
    val x3927 = OpDef(op=BitAnd, inputs=List(b1165, b940)).name("x3927").ctrl(x3931) // And(b1165,b940)
    val x3928_x3928 = ReadMem(x3914).name("x3928").ctrl(x3931) // ParStreamRead(x3914,List(x3927))
    val x3929_x3929 = x3928_x3928 // x3929 = VectorApply(x3928,0)
    val x3930 = StoreBanks(List(x3731_d0_b0), List(b1164), x3929_x3929).name("x3930").ctrl(x3931) // ParSRAMStore(x3731,List(List(b1164)),List(x3929),List(x3927))
    val x3952 = UnitController(style=StreamPipe, level=OuterControl).name("x3952").ctrl(x4225) // UnitPipe(List(b940),Block(Const(())))
    val b4284 = StreamOut(field="offset").name("b4284").ctrl(x3952) // x3933 = StreamOutNew(BurstCmdBus)
    val b4285 = StreamOut(field="size").name("b4285").ctrl(x3952) // x3933 = StreamOutNew(BurstCmdBus)
    val x3934 = StreamIn(field="data").name("x3934").ctrl(x3952) // x3934 = StreamInNew(BurstDataBus())
    val x3943 = UnitController(style=SeqPipe, level=InnerControl).name("x3943").ctrl(x3952) // UnitPipe(List(b940),Block(x3942))
    val x3935 = b932 // FixConvert(b932,TRUE,_32,_0)
    val x3936 = OpDef(op=FixSla, inputs=List(x3935, Const(2))).name("x3936").ctrl(x3943) // FixLsh(x3935,Const(2))
    val x3937 = x3936 // FixConvert(x3936,TRUE,_64,_0)
    val x3938 = top.argFringe.dramAddress(x3719).name("x3938").ctrl(x3943) // GetDRAMAddress(x3719)
    val x3939 = OpDef(op=FixAdd, inputs=List(x3937, x3938)).name("x3939").ctrl(x3943) // FixAdd(x3937,x3938)
    val x3941_x3940 = x3939 // FixConvert(x3939,TRUE,_64,_0)
    // x3941 = SimpleStruct(ArrayBuffer((offset,x3940), (size,Const(64)), (isLoad,Const(true))))
    val b4286_b4284 = WriteMem(b4284, x3941_x3940).name("b4286_b4284").ctrl(x3943) // StreamWrite(x3933,x3941,b940)
    val b4287_b4285 = WriteMem(b4285, Const(64)).name("b4287_b4285").ctrl(x3943) // StreamWrite(x3933,x3941,b940)
    val x3944 = FringeContainer(x3719,b4284,b4285,x3934).name("x3944").ctrl(x3952) // FringeDenseLoad(x3719,x3933,x3934)
    val x3945 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3945").ctrl(x3952) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3946 = CounterChain(List(x3945)).name("x3946").ctrl(x3952) // CounterChainNew(List(x3945))
    val x3951 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3946).name("x3951").ctrl(x3952) // UnrolledForeach(List(b940),x3946,Block(Const(())),List(List(b1186)),List(List(b1187)))
    val b1186 = CounterIter(x3945, None).ctrl(x3951).name("b1186")
    val b1187 = DummyOp().ctrl(x3951).name("b1187")
    val x3947 = OpDef(op=BitAnd, inputs=List(b1187, b940)).name("x3947").ctrl(x3951) // And(b1187,b940)
    val x3948_x3948 = ReadMem(x3934).name("x3948").ctrl(x3951) // ParStreamRead(x3934,List(x3947))
    val x3949_x3949 = x3948_x3948 // x3949 = VectorApply(x3948,0)
    val x3950 = StoreBanks(List(x3739_d0_b0), List(b1186), x3949_x3949).name("x3950").ctrl(x3951) // ParSRAMStore(x3739,List(List(b1186)),List(x3949),List(x3947))
    val x3954 = UnitController(style=SeqPipe, level=InnerControl).name("x3954").ctrl(x4225) // UnitPipe(List(b941),Block(Const(())))
    val x3953 = OpDef(op=FixAdd, inputs=List(b933, Const(16))).name("x3953").ctrl(x3954) // FixAdd(b933,Const(16))
    val x3974 = UnitController(style=StreamPipe, level=OuterControl).name("x3974").ctrl(x4225) // UnitPipe(List(b941),Block(Const(())))
    val b4288 = StreamOut(field="offset").name("b4288").ctrl(x3974) // x3955 = StreamOutNew(BurstCmdBus)
    val b4289 = StreamOut(field="size").name("b4289").ctrl(x3974) // x3955 = StreamOutNew(BurstCmdBus)
    val x3956 = StreamIn(field="data").name("x3956").ctrl(x3974) // x3956 = StreamInNew(BurstDataBus())
    val x3965 = UnitController(style=SeqPipe, level=InnerControl).name("x3965").ctrl(x3974) // UnitPipe(List(b941),Block(x3964))
    val x3957 = b933 // FixConvert(b933,TRUE,_32,_0)
    val x3958 = OpDef(op=FixSla, inputs=List(x3957, Const(2))).name("x3958").ctrl(x3965) // FixLsh(x3957,Const(2))
    val x3959 = x3958 // FixConvert(x3958,TRUE,_64,_0)
    val x3960 = top.argFringe.dramAddress(x3717).name("x3960").ctrl(x3965) // GetDRAMAddress(x3717)
    val x3961 = OpDef(op=FixAdd, inputs=List(x3959, x3960)).name("x3961").ctrl(x3965) // FixAdd(x3959,x3960)
    val x3963_x3962 = x3961 // FixConvert(x3961,TRUE,_64,_0)
    // x3963 = SimpleStruct(ArrayBuffer((offset,x3962), (size,Const(64)), (isLoad,Const(true))))
    val b4290_b4288 = WriteMem(b4288, x3963_x3962).name("b4290_b4288").ctrl(x3965) // StreamWrite(x3955,x3963,b941)
    val b4291_b4289 = WriteMem(b4289, Const(64)).name("b4291_b4289").ctrl(x3965) // StreamWrite(x3955,x3963,b941)
    val x3966 = FringeContainer(x3717,b4288,b4289,x3956).name("x3966").ctrl(x3974) // FringeDenseLoad(x3717,x3955,x3956)
    val x3967 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3967").ctrl(x3974) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3968 = CounterChain(List(x3967)).name("x3968").ctrl(x3974) // CounterChainNew(List(x3967))
    val x3973 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3968).name("x3973").ctrl(x3974) // UnrolledForeach(List(b941),x3968,Block(Const(())),List(List(b1211)),List(List(b1212)))
    val b1211 = CounterIter(x3967, None).ctrl(x3973).name("b1211")
    val b1212 = DummyOp().ctrl(x3973).name("b1212")
    val x3969 = OpDef(op=BitAnd, inputs=List(b1212, b941)).name("x3969").ctrl(x3973) // And(b1212,b941)
    val x3970_x3970 = ReadMem(x3956).name("x3970").ctrl(x3973) // ParStreamRead(x3956,List(x3969))
    val x3971_x3971 = x3970_x3970 // x3971 = VectorApply(x3970,0)
    val x3972 = StoreBanks(List(x3732_d0_b0), List(b1211), x3971_x3971).name("x3972").ctrl(x3973) // ParSRAMStore(x3732,List(List(b1211)),List(x3971),List(x3969))
    val x3994 = UnitController(style=StreamPipe, level=OuterControl).name("x3994").ctrl(x4225) // UnitPipe(List(b941),Block(Const(())))
    val b4292 = StreamOut(field="offset").name("b4292").ctrl(x3994) // x3975 = StreamOutNew(BurstCmdBus)
    val b4293 = StreamOut(field="size").name("b4293").ctrl(x3994) // x3975 = StreamOutNew(BurstCmdBus)
    val x3976 = StreamIn(field="data").name("x3976").ctrl(x3994) // x3976 = StreamInNew(BurstDataBus())
    val x3985 = UnitController(style=SeqPipe, level=InnerControl).name("x3985").ctrl(x3994) // UnitPipe(List(b941),Block(x3984))
    val x3977 = b933 // FixConvert(b933,TRUE,_32,_0)
    val x3978 = OpDef(op=FixSla, inputs=List(x3977, Const(2))).name("x3978").ctrl(x3985) // FixLsh(x3977,Const(2))
    val x3979 = x3978 // FixConvert(x3978,TRUE,_64,_0)
    val x3980 = top.argFringe.dramAddress(x3719).name("x3980").ctrl(x3985) // GetDRAMAddress(x3719)
    val x3981 = OpDef(op=FixAdd, inputs=List(x3979, x3980)).name("x3981").ctrl(x3985) // FixAdd(x3979,x3980)
    val x3983_x3982 = x3981 // FixConvert(x3981,TRUE,_64,_0)
    // x3983 = SimpleStruct(ArrayBuffer((offset,x3982), (size,Const(64)), (isLoad,Const(true))))
    val b4294_b4292 = WriteMem(b4292, x3983_x3982).name("b4294_b4292").ctrl(x3985) // StreamWrite(x3975,x3983,b941)
    val b4295_b4293 = WriteMem(b4293, Const(64)).name("b4295_b4293").ctrl(x3985) // StreamWrite(x3975,x3983,b941)
    val x3986 = FringeContainer(x3719,b4292,b4293,x3976).name("x3986").ctrl(x3994) // FringeDenseLoad(x3719,x3975,x3976)
    val x3987 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x3987").ctrl(x3994) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x3988 = CounterChain(List(x3987)).name("x3988").ctrl(x3994) // CounterChainNew(List(x3987))
    val x3993 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3988).name("x3993").ctrl(x3994) // UnrolledForeach(List(b941),x3988,Block(Const(())),List(List(b1233)),List(List(b1234)))
    val b1233 = CounterIter(x3987, None).ctrl(x3993).name("b1233")
    val b1234 = DummyOp().ctrl(x3993).name("b1234")
    val x3989 = OpDef(op=BitAnd, inputs=List(b1234, b941)).name("x3989").ctrl(x3993) // And(b1234,b941)
    val x3990_x3990 = ReadMem(x3976).name("x3990").ctrl(x3993) // ParStreamRead(x3976,List(x3989))
    val x3991_x3991 = x3990_x3990 // x3991 = VectorApply(x3990,0)
    val x3992 = StoreBanks(List(x3740_d0_b0), List(b1233), x3991_x3991).name("x3992").ctrl(x3993) // ParSRAMStore(x3740,List(List(b1233)),List(x3991),List(x3989))
    val x3996 = UnitController(style=SeqPipe, level=InnerControl).name("x3996").ctrl(x4225) // UnitPipe(List(b942),Block(Const(())))
    val x3995 = OpDef(op=FixAdd, inputs=List(b934, Const(16))).name("x3995").ctrl(x3996) // FixAdd(b934,Const(16))
    val x4016 = UnitController(style=StreamPipe, level=OuterControl).name("x4016").ctrl(x4225) // UnitPipe(List(b942),Block(Const(())))
    val b4296 = StreamOut(field="offset").name("b4296").ctrl(x4016) // x3997 = StreamOutNew(BurstCmdBus)
    val b4297 = StreamOut(field="size").name("b4297").ctrl(x4016) // x3997 = StreamOutNew(BurstCmdBus)
    val x3998 = StreamIn(field="data").name("x3998").ctrl(x4016) // x3998 = StreamInNew(BurstDataBus())
    val x4007 = UnitController(style=SeqPipe, level=InnerControl).name("x4007").ctrl(x4016) // UnitPipe(List(b942),Block(x4006))
    val x3999 = b934 // FixConvert(b934,TRUE,_32,_0)
    val x4000 = OpDef(op=FixSla, inputs=List(x3999, Const(2))).name("x4000").ctrl(x4007) // FixLsh(x3999,Const(2))
    val x4001 = x4000 // FixConvert(x4000,TRUE,_64,_0)
    val x4002 = top.argFringe.dramAddress(x3717).name("x4002").ctrl(x4007) // GetDRAMAddress(x3717)
    val x4003 = OpDef(op=FixAdd, inputs=List(x4001, x4002)).name("x4003").ctrl(x4007) // FixAdd(x4001,x4002)
    val x4005_x4004 = x4003 // FixConvert(x4003,TRUE,_64,_0)
    // x4005 = SimpleStruct(ArrayBuffer((offset,x4004), (size,Const(64)), (isLoad,Const(true))))
    val b4298_b4296 = WriteMem(b4296, x4005_x4004).name("b4298_b4296").ctrl(x4007) // StreamWrite(x3997,x4005,b942)
    val b4299_b4297 = WriteMem(b4297, Const(64)).name("b4299_b4297").ctrl(x4007) // StreamWrite(x3997,x4005,b942)
    val x4008 = FringeContainer(x3717,b4296,b4297,x3998).name("x4008").ctrl(x4016) // FringeDenseLoad(x3717,x3997,x3998)
    val x4009 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4009").ctrl(x4016) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4010 = CounterChain(List(x4009)).name("x4010").ctrl(x4016) // CounterChainNew(List(x4009))
    val x4015 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4010).name("x4015").ctrl(x4016) // UnrolledForeach(List(b942),x4010,Block(Const(())),List(List(b1258)),List(List(b1259)))
    val b1258 = CounterIter(x4009, None).ctrl(x4015).name("b1258")
    val b1259 = DummyOp().ctrl(x4015).name("b1259")
    val x4011 = OpDef(op=BitAnd, inputs=List(b1259, b942)).name("x4011").ctrl(x4015) // And(b1259,b942)
    val x4012_x4012 = ReadMem(x3998).name("x4012").ctrl(x4015) // ParStreamRead(x3998,List(x4011))
    val x4013_x4013 = x4012_x4012 // x4013 = VectorApply(x4012,0)
    val x4014 = StoreBanks(List(x3733_d0_b0), List(b1258), x4013_x4013).name("x4014").ctrl(x4015) // ParSRAMStore(x3733,List(List(b1258)),List(x4013),List(x4011))
    val x4036 = UnitController(style=StreamPipe, level=OuterControl).name("x4036").ctrl(x4225) // UnitPipe(List(b942),Block(Const(())))
    val b4300 = StreamOut(field="offset").name("b4300").ctrl(x4036) // x4017 = StreamOutNew(BurstCmdBus)
    val b4301 = StreamOut(field="size").name("b4301").ctrl(x4036) // x4017 = StreamOutNew(BurstCmdBus)
    val x4018 = StreamIn(field="data").name("x4018").ctrl(x4036) // x4018 = StreamInNew(BurstDataBus())
    val x4027 = UnitController(style=SeqPipe, level=InnerControl).name("x4027").ctrl(x4036) // UnitPipe(List(b942),Block(x4026))
    val x4019 = b934 // FixConvert(b934,TRUE,_32,_0)
    val x4020 = OpDef(op=FixSla, inputs=List(x4019, Const(2))).name("x4020").ctrl(x4027) // FixLsh(x4019,Const(2))
    val x4021 = x4020 // FixConvert(x4020,TRUE,_64,_0)
    val x4022 = top.argFringe.dramAddress(x3719).name("x4022").ctrl(x4027) // GetDRAMAddress(x3719)
    val x4023 = OpDef(op=FixAdd, inputs=List(x4021, x4022)).name("x4023").ctrl(x4027) // FixAdd(x4021,x4022)
    val x4025_x4024 = x4023 // FixConvert(x4023,TRUE,_64,_0)
    // x4025 = SimpleStruct(ArrayBuffer((offset,x4024), (size,Const(64)), (isLoad,Const(true))))
    val b4302_b4300 = WriteMem(b4300, x4025_x4024).name("b4302_b4300").ctrl(x4027) // StreamWrite(x4017,x4025,b942)
    val b4303_b4301 = WriteMem(b4301, Const(64)).name("b4303_b4301").ctrl(x4027) // StreamWrite(x4017,x4025,b942)
    val x4028 = FringeContainer(x3719,b4300,b4301,x4018).name("x4028").ctrl(x4036) // FringeDenseLoad(x3719,x4017,x4018)
    val x4029 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4029").ctrl(x4036) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4030 = CounterChain(List(x4029)).name("x4030").ctrl(x4036) // CounterChainNew(List(x4029))
    val x4035 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4030).name("x4035").ctrl(x4036) // UnrolledForeach(List(b942),x4030,Block(Const(())),List(List(b1280)),List(List(b1281)))
    val b1280 = CounterIter(x4029, None).ctrl(x4035).name("b1280")
    val b1281 = DummyOp().ctrl(x4035).name("b1281")
    val x4031 = OpDef(op=BitAnd, inputs=List(b1281, b942)).name("x4031").ctrl(x4035) // And(b1281,b942)
    val x4032_x4032 = ReadMem(x4018).name("x4032").ctrl(x4035) // ParStreamRead(x4018,List(x4031))
    val x4033_x4033 = x4032_x4032 // x4033 = VectorApply(x4032,0)
    val x4034 = StoreBanks(List(x3741_d0_b0), List(b1280), x4033_x4033).name("x4034").ctrl(x4035) // ParSRAMStore(x3741,List(List(b1280)),List(x4033),List(x4031))
    val x4038 = UnitController(style=SeqPipe, level=InnerControl).name("x4038").ctrl(x4225) // UnitPipe(List(b943),Block(Const(())))
    val x4037 = OpDef(op=FixAdd, inputs=List(b935, Const(16))).name("x4037").ctrl(x4038) // FixAdd(b935,Const(16))
    val x4058 = UnitController(style=StreamPipe, level=OuterControl).name("x4058").ctrl(x4225) // UnitPipe(List(b943),Block(Const(())))
    val b4304 = StreamOut(field="offset").name("b4304").ctrl(x4058) // x4039 = StreamOutNew(BurstCmdBus)
    val b4305 = StreamOut(field="size").name("b4305").ctrl(x4058) // x4039 = StreamOutNew(BurstCmdBus)
    val x4040 = StreamIn(field="data").name("x4040").ctrl(x4058) // x4040 = StreamInNew(BurstDataBus())
    val x4049 = UnitController(style=SeqPipe, level=InnerControl).name("x4049").ctrl(x4058) // UnitPipe(List(b943),Block(x4048))
    val x4041 = b935 // FixConvert(b935,TRUE,_32,_0)
    val x4042 = OpDef(op=FixSla, inputs=List(x4041, Const(2))).name("x4042").ctrl(x4049) // FixLsh(x4041,Const(2))
    val x4043 = x4042 // FixConvert(x4042,TRUE,_64,_0)
    val x4044 = top.argFringe.dramAddress(x3717).name("x4044").ctrl(x4049) // GetDRAMAddress(x3717)
    val x4045 = OpDef(op=FixAdd, inputs=List(x4043, x4044)).name("x4045").ctrl(x4049) // FixAdd(x4043,x4044)
    val x4047_x4046 = x4045 // FixConvert(x4045,TRUE,_64,_0)
    // x4047 = SimpleStruct(ArrayBuffer((offset,x4046), (size,Const(64)), (isLoad,Const(true))))
    val b4306_b4304 = WriteMem(b4304, x4047_x4046).name("b4306_b4304").ctrl(x4049) // StreamWrite(x4039,x4047,b943)
    val b4307_b4305 = WriteMem(b4305, Const(64)).name("b4307_b4305").ctrl(x4049) // StreamWrite(x4039,x4047,b943)
    val x4050 = FringeContainer(x3717,b4304,b4305,x4040).name("x4050").ctrl(x4058) // FringeDenseLoad(x3717,x4039,x4040)
    val x4051 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4051").ctrl(x4058) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4052 = CounterChain(List(x4051)).name("x4052").ctrl(x4058) // CounterChainNew(List(x4051))
    val x4057 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4052).name("x4057").ctrl(x4058) // UnrolledForeach(List(b943),x4052,Block(Const(())),List(List(b1305)),List(List(b1306)))
    val b1305 = CounterIter(x4051, None).ctrl(x4057).name("b1305")
    val b1306 = DummyOp().ctrl(x4057).name("b1306")
    val x4053 = OpDef(op=BitAnd, inputs=List(b1306, b943)).name("x4053").ctrl(x4057) // And(b1306,b943)
    val x4054_x4054 = ReadMem(x4040).name("x4054").ctrl(x4057) // ParStreamRead(x4040,List(x4053))
    val x4055_x4055 = x4054_x4054 // x4055 = VectorApply(x4054,0)
    val x4056 = StoreBanks(List(x3734_d0_b0), List(b1305), x4055_x4055).name("x4056").ctrl(x4057) // ParSRAMStore(x3734,List(List(b1305)),List(x4055),List(x4053))
    val x4078 = UnitController(style=StreamPipe, level=OuterControl).name("x4078").ctrl(x4225) // UnitPipe(List(b943),Block(Const(())))
    val b4308 = StreamOut(field="offset").name("b4308").ctrl(x4078) // x4059 = StreamOutNew(BurstCmdBus)
    val b4309 = StreamOut(field="size").name("b4309").ctrl(x4078) // x4059 = StreamOutNew(BurstCmdBus)
    val x4060 = StreamIn(field="data").name("x4060").ctrl(x4078) // x4060 = StreamInNew(BurstDataBus())
    val x4069 = UnitController(style=SeqPipe, level=InnerControl).name("x4069").ctrl(x4078) // UnitPipe(List(b943),Block(x4068))
    val x4061 = b935 // FixConvert(b935,TRUE,_32,_0)
    val x4062 = OpDef(op=FixSla, inputs=List(x4061, Const(2))).name("x4062").ctrl(x4069) // FixLsh(x4061,Const(2))
    val x4063 = x4062 // FixConvert(x4062,TRUE,_64,_0)
    val x4064 = top.argFringe.dramAddress(x3719).name("x4064").ctrl(x4069) // GetDRAMAddress(x3719)
    val x4065 = OpDef(op=FixAdd, inputs=List(x4063, x4064)).name("x4065").ctrl(x4069) // FixAdd(x4063,x4064)
    val x4067_x4066 = x4065 // FixConvert(x4065,TRUE,_64,_0)
    // x4067 = SimpleStruct(ArrayBuffer((offset,x4066), (size,Const(64)), (isLoad,Const(true))))
    val b4310_b4308 = WriteMem(b4308, x4067_x4066).name("b4310_b4308").ctrl(x4069) // StreamWrite(x4059,x4067,b943)
    val b4311_b4309 = WriteMem(b4309, Const(64)).name("b4311_b4309").ctrl(x4069) // StreamWrite(x4059,x4067,b943)
    val x4070 = FringeContainer(x3719,b4308,b4309,x4060).name("x4070").ctrl(x4078) // FringeDenseLoad(x3719,x4059,x4060)
    val x4071 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4071").ctrl(x4078) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4072 = CounterChain(List(x4071)).name("x4072").ctrl(x4078) // CounterChainNew(List(x4071))
    val x4077 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4072).name("x4077").ctrl(x4078) // UnrolledForeach(List(b943),x4072,Block(Const(())),List(List(b1327)),List(List(b1328)))
    val b1327 = CounterIter(x4071, None).ctrl(x4077).name("b1327")
    val b1328 = DummyOp().ctrl(x4077).name("b1328")
    val x4073 = OpDef(op=BitAnd, inputs=List(b1328, b943)).name("x4073").ctrl(x4077) // And(b1328,b943)
    val x4074_x4074 = ReadMem(x4060).name("x4074").ctrl(x4077) // ParStreamRead(x4060,List(x4073))
    val x4075_x4075 = x4074_x4074 // x4075 = VectorApply(x4074,0)
    val x4076 = StoreBanks(List(x3742_d0_b0), List(b1327), x4075_x4075).name("x4076").ctrl(x4077) // ParSRAMStore(x3742,List(List(b1327)),List(x4075),List(x4073))
    val x4079_d0 = Reg(init=Some(0)).name("x4079_d0").ctrl(x4225) // x4079 = RegNew(Const(0))
    isAccum(x4079_d0) = false
    val x4079_d1 = Reg(init=Some(0)).name("x4079_d1").ctrl(x4225) // x4079 = RegNew(Const(0))
    isAccum(x4079_d1) = true
    val x4080_d0 = Reg(init=Some(0)).name("x4080_d0").ctrl(x4225) // x4080 = RegNew(Const(0))
    isAccum(x4080_d0) = false
    val x4080_d1 = Reg(init=Some(0)).name("x4080_d1").ctrl(x4225) // x4080 = RegNew(Const(0))
    isAccum(x4080_d1) = true
    val x4081_d0 = Reg(init=Some(0)).name("x4081_d0").ctrl(x4225) // x4081 = RegNew(Const(0))
    isAccum(x4081_d0) = false
    val x4081_d1 = Reg(init=Some(0)).name("x4081_d1").ctrl(x4225) // x4081 = RegNew(Const(0))
    isAccum(x4081_d1) = true
    val x4082_d0 = Reg(init=Some(0)).name("x4082_d0").ctrl(x4225) // x4082 = RegNew(Const(0))
    isAccum(x4082_d0) = false
    val x4082_d1 = Reg(init=Some(0)).name("x4082_d1").ctrl(x4225) // x4082 = RegNew(Const(0))
    isAccum(x4082_d1) = true
    val x4083_d0 = Reg(init=Some(0)).name("x4083_d0").ctrl(x4225) // x4083 = RegNew(Const(0))
    isAccum(x4083_d0) = false
    val x4083_d1 = Reg(init=Some(0)).name("x4083_d1").ctrl(x4225) // x4083 = RegNew(Const(0))
    isAccum(x4083_d1) = true
    val x4084_d0 = Reg(init=Some(0)).name("x4084_d0").ctrl(x4225) // x4084 = RegNew(Const(0))
    isAccum(x4084_d0) = false
    val x4084_d1 = Reg(init=Some(0)).name("x4084_d1").ctrl(x4225) // x4084 = RegNew(Const(0))
    isAccum(x4084_d1) = true
    val x4085_d0 = Reg(init=Some(0)).name("x4085_d0").ctrl(x4225) // x4085 = RegNew(Const(0))
    isAccum(x4085_d0) = false
    val x4085_d1 = Reg(init=Some(0)).name("x4085_d1").ctrl(x4225) // x4085 = RegNew(Const(0))
    isAccum(x4085_d1) = true
    val x4086_d0 = Reg(init=Some(0)).name("x4086_d0").ctrl(x4225) // x4086 = RegNew(Const(0))
    isAccum(x4086_d0) = false
    val x4086_d1 = Reg(init=Some(0)).name("x4086_d1").ctrl(x4225) // x4086 = RegNew(Const(0))
    isAccum(x4086_d1) = true
    val x4087 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4087").ctrl(x4225) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4088 = CounterChain(List(x4087)).name("x4088").ctrl(x4225) // CounterChainNew(List(x4087))
    val x4099 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4088).name("x4099").ctrl(x4225) // UnrolledReduce(List(b936),x4088,x4079,Block((x4079) => Const(())),List(List(b1361)),List(List(b1362)))
    val b1361 = CounterIter(x4087, None).ctrl(x4099).name("b1361")
    val b1362 = DummyOp().ctrl(x4099).name("b1362")
    val x4089 = OpDef(op=BitAnd, inputs=List(b1362, b936)).name("x4089").ctrl(x4099) // And(b1362,b936)
    val x4090 = LoadBanks(List(x3727_d0_b0), List(b1361)).name("x4090").ctrl(x4099) // ParSRAMLoad(x3727,List(List(b1361)),List(x4089))
    val x4091 = x4090 // x4091 = VectorApply(x4090,0)
    val x4092 = LoadBanks(List(x3735_d0_b0), List(b1361)).name("x4092").ctrl(x4099) // ParSRAMLoad(x3735,List(List(b1361)),List(x4089))
    val x4093 = x4092 // x4093 = VectorApply(x4092,0)
    val x4094 = OpDef(op=FixMul, inputs=List(x4091, x4093)).name("x4094").ctrl(x4099) // FixMul(x4091,x4093)
    val x4095 = ReadMem(x4079_d1).name("x4095").ctrl(x4099) // RegRead(x4079)
    val x4096 = OpDef(op=FixEql, inputs=List(b1361, Const(0))).name("x4096").ctrl(x4099) // FixEql(b1361,Const(0))
    val x4097 = ReduceAccumOp(op=FixAdd, input=x4094, accum=x4095).name("x4097").ctrl(x4099) // FixAdd(x4094,x4095)
    val x4098_x4079_d0 = WriteMem(x4079_d0, x4097).name("x4098_x4079_d0").ctrl(x4099) // RegWrite(x4079,x4097,b936)
    val x4098_x4079_d1 = WriteMem(x4079_d1, x4097).name("x4098_x4079_d1").ctrl(x4099) // RegWrite(x4079,x4097,b936)
    val x4100 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4100").ctrl(x4225) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4101 = CounterChain(List(x4100)).name("x4101").ctrl(x4225) // CounterChainNew(List(x4100))
    val x4112 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4101).name("x4112").ctrl(x4225) // UnrolledReduce(List(b937),x4101,x4080,Block((x4080) => Const(())),List(List(b1374)),List(List(b1375)))
    val b1374 = CounterIter(x4100, None).ctrl(x4112).name("b1374")
    val b1375 = DummyOp().ctrl(x4112).name("b1375")
    val x4102 = OpDef(op=BitAnd, inputs=List(b1375, b937)).name("x4102").ctrl(x4112) // And(b1375,b937)
    val x4103 = LoadBanks(List(x3728_d0_b0), List(b1374)).name("x4103").ctrl(x4112) // ParSRAMLoad(x3728,List(List(b1374)),List(x4102))
    val x4104 = x4103 // x4104 = VectorApply(x4103,0)
    val x4105 = LoadBanks(List(x3736_d0_b0), List(b1374)).name("x4105").ctrl(x4112) // ParSRAMLoad(x3736,List(List(b1374)),List(x4102))
    val x4106 = x4105 // x4106 = VectorApply(x4105,0)
    val x4107 = OpDef(op=FixMul, inputs=List(x4104, x4106)).name("x4107").ctrl(x4112) // FixMul(x4104,x4106)
    val x4108 = ReadMem(x4080_d1).name("x4108").ctrl(x4112) // RegRead(x4080)
    val x4109 = OpDef(op=FixEql, inputs=List(b1374, Const(0))).name("x4109").ctrl(x4112) // FixEql(b1374,Const(0))
    val x4110 = ReduceAccumOp(op=FixAdd, input=x4107, accum=x4108).name("x4110").ctrl(x4112) // FixAdd(x4107,x4108)
    val x4111_x4080_d0 = WriteMem(x4080_d0, x4110).name("x4111_x4080_d0").ctrl(x4112) // RegWrite(x4080,x4110,b937)
    val x4111_x4080_d1 = WriteMem(x4080_d1, x4110).name("x4111_x4080_d1").ctrl(x4112) // RegWrite(x4080,x4110,b937)
    val x4113 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4113").ctrl(x4225) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4114 = CounterChain(List(x4113)).name("x4114").ctrl(x4225) // CounterChainNew(List(x4113))
    val x4125 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4114).name("x4125").ctrl(x4225) // UnrolledReduce(List(b938),x4114,x4081,Block((x4081) => Const(())),List(List(b1387)),List(List(b1388)))
    val b1387 = CounterIter(x4113, None).ctrl(x4125).name("b1387")
    val b1388 = DummyOp().ctrl(x4125).name("b1388")
    val x4115 = OpDef(op=BitAnd, inputs=List(b1388, b938)).name("x4115").ctrl(x4125) // And(b1388,b938)
    val x4116 = LoadBanks(List(x3729_d0_b0), List(b1387)).name("x4116").ctrl(x4125) // ParSRAMLoad(x3729,List(List(b1387)),List(x4115))
    val x4117 = x4116 // x4117 = VectorApply(x4116,0)
    val x4118 = LoadBanks(List(x3737_d0_b0), List(b1387)).name("x4118").ctrl(x4125) // ParSRAMLoad(x3737,List(List(b1387)),List(x4115))
    val x4119 = x4118 // x4119 = VectorApply(x4118,0)
    val x4120 = OpDef(op=FixMul, inputs=List(x4117, x4119)).name("x4120").ctrl(x4125) // FixMul(x4117,x4119)
    val x4121 = ReadMem(x4081_d1).name("x4121").ctrl(x4125) // RegRead(x4081)
    val x4122 = OpDef(op=FixEql, inputs=List(b1387, Const(0))).name("x4122").ctrl(x4125) // FixEql(b1387,Const(0))
    val x4123 = ReduceAccumOp(op=FixAdd, input=x4120, accum=x4121).name("x4123").ctrl(x4125) // FixAdd(x4120,x4121)
    val x4124_x4081_d0 = WriteMem(x4081_d0, x4123).name("x4124_x4081_d0").ctrl(x4125) // RegWrite(x4081,x4123,b938)
    val x4124_x4081_d1 = WriteMem(x4081_d1, x4123).name("x4124_x4081_d1").ctrl(x4125) // RegWrite(x4081,x4123,b938)
    val x4126 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4126").ctrl(x4225) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4127 = CounterChain(List(x4126)).name("x4127").ctrl(x4225) // CounterChainNew(List(x4126))
    val x4138 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4127).name("x4138").ctrl(x4225) // UnrolledReduce(List(b939),x4127,x4082,Block((x4082) => Const(())),List(List(b1400)),List(List(b1401)))
    val b1400 = CounterIter(x4126, None).ctrl(x4138).name("b1400")
    val b1401 = DummyOp().ctrl(x4138).name("b1401")
    val x4128 = OpDef(op=BitAnd, inputs=List(b1401, b939)).name("x4128").ctrl(x4138) // And(b1401,b939)
    val x4129 = LoadBanks(List(x3730_d0_b0), List(b1400)).name("x4129").ctrl(x4138) // ParSRAMLoad(x3730,List(List(b1400)),List(x4128))
    val x4130 = x4129 // x4130 = VectorApply(x4129,0)
    val x4131 = LoadBanks(List(x3738_d0_b0), List(b1400)).name("x4131").ctrl(x4138) // ParSRAMLoad(x3738,List(List(b1400)),List(x4128))
    val x4132 = x4131 // x4132 = VectorApply(x4131,0)
    val x4133 = OpDef(op=FixMul, inputs=List(x4130, x4132)).name("x4133").ctrl(x4138) // FixMul(x4130,x4132)
    val x4134 = ReadMem(x4082_d1).name("x4134").ctrl(x4138) // RegRead(x4082)
    val x4135 = OpDef(op=FixEql, inputs=List(b1400, Const(0))).name("x4135").ctrl(x4138) // FixEql(b1400,Const(0))
    val x4136 = ReduceAccumOp(op=FixAdd, input=x4133, accum=x4134).name("x4136").ctrl(x4138) // FixAdd(x4133,x4134)
    val x4137_x4082_d0 = WriteMem(x4082_d0, x4136).name("x4137_x4082_d0").ctrl(x4138) // RegWrite(x4082,x4136,b939)
    val x4137_x4082_d1 = WriteMem(x4082_d1, x4136).name("x4137_x4082_d1").ctrl(x4138) // RegWrite(x4082,x4136,b939)
    val x4139 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4139").ctrl(x4225) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4140 = CounterChain(List(x4139)).name("x4140").ctrl(x4225) // CounterChainNew(List(x4139))
    val x4151 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4140).name("x4151").ctrl(x4225) // UnrolledReduce(List(b940),x4140,x4083,Block((x4083) => Const(())),List(List(b1413)),List(List(b1414)))
    val b1413 = CounterIter(x4139, None).ctrl(x4151).name("b1413")
    val b1414 = DummyOp().ctrl(x4151).name("b1414")
    val x4141 = OpDef(op=BitAnd, inputs=List(b1414, b940)).name("x4141").ctrl(x4151) // And(b1414,b940)
    val x4142 = LoadBanks(List(x3731_d0_b0), List(b1413)).name("x4142").ctrl(x4151) // ParSRAMLoad(x3731,List(List(b1413)),List(x4141))
    val x4143 = x4142 // x4143 = VectorApply(x4142,0)
    val x4144 = LoadBanks(List(x3739_d0_b0), List(b1413)).name("x4144").ctrl(x4151) // ParSRAMLoad(x3739,List(List(b1413)),List(x4141))
    val x4145 = x4144 // x4145 = VectorApply(x4144,0)
    val x4146 = OpDef(op=FixMul, inputs=List(x4143, x4145)).name("x4146").ctrl(x4151) // FixMul(x4143,x4145)
    val x4147 = ReadMem(x4083_d1).name("x4147").ctrl(x4151) // RegRead(x4083)
    val x4148 = OpDef(op=FixEql, inputs=List(b1413, Const(0))).name("x4148").ctrl(x4151) // FixEql(b1413,Const(0))
    val x4149 = ReduceAccumOp(op=FixAdd, input=x4146, accum=x4147).name("x4149").ctrl(x4151) // FixAdd(x4146,x4147)
    val x4150_x4083_d0 = WriteMem(x4083_d0, x4149).name("x4150_x4083_d0").ctrl(x4151) // RegWrite(x4083,x4149,b940)
    val x4150_x4083_d1 = WriteMem(x4083_d1, x4149).name("x4150_x4083_d1").ctrl(x4151) // RegWrite(x4083,x4149,b940)
    val x4152 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4152").ctrl(x4225) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4153 = CounterChain(List(x4152)).name("x4153").ctrl(x4225) // CounterChainNew(List(x4152))
    val x4164 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4153).name("x4164").ctrl(x4225) // UnrolledReduce(List(b941),x4153,x4084,Block((x4084) => Const(())),List(List(b1426)),List(List(b1427)))
    val b1426 = CounterIter(x4152, None).ctrl(x4164).name("b1426")
    val b1427 = DummyOp().ctrl(x4164).name("b1427")
    val x4154 = OpDef(op=BitAnd, inputs=List(b1427, b941)).name("x4154").ctrl(x4164) // And(b1427,b941)
    val x4155 = LoadBanks(List(x3732_d0_b0), List(b1426)).name("x4155").ctrl(x4164) // ParSRAMLoad(x3732,List(List(b1426)),List(x4154))
    val x4156 = x4155 // x4156 = VectorApply(x4155,0)
    val x4157 = LoadBanks(List(x3740_d0_b0), List(b1426)).name("x4157").ctrl(x4164) // ParSRAMLoad(x3740,List(List(b1426)),List(x4154))
    val x4158 = x4157 // x4158 = VectorApply(x4157,0)
    val x4159 = OpDef(op=FixMul, inputs=List(x4156, x4158)).name("x4159").ctrl(x4164) // FixMul(x4156,x4158)
    val x4160 = ReadMem(x4084_d1).name("x4160").ctrl(x4164) // RegRead(x4084)
    val x4161 = OpDef(op=FixEql, inputs=List(b1426, Const(0))).name("x4161").ctrl(x4164) // FixEql(b1426,Const(0))
    val x4162 = ReduceAccumOp(op=FixAdd, input=x4159, accum=x4160).name("x4162").ctrl(x4164) // FixAdd(x4159,x4160)
    val x4163_x4084_d0 = WriteMem(x4084_d0, x4162).name("x4163_x4084_d0").ctrl(x4164) // RegWrite(x4084,x4162,b941)
    val x4163_x4084_d1 = WriteMem(x4084_d1, x4162).name("x4163_x4084_d1").ctrl(x4164) // RegWrite(x4084,x4162,b941)
    val x4165 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4165").ctrl(x4225) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4166 = CounterChain(List(x4165)).name("x4166").ctrl(x4225) // CounterChainNew(List(x4165))
    val x4177 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4166).name("x4177").ctrl(x4225) // UnrolledReduce(List(b942),x4166,x4085,Block((x4085) => Const(())),List(List(b1439)),List(List(b1440)))
    val b1439 = CounterIter(x4165, None).ctrl(x4177).name("b1439")
    val b1440 = DummyOp().ctrl(x4177).name("b1440")
    val x4167 = OpDef(op=BitAnd, inputs=List(b1440, b942)).name("x4167").ctrl(x4177) // And(b1440,b942)
    val x4168 = LoadBanks(List(x3733_d0_b0), List(b1439)).name("x4168").ctrl(x4177) // ParSRAMLoad(x3733,List(List(b1439)),List(x4167))
    val x4169 = x4168 // x4169 = VectorApply(x4168,0)
    val x4170 = LoadBanks(List(x3741_d0_b0), List(b1439)).name("x4170").ctrl(x4177) // ParSRAMLoad(x3741,List(List(b1439)),List(x4167))
    val x4171 = x4170 // x4171 = VectorApply(x4170,0)
    val x4172 = OpDef(op=FixMul, inputs=List(x4169, x4171)).name("x4172").ctrl(x4177) // FixMul(x4169,x4171)
    val x4173 = ReadMem(x4085_d1).name("x4173").ctrl(x4177) // RegRead(x4085)
    val x4174 = OpDef(op=FixEql, inputs=List(b1439, Const(0))).name("x4174").ctrl(x4177) // FixEql(b1439,Const(0))
    val x4175 = ReduceAccumOp(op=FixAdd, input=x4172, accum=x4173).name("x4175").ctrl(x4177) // FixAdd(x4172,x4173)
    val x4176_x4085_d0 = WriteMem(x4085_d0, x4175).name("x4176_x4085_d0").ctrl(x4177) // RegWrite(x4085,x4175,b942)
    val x4176_x4085_d1 = WriteMem(x4085_d1, x4175).name("x4176_x4085_d1").ctrl(x4177) // RegWrite(x4085,x4175,b942)
    val x4178 = Counter(min=Const(0), max=Const(16), step=Const(1), par=16).name("x4178").ctrl(x4225) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x4179 = CounterChain(List(x4178)).name("x4179").ctrl(x4225) // CounterChainNew(List(x4178))
    val x4190 = LoopController(style=InnerPipe, level=InnerControl, cchain=x4179).name("x4190").ctrl(x4225) // UnrolledReduce(List(b943),x4179,x4086,Block((x4086) => Const(())),List(List(b1452)),List(List(b1453)))
    val b1452 = CounterIter(x4178, None).ctrl(x4190).name("b1452")
    val b1453 = DummyOp().ctrl(x4190).name("b1453")
    val x4180 = OpDef(op=BitAnd, inputs=List(b1453, b943)).name("x4180").ctrl(x4190) // And(b1453,b943)
    val x4181 = LoadBanks(List(x3734_d0_b0), List(b1452)).name("x4181").ctrl(x4190) // ParSRAMLoad(x3734,List(List(b1452)),List(x4180))
    val x4182 = x4181 // x4182 = VectorApply(x4181,0)
    val x4183 = LoadBanks(List(x3742_d0_b0), List(b1452)).name("x4183").ctrl(x4190) // ParSRAMLoad(x3742,List(List(b1452)),List(x4180))
    val x4184 = x4183 // x4184 = VectorApply(x4183,0)
    val x4185 = OpDef(op=FixMul, inputs=List(x4182, x4184)).name("x4185").ctrl(x4190) // FixMul(x4182,x4184)
    val x4186 = ReadMem(x4086_d1).name("x4186").ctrl(x4190) // RegRead(x4086)
    val x4187 = OpDef(op=FixEql, inputs=List(b1452, Const(0))).name("x4187").ctrl(x4190) // FixEql(b1452,Const(0))
    val x4188 = ReduceAccumOp(op=FixAdd, input=x4185, accum=x4186).name("x4188").ctrl(x4190) // FixAdd(x4185,x4186)
    val x4189_x4086_d0 = WriteMem(x4086_d0, x4188).name("x4189_x4086_d0").ctrl(x4190) // RegWrite(x4086,x4188,b943)
    val x4189_x4086_d1 = WriteMem(x4086_d1, x4188).name("x4189_x4086_d1").ctrl(x4190) // RegWrite(x4086,x4188,b943)
    val x4224 = UnitController(style=SeqPipe, level=InnerControl).name("x4224").ctrl(x4225) // UnitPipe(List(Const(true)),Block(x4223))
    val x4191 = ReadMem(x4080_d0).name("x4191").ctrl(x4224) // RegRead(x4080)
    val x4192 = ReadMem(x4079_d0).name("x4192").ctrl(x4224) // RegRead(x4079)
    val x4193 = OpDef(op=FixAdd, inputs=List(x4192, x4191)).name("x4193").ctrl(x4224) // FixAdd(x4192,x4191)
    val x4194 = OpDef(op=MuxOp, inputs=List(b937, x4193, x4192)).name("x4194").ctrl(x4224) // Mux(b937,x4193,x4192)
    val x4195 = OpDef(op=BitOr, inputs=List(b936, b937)).name("x4195").ctrl(x4224) // Or(b936,b937)
    val x4196 = ReadMem(x4082_d0).name("x4196").ctrl(x4224) // RegRead(x4082)
    val x4197 = ReadMem(x4081_d0).name("x4197").ctrl(x4224) // RegRead(x4081)
    val x4198 = OpDef(op=FixAdd, inputs=List(x4197, x4196)).name("x4198").ctrl(x4224) // FixAdd(x4197,x4196)
    val x4199 = OpDef(op=MuxOp, inputs=List(b939, x4198, x4197)).name("x4199").ctrl(x4224) // Mux(b939,x4198,x4197)
    val x4200 = OpDef(op=BitOr, inputs=List(b938, b939)).name("x4200").ctrl(x4224) // Or(b938,b939)
    val x4201 = ReadMem(x4084_d0).name("x4201").ctrl(x4224) // RegRead(x4084)
    val x4202 = ReadMem(x4083_d0).name("x4202").ctrl(x4224) // RegRead(x4083)
    val x4203 = OpDef(op=FixAdd, inputs=List(x4202, x4201)).name("x4203").ctrl(x4224) // FixAdd(x4202,x4201)
    val x4204 = OpDef(op=MuxOp, inputs=List(b941, x4203, x4202)).name("x4204").ctrl(x4224) // Mux(b941,x4203,x4202)
    val x4205 = OpDef(op=BitOr, inputs=List(b940, b941)).name("x4205").ctrl(x4224) // Or(b940,b941)
    val x4206 = ReadMem(x4086_d0).name("x4206").ctrl(x4224) // RegRead(x4086)
    val x4207 = ReadMem(x4085_d0).name("x4207").ctrl(x4224) // RegRead(x4085)
    val x4208 = OpDef(op=FixAdd, inputs=List(x4207, x4206)).name("x4208").ctrl(x4224) // FixAdd(x4207,x4206)
    val x4209 = OpDef(op=MuxOp, inputs=List(b943, x4208, x4207)).name("x4209").ctrl(x4224) // Mux(b943,x4208,x4207)
    val x4210 = OpDef(op=BitOr, inputs=List(b942, b943)).name("x4210").ctrl(x4224) // Or(b942,b943)
    val x4211 = OpDef(op=FixAdd, inputs=List(x4194, x4199)).name("x4211").ctrl(x4224) // FixAdd(x4194,x4199)
    val x4212 = OpDef(op=MuxOp, inputs=List(x4200, x4211, x4194)).name("x4212").ctrl(x4224) // Mux(x4200,x4211,x4194)
    val x4213 = OpDef(op=BitOr, inputs=List(x4195, x4200)).name("x4213").ctrl(x4224) // Or(x4195,x4200)
    val x4214 = OpDef(op=FixAdd, inputs=List(x4204, x4209)).name("x4214").ctrl(x4224) // FixAdd(x4204,x4209)
    val x4215 = OpDef(op=MuxOp, inputs=List(x4210, x4214, x4204)).name("x4215").ctrl(x4224) // Mux(x4210,x4214,x4204)
    val x4216 = OpDef(op=BitOr, inputs=List(x4205, x4210)).name("x4216").ctrl(x4224) // Or(x4205,x4210)
    val x4217 = OpDef(op=FixAdd, inputs=List(x4212, x4215)).name("x4217").ctrl(x4224) // FixAdd(x4212,x4215)
    val x4218 = OpDef(op=MuxOp, inputs=List(x4216, x4217, x4212)).name("x4218").ctrl(x4224) // Mux(x4216,x4217,x4212)
    val x4219 = OpDef(op=BitOr, inputs=List(x4213, x4216)).name("x4219").ctrl(x4224) // Or(x4213,x4216)
    val x4220 = ReadMem(x3723_d1).name("x4220").ctrl(x4224) // RegRead(x3723)
    val x4221 = OpDef(op=FixEql, inputs=List(b928, Const(0))).name("x4221").ctrl(x4224) // FixEql(b928,Const(0))
    val x4222 = ReduceAccumOp(op=FixAdd, input=x4218, accum=x4220).name("x4222").ctrl(x4224) // FixAdd(x4218,x4220)
    val x4223_x3723_d0 = WriteMem(x3723_d0, x4222).name("x4223_x3723_d0").ctrl(x4224) // RegWrite(x3723,x4222,Const(true))
    val x4223_x3723_d1 = WriteMem(x3723_d1, x4222).name("x4223_x3723_d1").ctrl(x4224) // RegWrite(x3723,x4222,Const(true))
    val x4228 = UnitController(style=SeqPipe, level=InnerControl).name("x4228").ctrl(x4229) // UnitPipe(List(Const(true)),Block(Const(())))
    val x4226 = ReadMem(x3723_d0).name("x4226").ctrl(x4228) // RegRead(x3723)
    val x4227_x3720 = WriteMem(x3720, x4226).name("x4227_x3720").ctrl(x4228) // RegWrite(x3720,x4226,Const(true))
    
  }
}
