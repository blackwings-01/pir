import pir._
import pir.node._
import arch._
import prism.enums._

object FFT_Strided extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x4982 = DRAM().name("x4982").ctrl(top) // x4982 = DRAMNew(ArrayBuffer(Const(1024)),Const(0))
    val x4983 = DRAM().name("x4983").ctrl(top) // x4983 = DRAMNew(ArrayBuffer(Const(1024)),Const(0))
    val x4984 = DRAM().name("x4984").ctrl(top) // x4984 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x4985 = DRAM().name("x4985").ctrl(top) // x4985 = DRAMNew(ArrayBuffer(Const(512)),Const(0))
    val x4986 = DRAM().name("x4986").ctrl(top) // x4986 = DRAMNew(ArrayBuffer(Const(1024)),Const(0))
    val x4987 = DRAM().name("x4987").ctrl(top) // x4987 = DRAMNew(ArrayBuffer(Const(1024)),Const(0))
    val x5270 = UnitController(style=SeqPipe, level=OuterControl).name("x5270").ctrl(top) // Hwblock(Block(Const(())),false)
    val x5004_d0_b0 = SRAM(size=1024, banking=NoBanking()).name("x5004_d0_b0").ctrl(x5270) // x5004 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5004_d0_b0) = false
    val x5004_d1_b0 = SRAM(size=1024, banking=NoBanking()).name("x5004_d1_b0").ctrl(x5270) // x5004 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5004_d1_b0) = true
    val x5004_d2_b0 = SRAM(size=1024, banking=NoBanking()).name("x5004_d2_b0").ctrl(x5270) // x5004 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5004_d2_b0) = true
    val x5004_d3_b0 = SRAM(size=1024, banking=NoBanking()).name("x5004_d3_b0").ctrl(x5270) // x5004 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5004_d3_b0) = true
    val x5004_d4_b0 = SRAM(size=1024, banking=NoBanking()).name("x5004_d4_b0").ctrl(x5270) // x5004 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5004_d4_b0) = false
    val x5004_d5_b0 = SRAM(size=1024, banking=NoBanking()).name("x5004_d5_b0").ctrl(x5270) // x5004 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5004_d5_b0) = false
    val x5005_d0_b0 = SRAM(size=1024, banking=NoBanking()).name("x5005_d0_b0").ctrl(x5270) // x5005 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5005_d0_b0) = false
    val x5005_d1_b0 = SRAM(size=1024, banking=NoBanking()).name("x5005_d1_b0").ctrl(x5270) // x5005 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5005_d1_b0) = true
    val x5005_d2_b0 = SRAM(size=1024, banking=NoBanking()).name("x5005_d2_b0").ctrl(x5270) // x5005 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5005_d2_b0) = true
    val x5005_d3_b0 = SRAM(size=1024, banking=NoBanking()).name("x5005_d3_b0").ctrl(x5270) // x5005 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5005_d3_b0) = true
    val x5005_d4_b0 = SRAM(size=1024, banking=NoBanking()).name("x5005_d4_b0").ctrl(x5270) // x5005 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5005_d4_b0) = false
    val x5005_d5_b0 = SRAM(size=1024, banking=NoBanking()).name("x5005_d5_b0").ctrl(x5270) // x5005 = SRAMNew(ArrayBuffer(Const(1024)))
    isAccum(x5005_d5_b0) = false
    val x5006_d0_b0 = SRAM(size=512, banking=NoBanking()).name("x5006_d0_b0").ctrl(x5270) // x5006 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x5006_d0_b0) = false
    val x5007_d0_b0 = SRAM(size=512, banking=NoBanking()).name("x5007_d0_b0").ctrl(x5270) // x5007 = SRAMNew(ArrayBuffer(Const(512)))
    isAccum(x5007_d0_b0) = false
    val x5026 = UnitController(style=StreamPipe, level=OuterControl).name("x5026").ctrl(x5270) // UnitPipe(List(Const(true)),Block(Const(())))
    val b5340 = StreamOut(field="offset").name("b5340").ctrl(x5026) // x5008 = StreamOutNew(BurstCmdBus)
    val b5341 = StreamOut(field="size").name("b5341").ctrl(x5026) // x5008 = StreamOutNew(BurstCmdBus)
    val x5009 = StreamIn(field="data").name("x5009").ctrl(x5026) // x5009 = StreamInNew(BurstDataBus())
    val x5018 = UnitController(style=SeqPipe, level=InnerControl).name("x5018").ctrl(x5026) // UnitPipe(List(Const(true)),Block(x5017))
    val x5010 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5011 = OpDef(op=FixSla, inputs=List(x5010, Const(2))).name("x5011").ctrl(x5018) // FixLsh(x5010,Const(2))
    val x5012 = x5011 // FixConvert(x5011,TRUE,_64,_0)
    val x5013 = top.argFringe.dramAddress(x4982).name("x5013").ctrl(x5018) // GetDRAMAddress(x4982)
    val x5014 = OpDef(op=FixAdd, inputs=List(x5012, x5013)).name("x5014").ctrl(x5018) // FixAdd(x5012,x5013)
    val x5016_x5015 = x5014 // FixConvert(x5014,TRUE,_64,_0)
    // x5016 = SimpleStruct(ArrayBuffer((offset,x5015), (size,Const(4096)), (isLoad,Const(true))))
    val b5342_b5340 = WriteMem(b5340, x5016_x5015).name("b5342_b5340").ctrl(x5018) // StreamWrite(x5008,x5016,Const(true))
    val b5343_b5341 = WriteMem(b5341, Const(4096)).name("b5343_b5341").ctrl(x5018) // StreamWrite(x5008,x5016,Const(true))
    val x5019 = FringeContainer(x4982,b5340,b5341,x5009).name("x5019").ctrl(x5026) // FringeDenseLoad(x4982,x5008,x5009)
    val x5020 = Counter(min=Const(0), max=Const(1024), step=Const(1), par=1).name("x5020").ctrl(x5026) // CounterNew(Const(0),Const(1024),Const(1),Const(1))
    val x5021 = CounterChain(List(x5020)).name("x5021").ctrl(x5026) // CounterChainNew(List(x5020))
    val x5025 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5021).name("x5025").ctrl(x5026) // UnrolledForeach(List(Const(true)),x5021,Block(Const(())),List(List(b3150)),List(List(b3151)))
    val b3150 = CounterIter(x5020, None).ctrl(x5025).name("b3150")
    val b3151 = DummyOp().ctrl(x5025).name("b3151")
    val x5022_x5022 = ReadMem(x5009).name("x5022").ctrl(x5025) // ParStreamRead(x5009,List(b3151))
    val x5023_x5023 = x5022_x5022 // x5023 = VectorApply(x5022,0)
    val x5024 = StoreBanks(List(x5004_d0_b0, x5004_d5_b0, x5004_d1_b0, x5004_d2_b0, x5004_d3_b0, x5004_d4_b0), List(b3150), x5023_x5023).name("x5024").ctrl(x5025) // ParSRAMStore(x5004,List(List(b3150)),List(x5023),List(b3151))
    val x5045 = UnitController(style=StreamPipe, level=OuterControl).name("x5045").ctrl(x5270) // UnitPipe(List(Const(true)),Block(Const(())))
    val b5344 = StreamOut(field="offset").name("b5344").ctrl(x5045) // x5027 = StreamOutNew(BurstCmdBus)
    val b5345 = StreamOut(field="size").name("b5345").ctrl(x5045) // x5027 = StreamOutNew(BurstCmdBus)
    val x5028 = StreamIn(field="data").name("x5028").ctrl(x5045) // x5028 = StreamInNew(BurstDataBus())
    val x5037 = UnitController(style=SeqPipe, level=InnerControl).name("x5037").ctrl(x5045) // UnitPipe(List(Const(true)),Block(x5036))
    val x5029 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5030 = OpDef(op=FixSla, inputs=List(x5029, Const(2))).name("x5030").ctrl(x5037) // FixLsh(x5029,Const(2))
    val x5031 = x5030 // FixConvert(x5030,TRUE,_64,_0)
    val x5032 = top.argFringe.dramAddress(x4983).name("x5032").ctrl(x5037) // GetDRAMAddress(x4983)
    val x5033 = OpDef(op=FixAdd, inputs=List(x5031, x5032)).name("x5033").ctrl(x5037) // FixAdd(x5031,x5032)
    val x5035_x5034 = x5033 // FixConvert(x5033,TRUE,_64,_0)
    // x5035 = SimpleStruct(ArrayBuffer((offset,x5034), (size,Const(4096)), (isLoad,Const(true))))
    val b5346_b5344 = WriteMem(b5344, x5035_x5034).name("b5346_b5344").ctrl(x5037) // StreamWrite(x5027,x5035,Const(true))
    val b5347_b5345 = WriteMem(b5345, Const(4096)).name("b5347_b5345").ctrl(x5037) // StreamWrite(x5027,x5035,Const(true))
    val x5038 = FringeContainer(x4983,b5344,b5345,x5028).name("x5038").ctrl(x5045) // FringeDenseLoad(x4983,x5027,x5028)
    val x5039 = Counter(min=Const(0), max=Const(1024), step=Const(1), par=1).name("x5039").ctrl(x5045) // CounterNew(Const(0),Const(1024),Const(1),Const(1))
    val x5040 = CounterChain(List(x5039)).name("x5040").ctrl(x5045) // CounterChainNew(List(x5039))
    val x5044 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5040).name("x5044").ctrl(x5045) // UnrolledForeach(List(Const(true)),x5040,Block(Const(())),List(List(b3171)),List(List(b3172)))
    val b3171 = CounterIter(x5039, None).ctrl(x5044).name("b3171")
    val b3172 = DummyOp().ctrl(x5044).name("b3172")
    val x5041_x5041 = ReadMem(x5028).name("x5041").ctrl(x5044) // ParStreamRead(x5028,List(b3172))
    val x5042_x5042 = x5041_x5041 // x5042 = VectorApply(x5041,0)
    val x5043 = StoreBanks(List(x5005_d0_b0, x5005_d5_b0, x5005_d1_b0, x5005_d2_b0, x5005_d3_b0, x5005_d4_b0), List(b3171), x5042_x5042).name("x5043").ctrl(x5044) // ParSRAMStore(x5005,List(List(b3171)),List(x5042),List(b3172))
    val x5064 = UnitController(style=StreamPipe, level=OuterControl).name("x5064").ctrl(x5270) // UnitPipe(List(Const(true)),Block(Const(())))
    val b5348 = StreamOut(field="offset").name("b5348").ctrl(x5064) // x5046 = StreamOutNew(BurstCmdBus)
    val b5349 = StreamOut(field="size").name("b5349").ctrl(x5064) // x5046 = StreamOutNew(BurstCmdBus)
    val x5047 = StreamIn(field="data").name("x5047").ctrl(x5064) // x5047 = StreamInNew(BurstDataBus())
    val x5056 = UnitController(style=SeqPipe, level=InnerControl).name("x5056").ctrl(x5064) // UnitPipe(List(Const(true)),Block(x5055))
    val x5048 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5049 = OpDef(op=FixSla, inputs=List(x5048, Const(2))).name("x5049").ctrl(x5056) // FixLsh(x5048,Const(2))
    val x5050 = x5049 // FixConvert(x5049,TRUE,_64,_0)
    val x5051 = top.argFringe.dramAddress(x4984).name("x5051").ctrl(x5056) // GetDRAMAddress(x4984)
    val x5052 = OpDef(op=FixAdd, inputs=List(x5050, x5051)).name("x5052").ctrl(x5056) // FixAdd(x5050,x5051)
    val x5054_x5053 = x5052 // FixConvert(x5052,TRUE,_64,_0)
    // x5054 = SimpleStruct(ArrayBuffer((offset,x5053), (size,Const(2048)), (isLoad,Const(true))))
    val b5350_b5348 = WriteMem(b5348, x5054_x5053).name("b5350_b5348").ctrl(x5056) // StreamWrite(x5046,x5054,Const(true))
    val b5351_b5349 = WriteMem(b5349, Const(2048)).name("b5351_b5349").ctrl(x5056) // StreamWrite(x5046,x5054,Const(true))
    val x5057 = FringeContainer(x4984,b5348,b5349,x5047).name("x5057").ctrl(x5064) // FringeDenseLoad(x4984,x5046,x5047)
    val x5058 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x5058").ctrl(x5064) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x5059 = CounterChain(List(x5058)).name("x5059").ctrl(x5064) // CounterChainNew(List(x5058))
    val x5063 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5059).name("x5063").ctrl(x5064) // UnrolledForeach(List(Const(true)),x5059,Block(Const(())),List(List(b3192)),List(List(b3193)))
    val b3192 = CounterIter(x5058, None).ctrl(x5063).name("b3192")
    val b3193 = DummyOp().ctrl(x5063).name("b3193")
    val x5060_x5060 = ReadMem(x5047).name("x5060").ctrl(x5063) // ParStreamRead(x5047,List(b3193))
    val x5061_x5061 = x5060_x5060 // x5061 = VectorApply(x5060,0)
    val x5062 = StoreBanks(List(x5006_d0_b0), List(b3192), x5061_x5061).name("x5062").ctrl(x5063) // ParSRAMStore(x5006,List(List(b3192)),List(x5061),List(b3193))
    val x5083 = UnitController(style=StreamPipe, level=OuterControl).name("x5083").ctrl(x5270) // UnitPipe(List(Const(true)),Block(Const(())))
    val b5352 = StreamOut(field="offset").name("b5352").ctrl(x5083) // x5065 = StreamOutNew(BurstCmdBus)
    val b5353 = StreamOut(field="size").name("b5353").ctrl(x5083) // x5065 = StreamOutNew(BurstCmdBus)
    val x5066 = StreamIn(field="data").name("x5066").ctrl(x5083) // x5066 = StreamInNew(BurstDataBus())
    val x5075 = UnitController(style=SeqPipe, level=InnerControl).name("x5075").ctrl(x5083) // UnitPipe(List(Const(true)),Block(x5074))
    val x5067 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5068 = OpDef(op=FixSla, inputs=List(x5067, Const(2))).name("x5068").ctrl(x5075) // FixLsh(x5067,Const(2))
    val x5069 = x5068 // FixConvert(x5068,TRUE,_64,_0)
    val x5070 = top.argFringe.dramAddress(x4985).name("x5070").ctrl(x5075) // GetDRAMAddress(x4985)
    val x5071 = OpDef(op=FixAdd, inputs=List(x5069, x5070)).name("x5071").ctrl(x5075) // FixAdd(x5069,x5070)
    val x5073_x5072 = x5071 // FixConvert(x5071,TRUE,_64,_0)
    // x5073 = SimpleStruct(ArrayBuffer((offset,x5072), (size,Const(2048)), (isLoad,Const(true))))
    val b5354_b5352 = WriteMem(b5352, x5073_x5072).name("b5354_b5352").ctrl(x5075) // StreamWrite(x5065,x5073,Const(true))
    val b5355_b5353 = WriteMem(b5353, Const(2048)).name("b5355_b5353").ctrl(x5075) // StreamWrite(x5065,x5073,Const(true))
    val x5076 = FringeContainer(x4985,b5352,b5353,x5066).name("x5076").ctrl(x5083) // FringeDenseLoad(x4985,x5065,x5066)
    val x5077 = Counter(min=Const(0), max=Const(512), step=Const(1), par=1).name("x5077").ctrl(x5083) // CounterNew(Const(0),Const(512),Const(1),Const(1))
    val x5078 = CounterChain(List(x5077)).name("x5078").ctrl(x5083) // CounterChainNew(List(x5077))
    val x5082 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5078).name("x5082").ctrl(x5083) // UnrolledForeach(List(Const(true)),x5078,Block(Const(())),List(List(b3213)),List(List(b3214)))
    val b3213 = CounterIter(x5077, None).ctrl(x5082).name("b3213")
    val b3214 = DummyOp().ctrl(x5082).name("b3214")
    val x5079_x5079 = ReadMem(x5066).name("x5079").ctrl(x5082) // ParStreamRead(x5066,List(b3214))
    val x5080_x5080 = x5079_x5079 // x5080 = VectorApply(x5079,0)
    val x5081 = StoreBanks(List(x5007_d0_b0), List(b3213), x5080_x5080).name("x5081").ctrl(x5082) // ParSRAMStore(x5007,List(List(b3213)),List(x5080),List(b3214))
    val x5084_d0 = Reg(init=Some(1024)).name("x5084_d0").ctrl(x5270) // x5084 = RegNew(Const(1024))
    isAccum(x5084_d0) = false
    val x5084_d1 = Reg(init=Some(1024)).name("x5084_d1").ctrl(x5270) // x5084 = RegNew(Const(1024))
    isAccum(x5084_d1) = false
    val x5084_d2 = Reg(init=Some(1024)).name("x5084_d2").ctrl(x5270) // x5084 = RegNew(Const(1024))
    isAccum(x5084_d2) = false
    val x5084_d3 = Reg(init=Some(1024)).name("x5084_d3").ctrl(x5270) // x5084 = RegNew(Const(1024))
    isAccum(x5084_d3) = true
    val x5085 = Counter(min=Const(0), max=Const(10), step=Const(1), par=1).name("x5085").ctrl(x5270) // CounterNew(Const(0),Const(10),Const(1),Const(1))
    val x5086 = CounterChain(List(x5085)).name("x5086").ctrl(x5270) // CounterChainNew(List(x5085))
    val x5223 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5086).name("x5223").ctrl(x5270) // UnrolledForeach(List(Const(true)),x5086,Block(Const(())),List(List(b3223)),List(List(b3224)))
    val b3223 = CounterIter(x5085, Some(0)).ctrl(x5223).name("b3223")
    val b3224 = DummyOp().ctrl(x5223).name("b3224")
    val x5087_d0 = Reg(init=Some(1)).name("x5087_d0").ctrl(x5223) // x5087 = RegNew(Const(1))
    isAccum(x5087_d0) = false
    val x5087_d1 = Reg(init=Some(1)).name("x5087_d1").ctrl(x5223) // x5087 = RegNew(Const(1))
    isAccum(x5087_d1) = true
    val x5091 = UnitController(style=SeqPipe, level=InnerControl).name("x5091").ctrl(x5223) // UnitPipe(List(b3224),Block(Const(())))
    val x5088 = ReadMem(x5084_d3).name("x5088").ctrl(x5091) // RegRead(x5084)
    val x5089 = OpDef(op=FixSra, inputs=List(x5088, Const(1))).name("x5089").ctrl(x5091) // FixRsh(x5088,Const(1))
    val x5090_x5084_d0 = WriteMem(x5084_d0, x5089).name("x5090_x5084_d0").ctrl(x5091) // RegWrite(x5084,x5089,b3224)
    val x5090_x5084_d1 = WriteMem(x5084_d1, x5089).name("x5090_x5084_d1").ctrl(x5091) // RegWrite(x5084,x5089,b3224)
    val x5090_x5084_d2 = WriteMem(x5084_d2, x5089).name("x5090_x5084_d2").ctrl(x5091) // RegWrite(x5084,x5089,b3224)
    val x5090_x5084_d3 = WriteMem(x5084_d3, x5089).name("x5090_x5084_d3").ctrl(x5091) // RegWrite(x5084,x5089,b3224)
    val x5092 = Counter(min=Const(0), max=b3223, step=Const(1), par=1).name("x5092").ctrl(x5223) // CounterNew(Const(0),b3223,Const(1),Const(1))
    val x5093 = CounterChain(List(x5092)).name("x5093").ctrl(x5223) // CounterChainNew(List(x5092))
    val x5099 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5093).name("x5099").ctrl(x5223) // UnrolledReduce(List(b3224),x5093,x5087,Block((x5087) => Const(())),List(List(b3232)),List(List(b3233)))
    val b3232 = CounterIter(x5092, None).ctrl(x5099).name("b3232")
    val b3233 = DummyOp().ctrl(x5099).name("b3233")
    val x5094 = OpDef(op=BitAnd, inputs=List(b3233, b3224)).name("x5094").ctrl(x5099) // And(b3233,b3224)
    val x5095 = ReadMem(x5087_d1).name("x5095").ctrl(x5099) // RegRead(x5087)
    val x5096 = OpDef(op=FixEql, inputs=List(b3232, Const(0))).name("x5096").ctrl(x5099) // FixEql(b3232,Const(0))
    val x5097 = ReduceAccumOp(op=FixMul, input=Const(2), accum=x5095).name("x5097").ctrl(x5099) // FixMul(Const(2),x5095)
    val x5098_x5087_d0 = WriteMem(x5087_d0, x5097).name("x5098_x5087_d0").ctrl(x5099) // RegWrite(x5087,x5097,b3224)
    val x5098_x5087_d1 = WriteMem(x5087_d1, x5097).name("x5098_x5087_d1").ctrl(x5099) // RegWrite(x5087,x5097,b3224)
    val x5100 = ReadMem(x5087_d0).name("x5100").ctrl(x5223) // RegRead(x5087)
    val x5101 = Counter(min=Const(0), max=x5100, step=Const(1), par=1).name("x5101").ctrl(x5223) // CounterNew(Const(0),x5100,Const(1),Const(1))
    val x5102 = CounterChain(List(x5101)).name("x5102").ctrl(x5223) // CounterChainNew(List(x5101))
    val x5222 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5102).name("x5222").ctrl(x5223) // UnrolledForeach(List(b3224),x5102,Block(Const(())),List(List(b3243)),List(List(b3244)))
    val b3243 = CounterIter(x5101, Some(0)).ctrl(x5222).name("b3243")
    val b3244 = DummyOp().ctrl(x5222).name("b3244")
    val x5103 = Reg(init=Some(0)).name("x5103").ctrl(x5222) // x5103 = RegNew(Const(0))
    isAccum(x5103) = false
    val x5110 = UnitController(style=SeqPipe, level=InnerControl).name("x5110").ctrl(x5222) // UnitPipe(List(b3244, b3224),Block(Const(())))
    val x5104 = OpDef(op=FixMul, inputs=List(Const(2), b3243)).name("x5104").ctrl(x5110) // FixMul(Const(2),b3243)
    val x5105 = OpDef(op=FixAdd, inputs=List(x5104, Const(1))).name("x5105").ctrl(x5110) // FixAdd(x5104,Const(1))
    val x5106 = ReadMem(x5084_d2).name("x5106").ctrl(x5110) // RegRead(x5084)
    val x5107 = OpDef(op=FixMul, inputs=List(x5106, x5105)).name("x5107").ctrl(x5110) // FixMul(x5106,x5105)
    val x5108 = OpDef(op=BitAnd, inputs=List(b3244, b3224)).name("x5108").ctrl(x5110) // And(b3244,b3224)
    val x5109_x5103 = WriteMem(x5103, x5107).name("x5109_x5103").ctrl(x5110) // RegWrite(x5103,x5107,x5108)
    val x5111 = ReadMem(x5084_d1).name("x5111").ctrl(x5222) // RegRead(x5084)
    val x5112 = Counter(min=Const(0), max=x5111, step=Const(1), par=1).name("x5112").ctrl(x5222) // CounterNew(Const(0),x5111,Const(1),Const(1))
    val x5113 = CounterChain(List(x5112)).name("x5113").ctrl(x5222) // CounterChainNew(List(x5112))
    val x5221 = LoopController(style=SeqPipe, level=OuterControl, cchain=x5113).name("x5221").ctrl(x5222) // UnrolledForeach(List(b3244, b3224),x5113,Block(Const(())),List(List(b3256)),List(List(b3257)))
    val b3256 = CounterIter(x5112, Some(0)).ctrl(x5221).name("b3256")
    val b3257 = DummyOp().ctrl(x5221).name("b3257")
    val x5114_d0 = Reg(init=Some(0)).name("x5114_d0").ctrl(x5221) // x5114 = RegNew(Const(0))
    isAccum(x5114_d0) = false
    val x5114_d1 = Reg(init=Some(0)).name("x5114_d1").ctrl(x5221) // x5114 = RegNew(Const(0))
    isAccum(x5114_d1) = false
    val x5114_d2 = Reg(init=Some(0)).name("x5114_d2").ctrl(x5221) // x5114 = RegNew(Const(0))
    isAccum(x5114_d2) = false
    val x5114_d3 = Reg(init=Some(0)).name("x5114_d3").ctrl(x5221) // x5114 = RegNew(Const(0))
    isAccum(x5114_d3) = false
    val x5115_d0 = Reg(init=Some(0)).name("x5115_d0").ctrl(x5221) // x5115 = RegNew(Const(0))
    isAccum(x5115_d0) = false
    val x5115_d1 = Reg(init=Some(0)).name("x5115_d1").ctrl(x5221) // x5115 = RegNew(Const(0))
    isAccum(x5115_d1) = false
    val x5115_d2 = Reg(init=Some(0)).name("x5115_d2").ctrl(x5221) // x5115 = RegNew(Const(0))
    isAccum(x5115_d2) = false
    val x5115_d3 = Reg(init=Some(0)).name("x5115_d3").ctrl(x5221) // x5115 = RegNew(Const(0))
    isAccum(x5115_d3) = false
    val x5115_d4 = Reg(init=Some(0)).name("x5115_d4").ctrl(x5221) // x5115 = RegNew(Const(0))
    isAccum(x5115_d4) = false
    val x5115_d5 = Reg(init=Some(0)).name("x5115_d5").ctrl(x5221) // x5115 = RegNew(Const(0))
    isAccum(x5115_d5) = false
    val x5116 = Reg(init=Some(0.0)).name("x5116").ctrl(x5221) // x5116 = RegNew(Const(0))
    isAccum(x5116) = false
    val x5129 = UnitController(style=SeqPipe, level=InnerControl).name("x5129").ctrl(x5221) // UnitPipe(List(b3257, b3244, b3224),Block(Const(())))
    val x5117 = ReadMem(x5103).name("x5117").ctrl(x5129) // RegRead(x5103)
    val x5118 = OpDef(op=FixAdd, inputs=List(x5117, b3256)).name("x5118").ctrl(x5129) // FixAdd(x5117,b3256)
    val x5119 = ReadMem(x5084_d0).name("x5119").ctrl(x5129) // RegRead(x5084)
    val x5120 = OpDef(op=BitXor, inputs=List(x5118, x5119)).name("x5120").ctrl(x5129) // FixXor(x5118,x5119)
    val x5121 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5121").ctrl(x5129) // And(b3257,b3244)
    val x5122 = OpDef(op=BitAnd, inputs=List(x5121, b3224)).name("x5122").ctrl(x5129) // And(x5121,b3224)
    val x5123 = LoadBanks(List(x5004_d5_b0), List(x5120)).name("x5123").ctrl(x5129) // SRAMLoad(x5004,ArrayBuffer(Const(1024)),List(x5120),Const(0),x5122)
    val x5124 = LoadBanks(List(x5004_d4_b0), List(x5118)).name("x5124").ctrl(x5129) // SRAMLoad(x5004,ArrayBuffer(Const(1024)),List(x5118),Const(0),x5122)
    val x5125 = OpDef(op=FixAdd, inputs=List(x5123, x5124)).name("x5125").ctrl(x5129) // FixAdd(x5123,x5124)
    val x5126_x5114_d0 = WriteMem(x5114_d0, x5118).name("x5126_x5114_d0").ctrl(x5129) // RegWrite(x5114,x5118,x5122)
    val x5126_x5114_d1 = WriteMem(x5114_d1, x5118).name("x5126_x5114_d1").ctrl(x5129) // RegWrite(x5114,x5118,x5122)
    val x5126_x5114_d2 = WriteMem(x5114_d2, x5118).name("x5126_x5114_d2").ctrl(x5129) // RegWrite(x5114,x5118,x5122)
    val x5126_x5114_d3 = WriteMem(x5114_d3, x5118).name("x5126_x5114_d3").ctrl(x5129) // RegWrite(x5114,x5118,x5122)
    val x5127_x5115_d0 = WriteMem(x5115_d0, x5120).name("x5127_x5115_d0").ctrl(x5129) // RegWrite(x5115,x5120,x5122)
    val x5127_x5115_d5 = WriteMem(x5115_d5, x5120).name("x5127_x5115_d5").ctrl(x5129) // RegWrite(x5115,x5120,x5122)
    val x5127_x5115_d1 = WriteMem(x5115_d1, x5120).name("x5127_x5115_d1").ctrl(x5129) // RegWrite(x5115,x5120,x5122)
    val x5127_x5115_d2 = WriteMem(x5115_d2, x5120).name("x5127_x5115_d2").ctrl(x5129) // RegWrite(x5115,x5120,x5122)
    val x5127_x5115_d3 = WriteMem(x5115_d3, x5120).name("x5127_x5115_d3").ctrl(x5129) // RegWrite(x5115,x5120,x5122)
    val x5127_x5115_d4 = WriteMem(x5115_d4, x5120).name("x5127_x5115_d4").ctrl(x5129) // RegWrite(x5115,x5120,x5122)
    val x5128_x5116 = WriteMem(x5116, x5125).name("x5128_x5116").ctrl(x5129) // RegWrite(x5116,x5125,x5122)
    val x5138 = UnitController(style=SeqPipe, level=InnerControl).name("x5138").ctrl(x5221) // UnitPipe(List(b3257, b3244, b3224),Block(x5137))
    val x5130 = ReadMem(x5115_d5).name("x5130").ctrl(x5138) // RegRead(x5115)
    val x5131 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5131").ctrl(x5138) // And(b3257,b3244)
    val x5132 = OpDef(op=BitAnd, inputs=List(x5131, b3224)).name("x5132").ctrl(x5138) // And(x5131,b3224)
    val x5133 = LoadBanks(List(x5004_d3_b0), List(x5130)).name("x5133").ctrl(x5138) // SRAMLoad(x5004,ArrayBuffer(Const(1024)),List(x5130),Const(0),x5132)
    val x5134 = ReadMem(x5114_d3).name("x5134").ctrl(x5138) // RegRead(x5114)
    val x5135 = LoadBanks(List(x5004_d2_b0), List(x5134)).name("x5135").ctrl(x5138) // SRAMLoad(x5004,ArrayBuffer(Const(1024)),List(x5134),Const(0),x5132)
    val x5136 = OpDef(op=FixSub, inputs=List(x5133, x5135)).name("x5136").ctrl(x5138) // FixSub(x5133,x5135)
    val x5137 = StoreBanks(List(x5004_d0_b0, x5004_d5_b0, x5004_d1_b0, x5004_d2_b0, x5004_d3_b0, x5004_d4_b0), List(x5134), x5136).name("x5137").ctrl(x5138) // SRAMStore(x5004,ArrayBuffer(Const(1024)),List(x5134),Const(0),x5136,x5132)
    val x5144 = UnitController(style=SeqPipe, level=InnerControl).name("x5144").ctrl(x5221) // UnitPipe(List(b3257, b3244, b3224),Block(x5143))
    val x5139 = ReadMem(x5116).name("x5139").ctrl(x5144) // RegRead(x5116)
    val x5140 = ReadMem(x5115_d4).name("x5140").ctrl(x5144) // RegRead(x5115)
    val x5141 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5141").ctrl(x5144) // And(b3257,b3244)
    val x5142 = OpDef(op=BitAnd, inputs=List(x5141, b3224)).name("x5142").ctrl(x5144) // And(x5141,b3224)
    val x5143 = StoreBanks(List(x5004_d0_b0, x5004_d5_b0, x5004_d1_b0, x5004_d2_b0, x5004_d3_b0, x5004_d4_b0), List(x5140), x5139).name("x5143").ctrl(x5144) // SRAMStore(x5004,ArrayBuffer(Const(1024)),List(x5140),Const(0),x5139,x5142)
    val x5145 = Reg(init=Some(0.0)).name("x5145").ctrl(x5221) // x5145 = RegNew(Const(0))
    isAccum(x5145) = false
    val x5154 = UnitController(style=SeqPipe, level=InnerControl).name("x5154").ctrl(x5221) // UnitPipe(List(b3257, b3244, b3224),Block(Const(())))
    val x5146 = ReadMem(x5115_d3).name("x5146").ctrl(x5154) // RegRead(x5115)
    val x5147 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5147").ctrl(x5154) // And(b3257,b3244)
    val x5148 = OpDef(op=BitAnd, inputs=List(x5147, b3224)).name("x5148").ctrl(x5154) // And(x5147,b3224)
    val x5149 = LoadBanks(List(x5005_d5_b0), List(x5146)).name("x5149").ctrl(x5154) // SRAMLoad(x5005,ArrayBuffer(Const(1024)),List(x5146),Const(0),x5148)
    val x5150 = ReadMem(x5114_d2).name("x5150").ctrl(x5154) // RegRead(x5114)
    val x5151 = LoadBanks(List(x5005_d4_b0), List(x5150)).name("x5151").ctrl(x5154) // SRAMLoad(x5005,ArrayBuffer(Const(1024)),List(x5150),Const(0),x5148)
    val x5152 = OpDef(op=FixAdd, inputs=List(x5149, x5151)).name("x5152").ctrl(x5154) // FixAdd(x5149,x5151)
    val x5153_x5145 = WriteMem(x5145, x5152).name("x5153_x5145").ctrl(x5154) // RegWrite(x5145,x5152,x5148)
    val x5163 = UnitController(style=SeqPipe, level=InnerControl).name("x5163").ctrl(x5221) // UnitPipe(List(b3257, b3244, b3224),Block(x5162))
    val x5155 = ReadMem(x5115_d2).name("x5155").ctrl(x5163) // RegRead(x5115)
    val x5156 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5156").ctrl(x5163) // And(b3257,b3244)
    val x5157 = OpDef(op=BitAnd, inputs=List(x5156, b3224)).name("x5157").ctrl(x5163) // And(x5156,b3224)
    val x5158 = LoadBanks(List(x5005_d3_b0), List(x5155)).name("x5158").ctrl(x5163) // SRAMLoad(x5005,ArrayBuffer(Const(1024)),List(x5155),Const(0),x5157)
    val x5159 = ReadMem(x5114_d1).name("x5159").ctrl(x5163) // RegRead(x5114)
    val x5160 = LoadBanks(List(x5005_d2_b0), List(x5159)).name("x5160").ctrl(x5163) // SRAMLoad(x5005,ArrayBuffer(Const(1024)),List(x5159),Const(0),x5157)
    val x5161 = OpDef(op=FixSub, inputs=List(x5158, x5160)).name("x5161").ctrl(x5163) // FixSub(x5158,x5160)
    val x5162 = StoreBanks(List(x5005_d0_b0, x5005_d5_b0, x5005_d1_b0, x5005_d2_b0, x5005_d3_b0, x5005_d4_b0), List(x5159), x5161).name("x5162").ctrl(x5163) // SRAMStore(x5005,ArrayBuffer(Const(1024)),List(x5159),Const(0),x5161,x5157)
    val x5169 = UnitController(style=SeqPipe, level=InnerControl).name("x5169").ctrl(x5221) // UnitPipe(List(b3257, b3244, b3224),Block(x5168))
    val x5164 = ReadMem(x5145).name("x5164").ctrl(x5169) // RegRead(x5145)
    val x5165 = ReadMem(x5115_d1).name("x5165").ctrl(x5169) // RegRead(x5115)
    val x5166 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5166").ctrl(x5169) // And(b3257,b3244)
    val x5167 = OpDef(op=BitAnd, inputs=List(x5166, b3224)).name("x5167").ctrl(x5169) // And(x5166,b3224)
    val x5168 = StoreBanks(List(x5005_d0_b0, x5005_d5_b0, x5005_d1_b0, x5005_d2_b0, x5005_d3_b0, x5005_d4_b0), List(x5165), x5164).name("x5168").ctrl(x5169) // SRAMStore(x5005,ArrayBuffer(Const(1024)),List(x5165),Const(0),x5164,x5167)
    val x5170_d0 = Reg(init=Some(1)).name("x5170_d0").ctrl(x5221) // x5170 = RegNew(Const(1))
    isAccum(x5170_d0) = false
    val x5170_d1 = Reg(init=Some(1)).name("x5170_d1").ctrl(x5221) // x5170 = RegNew(Const(1))
    isAccum(x5170_d1) = true
    val x5171 = Counter(min=Const(0), max=b3223, step=Const(1), par=1).name("x5171").ctrl(x5221) // CounterNew(Const(0),b3223,Const(1),Const(1))
    val x5172 = CounterChain(List(x5171)).name("x5172").ctrl(x5221) // CounterChainNew(List(x5171))
    val x5182 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5172).name("x5182").ctrl(x5221) // UnrolledReduce(List(b3257, b3244, b3224),x5172,x5170,Block((x5170) => Const(())),List(List(b3317)),List(List(b3318)))
    val b3317 = CounterIter(x5171, None).ctrl(x5182).name("b3317")
    val b3318 = DummyOp().ctrl(x5182).name("b3318")
    val x5173 = OpDef(op=BitAnd, inputs=List(b3318, b3257)).name("x5173").ctrl(x5182) // And(b3318,b3257)
    val x5174 = OpDef(op=BitAnd, inputs=List(b3244, b3224)).name("x5174").ctrl(x5182) // And(b3244,b3224)
    val x5175 = OpDef(op=BitAnd, inputs=List(x5173, x5174)).name("x5175").ctrl(x5182) // And(x5173,x5174)
    val x5176 = ReadMem(x5170_d1).name("x5176").ctrl(x5182) // RegRead(x5170)
    val x5177 = OpDef(op=FixEql, inputs=List(b3317, Const(0))).name("x5177").ctrl(x5182) // FixEql(b3317,Const(0))
    val x5178 = ReduceAccumOp(op=FixMul, input=Const(2), accum=x5176).name("x5178").ctrl(x5182) // FixMul(Const(2),x5176)
    val x5179 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5179").ctrl(x5182) // And(b3257,b3244)
    val x5180 = OpDef(op=BitAnd, inputs=List(x5179, b3224)).name("x5180").ctrl(x5182) // And(x5179,b3224)
    val x5181_x5170_d0 = WriteMem(x5170_d0, x5178).name("x5181_x5170_d0").ctrl(x5182) // RegWrite(x5170,x5178,x5180)
    val x5181_x5170_d1 = WriteMem(x5170_d1, x5178).name("x5181_x5170_d1").ctrl(x5182) // RegWrite(x5170,x5178,x5180)
    val x5183 = Reg(init=Some(0)).name("x5183").ctrl(x5221) // x5183 = RegNew(Const(0))
    isAccum(x5183) = false
    val x5184_d0 = Reg(init=Some(false)).name("x5184_d0").ctrl(x5221) // x5184 = RegNew(Const(false))
    isAccum(x5184_d0) = false
    val x5184_d1 = Reg(init=Some(false)).name("x5184_d1").ctrl(x5221) // x5184 = RegNew(Const(false))
    isAccum(x5184_d1) = false
    val x5185 = Reg(init=Some(false)).name("x5185").ctrl(x5221) // x5185 = RegNew(Const(false))
    isAccum(x5185) = false
    val x5197 = UnitController(style=SeqPipe, level=InnerControl).name("x5197").ctrl(x5221) // UnitPipe(List(b3257, b3244, b3224),Block(Const(())))
    val x5186 = ReadMem(x5170_d0).name("x5186").ctrl(x5197) // RegRead(x5170)
    val x5187 = ReadMem(x5115_d0).name("x5187").ctrl(x5197) // RegRead(x5115)
    val x5188 = OpDef(op=FixMul, inputs=List(x5186, x5187)).name("x5188").ctrl(x5197) // FixMul(x5186,x5187)
    val x5189 = OpDef(op=BitAnd, inputs=List(x5188, Const(1023))).name("x5189").ctrl(x5197) // FixAnd(x5188,Const(1023))
    val x5190 = OpDef(op=FixLt, inputs=List(Const(0), x5189)).name("x5190").ctrl(x5197) // FixLt(Const(0),x5189)
    val x5191 = OpDef(op=BitNot, inputs=List(x5190)).name("x5191").ctrl(x5197) // Not(x5190)
    val x5192 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5192").ctrl(x5197) // And(b3257,b3244)
    val x5193 = OpDef(op=BitAnd, inputs=List(x5192, b3224)).name("x5193").ctrl(x5197) // And(x5192,b3224)
    val x5194_x5183 = WriteMem(x5183, x5189).name("x5194_x5183").ctrl(x5197) // RegWrite(x5183,x5189,x5193)
    val x5195_x5184_d0 = WriteMem(x5184_d0, x5190).name("x5195_x5184_d0").ctrl(x5197) // RegWrite(x5184,x5190,x5193)
    val x5195_x5184_d1 = WriteMem(x5184_d1, x5190).name("x5195_x5184_d1").ctrl(x5197) // RegWrite(x5184,x5190,x5193)
    val x5196_x5185 = WriteMem(x5185, x5191).name("x5196_x5185").ctrl(x5197) // RegWrite(x5185,x5191,x5193)
    val x5198 = ReadMem(x5185).name("x5198").ctrl(x5221) // RegRead(x5185)
    val x5199 = ReadMem(x5184_d1).name("x5199").ctrl(x5221) // RegRead(x5184)
    val x5220 = UnitController(style=ForkSwitch, level=OuterControl).name("x5220").ctrl(x5221) // //TODO Switch(Block(x5219),List(x5199, x5198),List(x5218, x5219))
    val x5218 = UnitController(style=SeqPipe, level=InnerControl).name("x5218").ctrl(x5220) // //TODO SwitchCase(Block(x5217))
    val x5200 = ReadMem(x5184_d0).name("x5200").ctrl(x5218) // RegRead(x5184)
    val x5201 = ReadMem(x5183).name("x5201").ctrl(x5218) // RegRead(x5183)
    val x5202 = OpDef(op=BitAnd, inputs=List(b3257, b3244)).name("x5202").ctrl(x5218) // And(b3257,b3244)
    val x5203 = OpDef(op=BitAnd, inputs=List(x5202, b3224)).name("x5203").ctrl(x5218) // And(x5202,b3224)
    val x5204 = OpDef(op=BitAnd, inputs=List(x5200, x5203)).name("x5204").ctrl(x5218) // And(x5200,x5203)
    val x5205 = LoadBanks(List(x5006_d0_b0), List(x5201)).name("x5205").ctrl(x5218) // SRAMLoad(x5006,ArrayBuffer(Const(512)),List(x5201),Const(0),x5204)
    val x5206 = ReadMem(x5114_d0).name("x5206").ctrl(x5218) // RegRead(x5114)
    val x5207 = LoadBanks(List(x5004_d1_b0), List(x5206)).name("x5207").ctrl(x5218) // SRAMLoad(x5004,ArrayBuffer(Const(1024)),List(x5206),Const(0),x5204)
    val x5208 = LoadBanks(List(x5007_d0_b0), List(x5201)).name("x5208").ctrl(x5218) // SRAMLoad(x5007,ArrayBuffer(Const(512)),List(x5201),Const(0),x5204)
    val x5209 = LoadBanks(List(x5005_d1_b0), List(x5206)).name("x5209").ctrl(x5218) // SRAMLoad(x5005,ArrayBuffer(Const(1024)),List(x5206),Const(0),x5204)
    val x5210 = OpDef(op=FixMul, inputs=List(x5205, x5209)).name("x5210").ctrl(x5218) // FixMul(x5205,x5209)
    val x5211 = OpDef(op=FixMul, inputs=List(x5208, x5207)).name("x5211").ctrl(x5218) // FixMul(x5208,x5207)
    val x5212 = OpDef(op=FixAdd, inputs=List(x5210, x5211)).name("x5212").ctrl(x5218) // FixAdd(x5210,x5211)
    val x5213 = StoreBanks(List(x5005_d0_b0, x5005_d5_b0, x5005_d1_b0, x5005_d2_b0, x5005_d3_b0, x5005_d4_b0), List(x5206), x5212).name("x5213").ctrl(x5218) // SRAMStore(x5005,ArrayBuffer(Const(1024)),List(x5206),Const(0),x5212,x5204)
    val x5214 = OpDef(op=FixMul, inputs=List(x5205, x5207)).name("x5214").ctrl(x5218) // FixMul(x5205,x5207)
    val x5215 = OpDef(op=FixMul, inputs=List(x5208, x5209)).name("x5215").ctrl(x5218) // FixMul(x5208,x5209)
    val x5216 = OpDef(op=FixSub, inputs=List(x5214, x5215)).name("x5216").ctrl(x5218) // FixSub(x5214,x5215)
    val x5217 = StoreBanks(List(x5004_d0_b0, x5004_d5_b0, x5004_d1_b0, x5004_d2_b0, x5004_d3_b0, x5004_d4_b0), List(x5206), x5216).name("x5217").ctrl(x5218) // SRAMStore(x5004,ArrayBuffer(Const(1024)),List(x5206),Const(0),x5216,x5204)
    val x5219 = UnitController(style=SeqPipe, level=InnerControl).name("x5219").ctrl(x5220) // //TODO SwitchCase(Block(Const(())))
    val x5246 = UnitController(style=StreamPipe, level=OuterControl).name("x5246").ctrl(x5270) // UnitPipe(List(Const(true)),Block(Const(())))
    val b5356 = StreamOut(field="offset").name("b5356").ctrl(x5246) // x5224 = StreamOutNew(BurstCmdBus)
    val b5357 = StreamOut(field="size").name("b5357").ctrl(x5246) // x5224 = StreamOutNew(BurstCmdBus)
    val x5225 = StreamOut(field="data").name("x5225").ctrl(x5246) // x5225 = StreamOutNew(BurstFullDataBus())
    val x5226 = StreamIn(field="ack").name("x5226").ctrl(x5246) // x5226 = StreamInNew(BurstAckBus)
    val x5235 = UnitController(style=SeqPipe, level=InnerControl).name("x5235").ctrl(x5246) // UnitPipe(List(Const(true)),Block(x5234))
    val x5227 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5228 = OpDef(op=FixSla, inputs=List(x5227, Const(2))).name("x5228").ctrl(x5235) // FixLsh(x5227,Const(2))
    val x5229 = x5228 // FixConvert(x5228,TRUE,_64,_0)
    val x5230 = top.argFringe.dramAddress(x4986).name("x5230").ctrl(x5235) // GetDRAMAddress(x4986)
    val x5231 = OpDef(op=FixAdd, inputs=List(x5229, x5230)).name("x5231").ctrl(x5235) // FixAdd(x5229,x5230)
    val x5233_x5232 = x5231 // FixConvert(x5231,TRUE,_64,_0)
    // x5233 = SimpleStruct(ArrayBuffer((offset,x5232), (size,Const(4096)), (isLoad,Const(false))))
    val b5358_b5356 = WriteMem(b5356, x5233_x5232).name("b5358_b5356").ctrl(x5235) // StreamWrite(x5224,x5233,Const(true))
    val b5359_b5357 = WriteMem(b5357, Const(4096)).name("b5359_b5357").ctrl(x5235) // StreamWrite(x5224,x5233,Const(true))
    val x5236 = Counter(min=Const(0), max=Const(1024), step=Const(1), par=1).name("x5236").ctrl(x5246) // CounterNew(Const(0),Const(1024),Const(1),Const(1))
    val x5237 = CounterChain(List(x5236)).name("x5237").ctrl(x5246) // CounterChainNew(List(x5236))
    val x5242 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5237).name("x5242").ctrl(x5246) // UnrolledForeach(List(Const(true)),x5237,Block(Const(())),List(List(b3384)),List(List(b3385)))
    val b3384 = CounterIter(x5236, None).ctrl(x5242).name("b3384")
    val b3385 = DummyOp().ctrl(x5242).name("b3385")
    val x5238 = LoadBanks(List(x5004_d0_b0), List(b3384)).name("x5238").ctrl(x5242) // ParSRAMLoad(x5004,List(List(b3384)),List(b3385))
    val x5240_x5239 = x5238 // x5239 = VectorApply(x5238,0)
    // x5240 = SimpleStruct(ArrayBuffer((_1,x5239), (_2,Const(true))))
    val x5241_x5225 = WriteMem(x5225, x5240_x5239).name("x5241_x5225").ctrl(x5242) // ParStreamWrite(x5225,List(x5240),List(b3385))
    val x5243 = FringeContainer(x4986,b5356,b5357,x5225,x5226).name("x5243").ctrl(x5246) // FringeDenseStore(x4986,x5224,x5225,x5226)
    val x5245 = UnitController(style=SeqPipe, level=InnerControl).name("x5245").ctrl(x5246) // UnitPipe(List(Const(true)),Block(Const(())))
    val x5244_x5244 = ReadMem(x5226).name("x5244").ctrl(x5245) // StreamRead(x5226,Const(true))
    val x5269 = UnitController(style=StreamPipe, level=OuterControl).name("x5269").ctrl(x5270) // UnitPipe(List(Const(true)),Block(Const(())))
    val b5360 = StreamOut(field="offset").name("b5360").ctrl(x5269) // x5247 = StreamOutNew(BurstCmdBus)
    val b5361 = StreamOut(field="size").name("b5361").ctrl(x5269) // x5247 = StreamOutNew(BurstCmdBus)
    val x5248 = StreamOut(field="data").name("x5248").ctrl(x5269) // x5248 = StreamOutNew(BurstFullDataBus())
    val x5249 = StreamIn(field="ack").name("x5249").ctrl(x5269) // x5249 = StreamInNew(BurstAckBus)
    val x5258 = UnitController(style=SeqPipe, level=InnerControl).name("x5258").ctrl(x5269) // UnitPipe(List(Const(true)),Block(x5257))
    val x5250 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x5251 = OpDef(op=FixSla, inputs=List(x5250, Const(2))).name("x5251").ctrl(x5258) // FixLsh(x5250,Const(2))
    val x5252 = x5251 // FixConvert(x5251,TRUE,_64,_0)
    val x5253 = top.argFringe.dramAddress(x4987).name("x5253").ctrl(x5258) // GetDRAMAddress(x4987)
    val x5254 = OpDef(op=FixAdd, inputs=List(x5252, x5253)).name("x5254").ctrl(x5258) // FixAdd(x5252,x5253)
    val x5256_x5255 = x5254 // FixConvert(x5254,TRUE,_64,_0)
    // x5256 = SimpleStruct(ArrayBuffer((offset,x5255), (size,Const(4096)), (isLoad,Const(false))))
    val b5362_b5360 = WriteMem(b5360, x5256_x5255).name("b5362_b5360").ctrl(x5258) // StreamWrite(x5247,x5256,Const(true))
    val b5363_b5361 = WriteMem(b5361, Const(4096)).name("b5363_b5361").ctrl(x5258) // StreamWrite(x5247,x5256,Const(true))
    val x5259 = Counter(min=Const(0), max=Const(1024), step=Const(1), par=1).name("x5259").ctrl(x5269) // CounterNew(Const(0),Const(1024),Const(1),Const(1))
    val x5260 = CounterChain(List(x5259)).name("x5260").ctrl(x5269) // CounterChainNew(List(x5259))
    val x5265 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5260).name("x5265").ctrl(x5269) // UnrolledForeach(List(Const(true)),x5260,Block(Const(())),List(List(b3409)),List(List(b3410)))
    val b3409 = CounterIter(x5259, None).ctrl(x5265).name("b3409")
    val b3410 = DummyOp().ctrl(x5265).name("b3410")
    val x5261 = LoadBanks(List(x5005_d0_b0), List(b3409)).name("x5261").ctrl(x5265) // ParSRAMLoad(x5005,List(List(b3409)),List(b3410))
    val x5263_x5262 = x5261 // x5262 = VectorApply(x5261,0)
    // x5263 = SimpleStruct(ArrayBuffer((_1,x5262), (_2,Const(true))))
    val x5264_x5248 = WriteMem(x5248, x5263_x5262).name("x5264_x5248").ctrl(x5265) // ParStreamWrite(x5248,List(x5263),List(b3410))
    val x5266 = FringeContainer(x4987,b5360,b5361,x5248,x5249).name("x5266").ctrl(x5269) // FringeDenseStore(x4987,x5247,x5248,x5249)
    val x5268 = UnitController(style=SeqPipe, level=InnerControl).name("x5268").ctrl(x5269) // UnitPipe(List(Const(true)),Block(Const(())))
    val x5267_x5267 = ReadMem(x5249).name("x5267").ctrl(x5268) // StreamRead(x5249,Const(true))
    
  }
}
