import pir._
import pir.node._
import arch._
import pirc.enums._

object AES extends PIRApp {
  def main(top:Top) = {
    val x5951 = top.argIn(init=0).name("x5951").ctrl(top) // ArgInNew(Const(0))
    val x5953 = DRAM().name("x5953").ctrl(top) // x5953 = DRAMNew(ArrayBuffer(Const(16)),Const(0))
    val x5954 = DRAM().name("x5954").ctrl(top) // x5954 = DRAMNew(ArrayBuffer(Const(32)),Const(0))
    val x5955 = DRAM().name("x5955").ctrl(top) // x5955 = DRAMNew(ArrayBuffer(Const(256)),Const(0))
    val x5956 = LoadDef(List(x5951), None).name("x5956").ctrl(top) // RegRead(x5951)
    val x5957 = DRAM().name("x5957").ctrl(top) // x5957 = DRAMNew(ArrayBuffer(x5956),Const(0))
    val x6364 = UnitController(style=SeqPipe, level=OuterControl).name("x6364").ctrl(top) // Hwblock(Block(Const(())),false)
    val x5961_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x5961_d0_b0").ctrl(x6364) // x5961 = SRAMNew(ArrayBuffer(Const(16)))
    val x5962_d0 = RegFile(sizes=List(4, 4), inits=None).name("x5962_d0").ctrl(x6364) // x5962 = RegFileNew(ArrayBuffer(Const(4), Const(4)),None)
    val x5962_d1 = RegFile(sizes=List(4, 4), inits=None).name("x5962_d1").ctrl(x6364) // x5962 = RegFileNew(ArrayBuffer(Const(4), Const(4)),None)
    val x5962_d2 = RegFile(sizes=List(4, 4), inits=None).name("x5962_d2").ctrl(x6364) // x5962 = RegFileNew(ArrayBuffer(Const(4), Const(4)),None)
    val x5962_d3 = RegFile(sizes=List(4, 4), inits=None).name("x5962_d3").ctrl(x6364) // x5962 = RegFileNew(ArrayBuffer(Const(4), Const(4)),None)
    val x5962_d4 = RegFile(sizes=List(4, 4), inits=None).name("x5962_d4").ctrl(x6364) // x5962 = RegFileNew(ArrayBuffer(Const(4), Const(4)),None)
    val x5963_d0_b0 = SRAM(size=16, banking=Strided(banks=16, stride=1)).name("x5963_d0_b0").ctrl(x6364) // x5963 = SRAMNew(ArrayBuffer(Const(256)))
    val x5963_d1_b0 = SRAM(size=16, banking=Strided(banks=16, stride=1)).name("x5963_d1_b0").ctrl(x6364) // x5963 = SRAMNew(ArrayBuffer(Const(256)))
    val x5963_d2_b0 = SRAM(size=16, banking=Strided(banks=16, stride=1)).name("x5963_d2_b0").ctrl(x6364) // x5963 = SRAMNew(ArrayBuffer(Const(256)))
    val x5964_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d0_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d1_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d1_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d2_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d2_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d3_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d3_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d4_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d4_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d5_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d5_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d6_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d6_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d7_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d7_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d8_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d8_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5964_d9_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x5964_d9_b0").ctrl(x6364) // x5964 = SRAMNew(ArrayBuffer(Const(32)))
    val x5965_d0 = Reg(init=1).name("x5965_d0").ctrl(x6364) // x5965 = RegNew(Const(1))
    val x5965_d1 = Reg(init=1).name("x5965_d1").ctrl(x6364) // x5965 = RegNew(Const(1))
    val x5983 = UnitController(style=StreamPipe, level=OuterControl).name("x5983").ctrl(x6364) // UnitPipe(List(Const(true)),Block(Const(())))
    val b6388 = StreamOut(field="offset").name("b6388").ctrl(x5983) // x5966 = StreamOutNew(BurstCmdBus)
    val b6389 = StreamOut(field="size").name("b6389").ctrl(x5983) // x5966 = StreamOutNew(BurstCmdBus)
    val b6390 = StreamIn(field="data").name("b6390").ctrl(x5983) // x5967 = StreamInNew(BurstDataBus())
    val x5975 = UnitController(style=SeqPipe, level=InnerControl).name("x5975").ctrl(x5983) // UnitPipe(List(Const(true)),Block(x5974))
    val x5968 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x5975))).name("x5968").ctrl(x5975) // FixConvert(Const(0),TRUE,_32,_0)
    val x5969 = OpDef(op=FixConvert, inputs=List(x5968)).name("x5969").ctrl(x5975) // FixConvert(x5968,TRUE,_64,_0)
    val x5970 = top.dramAddress(x5955).name("x5970").ctrl(x5975) // GetDRAMAddress(x5955)
    val x5971 = OpDef(op=FixAdd, inputs=List(x5969, x5970)).name("x5971").ctrl(x5975) // FixAdd(x5969,x5970)
    val x5972 = OpDef(op=FixConvert, inputs=List(x5971)).name("x5972").ctrl(x5975) // FixConvert(x5971,TRUE,_64,_0)
    // x5973 = SimpleStruct(ArrayBuffer((offset,x5972), (size,Const(256)), (isLoad,Const(true))))
    val b6391 = StoreDef(List(b6388), None, x5972).name("b6391").ctrl(x5975) // StreamWrite(x5966,x5973,Const(true))
    val b6392 = StoreDef(List(b6389), None, Const(256)).name("b6392").ctrl(x5975) // StreamWrite(x5966,x5973,Const(true))
    val x5976 = FringeContainer(x5955,b6388,b6389,b6390).name("x5976").ctrl(x5983) // FringeDenseLoad(x5955,x5966,x5967)
    val x5977 = Counter(min=Const(0).ctrl(x5983), max=Const(256), step=Const(1).ctrl(x5983), par=16).name("x5977").ctrl(x5983) // CounterNew(Const(0),Const(256),Const(1),Const(16))
    val x5978 = CounterChain(List(x5977)).name("x5978").ctrl(x5983) // CounterChainNew(List(x5977))
    val x5982 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5978).name("x5982").ctrl(x5983) // UnrolledForeach(List(Const(true)),x5978,Block(Const(())),List(List(b3732)),List(List(b3733)))
    val b3732 = IterDef(x5977, None).ctrl(x5982).name("b3732")
    val b3733 = DummyDef().ctrl(x5982).name("b3733")
    val b6393 = LoadDef(List(b6390), None).name("b6393").ctrl(x5982) // ParStreamRead(x5967,List(b3733))
    val b6394 = b6393 // x5980 = VectorApply(x5979,0)
    val x5981 = StoreDef(List(x5963_d0_b0, x5963_d1_b0, x5963_d2_b0), Some(List(b3732)), b6394).name("x5981").ctrl(x5982) // ParSRAMStore(x5963,List(List(b3732)),List(x5980),List(b3733))
    val x5984 = LoadDef(List(x5951), None).name("x5984").ctrl(x6364) // RegRead(x5951)
    val x5985 = Counter(min=Const(0).ctrl(x6364), max=x5984, step=Const(16), par=1).name("x5985").ctrl(x6364) // CounterNew(Const(0),x5984,Const(16),Const(1))
    val x5986 = CounterChain(List(x5985)).name("x5986").ctrl(x6364) // CounterChainNew(List(x5985))
    val x6363 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5986).name("x6363").ctrl(x6364) // UnrolledForeach(List(Const(true)),x5986,Block(Const(())),List(List(b3742)),List(List(b3743)))
    val b3742 = IterDef(x5985, Some(0)).ctrl(x6363).name("b3742")
    val b3743 = DummyDef().ctrl(x6363).name("b3743")
    val x6005 = UnitController(style=StreamPipe, level=OuterControl).name("x6005").ctrl(x6363) // UnitPipe(List(b3743),Block(Const(())))
    val b6395 = StreamOut(field="offset").name("b6395").ctrl(x6005) // x5987 = StreamOutNew(BurstCmdBus)
    val b6396 = StreamOut(field="size").name("b6396").ctrl(x6005) // x5987 = StreamOutNew(BurstCmdBus)
    val b6397 = StreamIn(field="data").name("b6397").ctrl(x6005) // x5988 = StreamInNew(BurstDataBus())
    val x5996 = UnitController(style=SeqPipe, level=InnerControl).name("x5996").ctrl(x6005) // UnitPipe(List(b3743),Block(x5995))
    val x5989 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x5996))).name("x5989").ctrl(x5996) // FixConvert(Const(0),TRUE,_32,_0)
    val x5990 = OpDef(op=FixConvert, inputs=List(x5989)).name("x5990").ctrl(x5996) // FixConvert(x5989,TRUE,_64,_0)
    val x5991 = top.dramAddress(x5953).name("x5991").ctrl(x5996) // GetDRAMAddress(x5953)
    val x5992 = OpDef(op=FixAdd, inputs=List(x5990, x5991)).name("x5992").ctrl(x5996) // FixAdd(x5990,x5991)
    val x5993 = OpDef(op=FixConvert, inputs=List(x5992)).name("x5993").ctrl(x5996) // FixConvert(x5992,TRUE,_64,_0)
    // x5994 = SimpleStruct(ArrayBuffer((offset,x5993), (size,Const(16)), (isLoad,Const(true))))
    val b6398 = StoreDef(List(b6395), None, x5993).name("b6398").ctrl(x5996) // StreamWrite(x5987,x5994,b3743)
    val b6399 = StoreDef(List(b6396), None, Const(16)).name("b6399").ctrl(x5996) // StreamWrite(x5987,x5994,b3743)
    val x5997 = FringeContainer(x5953,b6395,b6396,b6397).name("x5997").ctrl(x6005) // FringeDenseLoad(x5953,x5987,x5988)
    val x5998 = Counter(min=Const(0).ctrl(x6005), max=Const(16), step=Const(1).ctrl(x6005), par=16).name("x5998").ctrl(x6005) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x5999 = CounterChain(List(x5998)).name("x5999").ctrl(x6005) // CounterChainNew(List(x5998))
    val x6004 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5999).name("x6004").ctrl(x6005) // UnrolledForeach(List(b3743),x5999,Block(Const(())),List(List(b3757)),List(List(b3758)))
    val b3757 = IterDef(x5998, None).ctrl(x6004).name("b3757")
    val b3758 = DummyDef().ctrl(x6004).name("b3758")
    val x6000 = OpDef(op=BitAnd, inputs=List(b3758, b3743)).name("x6000").ctrl(x6004) // And(b3758,b3743)
    val b6400 = LoadDef(List(b6397), None).name("b6400").ctrl(x6004) // ParStreamRead(x5988,List(x6000))
    val b6401 = b6400 // x6002 = VectorApply(x6001,0)
    val x6003 = StoreDef(List(x5961_d0_b0), Some(List(b3757)), b6401).name("x6003").ctrl(x6004) // ParSRAMStore(x5961,List(List(b3757)),List(x6002),List(x6000))
    val x6024 = UnitController(style=StreamPipe, level=OuterControl).name("x6024").ctrl(x6363) // UnitPipe(List(b3743),Block(Const(())))
    val b6402 = StreamOut(field="offset").name("b6402").ctrl(x6024) // x6006 = StreamOutNew(BurstCmdBus)
    val b6403 = StreamOut(field="size").name("b6403").ctrl(x6024) // x6006 = StreamOutNew(BurstCmdBus)
    val b6404 = StreamIn(field="data").name("b6404").ctrl(x6024) // x6007 = StreamInNew(BurstDataBus())
    val x6015 = UnitController(style=SeqPipe, level=InnerControl).name("x6015").ctrl(x6024) // UnitPipe(List(b3743),Block(x6014))
    val x6008 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x6015))).name("x6008").ctrl(x6015) // FixConvert(Const(0),TRUE,_32,_0)
    val x6009 = OpDef(op=FixConvert, inputs=List(x6008)).name("x6009").ctrl(x6015) // FixConvert(x6008,TRUE,_64,_0)
    val x6010 = top.dramAddress(x5954).name("x6010").ctrl(x6015) // GetDRAMAddress(x5954)
    val x6011 = OpDef(op=FixAdd, inputs=List(x6009, x6010)).name("x6011").ctrl(x6015) // FixAdd(x6009,x6010)
    val x6012 = OpDef(op=FixConvert, inputs=List(x6011)).name("x6012").ctrl(x6015) // FixConvert(x6011,TRUE,_64,_0)
    // x6013 = SimpleStruct(ArrayBuffer((offset,x6012), (size,Const(32)), (isLoad,Const(true))))
    val b6405 = StoreDef(List(b6402), None, x6012).name("b6405").ctrl(x6015) // StreamWrite(x6006,x6013,b3743)
    val b6406 = StoreDef(List(b6403), None, Const(32)).name("b6406").ctrl(x6015) // StreamWrite(x6006,x6013,b3743)
    val x6016 = FringeContainer(x5954,b6402,b6403,b6404).name("x6016").ctrl(x6024) // FringeDenseLoad(x5954,x6006,x6007)
    val x6017 = Counter(min=Const(0).ctrl(x6024), max=Const(32), step=Const(1).ctrl(x6024), par=16).name("x6017").ctrl(x6024) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x6018 = CounterChain(List(x6017)).name("x6018").ctrl(x6024) // CounterChainNew(List(x6017))
    val x6023 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6018).name("x6023").ctrl(x6024) // UnrolledForeach(List(b3743),x6018,Block(Const(())),List(List(b3778)),List(List(b3779)))
    val b3778 = IterDef(x6017, None).ctrl(x6023).name("b3778")
    val b3779 = DummyDef().ctrl(x6023).name("b3779")
    val x6019 = OpDef(op=BitAnd, inputs=List(b3779, b3743)).name("x6019").ctrl(x6023) // And(b3779,b3743)
    val b6407 = LoadDef(List(b6404), None).name("b6407").ctrl(x6023) // ParStreamRead(x6007,List(x6019))
    val b6408 = b6407 // x6021 = VectorApply(x6020,0)
    val x6022 = StoreDef(List(x5964_d0_b0, x5964_d5_b0, x5964_d1_b0, x5964_d6_b0, x5964_d9_b0, x5964_d2_b0, x5964_d7_b0, x5964_d3_b0, x5964_d8_b0, x5964_d4_b0), Some(List(b3778)), b6408).name("x6022").ctrl(x6023) // ParSRAMStore(x5964,List(List(b3778)),List(x6021),List(x6019))
    val x6026 = UnitController(style=SeqPipe, level=InnerControl).name("x6026").ctrl(x6363) // UnitPipe(List(b3743),Block(Const(())))
    val x6025 = StoreDef(List(x5965_d0, x5965_d1), None, Const(1)).name("x6025").ctrl(x6026) // RegWrite(x5965,Const(1),b3743)
    val x6027 = Counter(min=Const(0).ctrl(x6363), max=Const(4).ctrl(x6363), step=Const(1).ctrl(x6363), par=1).name("x6027").ctrl(x6363) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6028 = CounterChain(List(x6027)).name("x6028").ctrl(x6363) // CounterChainNew(List(x6027))
    val x6041 = LoopController(style=SeqPipe, level=OuterControl, cchain=x6028).name("x6041").ctrl(x6363) // UnrolledForeach(List(b3743),x6028,Block(Const(())),List(List(b3790)),List(List(b3791)))
    val b3790 = IterDef(x6027, Some(0)).ctrl(x6041).name("b3790")
    val b3791 = DummyDef().ctrl(x6041).name("b3791")
    val x6029 = Counter(min=Const(0).ctrl(x6041), max=Const(4).ctrl(x6041), step=Const(1).ctrl(x6041), par=1).name("x6029").ctrl(x6041) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6030 = CounterChain(List(x6029)).name("x6030").ctrl(x6041) // CounterChainNew(List(x6029))
    val x6040 = LoopController(style=SeqPipe, level=InnerControl, cchain=x6030).name("x6040").ctrl(x6041) // UnrolledForeach(List(b3791, b3743),x6030,Block(Const(())),List(List(b3794)),List(List(b3795)))
    val b3794 = IterDef(x6029, None).ctrl(x6040).name("b3794")
    val b3795 = DummyDef().ctrl(x6040).name("b3795")
    val x6031 = OpDef(op=FixConvert, inputs=List(b3794)).name("x6031").ctrl(x6040) // FixConvert(b3794,TRUE,_32,_0)
    val x6032 = OpDef(op=FixSla, inputs=List(x6031, Const(2).ctrl(x6040))).name("x6032").ctrl(x6040) // FixLsh(x6031,Const(2))
    val x6033 = OpDef(op=FixConvert, inputs=List(b3790)).name("x6033").ctrl(x6040) // FixConvert(b3790,TRUE,_32,_0)
    val x6034 = OpDef(op=FixAdd, inputs=List(x6032, x6033)).name("x6034").ctrl(x6040) // FixAdd(x6032,x6033)
    val x6035 = OpDef(op=BitAnd, inputs=List(b3795, b3791)).name("x6035").ctrl(x6040) // And(b3795,b3791)
    val x6036 = OpDef(op=BitAnd, inputs=List(x6035, b3743)).name("x6036").ctrl(x6040) // And(x6035,b3743)
    val x6037 = LoadDef(List(x5961_d0_b0), Some(List(x6034))).name("x6037").ctrl(x6040) // ParSRAMLoad(x5961,List(List(x6034)),List(x6036))
    val x6038 = x6037 // x6038 = VectorApply(x6037,0)
    val x6039 = StoreDef(List(x5962_d0, x5962_d1, x5962_d2, x5962_d3, x5962_d4), Some(List(b3790, b3794)), x6038).name("x6039").ctrl(x6040) // ParRegFileStore(x5962,List(List(b3790, b3794)),List(x6038),List(Const(true)))
    val x6042 = Counter(min=Const(0).ctrl(x6363), max=Const(15).ctrl(x6363), step=Const(1).ctrl(x6363), par=1).name("x6042").ctrl(x6363) // CounterNew(Const(0),Const(15),Const(1),Const(1))
    val x6043 = CounterChain(List(x6042)).name("x6043").ctrl(x6363) // CounterChainNew(List(x6042))
    val x6320 = LoopController(style=SeqPipe, level=OuterControl, cchain=x6043).name("x6320").ctrl(x6363) // UnrolledForeach(List(b3743),x6043,Block(Const(())),List(List(b3809)),List(List(b3810)))
    val b3809 = IterDef(x6042, Some(0)).ctrl(x6320).name("b3809")
    val b3810 = DummyDef().ctrl(x6320).name("b3810")
    val x6044_d0 = Reg(init=false).name("x6044_d0").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6044_d1 = Reg(init=false).name("x6044_d1").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6044_d2 = Reg(init=false).name("x6044_d2").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6044_d3 = Reg(init=false).name("x6044_d3").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6044_d4 = Reg(init=false).name("x6044_d4").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6044_d5 = Reg(init=false).name("x6044_d5").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6044_d6 = Reg(init=false).name("x6044_d6").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6044_d7 = Reg(init=false).name("x6044_d7").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6044_d8 = Reg(init=false).name("x6044_d8").ctrl(x6320) // x6044 = RegNew(Const(false))
    val x6045_d0 = Reg(init=false).name("x6045_d0").ctrl(x6320) // x6045 = RegNew(Const(false))
    val x6045_d1 = Reg(init=false).name("x6045_d1").ctrl(x6320) // x6045 = RegNew(Const(false))
    val x6051 = UnitController(style=SeqPipe, level=InnerControl).name("x6051").ctrl(x6320) // UnitPipe(List(b3810, b3743),Block(Const(())))
    val x6046 = OpDef(op=FixLt, inputs=List(Const(0).ctrl(x6051), b3809)).name("x6046").ctrl(x6051) // FixLt(Const(0),b3809)
    val x6047 = OpDef(op=BitNot, inputs=List(x6046)).name("x6047").ctrl(x6051) // Not(x6046)
    val x6048 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6048").ctrl(x6051) // And(b3810,b3743)
    val x6049 = StoreDef(List(x6044_d0, x6044_d5, x6044_d1, x6044_d6, x6044_d2, x6044_d7, x6044_d3, x6044_d8, x6044_d4), None, x6046).name("x6049").ctrl(x6051) // RegWrite(x6044,x6046,x6048)
    val x6050 = StoreDef(List(x6045_d0, x6045_d1), None, x6047).name("x6050").ctrl(x6051) // RegWrite(x6045,x6047,x6048)
    val x6052 = LoadDef(List(x6045_d1), None).name("x6052").ctrl(x6320) // RegRead(x6045)
    val x6053 = LoadDef(List(x6044_d8), None).name("x6053").ctrl(x6320) // RegRead(x6044)
    val x6076 = UnitController(style=ForkSwitch, level=OuterControl).name("x6076").ctrl(x6320) // //TODO Switch(Block(x6075),List(x6053, x6052),List(x6074, x6075))
    val x6074 = UnitController(style=SeqPipe, level=OuterControl).name("x6074").ctrl(x6076) // //TODO SwitchCase(Block(Const(())))
    val x6054 = LoadDef(List(x6044_d7), None).name("x6054").ctrl(x6074) // RegRead(x6044)
    val x6073 = UnitController(style=SeqPipe, level=OuterControl).name("x6073").ctrl(x6074) // UnitPipe(List(x6054, b3810, b3743),Block(Const(())))
    val x6055 = Counter(min=Const(0).ctrl(x6073), max=Const(4).ctrl(x6073), step=Const(1).ctrl(x6073), par=1).name("x6055").ctrl(x6073) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6056 = Counter(min=Const(0).ctrl(x6073), max=Const(4).ctrl(x6073), step=Const(1).ctrl(x6073), par=1).name("x6056").ctrl(x6073) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6057 = CounterChain(List(x6056,x6055)).name("x6057").ctrl(x6073) // CounterChainNew(List(x6056, x6055))
    val x6072 = LoopController(style=SeqPipe, level=InnerControl, cchain=x6057).name("x6072").ctrl(x6073) // UnrolledForeach(List(b3810, b3743),x6057,Block(Const(())),List(List(b3826), List(b3827)),List(List(b3828), List(b3829)))
    val b3826 = IterDef(x6056, Some(0)).ctrl(x6072).name("b3826")
    val b3828 = DummyDef().ctrl(x6072).name("b3828")
    val b3827 = IterDef(x6055, None).ctrl(x6072).name("b3827")
    val b3829 = DummyDef().ctrl(x6072).name("b3829")
    val x6058 = LoadDef(List(x6044_d6), None).name("x6058").ctrl(x6072) // RegRead(x6044)
    val x6059 = LoadDef(List(x5962_d4), Some(List(b3826, b3827))).name("x6059").ctrl(x6072) // ParRegFileLoad(x5962,List(List(b3826, b3827)),List(x6058))
    val x6060 = x6059 // x6060 = VectorApply(x6059,0)
    val x6061 = x6060 // x6061 = DataAsBits(x6060)
    val x6062 = x6061 // x6062 = BitsAsData(x6061,FixPt[FALSE,_16,_0])
    val x6063 = x6062 // x6063 = DataAsBits(x6062)
    val x6064 = x6063 // x6064 = BitsAsData(x6063,FixPt[TRUE,_32,_0])
    val x6065 = OpDef(op=BitAnd, inputs=List(b3828, b3829)).name("x6065").ctrl(x6072) // And(b3828,b3829)
    val x6066 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6066").ctrl(x6072) // And(b3810,b3743)
    val x6067 = OpDef(op=BitAnd, inputs=List(x6065, x6066)).name("x6067").ctrl(x6072) // And(x6065,x6066)
    val x6068 = OpDef(op=BitAnd, inputs=List(x6058, x6067)).name("x6068").ctrl(x6072) // And(x6058,x6067)
    val x6069 = LoadDef(List(x5963_d2_b0), Some(List(x6064))).name("x6069").ctrl(x6072) // ParSRAMLoad(x5963,List(List(x6064)),List(x6068))
    val x6070 = x6069 // x6070 = VectorApply(x6069,0)
    val x6071 = StoreDef(List(x5962_d0, x5962_d1, x5962_d2, x5962_d3, x5962_d4), Some(List(b3826, b3827)), x6070).name("x6071").ctrl(x6072) // ParRegFileStore(x5962,List(List(b3826, b3827)),List(x6070),List(x6058))
    val x6075 = UnitController(style=SeqPipe, level=OuterControl).name("x6075").ctrl(x6076) // //TODO SwitchCase(Block(Const(())))
    val x6077 = LoadDef(List(x6045_d0), None).name("x6077").ctrl(x6320) // RegRead(x6045)
    val x6078 = LoadDef(List(x6044_d5), None).name("x6078").ctrl(x6320) // RegRead(x6044)
    val x6107 = UnitController(style=ForkSwitch, level=OuterControl).name("x6107").ctrl(x6320) // //TODO Switch(Block(x6106),List(x6078, x6077),List(x6105, x6106))
    val x6105 = UnitController(style=SeqPipe, level=OuterControl).name("x6105").ctrl(x6107) // //TODO SwitchCase(Block(Const(())))
    val x6079 = LoadDef(List(x6044_d4), None).name("x6079").ctrl(x6105) // RegRead(x6044)
    val x6104 = UnitController(style=SeqPipe, level=OuterControl).name("x6104").ctrl(x6105) // UnitPipe(List(x6079, b3810, b3743),Block(Const(())))
    val x6080 = Counter(min=Const(0).ctrl(x6104), max=Const(4).ctrl(x6104), step=Const(1).ctrl(x6104), par=1).name("x6080").ctrl(x6104) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6081 = CounterChain(List(x6080)).name("x6081").ctrl(x6104) // CounterChainNew(List(x6080))
    val x6103 = LoopController(style=SeqPipe, level=OuterControl, cchain=x6081).name("x6103").ctrl(x6104) // UnrolledForeach(List(b3810, b3743),x6081,Block(Const(())),List(List(b3855)),List(List(b3856)))
    val b3855 = IterDef(x6080, Some(0)).ctrl(x6103).name("b3855")
    val b3856 = DummyDef().ctrl(x6103).name("b3856")
    val x6082 = RegFile(sizes=List(4), inits=None).name("x6082").ctrl(x6103) // x6082 = RegFileNew(ArrayBuffer(Const(4)),None)
    val x6083 = Counter(min=Const(0).ctrl(x6103), max=Const(4).ctrl(x6103), step=Const(1).ctrl(x6103), par=1).name("x6083").ctrl(x6103) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6084 = CounterChain(List(x6083)).name("x6084").ctrl(x6103) // CounterChainNew(List(x6083))
    val x6095 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6084).name("x6095").ctrl(x6103) // UnrolledForeach(List(b3856, b3810, b3743),x6084,Block(Const(())),List(List(b3861)),List(List(b3862)))
    val b3861 = IterDef(x6083, None).ctrl(x6095).name("b3861")
    val b3862 = DummyDef().ctrl(x6095).name("b3862")
    val x6085 = OpDef(op=FixConvert, inputs=List(b3861)).name("x6085").ctrl(x6095) // FixConvert(b3861,TRUE,_32,_0)
    val x6086 = OpDef(op=FixConvert, inputs=List(b3855)).name("x6086").ctrl(x6095) // FixConvert(b3855,TRUE,_32,_0)
    val x6087 = OpDef(op=FixSub, inputs=List(x6085, x6086)).name("x6087").ctrl(x6095) // FixSub(x6085,x6086)
    val x6088 = x6087 // x6088 = DataAsBits(x6087)
    val x6089 = OpDef(op=BitAnd, inputs=List(x6088, Const(1))).name("x6089").ctrl(x6095) // VectorSlice(x6088,1,0) strMask=00000000000000000000000000000001
    val x6090 = x6089 // x6090 = BitsAsData(x6089,FixPt[TRUE,_32,_0])
    val x6091 = LoadDef(List(x6044_d3), None).name("x6091").ctrl(x6095) // RegRead(x6044)
    val x6092 = LoadDef(List(x5962_d3), Some(List(b3855, b3861))).name("x6092").ctrl(x6095) // ParRegFileLoad(x5962,List(List(b3855, b3861)),List(x6091))
    val x6093 = x6092 // x6093 = VectorApply(x6092,0)
    val x6094 = StoreDef(List(x6082), Some(List(x6090)), x6093).name("x6094").ctrl(x6095) // ParRegFileStore(x6082,List(List(x6090)),List(x6093),List(x6091))
    val x6096 = Counter(min=Const(0).ctrl(x6103), max=Const(4).ctrl(x6103), step=Const(1).ctrl(x6103), par=1).name("x6096").ctrl(x6103) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6097 = CounterChain(List(x6096)).name("x6097").ctrl(x6103) // CounterChainNew(List(x6096))
    val x6102 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6097).name("x6102").ctrl(x6103) // UnrolledForeach(List(b3856, b3810, b3743),x6097,Block(Const(())),List(List(b3875)),List(List(b3876)))
    val b3875 = IterDef(x6096, None).ctrl(x6102).name("b3875")
    val b3876 = DummyDef().ctrl(x6102).name("b3876")
    val x6098 = LoadDef(List(x6044_d2), None).name("x6098").ctrl(x6102) // RegRead(x6044)
    val x6099 = LoadDef(List(x6082), Some(List(b3875))).name("x6099").ctrl(x6102) // ParRegFileLoad(x6082,List(List(b3875)),List(x6098))
    val x6100 = x6099 // x6100 = VectorApply(x6099,0)
    val x6101 = StoreDef(List(x5962_d0, x5962_d1, x5962_d2, x5962_d3, x5962_d4), Some(List(b3855, b3875)), x6100).name("x6101").ctrl(x6102) // ParRegFileStore(x5962,List(List(b3855, b3875)),List(x6100),List(x6098))
    val x6106 = UnitController(style=SeqPipe, level=OuterControl).name("x6106").ctrl(x6107) // //TODO SwitchCase(Block(Const(())))
    val x6108_d0 = Reg(init=false).name("x6108_d0").ctrl(x6320) // x6108 = RegNew(Const(false))
    val x6108_d1 = Reg(init=false).name("x6108_d1").ctrl(x6320) // x6108 = RegNew(Const(false))
    val x6108_d2 = Reg(init=false).name("x6108_d2").ctrl(x6320) // x6108 = RegNew(Const(false))
    val x6108_d3 = Reg(init=false).name("x6108_d3").ctrl(x6320) // x6108 = RegNew(Const(false))
    val x6108_d4 = Reg(init=false).name("x6108_d4").ctrl(x6320) // x6108 = RegNew(Const(false))
    val x6108_d5 = Reg(init=false).name("x6108_d5").ctrl(x6320) // x6108 = RegNew(Const(false))
    val x6109 = Reg(init=false).name("x6109").ctrl(x6320) // x6109 = RegNew(Const(false))
    val x6117 = UnitController(style=SeqPipe, level=InnerControl).name("x6117").ctrl(x6320) // UnitPipe(List(b3810, b3743),Block(Const(())))
    val x6110 = OpDef(op=FixLt, inputs=List(b3809, Const(14).ctrl(x6117))).name("x6110").ctrl(x6117) // FixLt(b3809,Const(14))
    val x6111 = LoadDef(List(x6044_d1), None).name("x6111").ctrl(x6117) // RegRead(x6044)
    val x6112 = OpDef(op=BitAnd, inputs=List(x6111, x6110)).name("x6112").ctrl(x6117) // And(x6111,x6110)
    val x6113 = OpDef(op=BitNot, inputs=List(x6112)).name("x6113").ctrl(x6117) // Not(x6112)
    val x6114 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6114").ctrl(x6117) // And(b3810,b3743)
    val x6115 = StoreDef(List(x6108_d0, x6108_d5, x6108_d1, x6108_d2, x6108_d3, x6108_d4), None, x6112).name("x6115").ctrl(x6117) // RegWrite(x6108,x6112,x6114)
    val x6116 = StoreDef(List(x6109), None, x6113).name("x6116").ctrl(x6117) // RegWrite(x6109,x6113,x6114)
    val x6118 = LoadDef(List(x6109), None).name("x6118").ctrl(x6320) // RegRead(x6109)
    val x6119 = LoadDef(List(x6108_d5), None).name("x6119").ctrl(x6320) // RegRead(x6108)
    val x6176 = UnitController(style=ForkSwitch, level=OuterControl).name("x6176").ctrl(x6320) // //TODO Switch(Block(x6175),List(x6119, x6118),List(x6174, x6175))
    val x6174 = UnitController(style=SeqPipe, level=OuterControl).name("x6174").ctrl(x6176) // //TODO SwitchCase(Block(Const(())))
    val x6120 = LoadDef(List(x6108_d4), None).name("x6120").ctrl(x6174) // RegRead(x6108)
    val x6173 = UnitController(style=SeqPipe, level=OuterControl).name("x6173").ctrl(x6174) // UnitPipe(List(x6120, b3810, b3743),Block(Const(())))
    val x6121 = Counter(min=Const(0).ctrl(x6173), max=Const(4).ctrl(x6173), step=Const(1).ctrl(x6173), par=1).name("x6121").ctrl(x6173) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6122 = CounterChain(List(x6121)).name("x6122").ctrl(x6173) // CounterChainNew(List(x6121))
    val x6172 = LoopController(style=SeqPipe, level=OuterControl, cchain=x6122).name("x6172").ctrl(x6173) // UnrolledForeach(List(b3810, b3743),x6122,Block(Const(())),List(List(b3903)),List(List(b3904)))
    val b3903 = IterDef(x6121, Some(0)).ctrl(x6172).name("b3903")
    val b3904 = DummyDef().ctrl(x6172).name("b3904")
    val x6123_d0 = RegFile(sizes=List(4), inits=None).name("x6123_d0").ctrl(x6172) // x6123 = RegFileNew(ArrayBuffer(Const(4)),None)
    val x6123_d1 = RegFile(sizes=List(4), inits=None).name("x6123_d1").ctrl(x6172) // x6123 = RegFileNew(ArrayBuffer(Const(4)),None)
    val x6123_d2 = RegFile(sizes=List(4), inits=None).name("x6123_d2").ctrl(x6172) // x6123 = RegFileNew(ArrayBuffer(Const(4)),None)
    val x6124 = Counter(min=Const(0).ctrl(x6172), max=Const(4).ctrl(x6172), step=Const(1).ctrl(x6172), par=4).name("x6124").ctrl(x6172) // CounterNew(Const(0),Const(4),Const(1),Const(4))
    val x6125 = CounterChain(List(x6124)).name("x6125").ctrl(x6172) // CounterChainNew(List(x6124))
    val x6130 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6125).name("x6130").ctrl(x6172) // UnrolledForeach(List(b3904, b3810, b3743),x6125,Block(Const(())),List(List(b3909)),List(List(b3910)))
    val b3909 = IterDef(x6124, None).ctrl(x6130).name("b3909")
    val b3910 = DummyDef().ctrl(x6130).name("b3910")
    val x6126 = LoadDef(List(x6108_d3), None).name("x6126").ctrl(x6130) // RegRead(x6108)
    val x6127 = LoadDef(List(x5962_d2), Some(List(b3909, b3903))).name("x6127").ctrl(x6130) // ParRegFileLoad(x5962,List(List(b3909, b3903)),List(x6126))
    val x6128 = x6127 // x6128 = VectorApply(x6127,0)
    val x6129 = StoreDef(List(x6123_d0, x6123_d1, x6123_d2), Some(List(b3909)), x6128).name("x6129").ctrl(x6130) // ParRegFileStore(x6123,List(List(b3909)),List(x6128),List(x6126))
    val x6131_d0 = Reg(init=0).name("x6131_d0").ctrl(x6172) // x6131 = RegNew(Const(0))
    val x6131_d1 = Reg(init=0).name("x6131_d1").ctrl(x6172) // x6131 = RegNew(Const(0))
    val x6132 = Counter(min=Const(0).ctrl(x6172), max=Const(4).ctrl(x6172), step=Const(1).ctrl(x6172), par=4).name("x6132").ctrl(x6172) // CounterNew(Const(0),Const(4),Const(1),Const(4))
    val x6133 = CounterChain(List(x6132)).name("x6133").ctrl(x6172) // CounterChainNew(List(x6132))
    val x6134 = LoadDef(List(x6108_d2), None).name("x6134").ctrl(x6172) // RegRead(x6108)
    val x6148 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6133).name("x6148").ctrl(x6172) // UnrolledReduce(List(b3904, b3810, b3743, x6134),x6133,x6131,Block((x6131) => Const(())),List(List(b3920)),List(List(b3921)))
    val b3920 = IterDef(x6132, None).ctrl(x6148).name("b3920")
    val b3921 = DummyDef().ctrl(x6148).name("b3921")
    val x6135 = LoadDef(List(x6108_d1), None).name("x6135").ctrl(x6148) // RegRead(x6108)
    val x6136 = LoadDef(List(x6123_d2), Some(List(b3920))).name("x6136").ctrl(x6148) // ParRegFileLoad(x6123,List(List(b3920)),List(x6135))
    val x6137 = x6136 // x6137 = VectorApply(x6136,0)
    val x6138 = OpDef(op=BitAnd, inputs=List(b3921, b3904)).name("x6138").ctrl(x6148) // And(b3921,b3904)
    val x6139 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6139").ctrl(x6148) // And(b3810,b3743)
    val x6140 = OpDef(op=BitAnd, inputs=List(x6138, x6139)).name("x6140").ctrl(x6148) // And(x6138,x6139)
    val x6141 = LoadDef(List(x6131_d1), None).name("x6141").ctrl(x6148) // RegRead(x6131)
    val x6142 = OpDef(op=FixEql, inputs=List(b3920, Const(0).ctrl(x6148))).name("x6142").ctrl(x6148) // FixEql(b3920,Const(0))
    val x6143 = OpDef(op=BitXor, inputs=List(x6137, x6141)).name("x6143").ctrl(x6148) // FixXor(x6137,x6141)
    val x6144 = OpDef(op=BitAnd, inputs=List(b3904, b3810)).name("x6144").ctrl(x6148) // And(b3904,b3810)
    val x6145 = OpDef(op=BitAnd, inputs=List(x6144, b3743)).name("x6145").ctrl(x6148) // And(x6144,b3743)
    val x6146 = OpDef(op=BitAnd, inputs=List(x6135, x6145)).name("x6146").ctrl(x6148) // And(x6135,x6145)
    val x6147 = StoreDef(List(x6131_d0, x6131_d1), None, x6143).name("x6147").ctrl(x6148) // RegWrite(x6131,x6143,x6146)
    val x6149 = Counter(min=Const(0).ctrl(x6172), max=Const(4).ctrl(x6172), step=Const(1).ctrl(x6172), par=1).name("x6149").ctrl(x6172) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6150 = CounterChain(List(x6149)).name("x6150").ctrl(x6172) // CounterChainNew(List(x6149))
    val x6171 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6150).name("x6171").ctrl(x6172) // UnrolledForeach(List(b3904, b3810, b3743),x6150,Block(Const(())),List(List(b3940)),List(List(b3941)))
    val b3940 = IterDef(x6149, None).ctrl(x6171).name("b3940")
    val b3941 = DummyDef().ctrl(x6171).name("b3941")
    val x6151 = OpDef(op=FixConvert, inputs=List(b3940)).name("x6151").ctrl(x6171) // FixConvert(b3940,TRUE,_32,_0)
    val x6152 = OpDef(op=FixAdd, inputs=List(x6151, Const(1).ctrl(x6171))).name("x6152").ctrl(x6171) // FixAdd(x6151,Const(1))
    val x6153 = x6152 // x6153 = DataAsBits(x6152)
    val x6154 = OpDef(op=BitAnd, inputs=List(x6153, Const(1))).name("x6154").ctrl(x6171) // VectorSlice(x6153,1,0) strMask=00000000000000000000000000000001
    val x6155 = x6154 // x6155 = BitsAsData(x6154,FixPt[TRUE,_32,_0])
    val x6156 = LoadDef(List(x6108_d0), None).name("x6156").ctrl(x6171) // RegRead(x6108)
    val x6157 = LoadDef(List(x6123_d1), Some(List(b3940))).name("x6157").ctrl(x6171) // ParRegFileLoad(x6123,List(List(b3940)),List(x6156))
    val x6158 = x6157 // x6158 = VectorApply(x6157,0)
    val x6159 = LoadDef(List(x6131_d0), None).name("x6159").ctrl(x6171) // RegRead(x6131)
    val x6160 = OpDef(op=BitXor, inputs=List(x6158, x6159)).name("x6160").ctrl(x6171) // FixXor(x6158,x6159)
    val x6161 = LoadDef(List(x6123_d0), Some(List(x6155))).name("x6161").ctrl(x6171) // ParRegFileLoad(x6123,List(List(x6155)),List(x6156))
    val x6162 = x6161 // x6162 = VectorApply(x6161,0)
    val x6163 = OpDef(op=BitXor, inputs=List(x6158, x6162)).name("x6163").ctrl(x6171) // FixXor(x6158,x6162)
    val x6164 = OpDef(op=BitAnd, inputs=List(x6163, Const(128).ctrl(x6171))).name("x6164").ctrl(x6171) // FixAnd(x6163,Const(128))
    val x6165 = OpDef(op=FixLt, inputs=List(Const(0).ctrl(x6171), x6164)).name("x6165").ctrl(x6171) // FixLt(Const(0),x6164)
    val x6166 = OpDef(op=FixSla, inputs=List(x6163, Const(1).ctrl(x6171))).name("x6166").ctrl(x6171) // FixLsh(x6163,Const(1))
    val x6167 = OpDef(op=BitXor, inputs=List(x6166, Const(27).ctrl(x6171))).name("x6167").ctrl(x6171) // FixXor(x6166,Const(27))
    val x6168 = OpDef(op=MuxOp, inputs=List(x6165, x6167, x6166)).name("x6168").ctrl(x6171) // Mux(x6165,x6167,x6166)
    val x6169 = OpDef(op=BitXor, inputs=List(x6160, x6168)).name("x6169").ctrl(x6171) // FixXor(x6160,x6168)
    val x6170 = StoreDef(List(x5962_d0, x5962_d1, x5962_d2, x5962_d3, x5962_d4), Some(List(b3940, b3903)), x6169).name("x6170").ctrl(x6171) // ParRegFileStore(x5962,List(List(b3940, b3903)),List(x6169),List(x6156))
    val x6175 = UnitController(style=SeqPipe, level=OuterControl).name("x6175").ctrl(x6176) // //TODO SwitchCase(Block(Const(())))
    val x6177_d0 = Reg(init=false).name("x6177_d0").ctrl(x6320) // x6177 = RegNew(Const(false))
    val x6177_d1 = Reg(init=false).name("x6177_d1").ctrl(x6320) // x6177 = RegNew(Const(false))
    val x6177_d2 = Reg(init=false).name("x6177_d2").ctrl(x6320) // x6177 = RegNew(Const(false))
    val x6177_d3 = Reg(init=false).name("x6177_d3").ctrl(x6320) // x6177 = RegNew(Const(false))
    val x6177_d4 = Reg(init=false).name("x6177_d4").ctrl(x6320) // x6177 = RegNew(Const(false))
    val x6177_d5 = Reg(init=false).name("x6177_d5").ctrl(x6320) // x6177 = RegNew(Const(false))
    val x6177_d6 = Reg(init=false).name("x6177_d6").ctrl(x6320) // x6177 = RegNew(Const(false))
    val x6177_d7 = Reg(init=false).name("x6177_d7").ctrl(x6320) // x6177 = RegNew(Const(false))
    val x6178 = Reg(init=false).name("x6178").ctrl(x6320) // x6178 = RegNew(Const(false))
    val x6189 = UnitController(style=SeqPipe, level=InnerControl).name("x6189").ctrl(x6320) // UnitPipe(List(b3810, b3743),Block(Const(())))
    val x6179 = b3809 // x6179 = DataAsBits(b3809)
    val x6180 = OpDef(op=BitAnd, inputs=List(x6179, Const(0))).name("x6180").ctrl(x6189) // VectorSlice(x6179,0,0) strMask=00000000000000000000000000000000
    val x6181 = x6180 // x6181 = BitsAsData(x6180,FixPt[TRUE,_32,_0])
    val x6182 = OpDef(op=FixEql, inputs=List(x6181, Const(0).ctrl(x6189))).name("x6182").ctrl(x6189) // FixEql(x6181,Const(0))
    val x6183 = LoadDef(List(x6044_d0), None).name("x6183").ctrl(x6189) // RegRead(x6044)
    val x6184 = OpDef(op=BitAnd, inputs=List(x6183, x6182)).name("x6184").ctrl(x6189) // And(x6183,x6182)
    val x6185 = OpDef(op=BitNot, inputs=List(x6184)).name("x6185").ctrl(x6189) // Not(x6184)
    val x6186 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6186").ctrl(x6189) // And(b3810,b3743)
    val x6187 = StoreDef(List(x6177_d0, x6177_d5, x6177_d1, x6177_d6, x6177_d2, x6177_d7, x6177_d3, x6177_d4), None, x6184).name("x6187").ctrl(x6189) // RegWrite(x6177,x6184,x6186)
    val x6188 = StoreDef(List(x6178), None, x6185).name("x6188").ctrl(x6189) // RegWrite(x6178,x6185,x6186)
    val x6190 = LoadDef(List(x6178), None).name("x6190").ctrl(x6320) // RegRead(x6178)
    val x6191 = LoadDef(List(x6177_d7), None).name("x6191").ctrl(x6320) // RegRead(x6177)
    val x6294 = UnitController(style=ForkSwitch, level=OuterControl).name("x6294").ctrl(x6320) // //TODO Switch(Block(x6293),List(x6191, x6190),List(x6292, x6293))
    val x6292 = UnitController(style=SeqPipe, level=OuterControl).name("x6292").ctrl(x6294) // //TODO SwitchCase(Block(Const(())))
    val x6192 = LoadDef(List(x6177_d6), None).name("x6192").ctrl(x6292) // RegRead(x6177)
    val x6291 = UnitController(style=SeqPipe, level=OuterControl).name("x6291").ctrl(x6292) // UnitPipe(List(x6192, b3810, b3743),Block(Const(())))
    val x6193_d0_b0 = SRAM(size=4, banking=NoBanking()).name("x6193_d0_b0").ctrl(x6291) // x6193 = SRAMNew(List(Const(4)))
    val x6194 = Counter(min=Const(0).ctrl(x6291), max=Const(4).ctrl(x6291), step=Const(1).ctrl(x6291), par=1).name("x6194").ctrl(x6291) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6195 = CounterChain(List(x6194)).name("x6195").ctrl(x6291) // CounterChainNew(List(x6194))
    val x6216 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6195).name("x6216").ctrl(x6291) // UnrolledForeach(List(b3810, b3743),x6195,Block(Const(())),List(List(b3984)),List(List(b3985)))
    val b3984 = IterDef(x6194, None).ctrl(x6216).name("b3984")
    val b3985 = DummyDef().ctrl(x6216).name("b3985")
    val x6196 = LoadDef(List(x6177_d5), None).name("x6196").ctrl(x6216) // RegRead(x6177)
    val x6197 = OpDef(op=BitAnd, inputs=List(b3985, b3810)).name("x6197").ctrl(x6216) // And(b3985,b3810)
    val x6198 = OpDef(op=BitAnd, inputs=List(x6197, b3743)).name("x6198").ctrl(x6216) // And(x6197,b3743)
    val x6199 = OpDef(op=BitAnd, inputs=List(x6196, x6198)).name("x6199").ctrl(x6216) // And(x6196,x6198)
    val x6200 = LoadDef(List(x5964_d9_b0), Some(List(b3984))).name("x6200").ctrl(x6216) // ParSRAMLoad(x5964,List(List(b3984)),List(x6199))
    val x6201 = x6200 // x6201 = VectorApply(x6200,0)
    val x6202 = LoadDef(List(x6193_d0_b0), Some(List(b3984))).name("x6202").ctrl(x6216) // ParSRAMLoad(x6193,List(List(b3984)),List(x6199))
    val x6203 = x6202 // x6203 = VectorApply(x6202,0)
    val x6204 = LoadDef(List(x5964_d8_b0), Some(List(x6203))).name("x6204").ctrl(x6216) // ParSRAMLoad(x5964,List(List(x6203)),List(x6199))
    val x6205 = x6204 // x6205 = VectorApply(x6204,0)
    val x6206 = OpDef(op=FixConvert, inputs=List(x6205)).name("x6206").ctrl(x6216) // FixConvert(x6205,TRUE,_32,_0)
    val x6207 = LoadDef(List(x5963_d1_b0), Some(List(x6206))).name("x6207").ctrl(x6216) // ParSRAMLoad(x5963,List(List(x6206)),List(x6199))
    val x6208 = x6207 // x6208 = VectorApply(x6207,0)
    val x6209 = OpDef(op=BitXor, inputs=List(x6201, x6208)).name("x6209").ctrl(x6216) // FixXor(x6201,x6208)
    val x6210 = OpDef(op=FixConvert, inputs=List(b3984)).name("x6210").ctrl(x6216) // FixConvert(b3984,TRUE,_32,_0)
    val x6211 = OpDef(op=FixEql, inputs=List(x6210, Const(0).ctrl(x6216))).name("x6211").ctrl(x6216) // FixEql(x6210,Const(0))
    val x6212 = LoadDef(List(x5965_d1), None).name("x6212").ctrl(x6216) // RegRead(x5965)
    val x6213 = OpDef(op=MuxOp, inputs=List(x6211, x6212, Const(0).ctrl(x6216))).name("x6213").ctrl(x6216) // Mux(x6211,x6212,Const(0))
    val x6214 = OpDef(op=BitXor, inputs=List(x6209, x6213)).name("x6214").ctrl(x6216) // FixXor(x6209,x6213)
    val x6215 = StoreDef(List(x5964_d0_b0, x5964_d5_b0, x5964_d1_b0, x5964_d6_b0, x5964_d9_b0, x5964_d2_b0, x5964_d7_b0, x5964_d3_b0, x5964_d8_b0, x5964_d4_b0), Some(List(b3984)), x6214).name("x6215").ctrl(x6216) // ParSRAMStore(x5964,List(List(b3984)),List(x6214),List(x6199))
    val x6217 = LoadDef(List(x6177_d4), None).name("x6217").ctrl(x6291) // RegRead(x6177)
    val x6228 = UnitController(style=SeqPipe, level=InnerControl).name("x6228").ctrl(x6291) // UnitPipe(List(x6217, b3810, b3743),Block(Const(())))
    val x6218 = LoadDef(List(x5965_d0), None).name("x6218").ctrl(x6228) // RegRead(x5965)
    val x6219 = OpDef(op=FixSla, inputs=List(x6218, Const(1).ctrl(x6228))).name("x6219").ctrl(x6228) // FixLsh(x6218,Const(1))
    val x6220 = OpDef(op=FixSra, inputs=List(x6218, Const(7).ctrl(x6228))).name("x6220").ctrl(x6228) // FixRsh(x6218,Const(7))
    val x6221 = OpDef(op=BitAnd, inputs=List(x6220, Const(1).ctrl(x6228))).name("x6221").ctrl(x6228) // FixAnd(x6220,Const(1))
    val x6222 = OpDef(op=FixMul, inputs=List(x6221, Const(27).ctrl(x6228))).name("x6222").ctrl(x6228) // FixMul(x6221,Const(27))
    val x6223 = OpDef(op=BitXor, inputs=List(x6219, x6222)).name("x6223").ctrl(x6228) // FixXor(x6219,x6222)
    val x6224 = LoadDef(List(x6177_d3), None).name("x6224").ctrl(x6228) // RegRead(x6177)
    val x6225 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6225").ctrl(x6228) // And(b3810,b3743)
    val x6226 = OpDef(op=BitAnd, inputs=List(x6224, x6225)).name("x6226").ctrl(x6228) // And(x6224,x6225)
    val x6227 = StoreDef(List(x5965_d0, x5965_d1), None, x6223).name("x6227").ctrl(x6228) // RegWrite(x5965,x6223,x6226)
    val x6229 = Counter(min=Const(4).ctrl(x6291), max=Const(16), step=Const(4).ctrl(x6291), par=1).name("x6229").ctrl(x6291) // CounterNew(Const(4),Const(16),Const(4),Const(1))
    val x6230 = CounterChain(List(x6229)).name("x6230").ctrl(x6291) // CounterChainNew(List(x6229))
    val x6250 = LoopController(style=SeqPipe, level=OuterControl, cchain=x6230).name("x6250").ctrl(x6291) // UnrolledForeach(List(b3810, b3743),x6230,Block(Const(())),List(List(b4022)),List(List(b4023)))
    val b4022 = IterDef(x6229, Some(0)).ctrl(x6250).name("b4022")
    val b4023 = DummyDef().ctrl(x6250).name("b4023")
    val x6231 = Counter(min=Const(0).ctrl(x6250), max=Const(4).ctrl(x6250), step=Const(1).ctrl(x6250), par=1).name("x6231").ctrl(x6250) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6232 = CounterChain(List(x6231)).name("x6232").ctrl(x6250) // CounterChainNew(List(x6231))
    val x6249 = LoopController(style=SeqPipe, level=InnerControl, cchain=x6232).name("x6249").ctrl(x6250) // UnrolledForeach(List(b4023, b3810, b3743),x6232,Block(Const(())),List(List(b4027)),List(List(b4028)))
    val b4027 = IterDef(x6231, None).ctrl(x6249).name("b4027")
    val b4028 = DummyDef().ctrl(x6249).name("b4028")
    val x6233 = OpDef(op=FixConvert, inputs=List(b4022)).name("x6233").ctrl(x6249) // FixConvert(b4022,TRUE,_32,_0)
    val x6234 = OpDef(op=FixConvert, inputs=List(b4027)).name("x6234").ctrl(x6249) // FixConvert(b4027,TRUE,_32,_0)
    val x6235 = OpDef(op=FixAdd, inputs=List(x6233, x6234)).name("x6235").ctrl(x6249) // FixAdd(x6233,x6234)
    val x6236 = LoadDef(List(x6177_d2), None).name("x6236").ctrl(x6249) // RegRead(x6177)
    val x6237 = OpDef(op=BitAnd, inputs=List(b4028, b4023)).name("x6237").ctrl(x6249) // And(b4028,b4023)
    val x6238 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6238").ctrl(x6249) // And(b3810,b3743)
    val x6239 = OpDef(op=BitAnd, inputs=List(x6237, x6238)).name("x6239").ctrl(x6249) // And(x6237,x6238)
    val x6240 = OpDef(op=BitAnd, inputs=List(x6236, x6239)).name("x6240").ctrl(x6249) // And(x6236,x6239)
    val x6241 = LoadDef(List(x5964_d7_b0), Some(List(x6235))).name("x6241").ctrl(x6249) // ParSRAMLoad(x5964,List(List(x6235)),List(x6240))
    val x6242 = x6241 // x6242 = VectorApply(x6241,0)
    val x6243 = OpDef(op=FixSub, inputs=List(x6233, Const(4).ctrl(x6249))).name("x6243").ctrl(x6249) // FixSub(x6233,Const(4))
    val x6244 = OpDef(op=FixAdd, inputs=List(x6243, x6234)).name("x6244").ctrl(x6249) // FixAdd(x6243,x6234)
    val x6245 = LoadDef(List(x5964_d6_b0), Some(List(x6244))).name("x6245").ctrl(x6249) // ParSRAMLoad(x5964,List(List(x6244)),List(x6240))
    val x6246 = x6245 // x6246 = VectorApply(x6245,0)
    val x6247 = OpDef(op=BitXor, inputs=List(x6242, x6246)).name("x6247").ctrl(x6249) // FixXor(x6242,x6246)
    val x6248 = StoreDef(List(x5964_d0_b0, x5964_d5_b0, x5964_d1_b0, x5964_d6_b0, x5964_d9_b0, x5964_d2_b0, x5964_d7_b0, x5964_d3_b0, x5964_d8_b0, x5964_d4_b0), Some(List(x6235)), x6247).name("x6248").ctrl(x6249) // ParSRAMStore(x5964,List(List(x6235)),List(x6247),List(x6240))
    val x6251 = Counter(min=Const(16), max=Const(20).ctrl(x6291), step=Const(1).ctrl(x6291), par=1).name("x6251").ctrl(x6291) // CounterNew(Const(16),Const(20),Const(1),Const(1))
    val x6252 = CounterChain(List(x6251)).name("x6252").ctrl(x6291) // CounterChainNew(List(x6251))
    val x6268 = LoopController(style=SeqPipe, level=InnerControl, cchain=x6252).name("x6268").ctrl(x6291) // UnrolledForeach(List(b3810, b3743),x6252,Block(Const(())),List(List(b4050)),List(List(b4051)))
    val b4050 = IterDef(x6251, None).ctrl(x6268).name("b4050")
    val b4051 = DummyDef().ctrl(x6268).name("b4051")
    val x6253 = LoadDef(List(x6177_d1), None).name("x6253").ctrl(x6268) // RegRead(x6177)
    val x6254 = OpDef(op=BitAnd, inputs=List(b4051, b3810)).name("x6254").ctrl(x6268) // And(b4051,b3810)
    val x6255 = OpDef(op=BitAnd, inputs=List(x6254, b3743)).name("x6255").ctrl(x6268) // And(x6254,b3743)
    val x6256 = OpDef(op=BitAnd, inputs=List(x6253, x6255)).name("x6256").ctrl(x6268) // And(x6253,x6255)
    val x6257 = LoadDef(List(x5964_d5_b0), Some(List(b4050))).name("x6257").ctrl(x6268) // ParSRAMLoad(x5964,List(List(b4050)),List(x6256))
    val x6258 = x6257 // x6258 = VectorApply(x6257,0)
    val x6259 = OpDef(op=FixConvert, inputs=List(b4050)).name("x6259").ctrl(x6268) // FixConvert(b4050,TRUE,_32,_0)
    val x6260 = OpDef(op=FixSub, inputs=List(x6259, Const(4).ctrl(x6268))).name("x6260").ctrl(x6268) // FixSub(x6259,Const(4))
    val x6261 = LoadDef(List(x5964_d4_b0), Some(List(x6260))).name("x6261").ctrl(x6268) // ParSRAMLoad(x5964,List(List(x6260)),List(x6256))
    val x6262 = x6261 // x6262 = VectorApply(x6261,0)
    val x6263 = OpDef(op=FixConvert, inputs=List(x6262)).name("x6263").ctrl(x6268) // FixConvert(x6262,TRUE,_32,_0)
    val x6264 = LoadDef(List(x5963_d0_b0), Some(List(x6263))).name("x6264").ctrl(x6268) // ParSRAMLoad(x5963,List(List(x6263)),List(x6256))
    val x6265 = x6264 // x6265 = VectorApply(x6264,0)
    val x6266 = OpDef(op=BitXor, inputs=List(x6258, x6265)).name("x6266").ctrl(x6268) // FixXor(x6258,x6265)
    val x6267 = StoreDef(List(x5964_d0_b0, x5964_d5_b0, x5964_d1_b0, x5964_d6_b0, x5964_d9_b0, x5964_d2_b0, x5964_d7_b0, x5964_d3_b0, x5964_d8_b0, x5964_d4_b0), Some(List(b4050)), x6266).name("x6267").ctrl(x6268) // ParSRAMStore(x5964,List(List(b4050)),List(x6266),List(x6256))
    val x6269 = Counter(min=Const(20).ctrl(x6291), max=Const(32), step=Const(4).ctrl(x6291), par=1).name("x6269").ctrl(x6291) // CounterNew(Const(20),Const(32),Const(4),Const(1))
    val x6270 = CounterChain(List(x6269)).name("x6270").ctrl(x6291) // CounterChainNew(List(x6269))
    val x6290 = LoopController(style=SeqPipe, level=OuterControl, cchain=x6270).name("x6290").ctrl(x6291) // UnrolledForeach(List(b3810, b3743),x6270,Block(Const(())),List(List(b4071)),List(List(b4072)))
    val b4071 = IterDef(x6269, Some(0)).ctrl(x6290).name("b4071")
    val b4072 = DummyDef().ctrl(x6290).name("b4072")
    val x6271 = Counter(min=Const(0).ctrl(x6290), max=Const(4).ctrl(x6290), step=Const(1).ctrl(x6290), par=1).name("x6271").ctrl(x6290) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6272 = CounterChain(List(x6271)).name("x6272").ctrl(x6290) // CounterChainNew(List(x6271))
    val x6289 = LoopController(style=SeqPipe, level=InnerControl, cchain=x6272).name("x6289").ctrl(x6290) // UnrolledForeach(List(b4072, b3810, b3743),x6272,Block(Const(())),List(List(b4076)),List(List(b4077)))
    val b4076 = IterDef(x6271, None).ctrl(x6289).name("b4076")
    val b4077 = DummyDef().ctrl(x6289).name("b4077")
    val x6273 = OpDef(op=FixConvert, inputs=List(b4071)).name("x6273").ctrl(x6289) // FixConvert(b4071,TRUE,_32,_0)
    val x6274 = OpDef(op=FixConvert, inputs=List(b4076)).name("x6274").ctrl(x6289) // FixConvert(b4076,TRUE,_32,_0)
    val x6275 = OpDef(op=FixAdd, inputs=List(x6273, x6274)).name("x6275").ctrl(x6289) // FixAdd(x6273,x6274)
    val x6276 = LoadDef(List(x6177_d0), None).name("x6276").ctrl(x6289) // RegRead(x6177)
    val x6277 = OpDef(op=BitAnd, inputs=List(b4077, b4072)).name("x6277").ctrl(x6289) // And(b4077,b4072)
    val x6278 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6278").ctrl(x6289) // And(b3810,b3743)
    val x6279 = OpDef(op=BitAnd, inputs=List(x6277, x6278)).name("x6279").ctrl(x6289) // And(x6277,x6278)
    val x6280 = OpDef(op=BitAnd, inputs=List(x6276, x6279)).name("x6280").ctrl(x6289) // And(x6276,x6279)
    val x6281 = LoadDef(List(x5964_d3_b0), Some(List(x6275))).name("x6281").ctrl(x6289) // ParSRAMLoad(x5964,List(List(x6275)),List(x6280))
    val x6282 = x6281 // x6282 = VectorApply(x6281,0)
    val x6283 = OpDef(op=FixSub, inputs=List(x6273, Const(4).ctrl(x6289))).name("x6283").ctrl(x6289) // FixSub(x6273,Const(4))
    val x6284 = OpDef(op=FixAdd, inputs=List(x6283, x6274)).name("x6284").ctrl(x6289) // FixAdd(x6283,x6274)
    val x6285 = LoadDef(List(x5964_d2_b0), Some(List(x6284))).name("x6285").ctrl(x6289) // ParSRAMLoad(x5964,List(List(x6284)),List(x6280))
    val x6286 = x6285 // x6286 = VectorApply(x6285,0)
    val x6287 = OpDef(op=BitXor, inputs=List(x6282, x6286)).name("x6287").ctrl(x6289) // FixXor(x6282,x6286)
    val x6288 = StoreDef(List(x5964_d0_b0, x5964_d5_b0, x5964_d1_b0, x5964_d6_b0, x5964_d9_b0, x5964_d2_b0, x5964_d7_b0, x5964_d3_b0, x5964_d8_b0, x5964_d4_b0), Some(List(x6275)), x6287).name("x6288").ctrl(x6289) // ParSRAMStore(x5964,List(List(x6275)),List(x6287),List(x6280))
    val x6293 = UnitController(style=SeqPipe, level=OuterControl).name("x6293").ctrl(x6294) // //TODO SwitchCase(Block(Const(())))
    val x6295 = Counter(min=Const(0).ctrl(x6320), max=Const(4).ctrl(x6320), step=Const(1).ctrl(x6320), par=1).name("x6295").ctrl(x6320) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6296 = Counter(min=Const(0).ctrl(x6320), max=Const(4).ctrl(x6320), step=Const(1).ctrl(x6320), par=1).name("x6296").ctrl(x6320) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6297 = CounterChain(List(x6296,x6295)).name("x6297").ctrl(x6320) // CounterChainNew(List(x6296, x6295))
    val x6319 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6297).name("x6319").ctrl(x6320) // UnrolledForeach(List(b3810, b3743),x6297,Block(Const(())),List(List(b4103), List(b4104)),List(List(b4105), List(b4106)))
    val b4103 = IterDef(x6296, Some(0)).ctrl(x6319).name("b4103")
    val b4105 = DummyDef().ctrl(x6319).name("b4105")
    val b4104 = IterDef(x6295, None).ctrl(x6319).name("b4104")
    val b4106 = DummyDef().ctrl(x6319).name("b4106")
    val x6298 = b3809 // x6298 = DataAsBits(b3809)
    val x6299 = OpDef(op=BitAnd, inputs=List(x6298, Const(0))).name("x6299").ctrl(x6319) // VectorSlice(x6298,0,0) strMask=00000000000000000000000000000000
    val x6300 = x6299 // x6300 = BitsAsData(x6299,FixPt[TRUE,_32,_0])
    val x6301 = OpDef(op=FixEql, inputs=List(x6300, Const(1).ctrl(x6319))).name("x6301").ctrl(x6319) // FixEql(x6300,Const(1))
    val x6302 = OpDef(op=FixConvert, inputs=List(b4103)).name("x6302").ctrl(x6319) // FixConvert(b4103,TRUE,_32,_0)
    val x6303 = OpDef(op=FixConvert, inputs=List(b4104)).name("x6303").ctrl(x6319) // FixConvert(b4104,TRUE,_32,_0)
    val x6304 = OpDef(op=FixSla, inputs=List(x6303, Const(2).ctrl(x6319))).name("x6304").ctrl(x6319) // FixLsh(x6303,Const(2))
    val x6305 = OpDef(op=FixAdd, inputs=List(x6302, x6304)).name("x6305").ctrl(x6319) // FixAdd(x6302,x6304)
    val x6306 = OpDef(op=FixAdd, inputs=List(x6305, Const(16))).name("x6306").ctrl(x6319) // FixAdd(x6305,Const(16))
    val x6307 = OpDef(op=BitAnd, inputs=List(b4105, b4106)).name("x6307").ctrl(x6319) // And(b4105,b4106)
    val x6308 = OpDef(op=BitAnd, inputs=List(b3810, b3743)).name("x6308").ctrl(x6319) // And(b3810,b3743)
    val x6309 = OpDef(op=BitAnd, inputs=List(x6307, x6308)).name("x6309").ctrl(x6319) // And(x6307,x6308)
    val x6310 = LoadDef(List(x5964_d1_b0), Some(List(x6306))).name("x6310").ctrl(x6319) // ParSRAMLoad(x5964,List(List(x6306)),List(x6309))
    val x6311 = x6310 // x6311 = VectorApply(x6310,0)
    val x6312 = LoadDef(List(x5964_d0_b0), Some(List(x6305))).name("x6312").ctrl(x6319) // ParSRAMLoad(x5964,List(List(x6305)),List(x6309))
    val x6313 = x6312 // x6313 = VectorApply(x6312,0)
    val x6314 = OpDef(op=MuxOp, inputs=List(x6301, x6311, x6313)).name("x6314").ctrl(x6319) // Mux(x6301,x6311,x6313)
    val x6315 = LoadDef(List(x5962_d1), Some(List(b4103, b4104))).name("x6315").ctrl(x6319) // ParRegFileLoad(x5962,List(List(b4103, b4104)),List(Const(true)))
    val x6316 = x6315 // x6316 = VectorApply(x6315,0)
    val x6317 = OpDef(op=BitXor, inputs=List(x6316, x6314)).name("x6317").ctrl(x6319) // FixXor(x6316,x6314)
    val x6318 = StoreDef(List(x5962_d0, x5962_d1, x5962_d2, x5962_d3, x5962_d4), Some(List(b4103, b4104)), x6317).name("x6318").ctrl(x6319) // ParRegFileStore(x5962,List(List(b4103, b4104)),List(x6317),List(Const(true)))
    val x6321_d0_b0 = SRAM(size=1, banking=Strided(banks=16, stride=1)).name("x6321_d0_b0").ctrl(x6363) // x6321 = SRAMNew(ArrayBuffer(Const(16)))
    val x6322 = Counter(min=Const(0).ctrl(x6363), max=Const(4).ctrl(x6363), step=Const(1).ctrl(x6363), par=1).name("x6322").ctrl(x6363) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6323 = Counter(min=Const(0).ctrl(x6363), max=Const(4).ctrl(x6363), step=Const(1).ctrl(x6363), par=1).name("x6323").ctrl(x6363) // CounterNew(Const(0),Const(4),Const(1),Const(1))
    val x6324 = CounterChain(List(x6323,x6322)).name("x6324").ctrl(x6363) // CounterChainNew(List(x6323, x6322))
    val x6336 = LoopController(style=SeqPipe, level=InnerControl, cchain=x6324).name("x6336").ctrl(x6363) // UnrolledForeach(List(b3743),x6324,Block(Const(())),List(List(b4132), List(b4133)),List(List(b4134), List(b4135)))
    val b4132 = IterDef(x6323, Some(0)).ctrl(x6336).name("b4132")
    val b4134 = DummyDef().ctrl(x6336).name("b4134")
    val b4133 = IterDef(x6322, None).ctrl(x6336).name("b4133")
    val b4135 = DummyDef().ctrl(x6336).name("b4135")
    val x6325 = OpDef(op=FixConvert, inputs=List(b4133)).name("x6325").ctrl(x6336) // FixConvert(b4133,TRUE,_32,_0)
    val x6326 = OpDef(op=FixSla, inputs=List(x6325, Const(2).ctrl(x6336))).name("x6326").ctrl(x6336) // FixLsh(x6325,Const(2))
    val x6327 = OpDef(op=FixConvert, inputs=List(b4132)).name("x6327").ctrl(x6336) // FixConvert(b4132,TRUE,_32,_0)
    val x6328 = OpDef(op=FixAdd, inputs=List(x6326, x6327)).name("x6328").ctrl(x6336) // FixAdd(x6326,x6327)
    val x6329 = LoadDef(List(x5962_d0), Some(List(b4132, b4133))).name("x6329").ctrl(x6336) // ParRegFileLoad(x5962,List(List(b4132, b4133)),List(Const(true)))
    val x6330 = x6329 // x6330 = VectorApply(x6329,0)
    val x6331 = x6330 // x6331 = DataAsBits(x6330)
    val x6332 = x6331 // x6332 = BitsAsData(x6331,FixPt[TRUE,_32,_0])
    val x6333 = OpDef(op=BitAnd, inputs=List(b4134, b4135)).name("x6333").ctrl(x6336) // And(b4134,b4135)
    val x6334 = OpDef(op=BitAnd, inputs=List(x6333, b3743)).name("x6334").ctrl(x6336) // And(x6333,b3743)
    val x6335 = StoreDef(List(x6321_d0_b0), Some(List(x6328)), x6332).name("x6335").ctrl(x6336) // ParSRAMStore(x6321,List(List(x6328)),List(x6332),List(x6334))
    val x6338 = UnitController(style=SeqPipe, level=InnerControl).name("x6338").ctrl(x6363) // UnitPipe(List(b3743),Block(Const(())))
    val x6337 = OpDef(op=FixAdd, inputs=List(b3742, Const(16))).name("x6337").ctrl(x6338) // FixAdd(b3742,Const(16))
    val x6362 = UnitController(style=StreamPipe, level=OuterControl).name("x6362").ctrl(x6363) // UnitPipe(List(b3743),Block(Const(())))
    val b6409 = StreamOut(field="offset").name("b6409").ctrl(x6362) // x6339 = StreamOutNew(BurstCmdBus)
    val b6410 = StreamOut(field="size").name("b6410").ctrl(x6362) // x6339 = StreamOutNew(BurstCmdBus)
    val b6411 = StreamOut(field="data").name("b6411").ctrl(x6362) // x6340 = StreamOutNew(BurstFullDataBus())
    val b6412 = StreamIn(field="ack").name("b6412").ctrl(x6362) // x6341 = StreamInNew(BurstAckBus)
    val x6350 = UnitController(style=SeqPipe, level=InnerControl).name("x6350").ctrl(x6362) // UnitPipe(List(b3743),Block(x6349))
    val x6342 = OpDef(op=FixConvert, inputs=List(b3742)).name("x6342").ctrl(x6350) // FixConvert(b3742,TRUE,_32,_0)
    val x6343 = OpDef(op=FixSla, inputs=List(x6342, Const(2).ctrl(x6350))).name("x6343").ctrl(x6350) // FixLsh(x6342,Const(2))
    val x6344 = OpDef(op=FixConvert, inputs=List(x6343)).name("x6344").ctrl(x6350) // FixConvert(x6343,TRUE,_64,_0)
    val x6345 = top.dramAddress(x5957).name("x6345").ctrl(x6350) // GetDRAMAddress(x5957)
    val x6346 = OpDef(op=FixAdd, inputs=List(x6344, x6345)).name("x6346").ctrl(x6350) // FixAdd(x6344,x6345)
    val x6347 = OpDef(op=FixConvert, inputs=List(x6346)).name("x6347").ctrl(x6350) // FixConvert(x6346,TRUE,_64,_0)
    // x6348 = SimpleStruct(ArrayBuffer((offset,x6347), (size,Const(64)), (isLoad,Const(false))))
    val b6413 = StoreDef(List(b6409), None, x6347).name("b6413").ctrl(x6350) // StreamWrite(x6339,x6348,b3743)
    val b6414 = StoreDef(List(b6410), None, Const(64)).name("b6414").ctrl(x6350) // StreamWrite(x6339,x6348,b3743)
    val x6351 = Counter(min=Const(0).ctrl(x6362), max=Const(16), step=Const(1).ctrl(x6362), par=16).name("x6351").ctrl(x6362) // CounterNew(Const(0),Const(16),Const(1),Const(16))
    val x6352 = CounterChain(List(x6351)).name("x6352").ctrl(x6362) // CounterChainNew(List(x6351))
    val x6358 = LoopController(style=InnerPipe, level=InnerControl, cchain=x6352).name("x6358").ctrl(x6362) // UnrolledForeach(List(b3743),x6352,Block(Const(())),List(List(b4164)),List(List(b4165)))
    val b4164 = IterDef(x6351, None).ctrl(x6358).name("b4164")
    val b4165 = DummyDef().ctrl(x6358).name("b4165")
    val x6353 = OpDef(op=BitAnd, inputs=List(b4165, b3743)).name("x6353").ctrl(x6358) // And(b4165,b3743)
    val x6354 = LoadDef(List(x6321_d0_b0), Some(List(b4164))).name("x6354").ctrl(x6358) // ParSRAMLoad(x6321,List(List(b4164)),List(x6353))
    val x6355 = x6354 // x6355 = VectorApply(x6354,0)
    // x6356 = SimpleStruct(ArrayBuffer((_1,x6355), (_2,Const(true))))
    val b6415 = StoreDef(List(b6411), None, x6355).name("b6415").ctrl(x6358) // ParStreamWrite(x6340,List(x6356),List(x6353))
    val x6359 = FringeContainer(x5957,b6409,b6410,b6411,b6412).name("x6359").ctrl(x6362) // FringeDenseStore(x5957,x6339,x6340,x6341)
    val x6361 = UnitController(style=SeqPipe, level=InnerControl).name("x6361").ctrl(x6362) // UnitPipe(List(b3743),Block(Const(())))
    val b6416 = LoadDef(List(b6412), None).name("b6416").ctrl(x6361) // StreamRead(x6341,b3743)
    
  }
}
