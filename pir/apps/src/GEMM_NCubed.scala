import pir._
import pir.node._
import arch._
import prism.enums._

object GEMM_NCubed extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x2675 = DRAM().name("x2675").ctrl(top) // x2675 = DRAMNew(ArrayBuffer(Const(64), Const(64)),Const(0))
    val x2676 = DRAM().name("x2676").ctrl(top) // x2676 = DRAMNew(ArrayBuffer(Const(64), Const(64)),Const(0))
    val x2677 = DRAM().name("x2677").ctrl(top) // x2677 = DRAMNew(ArrayBuffer(Const(64), Const(64)),Const(0))
    val x2788 = UnitController(style=SeqPipe, level=OuterControl).name("x2788").ctrl(top) // Hwblock(Block(Const(())),false)
    val x2680_d0_b0 = SRAM(size=4096, banking=NoBanking()).name("x2680_d0_b0").ctrl(x2788) // x2680 = SRAMNew(ArrayBuffer(Const(64), Const(64)))
    isAccum(x2680_d0_b0) = false
    val x2681_d0_b0 = SRAM(size=4096, banking=NoBanking()).name("x2681_d0_b0").ctrl(x2788) // x2681 = SRAMNew(ArrayBuffer(Const(64), Const(64)))
    isAccum(x2681_d0_b0) = false
    val x2682_d0_b0 = SRAM(size=4096, banking=NoBanking()).name("x2682_d0_b0").ctrl(x2788) // x2682 = SRAMNew(ArrayBuffer(Const(64), Const(64)))
    isAccum(x2682_d0_b0) = false
    val x2683 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2683").ctrl(x2788) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2684 = CounterChain(List(x2683)).name("x2684").ctrl(x2788) // CounterChainNew(ArrayBuffer(x2683))
    val x2707 = LoopController(style=StreamPipe, level=OuterControl, cchain=x2684).name("x2707").ctrl(x2788) // UnrolledForeach(List(Const(true)),x2684,Block(Const(())),ArrayBuffer(List(b1707)),ArrayBuffer(List(b1708)))
    val b1707 = CounterIter(x2683, Some(0)).ctrl(x2707).name("b1707")
    val b1708 = DummyOp().ctrl(x2707).name("b1708")
    val b2835 = StreamOut(field="offset").name("b2835").ctrl(x2707) // x2685 = StreamOutNew(BurstCmdBus)
    val b2836 = StreamOut(field="size").name("b2836").ctrl(x2707) // x2685 = StreamOutNew(BurstCmdBus)
    val x2686 = StreamIn(field="data").name("x2686").ctrl(x2707) // x2686 = StreamInNew(BurstDataBus())
    val x2698 = UnitController(style=SeqPipe, level=InnerControl).name("x2698").ctrl(x2707) // UnitPipe(List(b1708),Block(x2697))
    val x2687 = b1707 // FixConvert(b1707,TRUE,_32,_0)
    val x2688 = OpDef(op=FixSla, inputs=List(x2687, Const(6))).name("x2688").ctrl(x2698) // FixLsh(x2687,Const(6))
    val x2689 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x2690 = OpDef(op=FixAdd, inputs=List(x2688, x2689)).name("x2690").ctrl(x2698) // FixAdd(x2688,x2689)
    val x2691 = OpDef(op=FixSla, inputs=List(x2690, Const(2))).name("x2691").ctrl(x2698) // FixLsh(x2690,Const(2))
    val x2692 = x2691 // FixConvert(x2691,TRUE,_64,_0)
    val x2693 = top.argFringe.dramAddress(x2675).name("x2693").ctrl(x2698) // GetDRAMAddress(x2675)
    val x2694 = OpDef(op=FixAdd, inputs=List(x2692, x2693)).name("x2694").ctrl(x2698) // FixAdd(x2692,x2693)
    val x2696_x2695 = x2694 // FixConvert(x2694,TRUE,_64,_0)
    // x2696 = SimpleStruct(ArrayBuffer((offset,x2695), (size,Const(256)), (isLoad,Const(true))))
    val b2837_b2835 = WriteMem(b2835, x2696_x2695).name("b2837_b2835").ctrl(x2698) // StreamWrite(x2685,x2696,b1708)
    val b2838_b2836 = WriteMem(b2836, Const(256)).name("b2838_b2836").ctrl(x2698) // StreamWrite(x2685,x2696,b1708)
    val x2699 = FringeContainer(x2675,b2835,b2836,x2686).name("x2699").ctrl(x2707) // FringeDenseLoad(x2675,x2685,x2686)
    val x2700 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2700").ctrl(x2707) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2701 = CounterChain(List(x2700)).name("x2701").ctrl(x2707) // CounterChainNew(List(x2700))
    val x2706 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2701).name("x2706").ctrl(x2707) // UnrolledForeach(ArrayBuffer(b1708),x2701,Block(Const(())),List(List(b1726)),List(List(b1727)))
    val b1726 = CounterIter(x2700, None).ctrl(x2706).name("b1726")
    val b1727 = DummyOp().ctrl(x2706).name("b1727")
    val x2702 = OpDef(op=BitAnd, inputs=List(b1727, b1708)).name("x2702").ctrl(x2706) // And(b1727,b1708)
    val x2703_x2703 = ReadMem(x2686).name("x2703").ctrl(x2706) // ParStreamRead(x2686,List(x2702))
    val x2704_x2704 = x2703_x2703 // x2704 = VectorApply(x2703,0)
    val x2705 = StoreBanks(List(x2680_d0_b0), List(b1707, b1726), x2704_x2704).name("x2705").ctrl(x2706) // ParSRAMStore(x2680,List(List(b1707, b1726)),List(x2704),List(x2702))
    val x2708 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2708").ctrl(x2788) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2709 = CounterChain(List(x2708)).name("x2709").ctrl(x2788) // CounterChainNew(ArrayBuffer(x2708))
    val x2732 = LoopController(style=StreamPipe, level=OuterControl, cchain=x2709).name("x2732").ctrl(x2788) // UnrolledForeach(List(Const(true)),x2709,Block(Const(())),ArrayBuffer(List(b1736)),ArrayBuffer(List(b1737)))
    val b1736 = CounterIter(x2708, Some(0)).ctrl(x2732).name("b1736")
    val b1737 = DummyOp().ctrl(x2732).name("b1737")
    val b2839 = StreamOut(field="offset").name("b2839").ctrl(x2732) // x2710 = StreamOutNew(BurstCmdBus)
    val b2840 = StreamOut(field="size").name("b2840").ctrl(x2732) // x2710 = StreamOutNew(BurstCmdBus)
    val x2711 = StreamIn(field="data").name("x2711").ctrl(x2732) // x2711 = StreamInNew(BurstDataBus())
    val x2723 = UnitController(style=SeqPipe, level=InnerControl).name("x2723").ctrl(x2732) // UnitPipe(List(b1737),Block(x2722))
    val x2712 = b1736 // FixConvert(b1736,TRUE,_32,_0)
    val x2713 = OpDef(op=FixSla, inputs=List(x2712, Const(6))).name("x2713").ctrl(x2723) // FixLsh(x2712,Const(6))
    val x2714 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x2715 = OpDef(op=FixAdd, inputs=List(x2713, x2714)).name("x2715").ctrl(x2723) // FixAdd(x2713,x2714)
    val x2716 = OpDef(op=FixSla, inputs=List(x2715, Const(2))).name("x2716").ctrl(x2723) // FixLsh(x2715,Const(2))
    val x2717 = x2716 // FixConvert(x2716,TRUE,_64,_0)
    val x2718 = top.argFringe.dramAddress(x2676).name("x2718").ctrl(x2723) // GetDRAMAddress(x2676)
    val x2719 = OpDef(op=FixAdd, inputs=List(x2717, x2718)).name("x2719").ctrl(x2723) // FixAdd(x2717,x2718)
    val x2721_x2720 = x2719 // FixConvert(x2719,TRUE,_64,_0)
    // x2721 = SimpleStruct(ArrayBuffer((offset,x2720), (size,Const(256)), (isLoad,Const(true))))
    val b2841_b2839 = WriteMem(b2839, x2721_x2720).name("b2841_b2839").ctrl(x2723) // StreamWrite(x2710,x2721,b1737)
    val b2842_b2840 = WriteMem(b2840, Const(256)).name("b2842_b2840").ctrl(x2723) // StreamWrite(x2710,x2721,b1737)
    val x2724 = FringeContainer(x2676,b2839,b2840,x2711).name("x2724").ctrl(x2732) // FringeDenseLoad(x2676,x2710,x2711)
    val x2725 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2725").ctrl(x2732) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2726 = CounterChain(List(x2725)).name("x2726").ctrl(x2732) // CounterChainNew(List(x2725))
    val x2731 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2726).name("x2731").ctrl(x2732) // UnrolledForeach(ArrayBuffer(b1737),x2726,Block(Const(())),List(List(b1755)),List(List(b1756)))
    val b1755 = CounterIter(x2725, None).ctrl(x2731).name("b1755")
    val b1756 = DummyOp().ctrl(x2731).name("b1756")
    val x2727 = OpDef(op=BitAnd, inputs=List(b1756, b1737)).name("x2727").ctrl(x2731) // And(b1756,b1737)
    val x2728_x2728 = ReadMem(x2711).name("x2728").ctrl(x2731) // ParStreamRead(x2711,List(x2727))
    val x2729_x2729 = x2728_x2728 // x2729 = VectorApply(x2728,0)
    val x2730 = StoreBanks(List(x2681_d0_b0), List(b1736, b1755), x2729_x2729).name("x2730").ctrl(x2731) // ParSRAMStore(x2681,List(List(b1736, b1755)),List(x2729),List(x2727))
    val x2733 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2733").ctrl(x2788) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2734 = CounterChain(List(x2733)).name("x2734").ctrl(x2788) // CounterChainNew(List(x2733))
    val x2758 = LoopController(style=MetaPipe, level=OuterControl, cchain=x2734).name("x2758").ctrl(x2788) // UnrolledForeach(List(Const(true)),x2734,Block(Const(())),List(List(b1765)),List(List(b1766)))
    val b1765 = CounterIter(x2733, Some(0)).ctrl(x2758).name("b1765")
    val b1766 = DummyOp().ctrl(x2758).name("b1766")
    val x2735 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2735").ctrl(x2758) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2736 = CounterChain(List(x2735)).name("x2736").ctrl(x2758) // CounterChainNew(List(x2735))
    val x2757 = LoopController(style=MetaPipe, level=OuterControl, cchain=x2736).name("x2757").ctrl(x2758) // UnrolledForeach(List(b1766),x2736,Block(Const(())),List(List(b1769)),List(List(b1770)))
    val b1769 = CounterIter(x2735, Some(0)).ctrl(x2757).name("b1769")
    val b1770 = DummyOp().ctrl(x2757).name("b1770")
    val x2737_d0 = Reg(init=0.0).name("x2737_d0").ctrl(x2757) // x2737 = RegNew(Const(0))
    isAccum(x2737_d0) = false
    val x2737_d1 = Reg(init=0.0).name("x2737_d1").ctrl(x2757) // x2737 = RegNew(Const(0))
    isAccum(x2737_d1) = true
    val x2738 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2738").ctrl(x2757) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2739 = CounterChain(List(x2738)).name("x2739").ctrl(x2757) // CounterChainNew(List(x2738))
    val x2752 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2739).name("x2752").ctrl(x2757) // UnrolledReduce(List(b1770, b1766),x2739,x2737,Block((x2737) => Const(())),List(List(b1774)),List(List(b1775)))
    val b1774 = CounterIter(x2738, None).ctrl(x2752).name("b1774")
    val b1775 = DummyOp().ctrl(x2752).name("b1775")
    val x2740 = OpDef(op=BitAnd, inputs=List(b1775, b1770)).name("x2740").ctrl(x2752) // And(b1775,b1770)
    val x2741 = OpDef(op=BitAnd, inputs=List(x2740, b1766)).name("x2741").ctrl(x2752) // And(x2740,b1766)
    val x2742 = LoadBanks(List(x2680_d0_b0), List(b1765, b1774)).name("x2742").ctrl(x2752) // ParSRAMLoad(x2680,List(List(b1765, b1774)),List(x2741))
    val x2743 = x2742 // x2743 = VectorApply(x2742,0)
    val x2744 = LoadBanks(List(x2681_d0_b0), List(b1774, b1769)).name("x2744").ctrl(x2752) // ParSRAMLoad(x2681,List(List(b1774, b1769)),List(x2741))
    val x2745 = x2744 // x2745 = VectorApply(x2744,0)
    val x2746 = OpDef(op=FixMul, inputs=List(x2743, x2745)).name("x2746").ctrl(x2752) // FixMul(x2743,x2745)
    val x2747 = ReadMem(x2737_d1).name("x2747").ctrl(x2752) // RegRead(x2737)
    val x2748 = OpDef(op=FixEql, inputs=List(b1774, Const(0))).name("x2748").ctrl(x2752) // FixEql(b1774,Const(0))
    val x2749 = ReduceAccumOp(op=FixAdd, input=x2746, accum=x2747).name("x2749").ctrl(x2752) // FixAdd(x2746,x2747)
    val x2750 = OpDef(op=BitAnd, inputs=List(b1770, b1766)).name("x2750").ctrl(x2752) // And(b1770,b1766)
    val x2751_x2737_d0 = WriteMem(x2737_d0, x2749).name("x2751_x2737_d0").ctrl(x2752) // RegWrite(x2737,x2749,x2750)
    val x2751_x2737_d1 = WriteMem(x2737_d1, x2749).name("x2751_x2737_d1").ctrl(x2752) // RegWrite(x2737,x2749,x2750)
    val x2756 = UnitController(style=SeqPipe, level=InnerControl).name("x2756").ctrl(x2757) // UnitPipe(List(b1770, b1766),Block(Const(())))
    val x2753 = ReadMem(x2737_d0).name("x2753").ctrl(x2756) // RegRead(x2737)
    val x2754 = OpDef(op=BitAnd, inputs=List(b1770, b1766)).name("x2754").ctrl(x2756) // And(b1770,b1766)
    val x2755 = StoreBanks(List(x2682_d0_b0), List(b1765, b1769), x2753).name("x2755").ctrl(x2756) // SRAMStore(x2682,ArrayBuffer(Const(64), Const(64)),List(b1765, b1769),Const(0),x2753,x2754)
    val x2759 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2759").ctrl(x2788) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2760 = CounterChain(List(x2759)).name("x2760").ctrl(x2788) // CounterChainNew(ArrayBuffer(x2759))
    val x2787 = LoopController(style=StreamPipe, level=OuterControl, cchain=x2760).name("x2787").ctrl(x2788) // UnrolledForeach(List(Const(true)),x2760,Block(Const(())),ArrayBuffer(List(b1797)),ArrayBuffer(List(b1798)))
    val b1797 = CounterIter(x2759, Some(0)).ctrl(x2787).name("b1797")
    val b1798 = DummyOp().ctrl(x2787).name("b1798")
    val b2843 = StreamOut(field="offset").name("b2843").ctrl(x2787) // x2761 = StreamOutNew(BurstCmdBus)
    val b2844 = StreamOut(field="size").name("b2844").ctrl(x2787) // x2761 = StreamOutNew(BurstCmdBus)
    val x2762 = StreamOut(field="data").name("x2762").ctrl(x2787) // x2762 = StreamOutNew(BurstFullDataBus())
    val x2763 = StreamIn(field="ack").name("x2763").ctrl(x2787) // x2763 = StreamInNew(BurstAckBus)
    val x2775 = UnitController(style=SeqPipe, level=InnerControl).name("x2775").ctrl(x2787) // UnitPipe(List(b1798),Block(x2774))
    val x2764 = b1797 // FixConvert(b1797,TRUE,_32,_0)
    val x2765 = OpDef(op=FixSla, inputs=List(x2764, Const(6))).name("x2765").ctrl(x2775) // FixLsh(x2764,Const(6))
    val x2766 = Const(0) // FixConvert(Const(0),TRUE,_32,_0)
    val x2767 = OpDef(op=FixAdd, inputs=List(x2765, x2766)).name("x2767").ctrl(x2775) // FixAdd(x2765,x2766)
    val x2768 = OpDef(op=FixSla, inputs=List(x2767, Const(2))).name("x2768").ctrl(x2775) // FixLsh(x2767,Const(2))
    val x2769 = x2768 // FixConvert(x2768,TRUE,_64,_0)
    val x2770 = top.argFringe.dramAddress(x2677).name("x2770").ctrl(x2775) // GetDRAMAddress(x2677)
    val x2771 = OpDef(op=FixAdd, inputs=List(x2769, x2770)).name("x2771").ctrl(x2775) // FixAdd(x2769,x2770)
    val x2773_x2772 = x2771 // FixConvert(x2771,TRUE,_64,_0)
    // x2773 = SimpleStruct(ArrayBuffer((offset,x2772), (size,Const(256)), (isLoad,Const(false))))
    val b2845_b2843 = WriteMem(b2843, x2773_x2772).name("b2845_b2843").ctrl(x2775) // StreamWrite(x2761,x2773,b1798)
    val b2846_b2844 = WriteMem(b2844, Const(256)).name("b2846_b2844").ctrl(x2775) // StreamWrite(x2761,x2773,b1798)
    val x2776 = Counter(min=Const(0), max=Const(64), step=Const(1), par=1).name("x2776").ctrl(x2787) // CounterNew(Const(0),Const(64),Const(1),Const(1))
    val x2777 = CounterChain(List(x2776)).name("x2777").ctrl(x2787) // CounterChainNew(List(x2776))
    val x2783 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2777).name("x2783").ctrl(x2787) // UnrolledForeach(ArrayBuffer(b1798),x2777,Block(Const(())),List(List(b1816)),List(List(b1817)))
    val b1816 = CounterIter(x2776, None).ctrl(x2783).name("b1816")
    val b1817 = DummyOp().ctrl(x2783).name("b1817")
    val x2778 = OpDef(op=BitAnd, inputs=List(b1817, b1798)).name("x2778").ctrl(x2783) // And(b1817,b1798)
    val x2779 = LoadBanks(List(x2682_d0_b0), List(b1797, b1816)).name("x2779").ctrl(x2783) // ParSRAMLoad(x2682,List(List(b1797, b1816)),List(x2778))
    val x2781_x2780 = x2779 // x2780 = VectorApply(x2779,0)
    // x2781 = SimpleStruct(ArrayBuffer((_1,x2780), (_2,Const(true))))
    val x2782_x2762 = WriteMem(x2762, x2781_x2780).name("x2782_x2762").ctrl(x2783) // ParStreamWrite(x2762,List(x2781),List(x2778))
    val x2784 = FringeContainer(x2677,b2843,b2844,x2762,x2763).name("x2784").ctrl(x2787) // FringeDenseStore(x2677,x2761,x2762,x2763)
    val x2786 = UnitController(style=SeqPipe, level=InnerControl).name("x2786").ctrl(x2787) // UnitPipe(List(b1798),Block(Const(())))
    val x2785_x2785 = ReadMem(x2763).name("x2785").ctrl(x2786) // StreamRead(x2763,b1798)
    
  }
}
