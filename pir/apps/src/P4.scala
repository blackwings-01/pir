import pir._
import pir.node._
import arch._
import pirc.enums._

object P4 extends PIRApp {
  def main(top:Top) = {
    val x1339 = StreamIn(field="data").name("x1339").ctrl(top) // x1339 = StreamInNew(BurstDataBus())
    val x1340 = StreamIn(field="data").name("x1340").ctrl(top) // x1340 = StreamInNew(BurstDataBus())
    val x1341 = StreamOut(field="data").name("x1341").ctrl(top) // x1341 = StreamOutNew(BurstDataBus())
    val x1342 = StreamOut(field="data").name("x1342").ctrl(top) // x1342 = StreamOutNew(BurstDataBus())
    // x1343 = Forever() TODO: Unmatched Node
    val x1428 = UnitController(style=StreamPipe, level=OuterControl).name("x1428").ctrl(top) // Hwblock(Block(Const(())),true)
    val x1344_d0_b0 = SRAM(size=4, banking=NoBanking()).name("x1344_d0_b0").ctrl(x1428) // x1344 = SRAMNew(ArrayBuffer(Const(2), Const(2)))
    val x1344_d1_b0 = SRAM(size=4, banking=NoBanking()).name("x1344_d1_b0").ctrl(x1428) // x1344 = SRAMNew(ArrayBuffer(Const(2), Const(2)))
    val x1345_d0_b0 = SRAM(size=4, banking=NoBanking()).name("x1345_d0_b0").ctrl(x1428) // x1345 = SRAMNew(ArrayBuffer(Const(2), Const(2)))
    val x1346 = Counter(min=Const(0).ctrl(x1428), max=Const(2).ctrl(x1428), step=Const(1).ctrl(x1428), par=1).name("x1346").ctrl(x1428) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x1347 = Counter(min=Const(0).ctrl(x1428), max=Const(2).ctrl(x1428), step=Const(1).ctrl(x1428), par=1).name("x1347").ctrl(x1428) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x1348 = CounterChain(List(x1347,x1346)).name("x1348").ctrl(x1428) // CounterChainNew(List(x1347, x1346))
    val x1364 = LoopController(style=InnerPipe, level=InnerControl, cchain=x1348).name("x1364").ctrl(x1428) // UnrolledForeach(List(Const(true)),x1348,Block(Const(())),List(List(b883), List(b884)),List(List(b885), List(b886)))
    val b883 = CounterIter(x1347, Some(0)).ctrl(x1364).name("b883")
    val b885 = DummyOp().ctrl(x1364).name("b885")
    val b884 = CounterIter(x1346, None).ctrl(x1364).name("b884")
    val b886 = DummyOp().ctrl(x1364).name("b886")
    val x1349 = OpDef(op=BitAnd, inputs=List(b885, b886)).name("x1349").ctrl(x1364) // And(b885,b886)
    val x1350 = ReadMem(x1339).name("x1350").ctrl(x1364) // ParStreamRead(x1339,List(x1349))
    val x1351 = x1350 // x1351 = VectorApply(x1350,0)
    val x1352 = ReadMem(x1340).name("x1352").ctrl(x1364) // ParStreamRead(x1340,List(x1349))
    val x1353 = x1352 // x1353 = VectorApply(x1352,0)
    val x1354 = OpDef(op=FixEql, inputs=List(b884, Const(0).ctrl(x1364))).name("x1354").ctrl(x1364) // FixEql(b884,Const(0))
    val x1355 = OpDef(op=MuxOp, inputs=List(x1354, x1351, x1353)).name("x1355").ctrl(x1364) // Mux(x1354,x1351,x1353)
    val x1356 = OpDef(op=FixEql, inputs=List(b883, Const(0).ctrl(x1364))).name("x1356").ctrl(x1364) // FixEql(b883,Const(0))
    val x1357 = x1355 // x1357 = DataAsBits(x1355)
    val x1358 = OpDef(op=BitAnd, inputs=List(x1357, Const(65535))).name("x1358").ctrl(x1364) // VectorSlice(x1357,16,0) strMask=00000000000000001111111111111111
    val x1359 = x1358 // x1359 = BitsAsData(x1358,FixPt[FALSE,_16,_0])
    val x1360 = OpDef(op=BitAnd, inputs=List(x1357, Const(0))).name("x1360").ctrl(x1364) // VectorSlice(x1357,16,16) strMask=00000000000000000000000000000000
    val x1361 = x1360 // x1361 = BitsAsData(x1360,FixPt[FALSE,_16,_0])
    val x1362 = OpDef(op=MuxOp, inputs=List(x1356, x1359, x1361)).name("x1362").ctrl(x1364) // Mux(x1356,x1359,x1361)
    val x1363 = StoreBanks(List(x1344_d0_b0, x1344_d1_b0), List(b883, b884), x1362).name("x1363").ctrl(x1364) // ParSRAMStore(x1344,List(List(b883, b884)),List(x1362),List(x1349))
    val x1365_d0_b0 = SRAM(size=2, banking=NoBanking()).name("x1365_d0_b0").ctrl(x1428) // x1365 = SRAMNew(List(Const(2)))
    val x1366_d0_b0 = SRAM(size=4, banking=NoBanking()).name("x1366_d0_b0").ctrl(x1428) // x1366 = SRAMNew(ArrayBuffer(Const(2), Const(2)))
    val x1367_d0_b0 = SRAM(size=2, banking=NoBanking()).name("x1367_d0_b0").ctrl(x1428) // x1367 = SRAMNew(List(Const(2), Const(1)))
    val x1368 = Counter(min=Const(0).ctrl(x1428), max=Const(2).ctrl(x1428), step=Const(1).ctrl(x1428), par=1).name("x1368").ctrl(x1428) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x1369 = Counter(min=Const(0).ctrl(x1428), max=Const(2).ctrl(x1428), step=Const(1).ctrl(x1428), par=1).name("x1369").ctrl(x1428) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x1370 = CounterChain(List(x1369,x1368)).name("x1370").ctrl(x1428) // CounterChainNew(List(x1369, x1368))
    val x1377 = LoopController(style=InnerPipe, level=InnerControl, cchain=x1370).name("x1377").ctrl(x1428) // UnrolledForeach(List(Const(true)),x1370,Block(Const(())),List(List(b909), List(b910)),List(List(b911), List(b912)))
    val b909 = CounterIter(x1369, Some(0)).ctrl(x1377).name("b909")
    val b911 = DummyOp().ctrl(x1377).name("b911")
    val b910 = CounterIter(x1368, None).ctrl(x1377).name("b910")
    val b912 = DummyOp().ctrl(x1377).name("b912")
    val x1371 = OpDef(op=BitAnd, inputs=List(b911, b912)).name("x1371").ctrl(x1377) // And(b911,b912)
    val x1372 = LoadBanks(List(x1344_d1_b0), List(Const(0), b909)).name("x1372").ctrl(x1377) // SRAMLoad(x1344,ArrayBuffer(Const(2), Const(2)),List(Const(0), b909),Const(0),x1371)
    val x1373 = LoadBanks(List(x1365_d0_b0), List(b910)).name("x1373").ctrl(x1377) // ParSRAMLoad(x1365,List(List(b910)),List(x1371))
    val x1374 = x1373 // x1374 = VectorApply(x1373,0)
    val x1375 = OpDef(op=FixEql, inputs=List(x1372, x1374)).name("x1375").ctrl(x1377) // FixEql(x1372,x1374)
    val x1376 = StoreBanks(List(x1366_d0_b0), List(b909, b910), x1375).name("x1376").ctrl(x1377) // ParSRAMStore(x1366,List(List(b909, b910)),List(x1375),List(x1371))
    val x1378 = Counter(min=Const(0).ctrl(x1428), max=Const(2).ctrl(x1428), step=Const(1).ctrl(x1428), par=1).name("x1378").ctrl(x1428) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x1379 = Counter(min=Const(0).ctrl(x1428), max=Const(2).ctrl(x1428), step=Const(1).ctrl(x1428), par=1).name("x1379").ctrl(x1428) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x1380 = CounterChain(List(x1379,x1378)).name("x1380").ctrl(x1428) // CounterChainNew(List(x1379, x1378))
    val x1396 = LoopController(style=InnerPipe, level=InnerControl, cchain=x1380).name("x1396").ctrl(x1428) // UnrolledForeach(List(Const(true)),x1380,Block(Const(())),List(List(b923), List(b924)),List(List(b925), List(b926)))
    val b923 = CounterIter(x1379, Some(0)).ctrl(x1396).name("b923")
    val b925 = DummyOp().ctrl(x1396).name("b925")
    val b924 = CounterIter(x1378, None).ctrl(x1396).name("b924")
    val b926 = DummyOp().ctrl(x1396).name("b926")
    val x1381 = OpDef(op=BitAnd, inputs=List(b925, b926)).name("x1381").ctrl(x1396) // And(b925,b926)
    val x1382 = LoadBanks(List(x1366_d0_b0), List(b923, b924)).name("x1382").ctrl(x1396) // ParSRAMLoad(x1366,List(List(b923, b924)),List(x1381))
    val x1383 = x1382 // x1383 = VectorApply(x1382,0)
    val x1384 = LoadBanks(List(x1344_d0_b0), List(Const(0), b924)).name("x1384").ctrl(x1396) // ParSRAMLoad(x1344,List(List(Const(0), b924)),List(x1381))
    val x1385 = x1384 // x1385 = VectorApply(x1384,0)
    val x1386 = LoadBanks(List(x1367_d0_b0), List(b923, Const(0))).name("x1386").ctrl(x1396) // SRAMLoad(x1367,List(Const(2), Const(1)),List(b923, Const(0)),Const(0),x1381)
    val x1387 = OpDef(op=FixEql, inputs=List(x1386, Const(1).ctrl(x1396))).name("x1387").ctrl(x1396) // FixEql(x1386,Const(1))
    val x1388 = OpDef(op=FixAdd, inputs=List(x1385, Const(2).ctrl(x1396))).name("x1388").ctrl(x1396) // FixAdd(x1385,Const(2))
    val x1389 = OpDef(op=FixAdd, inputs=List(x1385, Const(3).ctrl(x1396))).name("x1389").ctrl(x1396) // FixAdd(x1385,Const(3))
    val x1390 = OpDef(op=MuxOp, inputs=List(x1387, x1388, x1389)).name("x1390").ctrl(x1396) // Mux(x1387,x1388,x1389)
    val x1391 = OpDef(op=FixEql, inputs=List(x1386, Const(0).ctrl(x1396))).name("x1391").ctrl(x1396) // FixEql(x1386,Const(0))
    val x1392 = OpDef(op=FixAdd, inputs=List(x1385, Const(1).ctrl(x1396))).name("x1392").ctrl(x1396) // FixAdd(x1385,Const(1))
    val x1393 = OpDef(op=MuxOp, inputs=List(x1391, x1392, x1390)).name("x1393").ctrl(x1396) // Mux(x1391,x1392,x1390)
    val x1394 = OpDef(op=MuxOp, inputs=List(x1383, x1393, x1385)).name("x1394").ctrl(x1396) // Mux(x1383,x1393,x1385)
    val x1395 = StoreBanks(List(x1345_d0_b0), List(Const(0), b923), x1394).name("x1395").ctrl(x1396) // ParSRAMStore(x1345,List(List(Const(0), b923)),List(x1394),List(x1381))
    val x1397 = Counter(min=Const(0).ctrl(x1428), max=Const(2).ctrl(x1428), step=Const(1).ctrl(x1428), par=1).name("x1397").ctrl(x1428) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x1398 = Counter(min=Const(0).ctrl(x1428), max=Const(2).ctrl(x1428), step=Const(1).ctrl(x1428), par=1).name("x1398").ctrl(x1428) // CounterNew(Const(0),Const(2),Const(1),Const(1))
    val x1399 = CounterChain(List(x1398,x1397)).name("x1399").ctrl(x1428) // CounterChainNew(List(x1398, x1397))
    val x1427 = LoopController(style=MetaPipe, level=OuterControl, cchain=x1399).name("x1427").ctrl(x1428) // UnrolledForeach(List(Const(true)),x1399,Block(Const(())),List(List(b946), List(b947)),List(List(b948), List(b949)))
    val b946 = CounterIter(x1398, Some(0)).ctrl(x1427).name("b946")
    val b948 = DummyOp().ctrl(x1427).name("b948")
    val b947 = CounterIter(x1397, Some(0)).ctrl(x1427).name("b947")
    val b949 = DummyOp().ctrl(x1427).name("b949")
    val x1400_d0 = Reg(init=0.0).name("x1400_d0").ctrl(x1427) // x1400 = RegNew(Const(0))
    val x1400_d1 = Reg(init=0.0).name("x1400_d1").ctrl(x1427) // x1400 = RegNew(Const(0))
    val x1401_d0 = Reg(init=false).name("x1401_d0").ctrl(x1427) // x1401 = RegNew(Const(false))
    val x1401_d1 = Reg(init=false).name("x1401_d1").ctrl(x1427) // x1401 = RegNew(Const(false))
    val x1402_d0 = Reg(init=false).name("x1402_d0").ctrl(x1427) // x1402 = RegNew(Const(false))
    val x1402_d1 = Reg(init=false).name("x1402_d1").ctrl(x1427) // x1402 = RegNew(Const(false))
    val x1411 = UnitController(style=SeqPipe, level=InnerControl).name("x1411").ctrl(x1427) // UnitPipe(List(b948, b949),Block(Const(())))
    val x1403 = OpDef(op=BitAnd, inputs=List(b948, b949)).name("x1403").ctrl(x1411) // And(b948,b949)
    val x1404 = LoadBanks(List(x1345_d0_b0), List(b946, b947)).name("x1404").ctrl(x1411) // SRAMLoad(x1345,ArrayBuffer(Const(2), Const(2)),List(b946, b947),Const(0),x1403)
    val x1405 = OpDef(op=FixConvert, inputs=List(x1404)).name("x1405").ctrl(x1411) // FixConvert(x1404,FALSE,_32,_0)
    val x1406 = OpDef(op=FixEql, inputs=List(b947, Const(0).ctrl(x1411))).name("x1406").ctrl(x1411) // FixEql(b947,Const(0))
    val x1407 = OpDef(op=BitNot, inputs=List(x1406)).name("x1407").ctrl(x1411) // Not(x1406)
    val x1408 = WriteMems(List(x1400_d0, x1400_d1), x1405).name("x1408").ctrl(x1411) // RegWrite(x1400,x1405,x1403)
    val x1409 = WriteMems(List(x1401_d0, x1401_d1), x1406).name("x1409").ctrl(x1411) // RegWrite(x1401,x1406,x1403)
    val x1410 = WriteMems(List(x1402_d0, x1402_d1), x1407).name("x1410").ctrl(x1411) // RegWrite(x1402,x1407,x1403)
    val x1412 = ReadMem(x1402_d1).name("x1412").ctrl(x1427) // RegRead(x1402)
    val x1413 = ReadMem(x1401_d1).name("x1413").ctrl(x1427) // RegRead(x1401)
    val x1426 = UnitController(style=ForkSwitch, level=OuterControl).name("x1426").ctrl(x1427) // //TODO Switch(Block(x1425),List(x1413, x1412),List(x1419, x1425))
    val x1419 = UnitController(style=MetaPipe, level=InnerControl).name("x1419").ctrl(x1426) // //TODO SwitchCase(Block(x1418))
    val x1414 = ReadMem(x1401_d0).name("x1414").ctrl(x1419) // RegRead(x1401)
    val x1415 = ReadMem(x1400_d1).name("x1415").ctrl(x1419) // RegRead(x1400)
    val x1416 = OpDef(op=BitAnd, inputs=List(b948, b949)).name("x1416").ctrl(x1419) // And(b948,b949)
    val x1417 = OpDef(op=BitAnd, inputs=List(x1414, x1416)).name("x1417").ctrl(x1419) // And(x1414,x1416)
    val x1418 = WriteMems(List(x1341), x1415).name("x1418").ctrl(x1419) // StreamWrite(x1341,x1415,x1417)
    val x1425 = UnitController(style=MetaPipe, level=InnerControl).name("x1425").ctrl(x1426) // //TODO SwitchCase(Block(x1424))
    val x1420 = ReadMem(x1402_d0).name("x1420").ctrl(x1425) // RegRead(x1402)
    val x1421 = ReadMem(x1400_d0).name("x1421").ctrl(x1425) // RegRead(x1400)
    val x1422 = OpDef(op=BitAnd, inputs=List(b948, b949)).name("x1422").ctrl(x1425) // And(b948,b949)
    val x1423 = OpDef(op=BitAnd, inputs=List(x1420, x1422)).name("x1423").ctrl(x1425) // And(x1420,x1422)
    val x1424 = WriteMems(List(x1342), x1421).name("x1424").ctrl(x1425) // StreamWrite(x1342,x1421,x1423)
    
  }
}
