import pir._
import pir.node._
import arch._
import pirc.enums._

object TPCHQ6 extends PIRApp {
  def main(top:Top) = {
    val x2850 = top.argIn(init=0).name("x2850").ctrl(top) // ArgInNew(Const(0))
    val x2852 = ReadMem(x2850).name("x2852").ctrl(top) // RegRead(x2850)
    val x2853 = DRAM().name("x2853").ctrl(top) // x2853 = DRAMNew(ArrayBuffer(x2852),Const(0))
    val x2854 = ReadMem(x2850).name("x2854").ctrl(top) // RegRead(x2850)
    val x2855 = DRAM().name("x2855").ctrl(top) // x2855 = DRAMNew(ArrayBuffer(x2854),Const(0))
    val x2856 = ReadMem(x2850).name("x2856").ctrl(top) // RegRead(x2850)
    val x2857 = DRAM().name("x2857").ctrl(top) // x2857 = DRAMNew(ArrayBuffer(x2856),Const(0))
    val x2858 = ReadMem(x2850).name("x2858").ctrl(top) // RegRead(x2850)
    val x2859 = DRAM().name("x2859").ctrl(top) // x2859 = DRAMNew(ArrayBuffer(x2858),Const(0))
    val x2860 = top.argOut(init=0).name("x2860").ctrl(top) // ArgOutNew(Const(0))
    val x3111 = UnitController(style=SeqPipe, level=OuterControl).name("x3111").ctrl(top) // Hwblock(Block(Const(())),false)
    val x2865_d0 = Reg(init=0).name("x2865_d0").ctrl(x3111) // x2865 = RegNew(Const(0))
    val x2865_d1 = Reg(init=0).name("x2865_d1").ctrl(x3111) // x2865 = RegNew(Const(0))
    val x2866 = ReadMem(x2850).name("x2866").ctrl(x3111) // RegRead(x2850)
    val x2867 = Counter(min=Const(0).ctrl(x3111), max=x2866, step=Const(384).ctrl(x3111), par=2).name("x2867").ctrl(x3111) // CounterNew(Const(0),x2866,Const(384),Const(2))
    val x2868 = CounterChain(List(x2867)).name("x2868").ctrl(x3111) // CounterChainNew(List(x2867))
    val x3107 = LoopController(style=MetaPipe, level=OuterControl, cchain=x2868).name("x3107").ctrl(x3111) // UnrolledReduce(List(Const(true)),x2868,x2865,Block((x2865) => Const(())),List(List(b1373, b1374)),List(List(b1375, b1376)))
    val b1373 = CounterIter(x2867, Some(0)).ctrl(x3107).name("b1373")
    val b1375 = DummyOp().ctrl(x3107).name("b1375")
    val b1374 = CounterIter(x2867, Some(1)).ctrl(x3107).name("b1374")
    val b1376 = DummyOp().ctrl(x3107).name("b1376")
    val x2869_d0_b0 = SRAM(size=24, banking=Strided(banks=16, stride=1)).name("x2869_d0_b0").ctrl(x3107) // x2869 = SRAMNew(ArrayBuffer(Const(384)))
    val x2870_d0_b0 = SRAM(size=24, banking=Strided(banks=16, stride=1)).name("x2870_d0_b0").ctrl(x3107) // x2870 = SRAMNew(ArrayBuffer(Const(384)))
    val x2871_d0_b0 = SRAM(size=24, banking=Strided(banks=16, stride=1)).name("x2871_d0_b0").ctrl(x3107) // x2871 = SRAMNew(ArrayBuffer(Const(384)))
    val x2872_d0_b0 = SRAM(size=24, banking=Strided(banks=16, stride=1)).name("x2872_d0_b0").ctrl(x3107) // x2872 = SRAMNew(ArrayBuffer(Const(384)))
    val x2873_d0_b0 = SRAM(size=24, banking=Strided(banks=16, stride=1)).name("x2873_d0_b0").ctrl(x3107) // x2873 = SRAMNew(ArrayBuffer(Const(384)))
    val x2874_d0_b0 = SRAM(size=24, banking=Strided(banks=16, stride=1)).name("x2874_d0_b0").ctrl(x3107) // x2874 = SRAMNew(ArrayBuffer(Const(384)))
    val x2875_d0_b0 = SRAM(size=24, banking=Strided(banks=16, stride=1)).name("x2875_d0_b0").ctrl(x3107) // x2875 = SRAMNew(ArrayBuffer(Const(384)))
    val x2876_d0_b0 = SRAM(size=24, banking=Strided(banks=16, stride=1)).name("x2876_d0_b0").ctrl(x3107) // x2876 = SRAMNew(ArrayBuffer(Const(384)))
    val x2878 = UnitController(style=SeqPipe, level=InnerControl).name("x2878").ctrl(x3107) // UnitPipe(List(b1375),Block(Const(())))
    val x2877 = OpDef(op=FixAdd, inputs=List(b1373, Const(384).ctrl(x2878))).name("x2877").ctrl(x2878) // FixAdd(b1373,Const(384))
    val x2898 = UnitController(style=StreamPipe, level=OuterControl).name("x2898").ctrl(x3107) // UnitPipe(List(b1375),Block(Const(())))
    val b3135 = StreamOut(field="offset").name("b3135").ctrl(x2898) // x2879 = StreamOutNew(BurstCmdBus)
    val b3136 = StreamOut(field="size").name("b3136").ctrl(x2898) // x2879 = StreamOutNew(BurstCmdBus)
    val x2880 = StreamIn(field="data").name("x2880").ctrl(x2898) // x2880 = StreamInNew(BurstDataBus())
    val x2889 = UnitController(style=SeqPipe, level=InnerControl).name("x2889").ctrl(x2898) // UnitPipe(List(b1375),Block(x2888))
    val x2881 = OpDef(op=FixConvert, inputs=List(b1373)).name("x2881").ctrl(x2889) // FixConvert(b1373,TRUE,_32,_0)
    val x2882 = OpDef(op=FixSla, inputs=List(x2881, Const(2).ctrl(x2889))).name("x2882").ctrl(x2889) // FixLsh(x2881,Const(2))
    val x2883 = OpDef(op=FixConvert, inputs=List(x2882)).name("x2883").ctrl(x2889) // FixConvert(x2882,TRUE,_64,_0)
    val x2884 = top.dramAddress(x2853).name("x2884").ctrl(x2889) // GetDRAMAddress(x2853)
    val x2885 = OpDef(op=FixAdd, inputs=List(x2883, x2884)).name("x2885").ctrl(x2889) // FixAdd(x2883,x2884)
    val x2886 = OpDef(op=FixConvert, inputs=List(x2885)).name("x2886").ctrl(x2889) // FixConvert(x2885,TRUE,_64,_0)
    // x2887 = SimpleStruct(ArrayBuffer((offset,x2886), (size,Const(1536)), (isLoad,Const(true))))
    val b3137_b3135 = WriteMem(b3135, x2886).name("b3137_b3135").ctrl(x2889) // StreamWrite(x2879,x2887,b1375)
    val b3138_b3136 = WriteMem(b3136, Const(1536)).name("b3138_b3136").ctrl(x2889) // StreamWrite(x2879,x2887,b1375)
    val x2890 = FringeContainer(x2853,b3135,b3136,x2880).name("x2890").ctrl(x2898) // FringeDenseLoad(x2853,x2879,x2880)
    val x2891 = Counter(min=Const(0).ctrl(x2898), max=Const(384).ctrl(x2898), step=Const(1).ctrl(x2898), par=16).name("x2891").ctrl(x2898) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x2892 = CounterChain(List(x2891)).name("x2892").ctrl(x2898) // CounterChainNew(List(x2891))
    val x2897 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2892).name("x2897").ctrl(x2898) // UnrolledForeach(List(b1375),x2892,Block(Const(())),List(List(b1401)),List(List(b1402)))
    val b1401 = CounterIter(x2891, None).ctrl(x2897).name("b1401")
    val b1402 = DummyOp().ctrl(x2897).name("b1402")
    val x2893 = OpDef(op=BitAnd, inputs=List(b1402, b1375)).name("x2893").ctrl(x2897) // And(b1402,b1375)
    val x2894 = ReadMem(x2880).name("x2894").ctrl(x2897) // ParStreamRead(x2880,List(x2893))
    val x2895 = x2894 // x2895 = VectorApply(x2894,0)
    val x2896 = StoreBanks(List(x2869_d0_b0), List(b1401), x2895).name("x2896").ctrl(x2897) // ParSRAMStore(x2869,List(List(b1401)),List(x2895),List(x2893))
    val x2918 = UnitController(style=StreamPipe, level=OuterControl).name("x2918").ctrl(x3107) // UnitPipe(List(b1375),Block(Const(())))
    val b3139 = StreamOut(field="offset").name("b3139").ctrl(x2918) // x2899 = StreamOutNew(BurstCmdBus)
    val b3140 = StreamOut(field="size").name("b3140").ctrl(x2918) // x2899 = StreamOutNew(BurstCmdBus)
    val x2900 = StreamIn(field="data").name("x2900").ctrl(x2918) // x2900 = StreamInNew(BurstDataBus())
    val x2909 = UnitController(style=SeqPipe, level=InnerControl).name("x2909").ctrl(x2918) // UnitPipe(List(b1375),Block(x2908))
    val x2901 = OpDef(op=FixConvert, inputs=List(b1373)).name("x2901").ctrl(x2909) // FixConvert(b1373,TRUE,_32,_0)
    val x2902 = OpDef(op=FixSla, inputs=List(x2901, Const(2).ctrl(x2909))).name("x2902").ctrl(x2909) // FixLsh(x2901,Const(2))
    val x2903 = OpDef(op=FixConvert, inputs=List(x2902)).name("x2903").ctrl(x2909) // FixConvert(x2902,TRUE,_64,_0)
    val x2904 = top.dramAddress(x2855).name("x2904").ctrl(x2909) // GetDRAMAddress(x2855)
    val x2905 = OpDef(op=FixAdd, inputs=List(x2903, x2904)).name("x2905").ctrl(x2909) // FixAdd(x2903,x2904)
    val x2906 = OpDef(op=FixConvert, inputs=List(x2905)).name("x2906").ctrl(x2909) // FixConvert(x2905,TRUE,_64,_0)
    // x2907 = SimpleStruct(ArrayBuffer((offset,x2906), (size,Const(1536)), (isLoad,Const(true))))
    val b3141_b3139 = WriteMem(b3139, x2906).name("b3141_b3139").ctrl(x2909) // StreamWrite(x2899,x2907,b1375)
    val b3142_b3140 = WriteMem(b3140, Const(1536)).name("b3142_b3140").ctrl(x2909) // StreamWrite(x2899,x2907,b1375)
    val x2910 = FringeContainer(x2855,b3139,b3140,x2900).name("x2910").ctrl(x2918) // FringeDenseLoad(x2855,x2899,x2900)
    val x2911 = Counter(min=Const(0).ctrl(x2918), max=Const(384).ctrl(x2918), step=Const(1).ctrl(x2918), par=16).name("x2911").ctrl(x2918) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x2912 = CounterChain(List(x2911)).name("x2912").ctrl(x2918) // CounterChainNew(List(x2911))
    val x2917 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2912).name("x2917").ctrl(x2918) // UnrolledForeach(List(b1375),x2912,Block(Const(())),List(List(b1423)),List(List(b1424)))
    val b1423 = CounterIter(x2911, None).ctrl(x2917).name("b1423")
    val b1424 = DummyOp().ctrl(x2917).name("b1424")
    val x2913 = OpDef(op=BitAnd, inputs=List(b1424, b1375)).name("x2913").ctrl(x2917) // And(b1424,b1375)
    val x2914 = ReadMem(x2900).name("x2914").ctrl(x2917) // ParStreamRead(x2900,List(x2913))
    val x2915 = x2914 // x2915 = VectorApply(x2914,0)
    val x2916 = StoreBanks(List(x2871_d0_b0), List(b1423), x2915).name("x2916").ctrl(x2917) // ParSRAMStore(x2871,List(List(b1423)),List(x2915),List(x2913))
    val x2938 = UnitController(style=StreamPipe, level=OuterControl).name("x2938").ctrl(x3107) // UnitPipe(List(b1375),Block(Const(())))
    val b3143 = StreamOut(field="offset").name("b3143").ctrl(x2938) // x2919 = StreamOutNew(BurstCmdBus)
    val b3144 = StreamOut(field="size").name("b3144").ctrl(x2938) // x2919 = StreamOutNew(BurstCmdBus)
    val x2920 = StreamIn(field="data").name("x2920").ctrl(x2938) // x2920 = StreamInNew(BurstDataBus())
    val x2929 = UnitController(style=SeqPipe, level=InnerControl).name("x2929").ctrl(x2938) // UnitPipe(List(b1375),Block(x2928))
    val x2921 = OpDef(op=FixConvert, inputs=List(b1373)).name("x2921").ctrl(x2929) // FixConvert(b1373,TRUE,_32,_0)
    val x2922 = OpDef(op=FixSla, inputs=List(x2921, Const(2).ctrl(x2929))).name("x2922").ctrl(x2929) // FixLsh(x2921,Const(2))
    val x2923 = OpDef(op=FixConvert, inputs=List(x2922)).name("x2923").ctrl(x2929) // FixConvert(x2922,TRUE,_64,_0)
    val x2924 = top.dramAddress(x2857).name("x2924").ctrl(x2929) // GetDRAMAddress(x2857)
    val x2925 = OpDef(op=FixAdd, inputs=List(x2923, x2924)).name("x2925").ctrl(x2929) // FixAdd(x2923,x2924)
    val x2926 = OpDef(op=FixConvert, inputs=List(x2925)).name("x2926").ctrl(x2929) // FixConvert(x2925,TRUE,_64,_0)
    // x2927 = SimpleStruct(ArrayBuffer((offset,x2926), (size,Const(1536)), (isLoad,Const(true))))
    val b3145_b3143 = WriteMem(b3143, x2926).name("b3145_b3143").ctrl(x2929) // StreamWrite(x2919,x2927,b1375)
    val b3146_b3144 = WriteMem(b3144, Const(1536)).name("b3146_b3144").ctrl(x2929) // StreamWrite(x2919,x2927,b1375)
    val x2930 = FringeContainer(x2857,b3143,b3144,x2920).name("x2930").ctrl(x2938) // FringeDenseLoad(x2857,x2919,x2920)
    val x2931 = Counter(min=Const(0).ctrl(x2938), max=Const(384).ctrl(x2938), step=Const(1).ctrl(x2938), par=16).name("x2931").ctrl(x2938) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x2932 = CounterChain(List(x2931)).name("x2932").ctrl(x2938) // CounterChainNew(List(x2931))
    val x2937 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2932).name("x2937").ctrl(x2938) // UnrolledForeach(List(b1375),x2932,Block(Const(())),List(List(b1445)),List(List(b1446)))
    val b1445 = CounterIter(x2931, None).ctrl(x2937).name("b1445")
    val b1446 = DummyOp().ctrl(x2937).name("b1446")
    val x2933 = OpDef(op=BitAnd, inputs=List(b1446, b1375)).name("x2933").ctrl(x2937) // And(b1446,b1375)
    val x2934 = ReadMem(x2920).name("x2934").ctrl(x2937) // ParStreamRead(x2920,List(x2933))
    val x2935 = x2934 // x2935 = VectorApply(x2934,0)
    val x2936 = StoreBanks(List(x2873_d0_b0), List(b1445), x2935).name("x2936").ctrl(x2937) // ParSRAMStore(x2873,List(List(b1445)),List(x2935),List(x2933))
    val x2958 = UnitController(style=StreamPipe, level=OuterControl).name("x2958").ctrl(x3107) // UnitPipe(List(b1375),Block(Const(())))
    val b3147 = StreamOut(field="offset").name("b3147").ctrl(x2958) // x2939 = StreamOutNew(BurstCmdBus)
    val b3148 = StreamOut(field="size").name("b3148").ctrl(x2958) // x2939 = StreamOutNew(BurstCmdBus)
    val x2940 = StreamIn(field="data").name("x2940").ctrl(x2958) // x2940 = StreamInNew(BurstDataBus())
    val x2949 = UnitController(style=SeqPipe, level=InnerControl).name("x2949").ctrl(x2958) // UnitPipe(List(b1375),Block(x2948))
    val x2941 = OpDef(op=FixConvert, inputs=List(b1373)).name("x2941").ctrl(x2949) // FixConvert(b1373,TRUE,_32,_0)
    val x2942 = OpDef(op=FixSla, inputs=List(x2941, Const(2).ctrl(x2949))).name("x2942").ctrl(x2949) // FixLsh(x2941,Const(2))
    val x2943 = OpDef(op=FixConvert, inputs=List(x2942)).name("x2943").ctrl(x2949) // FixConvert(x2942,TRUE,_64,_0)
    val x2944 = top.dramAddress(x2859).name("x2944").ctrl(x2949) // GetDRAMAddress(x2859)
    val x2945 = OpDef(op=FixAdd, inputs=List(x2943, x2944)).name("x2945").ctrl(x2949) // FixAdd(x2943,x2944)
    val x2946 = OpDef(op=FixConvert, inputs=List(x2945)).name("x2946").ctrl(x2949) // FixConvert(x2945,TRUE,_64,_0)
    // x2947 = SimpleStruct(ArrayBuffer((offset,x2946), (size,Const(1536)), (isLoad,Const(true))))
    val b3149_b3147 = WriteMem(b3147, x2946).name("b3149_b3147").ctrl(x2949) // StreamWrite(x2939,x2947,b1375)
    val b3150_b3148 = WriteMem(b3148, Const(1536)).name("b3150_b3148").ctrl(x2949) // StreamWrite(x2939,x2947,b1375)
    val x2950 = FringeContainer(x2859,b3147,b3148,x2940).name("x2950").ctrl(x2958) // FringeDenseLoad(x2859,x2939,x2940)
    val x2951 = Counter(min=Const(0).ctrl(x2958), max=Const(384).ctrl(x2958), step=Const(1).ctrl(x2958), par=16).name("x2951").ctrl(x2958) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x2952 = CounterChain(List(x2951)).name("x2952").ctrl(x2958) // CounterChainNew(List(x2951))
    val x2957 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2952).name("x2957").ctrl(x2958) // UnrolledForeach(List(b1375),x2952,Block(Const(())),List(List(b1467)),List(List(b1468)))
    val b1467 = CounterIter(x2951, None).ctrl(x2957).name("b1467")
    val b1468 = DummyOp().ctrl(x2957).name("b1468")
    val x2953 = OpDef(op=BitAnd, inputs=List(b1468, b1375)).name("x2953").ctrl(x2957) // And(b1468,b1375)
    val x2954 = ReadMem(x2940).name("x2954").ctrl(x2957) // ParStreamRead(x2940,List(x2953))
    val x2955 = x2954 // x2955 = VectorApply(x2954,0)
    val x2956 = StoreBanks(List(x2875_d0_b0), List(b1467), x2955).name("x2956").ctrl(x2957) // ParSRAMStore(x2875,List(List(b1467)),List(x2955),List(x2953))
    val x2960 = UnitController(style=SeqPipe, level=InnerControl).name("x2960").ctrl(x3107) // UnitPipe(List(b1376),Block(Const(())))
    val x2959 = OpDef(op=FixAdd, inputs=List(b1374, Const(384).ctrl(x2960))).name("x2959").ctrl(x2960) // FixAdd(b1374,Const(384))
    val x2980 = UnitController(style=StreamPipe, level=OuterControl).name("x2980").ctrl(x3107) // UnitPipe(List(b1376),Block(Const(())))
    val b3151 = StreamOut(field="offset").name("b3151").ctrl(x2980) // x2961 = StreamOutNew(BurstCmdBus)
    val b3152 = StreamOut(field="size").name("b3152").ctrl(x2980) // x2961 = StreamOutNew(BurstCmdBus)
    val x2962 = StreamIn(field="data").name("x2962").ctrl(x2980) // x2962 = StreamInNew(BurstDataBus())
    val x2971 = UnitController(style=SeqPipe, level=InnerControl).name("x2971").ctrl(x2980) // UnitPipe(List(b1376),Block(x2970))
    val x2963 = OpDef(op=FixConvert, inputs=List(b1374)).name("x2963").ctrl(x2971) // FixConvert(b1374,TRUE,_32,_0)
    val x2964 = OpDef(op=FixSla, inputs=List(x2963, Const(2).ctrl(x2971))).name("x2964").ctrl(x2971) // FixLsh(x2963,Const(2))
    val x2965 = OpDef(op=FixConvert, inputs=List(x2964)).name("x2965").ctrl(x2971) // FixConvert(x2964,TRUE,_64,_0)
    val x2966 = top.dramAddress(x2853).name("x2966").ctrl(x2971) // GetDRAMAddress(x2853)
    val x2967 = OpDef(op=FixAdd, inputs=List(x2965, x2966)).name("x2967").ctrl(x2971) // FixAdd(x2965,x2966)
    val x2968 = OpDef(op=FixConvert, inputs=List(x2967)).name("x2968").ctrl(x2971) // FixConvert(x2967,TRUE,_64,_0)
    // x2969 = SimpleStruct(ArrayBuffer((offset,x2968), (size,Const(1536)), (isLoad,Const(true))))
    val b3153_b3151 = WriteMem(b3151, x2968).name("b3153_b3151").ctrl(x2971) // StreamWrite(x2961,x2969,b1376)
    val b3154_b3152 = WriteMem(b3152, Const(1536)).name("b3154_b3152").ctrl(x2971) // StreamWrite(x2961,x2969,b1376)
    val x2972 = FringeContainer(x2853,b3151,b3152,x2962).name("x2972").ctrl(x2980) // FringeDenseLoad(x2853,x2961,x2962)
    val x2973 = Counter(min=Const(0).ctrl(x2980), max=Const(384).ctrl(x2980), step=Const(1).ctrl(x2980), par=16).name("x2973").ctrl(x2980) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x2974 = CounterChain(List(x2973)).name("x2974").ctrl(x2980) // CounterChainNew(List(x2973))
    val x2979 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2974).name("x2979").ctrl(x2980) // UnrolledForeach(List(b1376),x2974,Block(Const(())),List(List(b1492)),List(List(b1493)))
    val b1492 = CounterIter(x2973, None).ctrl(x2979).name("b1492")
    val b1493 = DummyOp().ctrl(x2979).name("b1493")
    val x2975 = OpDef(op=BitAnd, inputs=List(b1493, b1376)).name("x2975").ctrl(x2979) // And(b1493,b1376)
    val x2976 = ReadMem(x2962).name("x2976").ctrl(x2979) // ParStreamRead(x2962,List(x2975))
    val x2977 = x2976 // x2977 = VectorApply(x2976,0)
    val x2978 = StoreBanks(List(x2870_d0_b0), List(b1492), x2977).name("x2978").ctrl(x2979) // ParSRAMStore(x2870,List(List(b1492)),List(x2977),List(x2975))
    val x3000 = UnitController(style=StreamPipe, level=OuterControl).name("x3000").ctrl(x3107) // UnitPipe(List(b1376),Block(Const(())))
    val b3155 = StreamOut(field="offset").name("b3155").ctrl(x3000) // x2981 = StreamOutNew(BurstCmdBus)
    val b3156 = StreamOut(field="size").name("b3156").ctrl(x3000) // x2981 = StreamOutNew(BurstCmdBus)
    val x2982 = StreamIn(field="data").name("x2982").ctrl(x3000) // x2982 = StreamInNew(BurstDataBus())
    val x2991 = UnitController(style=SeqPipe, level=InnerControl).name("x2991").ctrl(x3000) // UnitPipe(List(b1376),Block(x2990))
    val x2983 = OpDef(op=FixConvert, inputs=List(b1374)).name("x2983").ctrl(x2991) // FixConvert(b1374,TRUE,_32,_0)
    val x2984 = OpDef(op=FixSla, inputs=List(x2983, Const(2).ctrl(x2991))).name("x2984").ctrl(x2991) // FixLsh(x2983,Const(2))
    val x2985 = OpDef(op=FixConvert, inputs=List(x2984)).name("x2985").ctrl(x2991) // FixConvert(x2984,TRUE,_64,_0)
    val x2986 = top.dramAddress(x2855).name("x2986").ctrl(x2991) // GetDRAMAddress(x2855)
    val x2987 = OpDef(op=FixAdd, inputs=List(x2985, x2986)).name("x2987").ctrl(x2991) // FixAdd(x2985,x2986)
    val x2988 = OpDef(op=FixConvert, inputs=List(x2987)).name("x2988").ctrl(x2991) // FixConvert(x2987,TRUE,_64,_0)
    // x2989 = SimpleStruct(ArrayBuffer((offset,x2988), (size,Const(1536)), (isLoad,Const(true))))
    val b3157_b3155 = WriteMem(b3155, x2988).name("b3157_b3155").ctrl(x2991) // StreamWrite(x2981,x2989,b1376)
    val b3158_b3156 = WriteMem(b3156, Const(1536)).name("b3158_b3156").ctrl(x2991) // StreamWrite(x2981,x2989,b1376)
    val x2992 = FringeContainer(x2855,b3155,b3156,x2982).name("x2992").ctrl(x3000) // FringeDenseLoad(x2855,x2981,x2982)
    val x2993 = Counter(min=Const(0).ctrl(x3000), max=Const(384).ctrl(x3000), step=Const(1).ctrl(x3000), par=16).name("x2993").ctrl(x3000) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x2994 = CounterChain(List(x2993)).name("x2994").ctrl(x3000) // CounterChainNew(List(x2993))
    val x2999 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2994).name("x2999").ctrl(x3000) // UnrolledForeach(List(b1376),x2994,Block(Const(())),List(List(b1514)),List(List(b1515)))
    val b1514 = CounterIter(x2993, None).ctrl(x2999).name("b1514")
    val b1515 = DummyOp().ctrl(x2999).name("b1515")
    val x2995 = OpDef(op=BitAnd, inputs=List(b1515, b1376)).name("x2995").ctrl(x2999) // And(b1515,b1376)
    val x2996 = ReadMem(x2982).name("x2996").ctrl(x2999) // ParStreamRead(x2982,List(x2995))
    val x2997 = x2996 // x2997 = VectorApply(x2996,0)
    val x2998 = StoreBanks(List(x2872_d0_b0), List(b1514), x2997).name("x2998").ctrl(x2999) // ParSRAMStore(x2872,List(List(b1514)),List(x2997),List(x2995))
    val x3020 = UnitController(style=StreamPipe, level=OuterControl).name("x3020").ctrl(x3107) // UnitPipe(List(b1376),Block(Const(())))
    val b3159 = StreamOut(field="offset").name("b3159").ctrl(x3020) // x3001 = StreamOutNew(BurstCmdBus)
    val b3160 = StreamOut(field="size").name("b3160").ctrl(x3020) // x3001 = StreamOutNew(BurstCmdBus)
    val x3002 = StreamIn(field="data").name("x3002").ctrl(x3020) // x3002 = StreamInNew(BurstDataBus())
    val x3011 = UnitController(style=SeqPipe, level=InnerControl).name("x3011").ctrl(x3020) // UnitPipe(List(b1376),Block(x3010))
    val x3003 = OpDef(op=FixConvert, inputs=List(b1374)).name("x3003").ctrl(x3011) // FixConvert(b1374,TRUE,_32,_0)
    val x3004 = OpDef(op=FixSla, inputs=List(x3003, Const(2).ctrl(x3011))).name("x3004").ctrl(x3011) // FixLsh(x3003,Const(2))
    val x3005 = OpDef(op=FixConvert, inputs=List(x3004)).name("x3005").ctrl(x3011) // FixConvert(x3004,TRUE,_64,_0)
    val x3006 = top.dramAddress(x2857).name("x3006").ctrl(x3011) // GetDRAMAddress(x2857)
    val x3007 = OpDef(op=FixAdd, inputs=List(x3005, x3006)).name("x3007").ctrl(x3011) // FixAdd(x3005,x3006)
    val x3008 = OpDef(op=FixConvert, inputs=List(x3007)).name("x3008").ctrl(x3011) // FixConvert(x3007,TRUE,_64,_0)
    // x3009 = SimpleStruct(ArrayBuffer((offset,x3008), (size,Const(1536)), (isLoad,Const(true))))
    val b3161_b3159 = WriteMem(b3159, x3008).name("b3161_b3159").ctrl(x3011) // StreamWrite(x3001,x3009,b1376)
    val b3162_b3160 = WriteMem(b3160, Const(1536)).name("b3162_b3160").ctrl(x3011) // StreamWrite(x3001,x3009,b1376)
    val x3012 = FringeContainer(x2857,b3159,b3160,x3002).name("x3012").ctrl(x3020) // FringeDenseLoad(x2857,x3001,x3002)
    val x3013 = Counter(min=Const(0).ctrl(x3020), max=Const(384).ctrl(x3020), step=Const(1).ctrl(x3020), par=16).name("x3013").ctrl(x3020) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x3014 = CounterChain(List(x3013)).name("x3014").ctrl(x3020) // CounterChainNew(List(x3013))
    val x3019 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3014).name("x3019").ctrl(x3020) // UnrolledForeach(List(b1376),x3014,Block(Const(())),List(List(b1536)),List(List(b1537)))
    val b1536 = CounterIter(x3013, None).ctrl(x3019).name("b1536")
    val b1537 = DummyOp().ctrl(x3019).name("b1537")
    val x3015 = OpDef(op=BitAnd, inputs=List(b1537, b1376)).name("x3015").ctrl(x3019) // And(b1537,b1376)
    val x3016 = ReadMem(x3002).name("x3016").ctrl(x3019) // ParStreamRead(x3002,List(x3015))
    val x3017 = x3016 // x3017 = VectorApply(x3016,0)
    val x3018 = StoreBanks(List(x2874_d0_b0), List(b1536), x3017).name("x3018").ctrl(x3019) // ParSRAMStore(x2874,List(List(b1536)),List(x3017),List(x3015))
    val x3040 = UnitController(style=StreamPipe, level=OuterControl).name("x3040").ctrl(x3107) // UnitPipe(List(b1376),Block(Const(())))
    val b3163 = StreamOut(field="offset").name("b3163").ctrl(x3040) // x3021 = StreamOutNew(BurstCmdBus)
    val b3164 = StreamOut(field="size").name("b3164").ctrl(x3040) // x3021 = StreamOutNew(BurstCmdBus)
    val x3022 = StreamIn(field="data").name("x3022").ctrl(x3040) // x3022 = StreamInNew(BurstDataBus())
    val x3031 = UnitController(style=SeqPipe, level=InnerControl).name("x3031").ctrl(x3040) // UnitPipe(List(b1376),Block(x3030))
    val x3023 = OpDef(op=FixConvert, inputs=List(b1374)).name("x3023").ctrl(x3031) // FixConvert(b1374,TRUE,_32,_0)
    val x3024 = OpDef(op=FixSla, inputs=List(x3023, Const(2).ctrl(x3031))).name("x3024").ctrl(x3031) // FixLsh(x3023,Const(2))
    val x3025 = OpDef(op=FixConvert, inputs=List(x3024)).name("x3025").ctrl(x3031) // FixConvert(x3024,TRUE,_64,_0)
    val x3026 = top.dramAddress(x2859).name("x3026").ctrl(x3031) // GetDRAMAddress(x2859)
    val x3027 = OpDef(op=FixAdd, inputs=List(x3025, x3026)).name("x3027").ctrl(x3031) // FixAdd(x3025,x3026)
    val x3028 = OpDef(op=FixConvert, inputs=List(x3027)).name("x3028").ctrl(x3031) // FixConvert(x3027,TRUE,_64,_0)
    // x3029 = SimpleStruct(ArrayBuffer((offset,x3028), (size,Const(1536)), (isLoad,Const(true))))
    val b3165_b3163 = WriteMem(b3163, x3028).name("b3165_b3163").ctrl(x3031) // StreamWrite(x3021,x3029,b1376)
    val b3166_b3164 = WriteMem(b3164, Const(1536)).name("b3166_b3164").ctrl(x3031) // StreamWrite(x3021,x3029,b1376)
    val x3032 = FringeContainer(x2859,b3163,b3164,x3022).name("x3032").ctrl(x3040) // FringeDenseLoad(x2859,x3021,x3022)
    val x3033 = Counter(min=Const(0).ctrl(x3040), max=Const(384).ctrl(x3040), step=Const(1).ctrl(x3040), par=16).name("x3033").ctrl(x3040) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x3034 = CounterChain(List(x3033)).name("x3034").ctrl(x3040) // CounterChainNew(List(x3033))
    val x3039 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3034).name("x3039").ctrl(x3040) // UnrolledForeach(List(b1376),x3034,Block(Const(())),List(List(b1558)),List(List(b1559)))
    val b1558 = CounterIter(x3033, None).ctrl(x3039).name("b1558")
    val b1559 = DummyOp().ctrl(x3039).name("b1559")
    val x3035 = OpDef(op=BitAnd, inputs=List(b1559, b1376)).name("x3035").ctrl(x3039) // And(b1559,b1376)
    val x3036 = ReadMem(x3022).name("x3036").ctrl(x3039) // ParStreamRead(x3022,List(x3035))
    val x3037 = x3036 // x3037 = VectorApply(x3036,0)
    val x3038 = StoreBanks(List(x2876_d0_b0), List(b1558), x3037).name("x3038").ctrl(x3039) // ParSRAMStore(x2876,List(List(b1558)),List(x3037),List(x3035))
    val x3041_d0 = Reg(init=0).name("x3041_d0").ctrl(x3107) // x3041 = RegNew(Const(0))
    val x3041_d1 = Reg(init=0).name("x3041_d1").ctrl(x3107) // x3041 = RegNew(Const(0))
    val x3042_d0 = Reg(init=0).name("x3042_d0").ctrl(x3107) // x3042 = RegNew(Const(0))
    val x3042_d1 = Reg(init=0).name("x3042_d1").ctrl(x3107) // x3042 = RegNew(Const(0))
    val x3043 = Counter(min=Const(0).ctrl(x3107), max=Const(384).ctrl(x3107), step=Const(1).ctrl(x3107), par=16).name("x3043").ctrl(x3107) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x3044 = CounterChain(List(x3043)).name("x3044").ctrl(x3107) // CounterChainNew(List(x3043))
    val x3069 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3044).name("x3069").ctrl(x3107) // UnrolledReduce(List(b1375),x3044,x3041,Block((x3041) => Const(())),List(List(b1574)),List(List(b1575)))
    val b1574 = CounterIter(x3043, None).ctrl(x3069).name("b1574")
    val b1575 = DummyOp().ctrl(x3069).name("b1575")
    val x3045 = OpDef(op=BitAnd, inputs=List(b1575, b1375)).name("x3045").ctrl(x3069) // And(b1575,b1375)
    val x3046 = LoadBanks(List(x2869_d0_b0), List(b1574)).name("x3046").ctrl(x3069) // ParSRAMLoad(x2869,List(List(b1574)),List(x3045))
    val x3047 = x3046 // x3047 = VectorApply(x3046,0)
    val x3048 = LoadBanks(List(x2873_d0_b0), List(b1574)).name("x3048").ctrl(x3069) // ParSRAMLoad(x2873,List(List(b1574)),List(x3045))
    val x3049 = x3048 // x3049 = VectorApply(x3048,0)
    val x3050 = LoadBanks(List(x2871_d0_b0), List(b1574)).name("x3050").ctrl(x3069) // ParSRAMLoad(x2871,List(List(b1574)),List(x3045))
    val x3051 = x3050 // x3051 = VectorApply(x3050,0)
    val x3052 = LoadBanks(List(x2875_d0_b0), List(b1574)).name("x3052").ctrl(x3069) // ParSRAMLoad(x2875,List(List(b1574)),List(x3045))
    val x3053 = x3052 // x3053 = VectorApply(x3052,0)
    val x3054 = OpDef(op=FixLt, inputs=List(Const(0).ctrl(x3069), x3047)).name("x3054").ctrl(x3069) // FixLt(Const(0),x3047)
    val x3055 = OpDef(op=FixLt, inputs=List(x3047, Const(9999).ctrl(x3069))).name("x3055").ctrl(x3069) // FixLt(x3047,Const(9999))
    val x3056 = OpDef(op=BitAnd, inputs=List(x3054, x3055)).name("x3056").ctrl(x3069) // And(x3054,x3055)
    val x3057 = OpDef(op=FixLeq, inputs=List(Const(0).ctrl(x3069), x3049)).name("x3057").ctrl(x3069) // FixLeq(Const(0),x3049)
    val x3058 = OpDef(op=BitAnd, inputs=List(x3056, x3057)).name("x3058").ctrl(x3069) // And(x3056,x3057)
    val x3059 = OpDef(op=FixLeq, inputs=List(x3049, Const(9999).ctrl(x3069))).name("x3059").ctrl(x3069) // FixLeq(x3049,Const(9999))
    val x3060 = OpDef(op=BitAnd, inputs=List(x3058, x3059)).name("x3060").ctrl(x3069) // And(x3058,x3059)
    val x3061 = OpDef(op=FixLt, inputs=List(x3051, Const(24).ctrl(x3069))).name("x3061").ctrl(x3069) // FixLt(x3051,Const(24))
    val x3062 = OpDef(op=BitAnd, inputs=List(x3060, x3061)).name("x3062").ctrl(x3069) // And(x3060,x3061)
    val x3063 = OpDef(op=FixMul, inputs=List(x3053, x3049)).name("x3063").ctrl(x3069) // FixMul(x3053,x3049)
    val x3064 = OpDef(op=MuxOp, inputs=List(x3062, x3063, Const(0).ctrl(x3069))).name("x3064").ctrl(x3069) // Mux(x3062,x3063,Const(0))
    val x3065 = ReadMem(x3041_d1).name("x3065").ctrl(x3069) // RegRead(x3041)
    val x3066 = OpDef(op=FixEql, inputs=List(b1574, Const(0).ctrl(x3069))).name("x3066").ctrl(x3069) // FixEql(b1574,Const(0))
    val x3064_0 = ReduceOp(op=FixAdd, input=x3064).name("x3064_0").ctrl(x3069) // FixAdd(x3064,x3065)
    val x3064_1 = ReduceOp(op=FixAdd, input=x3064_0).name("x3064_1").ctrl(x3069) // FixAdd(x3064,x3065)
    val x3064_2 = ReduceOp(op=FixAdd, input=x3064_1).name("x3064_2").ctrl(x3069) // FixAdd(x3064,x3065)
    val x3064_3 = ReduceOp(op=FixAdd, input=x3064_2).name("x3064_3").ctrl(x3069) // FixAdd(x3064,x3065)
    val x3067 = AccumOp(op=FixAdd, input=x3064_3, accum=x3065).name("x3067").ctrl(x3069) // FixAdd(x3064,x3065)
    val x3068_x3041_d0 = WriteMem(x3041_d0, x3067).name("x3068_x3041_d0").ctrl(x3069) // RegWrite(x3041,x3067,b1375)
    val x3068_x3041_d1 = WriteMem(x3041_d1, x3067).name("x3068_x3041_d1").ctrl(x3069) // RegWrite(x3041,x3067,b1375)
    val x3070 = Counter(min=Const(0).ctrl(x3107), max=Const(384).ctrl(x3107), step=Const(1).ctrl(x3107), par=16).name("x3070").ctrl(x3107) // CounterNew(Const(0),Const(384),Const(1),Const(16))
    val x3071 = CounterChain(List(x3070)).name("x3071").ctrl(x3107) // CounterChainNew(List(x3070))
    val x3096 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3071).name("x3096").ctrl(x3107) // UnrolledReduce(List(b1376),x3071,x3042,Block((x3042) => Const(())),List(List(b1601)),List(List(b1602)))
    val b1601 = CounterIter(x3070, None).ctrl(x3096).name("b1601")
    val b1602 = DummyOp().ctrl(x3096).name("b1602")
    val x3072 = OpDef(op=BitAnd, inputs=List(b1602, b1376)).name("x3072").ctrl(x3096) // And(b1602,b1376)
    val x3073 = LoadBanks(List(x2870_d0_b0), List(b1601)).name("x3073").ctrl(x3096) // ParSRAMLoad(x2870,List(List(b1601)),List(x3072))
    val x3074 = x3073 // x3074 = VectorApply(x3073,0)
    val x3075 = LoadBanks(List(x2874_d0_b0), List(b1601)).name("x3075").ctrl(x3096) // ParSRAMLoad(x2874,List(List(b1601)),List(x3072))
    val x3076 = x3075 // x3076 = VectorApply(x3075,0)
    val x3077 = LoadBanks(List(x2872_d0_b0), List(b1601)).name("x3077").ctrl(x3096) // ParSRAMLoad(x2872,List(List(b1601)),List(x3072))
    val x3078 = x3077 // x3078 = VectorApply(x3077,0)
    val x3079 = LoadBanks(List(x2876_d0_b0), List(b1601)).name("x3079").ctrl(x3096) // ParSRAMLoad(x2876,List(List(b1601)),List(x3072))
    val x3080 = x3079 // x3080 = VectorApply(x3079,0)
    val x3081 = OpDef(op=FixLt, inputs=List(Const(0).ctrl(x3096), x3074)).name("x3081").ctrl(x3096) // FixLt(Const(0),x3074)
    val x3082 = OpDef(op=FixLt, inputs=List(x3074, Const(9999).ctrl(x3096))).name("x3082").ctrl(x3096) // FixLt(x3074,Const(9999))
    val x3083 = OpDef(op=BitAnd, inputs=List(x3081, x3082)).name("x3083").ctrl(x3096) // And(x3081,x3082)
    val x3084 = OpDef(op=FixLeq, inputs=List(Const(0).ctrl(x3096), x3076)).name("x3084").ctrl(x3096) // FixLeq(Const(0),x3076)
    val x3085 = OpDef(op=BitAnd, inputs=List(x3083, x3084)).name("x3085").ctrl(x3096) // And(x3083,x3084)
    val x3086 = OpDef(op=FixLeq, inputs=List(x3076, Const(9999).ctrl(x3096))).name("x3086").ctrl(x3096) // FixLeq(x3076,Const(9999))
    val x3087 = OpDef(op=BitAnd, inputs=List(x3085, x3086)).name("x3087").ctrl(x3096) // And(x3085,x3086)
    val x3088 = OpDef(op=FixLt, inputs=List(x3078, Const(24).ctrl(x3096))).name("x3088").ctrl(x3096) // FixLt(x3078,Const(24))
    val x3089 = OpDef(op=BitAnd, inputs=List(x3087, x3088)).name("x3089").ctrl(x3096) // And(x3087,x3088)
    val x3090 = OpDef(op=FixMul, inputs=List(x3080, x3076)).name("x3090").ctrl(x3096) // FixMul(x3080,x3076)
    val x3091 = OpDef(op=MuxOp, inputs=List(x3089, x3090, Const(0).ctrl(x3096))).name("x3091").ctrl(x3096) // Mux(x3089,x3090,Const(0))
    val x3092 = ReadMem(x3042_d1).name("x3092").ctrl(x3096) // RegRead(x3042)
    val x3093 = OpDef(op=FixEql, inputs=List(b1601, Const(0).ctrl(x3096))).name("x3093").ctrl(x3096) // FixEql(b1601,Const(0))
    val x3091_0 = ReduceOp(op=FixAdd, input=x3091).name("x3091_0").ctrl(x3096) // FixAdd(x3091,x3092)
    val x3091_1 = ReduceOp(op=FixAdd, input=x3091_0).name("x3091_1").ctrl(x3096) // FixAdd(x3091,x3092)
    val x3091_2 = ReduceOp(op=FixAdd, input=x3091_1).name("x3091_2").ctrl(x3096) // FixAdd(x3091,x3092)
    val x3091_3 = ReduceOp(op=FixAdd, input=x3091_2).name("x3091_3").ctrl(x3096) // FixAdd(x3091,x3092)
    val x3094 = AccumOp(op=FixAdd, input=x3091_3, accum=x3092).name("x3094").ctrl(x3096) // FixAdd(x3091,x3092)
    val x3095_x3042_d0 = WriteMem(x3042_d0, x3094).name("x3095_x3042_d0").ctrl(x3096) // RegWrite(x3042,x3094,b1376)
    val x3095_x3042_d1 = WriteMem(x3042_d1, x3094).name("x3095_x3042_d1").ctrl(x3096) // RegWrite(x3042,x3094,b1376)
    val x3106 = UnitController(style=SeqPipe, level=InnerControl).name("x3106").ctrl(x3107) // UnitPipe(List(Const(true)),Block(x3105))
    val x3097 = ReadMem(x3042_d0).name("x3097").ctrl(x3106) // RegRead(x3042)
    val x3098 = ReadMem(x3041_d0).name("x3098").ctrl(x3106) // RegRead(x3041)
    val x3099 = OpDef(op=FixAdd, inputs=List(x3098, x3097)).name("x3099").ctrl(x3106) // FixAdd(x3098,x3097)
    val x3100 = OpDef(op=MuxOp, inputs=List(b1376, x3099, x3098)).name("x3100").ctrl(x3106) // Mux(b1376,x3099,x3098)
    val x3101 = OpDef(op=BitOr, inputs=List(b1375, b1376)).name("x3101").ctrl(x3106) // Or(b1375,b1376)
    val x3102 = ReadMem(x2865_d1).name("x3102").ctrl(x3106) // RegRead(x2865)
    val x3103 = OpDef(op=FixEql, inputs=List(b1373, Const(0).ctrl(x3106))).name("x3103").ctrl(x3106) // FixEql(b1373,Const(0))
    val x3104 = AccumOp(op=FixAdd, input=x3100, accum=x3102).name("x3104").ctrl(x3106) // FixAdd(x3100,x3102)
    val x3105_x2865_d0 = WriteMem(x2865_d0, x3104).name("x3105_x2865_d0").ctrl(x3106) // RegWrite(x2865,x3104,Const(true))
    val x3105_x2865_d1 = WriteMem(x2865_d1, x3104).name("x3105_x2865_d1").ctrl(x3106) // RegWrite(x2865,x3104,Const(true))
    val x3110 = UnitController(style=SeqPipe, level=InnerControl).name("x3110").ctrl(x3111) // UnitPipe(List(Const(true)),Block(Const(())))
    val x3108 = ReadMem(x2865_d0).name("x3108").ctrl(x3110) // RegRead(x2865)
    val x3109_x2860 = WriteMem(x2860, x3108).name("x3109_x2860").ctrl(x3110) // RegWrite(x2860,x3108,Const(true))
    
  }
}
