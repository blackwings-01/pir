import pir._
import pir.node._
import arch._
import prism.enums._

object TPCHQ6 extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x2848 = ArgIn(init=0).name("x2848").ctrl(top) // ArgInNew(Const(0))
    boundOf(x2848) = 1024
    val x2850 = ReadMem(x2848).name("x2850").ctrl(top) // RegRead(x2848)
    val x2851 = DRAM().name("x2851").ctrl(top) // x2851 = DRAMNew(ArrayBuffer(x2850),Const(0))
    val x2852 = ReadMem(x2848).name("x2852").ctrl(top) // RegRead(x2848)
    val x2853 = DRAM().name("x2853").ctrl(top) // x2853 = DRAMNew(ArrayBuffer(x2852),Const(0))
    val x2854 = ReadMem(x2848).name("x2854").ctrl(top) // RegRead(x2848)
    val x2855 = DRAM().name("x2855").ctrl(top) // x2855 = DRAMNew(ArrayBuffer(x2854),Const(0))
    val x2856 = ReadMem(x2848).name("x2856").ctrl(top) // RegRead(x2848)
    val x2857 = DRAM().name("x2857").ctrl(top) // x2857 = DRAMNew(ArrayBuffer(x2856),Const(0))
    val x2858 = ArgOut(init=0).name("x2858").ctrl(top) // ArgOutNew(Const(0))
    val x3109 = UnitController(style=SeqPipe, level=OuterControl).name("x3109").ctrl(top) // Hwblock(Block(Const(())),false)
    val x2863_d0 = Reg(init=Some(0)).name("x2863_d0").ctrl(x3109) // x2863 = RegNew(Const(0))
    isAccum(x2863_d0) = false
    bufferDepthOf(x2863_d0) = 1
    val x2863_d1 = Reg(init=Some(0)).name("x2863_d1").ctrl(x3109) // x2863 = RegNew(Const(0))
    isAccum(x2863_d1) = true
    bufferDepthOf(x2863_d1) = 1
    val x2864 = ReadMem(x2848).name("x2864").ctrl(x3109) // RegRead(x2848)
    val x2865 = Counter(min=Const(0), max=x2864, step=Const(32), par=2).name("x2865").ctrl(x3109) // CounterNew(Const(0),x2864,Const(32),Const(2))
    val x2866 = CounterChain(List(x2865)).name("x2866").ctrl(x3109) // CounterChainNew(List(x2865))
    val x3105 = LoopController(style=MetaPipe, level=OuterControl, cchain=x2866).name("x3105").ctrl(x3109) // UnrolledReduce(List(Const(true)),x2866,x2863,Block((x2863) => Const(())),List(List(b1371, b1372)),List(List(b1373, b1374)))
    val b1371 = CounterIter(x2865, Some(0)).ctrl(x3105).name("b1371")
    val b1373 = DummyOp().ctrl(x3105).name("b1373")
    val b1372 = CounterIter(x2865, Some(1)).ctrl(x3105).name("b1372")
    val b1374 = DummyOp().ctrl(x3105).name("b1374")
    val x2867_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2867_d0_b0").ctrl(x3105) // x2867 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2867_d0_b0) = false
    bufferDepthOf(x2867_d0_b0) = 2
    val x2868_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2868_d0_b0").ctrl(x3105) // x2868 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2868_d0_b0) = false
    bufferDepthOf(x2868_d0_b0) = 2
    val x2869_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2869_d0_b0").ctrl(x3105) // x2869 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2869_d0_b0) = false
    bufferDepthOf(x2869_d0_b0) = 2
    val x2870_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2870_d0_b0").ctrl(x3105) // x2870 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2870_d0_b0) = false
    bufferDepthOf(x2870_d0_b0) = 2
    val x2871_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2871_d0_b0").ctrl(x3105) // x2871 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2871_d0_b0) = false
    bufferDepthOf(x2871_d0_b0) = 2
    val x2872_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2872_d0_b0").ctrl(x3105) // x2872 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2872_d0_b0) = false
    bufferDepthOf(x2872_d0_b0) = 2
    val x2873_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2873_d0_b0").ctrl(x3105) // x2873 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2873_d0_b0) = false
    bufferDepthOf(x2873_d0_b0) = 2
    val x2874_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2874_d0_b0").ctrl(x3105) // x2874 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2874_d0_b0) = false
    bufferDepthOf(x2874_d0_b0) = 2
    val x2876 = UnitController(style=SeqPipe, level=InnerControl).name("x2876").ctrl(x3105) // UnitPipe(List(b1373),Block(Const(())))
    val x2875 = OpDef(op=FixAdd, inputs=List(b1371, Const(32))).name("x2875").ctrl(x2876) // FixAdd(b1371,Const(32))
    val x2896 = UnitController(style=StreamPipe, level=OuterControl).name("x2896").ctrl(x3105) // UnitPipe(List(b1373),Block(Const(())))
    val b3133 = StreamOut(field="offset").name("b3133").ctrl(x2896) // x2877 = StreamOutNew(BurstCmdBus)
    val b3134 = StreamOut(field="size").name("b3134").ctrl(x2896) // x2877 = StreamOutNew(BurstCmdBus)
    val x2878 = StreamIn(field="data").name("x2878").ctrl(x2896) // x2878 = StreamInNew(BurstDataBus())
    val x2887 = UnitController(style=SeqPipe, level=InnerControl).name("x2887").ctrl(x2896) // UnitPipe(List(b1373),Block(x2886))
    val x2879 = b1371 // FixConvert(b1371,TRUE,_32,_0)
    val x2880 = OpDef(op=FixSla, inputs=List(x2879, Const(2))).name("x2880").ctrl(x2887) // FixLsh(x2879,Const(2))
    val x2881 = x2880 // FixConvert(x2880,TRUE,_64,_0)
    val x2882 = DramAddress(x2851).name("x2882").ctrl(x2887) // GetDRAMAddress(x2851)
    val x2883 = OpDef(op=FixAdd, inputs=List(x2881, x2882)).name("x2883").ctrl(x2887) // FixAdd(x2881,x2882)
    val x2885_x2884 = x2883 // FixConvert(x2883,TRUE,_64,_0)
    // x2885 = SimpleStruct(ArrayBuffer((offset,x2884), (size,Const(128)), (isLoad,Const(true))))
    val b3135_b3133 = WriteMem(b3133, x2885_x2884).name("b3135_b3133").ctrl(x2887) // StreamWrite(x2877,x2885,b1373)
    val b3136_b3134 = WriteMem(b3134, Const(128)).name("b3136_b3134").ctrl(x2887) // StreamWrite(x2877,x2885,b1373)
    val x2888 = FringeDenseLoad(dram=List(x2851), cmdStream=List(b3133, b3134), dataStream=List(x2878)).name("x2888").ctrl(x2896) // FringeDenseLoad(x2851,x2877,x2878)
    val x2889 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2889").ctrl(x2896) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2890 = CounterChain(List(x2889)).name("x2890").ctrl(x2896) // CounterChainNew(List(x2889))
    val x2895 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2890).name("x2895").ctrl(x2896) // UnrolledForeach(List(b1373),x2890,Block(Const(())),List(List(b1399)),List(List(b1400)))
    val b1399 = CounterIter(x2889, None).ctrl(x2895).name("b1399")
    val b1400 = DummyOp().ctrl(x2895).name("b1400")
    val x2891 = OpDef(op=BitAnd, inputs=List(b1400, b1373)).name("x2891").ctrl(x2895) // And(b1400,b1373)
    val x2892_x2892 = ReadMem(x2878).name("x2892").ctrl(x2895) // ParStreamRead(x2878,List(x2891))
    val x2893_x2893 = x2892_x2892 // x2893 = VectorApply(x2892,0)
    val x2894 = StoreBanks(List(x2867_d0_b0), List(b1399), x2893_x2893).name("x2894").ctrl(x2895) // ParSRAMStore(x2867,List(List(b1399)),List(x2893),List(x2891))
    val x2916 = UnitController(style=StreamPipe, level=OuterControl).name("x2916").ctrl(x3105) // UnitPipe(List(b1373),Block(Const(())))
    val b3137 = StreamOut(field="offset").name("b3137").ctrl(x2916) // x2897 = StreamOutNew(BurstCmdBus)
    val b3138 = StreamOut(field="size").name("b3138").ctrl(x2916) // x2897 = StreamOutNew(BurstCmdBus)
    val x2898 = StreamIn(field="data").name("x2898").ctrl(x2916) // x2898 = StreamInNew(BurstDataBus())
    val x2907 = UnitController(style=SeqPipe, level=InnerControl).name("x2907").ctrl(x2916) // UnitPipe(List(b1373),Block(x2906))
    val x2899 = b1371 // FixConvert(b1371,TRUE,_32,_0)
    val x2900 = OpDef(op=FixSla, inputs=List(x2899, Const(2))).name("x2900").ctrl(x2907) // FixLsh(x2899,Const(2))
    val x2901 = x2900 // FixConvert(x2900,TRUE,_64,_0)
    val x2902 = DramAddress(x2853).name("x2902").ctrl(x2907) // GetDRAMAddress(x2853)
    val x2903 = OpDef(op=FixAdd, inputs=List(x2901, x2902)).name("x2903").ctrl(x2907) // FixAdd(x2901,x2902)
    val x2905_x2904 = x2903 // FixConvert(x2903,TRUE,_64,_0)
    // x2905 = SimpleStruct(ArrayBuffer((offset,x2904), (size,Const(128)), (isLoad,Const(true))))
    val b3139_b3137 = WriteMem(b3137, x2905_x2904).name("b3139_b3137").ctrl(x2907) // StreamWrite(x2897,x2905,b1373)
    val b3140_b3138 = WriteMem(b3138, Const(128)).name("b3140_b3138").ctrl(x2907) // StreamWrite(x2897,x2905,b1373)
    val x2908 = FringeDenseLoad(dram=List(x2853), cmdStream=List(b3137, b3138), dataStream=List(x2898)).name("x2908").ctrl(x2916) // FringeDenseLoad(x2853,x2897,x2898)
    val x2909 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2909").ctrl(x2916) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2910 = CounterChain(List(x2909)).name("x2910").ctrl(x2916) // CounterChainNew(List(x2909))
    val x2915 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2910).name("x2915").ctrl(x2916) // UnrolledForeach(List(b1373),x2910,Block(Const(())),List(List(b1421)),List(List(b1422)))
    val b1421 = CounterIter(x2909, None).ctrl(x2915).name("b1421")
    val b1422 = DummyOp().ctrl(x2915).name("b1422")
    val x2911 = OpDef(op=BitAnd, inputs=List(b1422, b1373)).name("x2911").ctrl(x2915) // And(b1422,b1373)
    val x2912_x2912 = ReadMem(x2898).name("x2912").ctrl(x2915) // ParStreamRead(x2898,List(x2911))
    val x2913_x2913 = x2912_x2912 // x2913 = VectorApply(x2912,0)
    val x2914 = StoreBanks(List(x2869_d0_b0), List(b1421), x2913_x2913).name("x2914").ctrl(x2915) // ParSRAMStore(x2869,List(List(b1421)),List(x2913),List(x2911))
    val x2936 = UnitController(style=StreamPipe, level=OuterControl).name("x2936").ctrl(x3105) // UnitPipe(List(b1373),Block(Const(())))
    val b3141 = StreamOut(field="offset").name("b3141").ctrl(x2936) // x2917 = StreamOutNew(BurstCmdBus)
    val b3142 = StreamOut(field="size").name("b3142").ctrl(x2936) // x2917 = StreamOutNew(BurstCmdBus)
    val x2918 = StreamIn(field="data").name("x2918").ctrl(x2936) // x2918 = StreamInNew(BurstDataBus())
    val x2927 = UnitController(style=SeqPipe, level=InnerControl).name("x2927").ctrl(x2936) // UnitPipe(List(b1373),Block(x2926))
    val x2919 = b1371 // FixConvert(b1371,TRUE,_32,_0)
    val x2920 = OpDef(op=FixSla, inputs=List(x2919, Const(2))).name("x2920").ctrl(x2927) // FixLsh(x2919,Const(2))
    val x2921 = x2920 // FixConvert(x2920,TRUE,_64,_0)
    val x2922 = DramAddress(x2855).name("x2922").ctrl(x2927) // GetDRAMAddress(x2855)
    val x2923 = OpDef(op=FixAdd, inputs=List(x2921, x2922)).name("x2923").ctrl(x2927) // FixAdd(x2921,x2922)
    val x2925_x2924 = x2923 // FixConvert(x2923,TRUE,_64,_0)
    // x2925 = SimpleStruct(ArrayBuffer((offset,x2924), (size,Const(128)), (isLoad,Const(true))))
    val b3143_b3141 = WriteMem(b3141, x2925_x2924).name("b3143_b3141").ctrl(x2927) // StreamWrite(x2917,x2925,b1373)
    val b3144_b3142 = WriteMem(b3142, Const(128)).name("b3144_b3142").ctrl(x2927) // StreamWrite(x2917,x2925,b1373)
    val x2928 = FringeDenseLoad(dram=List(x2855), cmdStream=List(b3141, b3142), dataStream=List(x2918)).name("x2928").ctrl(x2936) // FringeDenseLoad(x2855,x2917,x2918)
    val x2929 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2929").ctrl(x2936) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2930 = CounterChain(List(x2929)).name("x2930").ctrl(x2936) // CounterChainNew(List(x2929))
    val x2935 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2930).name("x2935").ctrl(x2936) // UnrolledForeach(List(b1373),x2930,Block(Const(())),List(List(b1443)),List(List(b1444)))
    val b1443 = CounterIter(x2929, None).ctrl(x2935).name("b1443")
    val b1444 = DummyOp().ctrl(x2935).name("b1444")
    val x2931 = OpDef(op=BitAnd, inputs=List(b1444, b1373)).name("x2931").ctrl(x2935) // And(b1444,b1373)
    val x2932_x2932 = ReadMem(x2918).name("x2932").ctrl(x2935) // ParStreamRead(x2918,List(x2931))
    val x2933_x2933 = x2932_x2932 // x2933 = VectorApply(x2932,0)
    val x2934 = StoreBanks(List(x2871_d0_b0), List(b1443), x2933_x2933).name("x2934").ctrl(x2935) // ParSRAMStore(x2871,List(List(b1443)),List(x2933),List(x2931))
    val x2956 = UnitController(style=StreamPipe, level=OuterControl).name("x2956").ctrl(x3105) // UnitPipe(List(b1373),Block(Const(())))
    val b3145 = StreamOut(field="offset").name("b3145").ctrl(x2956) // x2937 = StreamOutNew(BurstCmdBus)
    val b3146 = StreamOut(field="size").name("b3146").ctrl(x2956) // x2937 = StreamOutNew(BurstCmdBus)
    val x2938 = StreamIn(field="data").name("x2938").ctrl(x2956) // x2938 = StreamInNew(BurstDataBus())
    val x2947 = UnitController(style=SeqPipe, level=InnerControl).name("x2947").ctrl(x2956) // UnitPipe(List(b1373),Block(x2946))
    val x2939 = b1371 // FixConvert(b1371,TRUE,_32,_0)
    val x2940 = OpDef(op=FixSla, inputs=List(x2939, Const(2))).name("x2940").ctrl(x2947) // FixLsh(x2939,Const(2))
    val x2941 = x2940 // FixConvert(x2940,TRUE,_64,_0)
    val x2942 = DramAddress(x2857).name("x2942").ctrl(x2947) // GetDRAMAddress(x2857)
    val x2943 = OpDef(op=FixAdd, inputs=List(x2941, x2942)).name("x2943").ctrl(x2947) // FixAdd(x2941,x2942)
    val x2945_x2944 = x2943 // FixConvert(x2943,TRUE,_64,_0)
    // x2945 = SimpleStruct(ArrayBuffer((offset,x2944), (size,Const(128)), (isLoad,Const(true))))
    val b3147_b3145 = WriteMem(b3145, x2945_x2944).name("b3147_b3145").ctrl(x2947) // StreamWrite(x2937,x2945,b1373)
    val b3148_b3146 = WriteMem(b3146, Const(128)).name("b3148_b3146").ctrl(x2947) // StreamWrite(x2937,x2945,b1373)
    val x2948 = FringeDenseLoad(dram=List(x2857), cmdStream=List(b3145, b3146), dataStream=List(x2938)).name("x2948").ctrl(x2956) // FringeDenseLoad(x2857,x2937,x2938)
    val x2949 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2949").ctrl(x2956) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2950 = CounterChain(List(x2949)).name("x2950").ctrl(x2956) // CounterChainNew(List(x2949))
    val x2955 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2950).name("x2955").ctrl(x2956) // UnrolledForeach(List(b1373),x2950,Block(Const(())),List(List(b1465)),List(List(b1466)))
    val b1465 = CounterIter(x2949, None).ctrl(x2955).name("b1465")
    val b1466 = DummyOp().ctrl(x2955).name("b1466")
    val x2951 = OpDef(op=BitAnd, inputs=List(b1466, b1373)).name("x2951").ctrl(x2955) // And(b1466,b1373)
    val x2952_x2952 = ReadMem(x2938).name("x2952").ctrl(x2955) // ParStreamRead(x2938,List(x2951))
    val x2953_x2953 = x2952_x2952 // x2953 = VectorApply(x2952,0)
    val x2954 = StoreBanks(List(x2873_d0_b0), List(b1465), x2953_x2953).name("x2954").ctrl(x2955) // ParSRAMStore(x2873,List(List(b1465)),List(x2953),List(x2951))
    val x2958 = UnitController(style=SeqPipe, level=InnerControl).name("x2958").ctrl(x3105) // UnitPipe(List(b1374),Block(Const(())))
    val x2957 = OpDef(op=FixAdd, inputs=List(b1372, Const(32))).name("x2957").ctrl(x2958) // FixAdd(b1372,Const(32))
    val x2978 = UnitController(style=StreamPipe, level=OuterControl).name("x2978").ctrl(x3105) // UnitPipe(List(b1374),Block(Const(())))
    val b3149 = StreamOut(field="offset").name("b3149").ctrl(x2978) // x2959 = StreamOutNew(BurstCmdBus)
    val b3150 = StreamOut(field="size").name("b3150").ctrl(x2978) // x2959 = StreamOutNew(BurstCmdBus)
    val x2960 = StreamIn(field="data").name("x2960").ctrl(x2978) // x2960 = StreamInNew(BurstDataBus())
    val x2969 = UnitController(style=SeqPipe, level=InnerControl).name("x2969").ctrl(x2978) // UnitPipe(List(b1374),Block(x2968))
    val x2961 = b1372 // FixConvert(b1372,TRUE,_32,_0)
    val x2962 = OpDef(op=FixSla, inputs=List(x2961, Const(2))).name("x2962").ctrl(x2969) // FixLsh(x2961,Const(2))
    val x2963 = x2962 // FixConvert(x2962,TRUE,_64,_0)
    val x2964 = DramAddress(x2851).name("x2964").ctrl(x2969) // GetDRAMAddress(x2851)
    val x2965 = OpDef(op=FixAdd, inputs=List(x2963, x2964)).name("x2965").ctrl(x2969) // FixAdd(x2963,x2964)
    val x2967_x2966 = x2965 // FixConvert(x2965,TRUE,_64,_0)
    // x2967 = SimpleStruct(ArrayBuffer((offset,x2966), (size,Const(128)), (isLoad,Const(true))))
    val b3151_b3149 = WriteMem(b3149, x2967_x2966).name("b3151_b3149").ctrl(x2969) // StreamWrite(x2959,x2967,b1374)
    val b3152_b3150 = WriteMem(b3150, Const(128)).name("b3152_b3150").ctrl(x2969) // StreamWrite(x2959,x2967,b1374)
    val x2970 = FringeDenseLoad(dram=List(x2851), cmdStream=List(b3149, b3150), dataStream=List(x2960)).name("x2970").ctrl(x2978) // FringeDenseLoad(x2851,x2959,x2960)
    val x2971 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2971").ctrl(x2978) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2972 = CounterChain(List(x2971)).name("x2972").ctrl(x2978) // CounterChainNew(List(x2971))
    val x2977 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2972).name("x2977").ctrl(x2978) // UnrolledForeach(List(b1374),x2972,Block(Const(())),List(List(b1490)),List(List(b1491)))
    val b1490 = CounterIter(x2971, None).ctrl(x2977).name("b1490")
    val b1491 = DummyOp().ctrl(x2977).name("b1491")
    val x2973 = OpDef(op=BitAnd, inputs=List(b1491, b1374)).name("x2973").ctrl(x2977) // And(b1491,b1374)
    val x2974_x2974 = ReadMem(x2960).name("x2974").ctrl(x2977) // ParStreamRead(x2960,List(x2973))
    val x2975_x2975 = x2974_x2974 // x2975 = VectorApply(x2974,0)
    val x2976 = StoreBanks(List(x2868_d0_b0), List(b1490), x2975_x2975).name("x2976").ctrl(x2977) // ParSRAMStore(x2868,List(List(b1490)),List(x2975),List(x2973))
    val x2998 = UnitController(style=StreamPipe, level=OuterControl).name("x2998").ctrl(x3105) // UnitPipe(List(b1374),Block(Const(())))
    val b3153 = StreamOut(field="offset").name("b3153").ctrl(x2998) // x2979 = StreamOutNew(BurstCmdBus)
    val b3154 = StreamOut(field="size").name("b3154").ctrl(x2998) // x2979 = StreamOutNew(BurstCmdBus)
    val x2980 = StreamIn(field="data").name("x2980").ctrl(x2998) // x2980 = StreamInNew(BurstDataBus())
    val x2989 = UnitController(style=SeqPipe, level=InnerControl).name("x2989").ctrl(x2998) // UnitPipe(List(b1374),Block(x2988))
    val x2981 = b1372 // FixConvert(b1372,TRUE,_32,_0)
    val x2982 = OpDef(op=FixSla, inputs=List(x2981, Const(2))).name("x2982").ctrl(x2989) // FixLsh(x2981,Const(2))
    val x2983 = x2982 // FixConvert(x2982,TRUE,_64,_0)
    val x2984 = DramAddress(x2853).name("x2984").ctrl(x2989) // GetDRAMAddress(x2853)
    val x2985 = OpDef(op=FixAdd, inputs=List(x2983, x2984)).name("x2985").ctrl(x2989) // FixAdd(x2983,x2984)
    val x2987_x2986 = x2985 // FixConvert(x2985,TRUE,_64,_0)
    // x2987 = SimpleStruct(ArrayBuffer((offset,x2986), (size,Const(128)), (isLoad,Const(true))))
    val b3155_b3153 = WriteMem(b3153, x2987_x2986).name("b3155_b3153").ctrl(x2989) // StreamWrite(x2979,x2987,b1374)
    val b3156_b3154 = WriteMem(b3154, Const(128)).name("b3156_b3154").ctrl(x2989) // StreamWrite(x2979,x2987,b1374)
    val x2990 = FringeDenseLoad(dram=List(x2853), cmdStream=List(b3153, b3154), dataStream=List(x2980)).name("x2990").ctrl(x2998) // FringeDenseLoad(x2853,x2979,x2980)
    val x2991 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2991").ctrl(x2998) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2992 = CounterChain(List(x2991)).name("x2992").ctrl(x2998) // CounterChainNew(List(x2991))
    val x2997 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2992).name("x2997").ctrl(x2998) // UnrolledForeach(List(b1374),x2992,Block(Const(())),List(List(b1512)),List(List(b1513)))
    val b1512 = CounterIter(x2991, None).ctrl(x2997).name("b1512")
    val b1513 = DummyOp().ctrl(x2997).name("b1513")
    val x2993 = OpDef(op=BitAnd, inputs=List(b1513, b1374)).name("x2993").ctrl(x2997) // And(b1513,b1374)
    val x2994_x2994 = ReadMem(x2980).name("x2994").ctrl(x2997) // ParStreamRead(x2980,List(x2993))
    val x2995_x2995 = x2994_x2994 // x2995 = VectorApply(x2994,0)
    val x2996 = StoreBanks(List(x2870_d0_b0), List(b1512), x2995_x2995).name("x2996").ctrl(x2997) // ParSRAMStore(x2870,List(List(b1512)),List(x2995),List(x2993))
    val x3018 = UnitController(style=StreamPipe, level=OuterControl).name("x3018").ctrl(x3105) // UnitPipe(List(b1374),Block(Const(())))
    val b3157 = StreamOut(field="offset").name("b3157").ctrl(x3018) // x2999 = StreamOutNew(BurstCmdBus)
    val b3158 = StreamOut(field="size").name("b3158").ctrl(x3018) // x2999 = StreamOutNew(BurstCmdBus)
    val x3000 = StreamIn(field="data").name("x3000").ctrl(x3018) // x3000 = StreamInNew(BurstDataBus())
    val x3009 = UnitController(style=SeqPipe, level=InnerControl).name("x3009").ctrl(x3018) // UnitPipe(List(b1374),Block(x3008))
    val x3001 = b1372 // FixConvert(b1372,TRUE,_32,_0)
    val x3002 = OpDef(op=FixSla, inputs=List(x3001, Const(2))).name("x3002").ctrl(x3009) // FixLsh(x3001,Const(2))
    val x3003 = x3002 // FixConvert(x3002,TRUE,_64,_0)
    val x3004 = DramAddress(x2855).name("x3004").ctrl(x3009) // GetDRAMAddress(x2855)
    val x3005 = OpDef(op=FixAdd, inputs=List(x3003, x3004)).name("x3005").ctrl(x3009) // FixAdd(x3003,x3004)
    val x3007_x3006 = x3005 // FixConvert(x3005,TRUE,_64,_0)
    // x3007 = SimpleStruct(ArrayBuffer((offset,x3006), (size,Const(128)), (isLoad,Const(true))))
    val b3159_b3157 = WriteMem(b3157, x3007_x3006).name("b3159_b3157").ctrl(x3009) // StreamWrite(x2999,x3007,b1374)
    val b3160_b3158 = WriteMem(b3158, Const(128)).name("b3160_b3158").ctrl(x3009) // StreamWrite(x2999,x3007,b1374)
    val x3010 = FringeDenseLoad(dram=List(x2855), cmdStream=List(b3157, b3158), dataStream=List(x3000)).name("x3010").ctrl(x3018) // FringeDenseLoad(x2855,x2999,x3000)
    val x3011 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x3011").ctrl(x3018) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x3012 = CounterChain(List(x3011)).name("x3012").ctrl(x3018) // CounterChainNew(List(x3011))
    val x3017 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3012).name("x3017").ctrl(x3018) // UnrolledForeach(List(b1374),x3012,Block(Const(())),List(List(b1534)),List(List(b1535)))
    val b1534 = CounterIter(x3011, None).ctrl(x3017).name("b1534")
    val b1535 = DummyOp().ctrl(x3017).name("b1535")
    val x3013 = OpDef(op=BitAnd, inputs=List(b1535, b1374)).name("x3013").ctrl(x3017) // And(b1535,b1374)
    val x3014_x3014 = ReadMem(x3000).name("x3014").ctrl(x3017) // ParStreamRead(x3000,List(x3013))
    val x3015_x3015 = x3014_x3014 // x3015 = VectorApply(x3014,0)
    val x3016 = StoreBanks(List(x2872_d0_b0), List(b1534), x3015_x3015).name("x3016").ctrl(x3017) // ParSRAMStore(x2872,List(List(b1534)),List(x3015),List(x3013))
    val x3038 = UnitController(style=StreamPipe, level=OuterControl).name("x3038").ctrl(x3105) // UnitPipe(List(b1374),Block(Const(())))
    val b3161 = StreamOut(field="offset").name("b3161").ctrl(x3038) // x3019 = StreamOutNew(BurstCmdBus)
    val b3162 = StreamOut(field="size").name("b3162").ctrl(x3038) // x3019 = StreamOutNew(BurstCmdBus)
    val x3020 = StreamIn(field="data").name("x3020").ctrl(x3038) // x3020 = StreamInNew(BurstDataBus())
    val x3029 = UnitController(style=SeqPipe, level=InnerControl).name("x3029").ctrl(x3038) // UnitPipe(List(b1374),Block(x3028))
    val x3021 = b1372 // FixConvert(b1372,TRUE,_32,_0)
    val x3022 = OpDef(op=FixSla, inputs=List(x3021, Const(2))).name("x3022").ctrl(x3029) // FixLsh(x3021,Const(2))
    val x3023 = x3022 // FixConvert(x3022,TRUE,_64,_0)
    val x3024 = DramAddress(x2857).name("x3024").ctrl(x3029) // GetDRAMAddress(x2857)
    val x3025 = OpDef(op=FixAdd, inputs=List(x3023, x3024)).name("x3025").ctrl(x3029) // FixAdd(x3023,x3024)
    val x3027_x3026 = x3025 // FixConvert(x3025,TRUE,_64,_0)
    // x3027 = SimpleStruct(ArrayBuffer((offset,x3026), (size,Const(128)), (isLoad,Const(true))))
    val b3163_b3161 = WriteMem(b3161, x3027_x3026).name("b3163_b3161").ctrl(x3029) // StreamWrite(x3019,x3027,b1374)
    val b3164_b3162 = WriteMem(b3162, Const(128)).name("b3164_b3162").ctrl(x3029) // StreamWrite(x3019,x3027,b1374)
    val x3030 = FringeDenseLoad(dram=List(x2857), cmdStream=List(b3161, b3162), dataStream=List(x3020)).name("x3030").ctrl(x3038) // FringeDenseLoad(x2857,x3019,x3020)
    val x3031 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x3031").ctrl(x3038) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x3032 = CounterChain(List(x3031)).name("x3032").ctrl(x3038) // CounterChainNew(List(x3031))
    val x3037 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3032).name("x3037").ctrl(x3038) // UnrolledForeach(List(b1374),x3032,Block(Const(())),List(List(b1556)),List(List(b1557)))
    val b1556 = CounterIter(x3031, None).ctrl(x3037).name("b1556")
    val b1557 = DummyOp().ctrl(x3037).name("b1557")
    val x3033 = OpDef(op=BitAnd, inputs=List(b1557, b1374)).name("x3033").ctrl(x3037) // And(b1557,b1374)
    val x3034_x3034 = ReadMem(x3020).name("x3034").ctrl(x3037) // ParStreamRead(x3020,List(x3033))
    val x3035_x3035 = x3034_x3034 // x3035 = VectorApply(x3034,0)
    val x3036 = StoreBanks(List(x2874_d0_b0), List(b1556), x3035_x3035).name("x3036").ctrl(x3037) // ParSRAMStore(x2874,List(List(b1556)),List(x3035),List(x3033))
    val x3039_d0 = Reg(init=Some(0)).name("x3039_d0").ctrl(x3105) // x3039 = RegNew(Const(0))
    isAccum(x3039_d0) = false
    bufferDepthOf(x3039_d0) = 2
    val x3039_d1 = Reg(init=Some(0)).name("x3039_d1").ctrl(x3105) // x3039 = RegNew(Const(0))
    isAccum(x3039_d1) = true
    bufferDepthOf(x3039_d1) = 1
    val x3040_d0 = Reg(init=Some(0)).name("x3040_d0").ctrl(x3105) // x3040 = RegNew(Const(0))
    isAccum(x3040_d0) = false
    bufferDepthOf(x3040_d0) = 2
    val x3040_d1 = Reg(init=Some(0)).name("x3040_d1").ctrl(x3105) // x3040 = RegNew(Const(0))
    isAccum(x3040_d1) = true
    bufferDepthOf(x3040_d1) = 1
    val x3041 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x3041").ctrl(x3105) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x3042 = CounterChain(List(x3041)).name("x3042").ctrl(x3105) // CounterChainNew(List(x3041))
    val x3067 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3042).name("x3067").ctrl(x3105) // UnrolledReduce(List(b1373),x3042,x3039,Block((x3039) => Const(())),List(List(b1572)),List(List(b1573)))
    val b1572 = CounterIter(x3041, None).ctrl(x3067).name("b1572")
    val b1573 = DummyOp().ctrl(x3067).name("b1573")
    val x3043 = OpDef(op=BitAnd, inputs=List(b1573, b1373)).name("x3043").ctrl(x3067) // And(b1573,b1373)
    val x3044 = LoadBanks(List(x2867_d0_b0), List(b1572)).name("x3044").ctrl(x3067) // ParSRAMLoad(x2867,List(List(b1572)),List(x3043))
    val x3045 = x3044 // x3045 = VectorApply(x3044,0)
    val x3046 = LoadBanks(List(x2871_d0_b0), List(b1572)).name("x3046").ctrl(x3067) // ParSRAMLoad(x2871,List(List(b1572)),List(x3043))
    val x3047 = x3046 // x3047 = VectorApply(x3046,0)
    val x3048 = LoadBanks(List(x2869_d0_b0), List(b1572)).name("x3048").ctrl(x3067) // ParSRAMLoad(x2869,List(List(b1572)),List(x3043))
    val x3049 = x3048 // x3049 = VectorApply(x3048,0)
    val x3050 = LoadBanks(List(x2873_d0_b0), List(b1572)).name("x3050").ctrl(x3067) // ParSRAMLoad(x2873,List(List(b1572)),List(x3043))
    val x3051 = x3050 // x3051 = VectorApply(x3050,0)
    val x3052 = OpDef(op=FixLt, inputs=List(Const(0), x3045)).name("x3052").ctrl(x3067) // FixLt(Const(0),x3045)
    val x3053 = OpDef(op=FixLt, inputs=List(x3045, Const(9999))).name("x3053").ctrl(x3067) // FixLt(x3045,Const(9999))
    val x3054 = OpDef(op=BitAnd, inputs=List(x3052, x3053)).name("x3054").ctrl(x3067) // And(x3052,x3053)
    val x3055 = OpDef(op=FixLeq, inputs=List(Const(0), x3047)).name("x3055").ctrl(x3067) // FixLeq(Const(0),x3047)
    val x3056 = OpDef(op=BitAnd, inputs=List(x3054, x3055)).name("x3056").ctrl(x3067) // And(x3054,x3055)
    val x3057 = OpDef(op=FixLeq, inputs=List(x3047, Const(9999))).name("x3057").ctrl(x3067) // FixLeq(x3047,Const(9999))
    val x3058 = OpDef(op=BitAnd, inputs=List(x3056, x3057)).name("x3058").ctrl(x3067) // And(x3056,x3057)
    val x3059 = OpDef(op=FixLt, inputs=List(x3049, Const(24))).name("x3059").ctrl(x3067) // FixLt(x3049,Const(24))
    val x3060 = OpDef(op=BitAnd, inputs=List(x3058, x3059)).name("x3060").ctrl(x3067) // And(x3058,x3059)
    val x3061 = OpDef(op=FixMul, inputs=List(x3051, x3047)).name("x3061").ctrl(x3067) // FixMul(x3051,x3047)
    val x3062 = OpDef(op=MuxOp, inputs=List(x3060, x3061, Const(0))).name("x3062").ctrl(x3067) // Mux(x3060,x3061,Const(0))
    val x3063 = ReadMem(x3039_d1).name("x3063").ctrl(x3067) // RegRead(x3039)
    val x3064 = OpDef(op=FixEql, inputs=List(b1572, Const(0))).name("x3064").ctrl(x3067) // FixEql(b1572,Const(0))
    val x3065 = ReduceAccumOp(op=FixAdd, input=x3062, accum=x3063).name("x3065").ctrl(x3067) // FixAdd(x3062,x3063)
    val x3066_x3039_d0 = WriteMem(x3039_d0, x3065).name("x3066_x3039_d0").ctrl(x3067) // RegWrite(x3039,x3065,b1373)
    val x3066_x3039_d1 = WriteMem(x3039_d1, x3065).name("x3066_x3039_d1").ctrl(x3067) // RegWrite(x3039,x3065,b1373)
    val x3068 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x3068").ctrl(x3105) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x3069 = CounterChain(List(x3068)).name("x3069").ctrl(x3105) // CounterChainNew(List(x3068))
    val x3094 = LoopController(style=InnerPipe, level=InnerControl, cchain=x3069).name("x3094").ctrl(x3105) // UnrolledReduce(List(b1374),x3069,x3040,Block((x3040) => Const(())),List(List(b1599)),List(List(b1600)))
    val b1599 = CounterIter(x3068, None).ctrl(x3094).name("b1599")
    val b1600 = DummyOp().ctrl(x3094).name("b1600")
    val x3070 = OpDef(op=BitAnd, inputs=List(b1600, b1374)).name("x3070").ctrl(x3094) // And(b1600,b1374)
    val x3071 = LoadBanks(List(x2868_d0_b0), List(b1599)).name("x3071").ctrl(x3094) // ParSRAMLoad(x2868,List(List(b1599)),List(x3070))
    val x3072 = x3071 // x3072 = VectorApply(x3071,0)
    val x3073 = LoadBanks(List(x2872_d0_b0), List(b1599)).name("x3073").ctrl(x3094) // ParSRAMLoad(x2872,List(List(b1599)),List(x3070))
    val x3074 = x3073 // x3074 = VectorApply(x3073,0)
    val x3075 = LoadBanks(List(x2870_d0_b0), List(b1599)).name("x3075").ctrl(x3094) // ParSRAMLoad(x2870,List(List(b1599)),List(x3070))
    val x3076 = x3075 // x3076 = VectorApply(x3075,0)
    val x3077 = LoadBanks(List(x2874_d0_b0), List(b1599)).name("x3077").ctrl(x3094) // ParSRAMLoad(x2874,List(List(b1599)),List(x3070))
    val x3078 = x3077 // x3078 = VectorApply(x3077,0)
    val x3079 = OpDef(op=FixLt, inputs=List(Const(0), x3072)).name("x3079").ctrl(x3094) // FixLt(Const(0),x3072)
    val x3080 = OpDef(op=FixLt, inputs=List(x3072, Const(9999))).name("x3080").ctrl(x3094) // FixLt(x3072,Const(9999))
    val x3081 = OpDef(op=BitAnd, inputs=List(x3079, x3080)).name("x3081").ctrl(x3094) // And(x3079,x3080)
    val x3082 = OpDef(op=FixLeq, inputs=List(Const(0), x3074)).name("x3082").ctrl(x3094) // FixLeq(Const(0),x3074)
    val x3083 = OpDef(op=BitAnd, inputs=List(x3081, x3082)).name("x3083").ctrl(x3094) // And(x3081,x3082)
    val x3084 = OpDef(op=FixLeq, inputs=List(x3074, Const(9999))).name("x3084").ctrl(x3094) // FixLeq(x3074,Const(9999))
    val x3085 = OpDef(op=BitAnd, inputs=List(x3083, x3084)).name("x3085").ctrl(x3094) // And(x3083,x3084)
    val x3086 = OpDef(op=FixLt, inputs=List(x3076, Const(24))).name("x3086").ctrl(x3094) // FixLt(x3076,Const(24))
    val x3087 = OpDef(op=BitAnd, inputs=List(x3085, x3086)).name("x3087").ctrl(x3094) // And(x3085,x3086)
    val x3088 = OpDef(op=FixMul, inputs=List(x3078, x3074)).name("x3088").ctrl(x3094) // FixMul(x3078,x3074)
    val x3089 = OpDef(op=MuxOp, inputs=List(x3087, x3088, Const(0))).name("x3089").ctrl(x3094) // Mux(x3087,x3088,Const(0))
    val x3090 = ReadMem(x3040_d1).name("x3090").ctrl(x3094) // RegRead(x3040)
    val x3091 = OpDef(op=FixEql, inputs=List(b1599, Const(0))).name("x3091").ctrl(x3094) // FixEql(b1599,Const(0))
    val x3092 = ReduceAccumOp(op=FixAdd, input=x3089, accum=x3090).name("x3092").ctrl(x3094) // FixAdd(x3089,x3090)
    val x3093_x3040_d0 = WriteMem(x3040_d0, x3092).name("x3093_x3040_d0").ctrl(x3094) // RegWrite(x3040,x3092,b1374)
    val x3093_x3040_d1 = WriteMem(x3040_d1, x3092).name("x3093_x3040_d1").ctrl(x3094) // RegWrite(x3040,x3092,b1374)
    val x3104 = UnitController(style=SeqPipe, level=InnerControl).name("x3104").ctrl(x3105) // UnitPipe(List(Const(true)),Block(x3103))
    val x3095 = ReadMem(x3040_d0).name("x3095").ctrl(x3104) // RegRead(x3040)
    val x3096 = ReadMem(x3039_d0).name("x3096").ctrl(x3104) // RegRead(x3039)
    val x3097 = OpDef(op=FixAdd, inputs=List(x3096, x3095)).name("x3097").ctrl(x3104) // FixAdd(x3096,x3095)
    val x3098 = OpDef(op=MuxOp, inputs=List(b1374, x3097, x3096)).name("x3098").ctrl(x3104) // Mux(b1374,x3097,x3096)
    val x3099 = OpDef(op=BitOr, inputs=List(b1373, b1374)).name("x3099").ctrl(x3104) // Or(b1373,b1374)
    val x3100 = ReadMem(x2863_d1).name("x3100").ctrl(x3104) // RegRead(x2863)
    val x3101 = OpDef(op=FixEql, inputs=List(b1371, Const(0))).name("x3101").ctrl(x3104) // FixEql(b1371,Const(0))
    val x3102 = ReduceAccumOp(op=FixAdd, input=x3098, accum=x3100).name("x3102").ctrl(x3104) // FixAdd(x3098,x3100)
    val x3103_x2863_d0 = WriteMem(x2863_d0, x3102).name("x3103_x2863_d0").ctrl(x3104) // RegWrite(x2863,x3102,Const(true))
    val x3103_x2863_d1 = WriteMem(x2863_d1, x3102).name("x3103_x2863_d1").ctrl(x3104) // RegWrite(x2863,x3102,Const(true))
    val x3108 = UnitController(style=SeqPipe, level=InnerControl).name("x3108").ctrl(x3109) // UnitPipe(List(Const(true)),Block(Const(())))
    val x3106 = ReadMem(x2863_d0).name("x3106").ctrl(x3108) // RegRead(x2863)
    val x3107_x2858 = WriteMem(x2858, x3106).name("x3107_x2858").ctrl(x3108) // RegWrite(x2858,x3106,Const(true))
    
  }
}
