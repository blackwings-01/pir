import pir._
import pir.node._
import arch._
import prism.enums._

object TPCHQ6 extends PIRApp {
  def main(implicit design:PIRDesign) = {
    import design.pirmeta._
    val x2762 = ArgIn(init=0).name("x2762").ctrl(top) // ArgInNew(Const(0))
    boundOf(x2762) = 1024
    val x2764 = ReadMem(x2762).name("x2764").ctrl(top) // RegRead(x2762)
    val x2765 = DRAM().name("x2765").ctrl(top) // x2765 = DRAMNew(ArrayBuffer(x2764),Const(0))
    val x2766 = ReadMem(x2762).name("x2766").ctrl(top) // RegRead(x2762)
    val x2767 = DRAM().name("x2767").ctrl(top) // x2767 = DRAMNew(ArrayBuffer(x2766),Const(0))
    val x2768 = ReadMem(x2762).name("x2768").ctrl(top) // RegRead(x2762)
    val x2769 = DRAM().name("x2769").ctrl(top) // x2769 = DRAMNew(ArrayBuffer(x2768),Const(0))
    val x2770 = ReadMem(x2762).name("x2770").ctrl(top) // RegRead(x2762)
    val x2771 = DRAM().name("x2771").ctrl(top) // x2771 = DRAMNew(ArrayBuffer(x2770),Const(0))
    val x2772 = ArgOut(init=0).name("x2772").ctrl(top) // ArgOutNew(Const(0))
    val x3023 = UnitController(style=SeqPipe, level=OuterControl).name("x3023").ctrl(top) // Hwblock(Block(Const(())),false)
    val x2777_d0 = Reg(init=Some(0)).name("x2777_d0").ctrl(x3023) // x2777 = RegNew(Const(0))
    isAccum(x2777_d0) = false
    bufferDepthOf(x2777_d0) = 1
    val x2777_d1 = Reg(init=Some(0)).name("x2777_d1").ctrl(x3023) // x2777 = RegNew(Const(0))
    isAccum(x2777_d1) = true
    bufferDepthOf(x2777_d1) = 1
    val x2778 = ReadMem(x2762).name("x2778").ctrl(x3023) // RegRead(x2762)
    val x2779 = Counter(min=Const(0), max=x2778, step=Const(32), par=2).name("x2779").ctrl(x3023) // CounterNew(Const(0),x2778,Const(32),Const(2))
    val x2780 = CounterChain(List(x2779)).name("x2780").ctrl(x3023) // CounterChainNew(List(x2779))
    val x3019 = LoopController(style=MetaPipe, level=OuterControl, cchain=x2780).name("x3019").ctrl(x3023) // UnrolledReduce(List(Const(true)),x2780,x2777,Block((x2777) => Const(())),List(List(b1285, b1286)),List(List(b1287, b1288)))
    val b1285 = CounterIter(x2779, Some(0)).ctrl(x3019).name("b1285")
    val b1287 = Const(true).ctrl(x3019).name("b1287")
    val b1286 = CounterIter(x2779, Some(1)).ctrl(x3019).name("b1286")
    val b1288 = Const(true).ctrl(x3019).name("b1288")
    val x2781_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2781_d0_b0").ctrl(x3019) // x2781 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2781_d0_b0) = false
    bufferDepthOf(x2781_d0_b0) = 2
    val x2782_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2782_d0_b0").ctrl(x3019) // x2782 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2782_d0_b0) = false
    bufferDepthOf(x2782_d0_b0) = 2
    val x2783_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2783_d0_b0").ctrl(x3019) // x2783 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2783_d0_b0) = false
    bufferDepthOf(x2783_d0_b0) = 2
    val x2784_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2784_d0_b0").ctrl(x3019) // x2784 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2784_d0_b0) = false
    bufferDepthOf(x2784_d0_b0) = 2
    val x2785_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2785_d0_b0").ctrl(x3019) // x2785 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2785_d0_b0) = false
    bufferDepthOf(x2785_d0_b0) = 2
    val x2786_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2786_d0_b0").ctrl(x3019) // x2786 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2786_d0_b0) = false
    bufferDepthOf(x2786_d0_b0) = 2
    val x2787_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2787_d0_b0").ctrl(x3019) // x2787 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2787_d0_b0) = false
    bufferDepthOf(x2787_d0_b0) = 2
    val x2788_d0_b0 = SRAM(size=2, banking=Strided(banks=16, stride=1)).name("x2788_d0_b0").ctrl(x3019) // x2788 = SRAMNew(ArrayBuffer(Const(32)))
    isAccum(x2788_d0_b0) = false
    bufferDepthOf(x2788_d0_b0) = 2
    val x2790 = UnitController(style=SeqPipe, level=InnerControl).name("x2790").ctrl(x3019) // UnitPipe(List(b1287),Block(Const(())))
    val x2789 = OpDef(op=FixAdd, inputs=List(b1285, Const(32))).name("x2789").ctrl(x2790) // FixAdd(b1285,Const(32))
    val x2810 = UnitController(style=StreamPipe, level=OuterControl).name("x2810").ctrl(x3019) // UnitPipe(List(b1287),Block(Const(())))
    val b3047 = StreamOut(field="offset").name("b3047").ctrl(x2810) // x2791 = StreamOutNew(BurstCmdBus)
    val b3048 = StreamOut(field="size").name("b3048").ctrl(x2810) // x2791 = StreamOutNew(BurstCmdBus)
    val x2792 = StreamIn(field="data").name("x2792").ctrl(x2810) // x2792 = StreamInNew(BurstDataBus())
    val x2801 = UnitController(style=SeqPipe, level=InnerControl).name("x2801").ctrl(x2810) // UnitPipe(List(b1287),Block(x2800))
    val x2793 = b1285 // FixConvert(b1285,TRUE,_32,_0)
    val x2794 = OpDef(op=FixSla, inputs=List(x2793, Const(2))).name("x2794").ctrl(x2801) // FixLsh(x2793,Const(2))
    val x2795 = x2794 // FixConvert(x2794,TRUE,_64,_0)
    val x2796 = DramAddress(x2765).name("x2796").ctrl(x2801) // GetDRAMAddress(x2765)
    val x2797 = OpDef(op=FixAdd, inputs=List(x2795, x2796)).name("x2797").ctrl(x2801) // FixAdd(x2795,x2796)
    val x2799_x2798 = x2797 // FixConvert(x2797,TRUE,_64,_0)
    // x2799 = SimpleStruct(ArrayBuffer((offset,x2798), (size,Const(128)), (isLoad,Const(true))))
    val b3049_b3047 = WriteMem(b3047, x2799_x2798).name("b3049_b3047").ctrl(x2801) // StreamWrite(x2791,x2799,b1287)
    val b3050_b3048 = WriteMem(b3048, Const(128)).name("b3050_b3048").ctrl(x2801) // StreamWrite(x2791,x2799,b1287)
    val x2802 = FringeDenseLoad(dram=List(x2765), cmdStream=List(b3047, b3048), dataStream=List(x2792)).name("x2802").ctrl(x2810) // FringeDenseLoad(x2765,x2791,x2792)
    val x2803 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2803").ctrl(x2810) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2804 = CounterChain(List(x2803)).name("x2804").ctrl(x2810) // CounterChainNew(List(x2803))
    val x2809 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2804).name("x2809").ctrl(x2810) // UnrolledForeach(List(b1287),x2804,Block(Const(())),List(List(b1313)),List(List(b1314)))
    val b1313 = CounterIter(x2803, None).ctrl(x2809).name("b1313")
    val b1314 = Const(true).ctrl(x2809).name("b1314")
    val x2805 = OpDef(op=BitAnd, inputs=List(b1314, b1287)).name("x2805").ctrl(x2809) // And(b1314,b1287)
    val x2806_x2806 = ReadMem(x2792).name("x2806").ctrl(x2809) // ParStreamRead(x2792,List(x2805))
    val x2807_x2807 = x2806_x2806 // x2807 = VectorApply(x2806,0)
    val x2808 = StoreBanks(List(x2781_d0_b0), List(b1313), x2807_x2807).name("x2808").ctrl(x2809) // ParSRAMStore(x2781,List(List(b1313)),List(x2807),List(x2805))
    val x2830 = UnitController(style=StreamPipe, level=OuterControl).name("x2830").ctrl(x3019) // UnitPipe(List(b1287),Block(Const(())))
    val b3051 = StreamOut(field="offset").name("b3051").ctrl(x2830) // x2811 = StreamOutNew(BurstCmdBus)
    val b3052 = StreamOut(field="size").name("b3052").ctrl(x2830) // x2811 = StreamOutNew(BurstCmdBus)
    val x2812 = StreamIn(field="data").name("x2812").ctrl(x2830) // x2812 = StreamInNew(BurstDataBus())
    val x2821 = UnitController(style=SeqPipe, level=InnerControl).name("x2821").ctrl(x2830) // UnitPipe(List(b1287),Block(x2820))
    val x2813 = b1285 // FixConvert(b1285,TRUE,_32,_0)
    val x2814 = OpDef(op=FixSla, inputs=List(x2813, Const(2))).name("x2814").ctrl(x2821) // FixLsh(x2813,Const(2))
    val x2815 = x2814 // FixConvert(x2814,TRUE,_64,_0)
    val x2816 = DramAddress(x2767).name("x2816").ctrl(x2821) // GetDRAMAddress(x2767)
    val x2817 = OpDef(op=FixAdd, inputs=List(x2815, x2816)).name("x2817").ctrl(x2821) // FixAdd(x2815,x2816)
    val x2819_x2818 = x2817 // FixConvert(x2817,TRUE,_64,_0)
    // x2819 = SimpleStruct(ArrayBuffer((offset,x2818), (size,Const(128)), (isLoad,Const(true))))
    val b3053_b3051 = WriteMem(b3051, x2819_x2818).name("b3053_b3051").ctrl(x2821) // StreamWrite(x2811,x2819,b1287)
    val b3054_b3052 = WriteMem(b3052, Const(128)).name("b3054_b3052").ctrl(x2821) // StreamWrite(x2811,x2819,b1287)
    val x2822 = FringeDenseLoad(dram=List(x2767), cmdStream=List(b3051, b3052), dataStream=List(x2812)).name("x2822").ctrl(x2830) // FringeDenseLoad(x2767,x2811,x2812)
    val x2823 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2823").ctrl(x2830) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2824 = CounterChain(List(x2823)).name("x2824").ctrl(x2830) // CounterChainNew(List(x2823))
    val x2829 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2824).name("x2829").ctrl(x2830) // UnrolledForeach(List(b1287),x2824,Block(Const(())),List(List(b1335)),List(List(b1336)))
    val b1335 = CounterIter(x2823, None).ctrl(x2829).name("b1335")
    val b1336 = Const(true).ctrl(x2829).name("b1336")
    val x2825 = OpDef(op=BitAnd, inputs=List(b1336, b1287)).name("x2825").ctrl(x2829) // And(b1336,b1287)
    val x2826_x2826 = ReadMem(x2812).name("x2826").ctrl(x2829) // ParStreamRead(x2812,List(x2825))
    val x2827_x2827 = x2826_x2826 // x2827 = VectorApply(x2826,0)
    val x2828 = StoreBanks(List(x2783_d0_b0), List(b1335), x2827_x2827).name("x2828").ctrl(x2829) // ParSRAMStore(x2783,List(List(b1335)),List(x2827),List(x2825))
    val x2850 = UnitController(style=StreamPipe, level=OuterControl).name("x2850").ctrl(x3019) // UnitPipe(List(b1287),Block(Const(())))
    val b3055 = StreamOut(field="offset").name("b3055").ctrl(x2850) // x2831 = StreamOutNew(BurstCmdBus)
    val b3056 = StreamOut(field="size").name("b3056").ctrl(x2850) // x2831 = StreamOutNew(BurstCmdBus)
    val x2832 = StreamIn(field="data").name("x2832").ctrl(x2850) // x2832 = StreamInNew(BurstDataBus())
    val x2841 = UnitController(style=SeqPipe, level=InnerControl).name("x2841").ctrl(x2850) // UnitPipe(List(b1287),Block(x2840))
    val x2833 = b1285 // FixConvert(b1285,TRUE,_32,_0)
    val x2834 = OpDef(op=FixSla, inputs=List(x2833, Const(2))).name("x2834").ctrl(x2841) // FixLsh(x2833,Const(2))
    val x2835 = x2834 // FixConvert(x2834,TRUE,_64,_0)
    val x2836 = DramAddress(x2769).name("x2836").ctrl(x2841) // GetDRAMAddress(x2769)
    val x2837 = OpDef(op=FixAdd, inputs=List(x2835, x2836)).name("x2837").ctrl(x2841) // FixAdd(x2835,x2836)
    val x2839_x2838 = x2837 // FixConvert(x2837,TRUE,_64,_0)
    // x2839 = SimpleStruct(ArrayBuffer((offset,x2838), (size,Const(128)), (isLoad,Const(true))))
    val b3057_b3055 = WriteMem(b3055, x2839_x2838).name("b3057_b3055").ctrl(x2841) // StreamWrite(x2831,x2839,b1287)
    val b3058_b3056 = WriteMem(b3056, Const(128)).name("b3058_b3056").ctrl(x2841) // StreamWrite(x2831,x2839,b1287)
    val x2842 = FringeDenseLoad(dram=List(x2769), cmdStream=List(b3055, b3056), dataStream=List(x2832)).name("x2842").ctrl(x2850) // FringeDenseLoad(x2769,x2831,x2832)
    val x2843 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2843").ctrl(x2850) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2844 = CounterChain(List(x2843)).name("x2844").ctrl(x2850) // CounterChainNew(List(x2843))
    val x2849 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2844).name("x2849").ctrl(x2850) // UnrolledForeach(List(b1287),x2844,Block(Const(())),List(List(b1357)),List(List(b1358)))
    val b1357 = CounterIter(x2843, None).ctrl(x2849).name("b1357")
    val b1358 = Const(true).ctrl(x2849).name("b1358")
    val x2845 = OpDef(op=BitAnd, inputs=List(b1358, b1287)).name("x2845").ctrl(x2849) // And(b1358,b1287)
    val x2846_x2846 = ReadMem(x2832).name("x2846").ctrl(x2849) // ParStreamRead(x2832,List(x2845))
    val x2847_x2847 = x2846_x2846 // x2847 = VectorApply(x2846,0)
    val x2848 = StoreBanks(List(x2785_d0_b0), List(b1357), x2847_x2847).name("x2848").ctrl(x2849) // ParSRAMStore(x2785,List(List(b1357)),List(x2847),List(x2845))
    val x2870 = UnitController(style=StreamPipe, level=OuterControl).name("x2870").ctrl(x3019) // UnitPipe(List(b1287),Block(Const(())))
    val b3059 = StreamOut(field="offset").name("b3059").ctrl(x2870) // x2851 = StreamOutNew(BurstCmdBus)
    val b3060 = StreamOut(field="size").name("b3060").ctrl(x2870) // x2851 = StreamOutNew(BurstCmdBus)
    val x2852 = StreamIn(field="data").name("x2852").ctrl(x2870) // x2852 = StreamInNew(BurstDataBus())
    val x2861 = UnitController(style=SeqPipe, level=InnerControl).name("x2861").ctrl(x2870) // UnitPipe(List(b1287),Block(x2860))
    val x2853 = b1285 // FixConvert(b1285,TRUE,_32,_0)
    val x2854 = OpDef(op=FixSla, inputs=List(x2853, Const(2))).name("x2854").ctrl(x2861) // FixLsh(x2853,Const(2))
    val x2855 = x2854 // FixConvert(x2854,TRUE,_64,_0)
    val x2856 = DramAddress(x2771).name("x2856").ctrl(x2861) // GetDRAMAddress(x2771)
    val x2857 = OpDef(op=FixAdd, inputs=List(x2855, x2856)).name("x2857").ctrl(x2861) // FixAdd(x2855,x2856)
    val x2859_x2858 = x2857 // FixConvert(x2857,TRUE,_64,_0)
    // x2859 = SimpleStruct(ArrayBuffer((offset,x2858), (size,Const(128)), (isLoad,Const(true))))
    val b3061_b3059 = WriteMem(b3059, x2859_x2858).name("b3061_b3059").ctrl(x2861) // StreamWrite(x2851,x2859,b1287)
    val b3062_b3060 = WriteMem(b3060, Const(128)).name("b3062_b3060").ctrl(x2861) // StreamWrite(x2851,x2859,b1287)
    val x2862 = FringeDenseLoad(dram=List(x2771), cmdStream=List(b3059, b3060), dataStream=List(x2852)).name("x2862").ctrl(x2870) // FringeDenseLoad(x2771,x2851,x2852)
    val x2863 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2863").ctrl(x2870) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2864 = CounterChain(List(x2863)).name("x2864").ctrl(x2870) // CounterChainNew(List(x2863))
    val x2869 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2864).name("x2869").ctrl(x2870) // UnrolledForeach(List(b1287),x2864,Block(Const(())),List(List(b1379)),List(List(b1380)))
    val b1379 = CounterIter(x2863, None).ctrl(x2869).name("b1379")
    val b1380 = Const(true).ctrl(x2869).name("b1380")
    val x2865 = OpDef(op=BitAnd, inputs=List(b1380, b1287)).name("x2865").ctrl(x2869) // And(b1380,b1287)
    val x2866_x2866 = ReadMem(x2852).name("x2866").ctrl(x2869) // ParStreamRead(x2852,List(x2865))
    val x2867_x2867 = x2866_x2866 // x2867 = VectorApply(x2866,0)
    val x2868 = StoreBanks(List(x2787_d0_b0), List(b1379), x2867_x2867).name("x2868").ctrl(x2869) // ParSRAMStore(x2787,List(List(b1379)),List(x2867),List(x2865))
    val x2872 = UnitController(style=SeqPipe, level=InnerControl).name("x2872").ctrl(x3019) // UnitPipe(List(b1288),Block(Const(())))
    val x2871 = OpDef(op=FixAdd, inputs=List(b1286, Const(32))).name("x2871").ctrl(x2872) // FixAdd(b1286,Const(32))
    val x2892 = UnitController(style=StreamPipe, level=OuterControl).name("x2892").ctrl(x3019) // UnitPipe(List(b1288),Block(Const(())))
    val b3063 = StreamOut(field="offset").name("b3063").ctrl(x2892) // x2873 = StreamOutNew(BurstCmdBus)
    val b3064 = StreamOut(field="size").name("b3064").ctrl(x2892) // x2873 = StreamOutNew(BurstCmdBus)
    val x2874 = StreamIn(field="data").name("x2874").ctrl(x2892) // x2874 = StreamInNew(BurstDataBus())
    val x2883 = UnitController(style=SeqPipe, level=InnerControl).name("x2883").ctrl(x2892) // UnitPipe(List(b1288),Block(x2882))
    val x2875 = b1286 // FixConvert(b1286,TRUE,_32,_0)
    val x2876 = OpDef(op=FixSla, inputs=List(x2875, Const(2))).name("x2876").ctrl(x2883) // FixLsh(x2875,Const(2))
    val x2877 = x2876 // FixConvert(x2876,TRUE,_64,_0)
    val x2878 = DramAddress(x2765).name("x2878").ctrl(x2883) // GetDRAMAddress(x2765)
    val x2879 = OpDef(op=FixAdd, inputs=List(x2877, x2878)).name("x2879").ctrl(x2883) // FixAdd(x2877,x2878)
    val x2881_x2880 = x2879 // FixConvert(x2879,TRUE,_64,_0)
    // x2881 = SimpleStruct(ArrayBuffer((offset,x2880), (size,Const(128)), (isLoad,Const(true))))
    val b3065_b3063 = WriteMem(b3063, x2881_x2880).name("b3065_b3063").ctrl(x2883) // StreamWrite(x2873,x2881,b1288)
    val b3066_b3064 = WriteMem(b3064, Const(128)).name("b3066_b3064").ctrl(x2883) // StreamWrite(x2873,x2881,b1288)
    val x2884 = FringeDenseLoad(dram=List(x2765), cmdStream=List(b3063, b3064), dataStream=List(x2874)).name("x2884").ctrl(x2892) // FringeDenseLoad(x2765,x2873,x2874)
    val x2885 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2885").ctrl(x2892) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2886 = CounterChain(List(x2885)).name("x2886").ctrl(x2892) // CounterChainNew(List(x2885))
    val x2891 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2886).name("x2891").ctrl(x2892) // UnrolledForeach(List(b1288),x2886,Block(Const(())),List(List(b1404)),List(List(b1405)))
    val b1404 = CounterIter(x2885, None).ctrl(x2891).name("b1404")
    val b1405 = Const(true).ctrl(x2891).name("b1405")
    val x2887 = OpDef(op=BitAnd, inputs=List(b1405, b1288)).name("x2887").ctrl(x2891) // And(b1405,b1288)
    val x2888_x2888 = ReadMem(x2874).name("x2888").ctrl(x2891) // ParStreamRead(x2874,List(x2887))
    val x2889_x2889 = x2888_x2888 // x2889 = VectorApply(x2888,0)
    val x2890 = StoreBanks(List(x2782_d0_b0), List(b1404), x2889_x2889).name("x2890").ctrl(x2891) // ParSRAMStore(x2782,List(List(b1404)),List(x2889),List(x2887))
    val x2912 = UnitController(style=StreamPipe, level=OuterControl).name("x2912").ctrl(x3019) // UnitPipe(List(b1288),Block(Const(())))
    val b3067 = StreamOut(field="offset").name("b3067").ctrl(x2912) // x2893 = StreamOutNew(BurstCmdBus)
    val b3068 = StreamOut(field="size").name("b3068").ctrl(x2912) // x2893 = StreamOutNew(BurstCmdBus)
    val x2894 = StreamIn(field="data").name("x2894").ctrl(x2912) // x2894 = StreamInNew(BurstDataBus())
    val x2903 = UnitController(style=SeqPipe, level=InnerControl).name("x2903").ctrl(x2912) // UnitPipe(List(b1288),Block(x2902))
    val x2895 = b1286 // FixConvert(b1286,TRUE,_32,_0)
    val x2896 = OpDef(op=FixSla, inputs=List(x2895, Const(2))).name("x2896").ctrl(x2903) // FixLsh(x2895,Const(2))
    val x2897 = x2896 // FixConvert(x2896,TRUE,_64,_0)
    val x2898 = DramAddress(x2767).name("x2898").ctrl(x2903) // GetDRAMAddress(x2767)
    val x2899 = OpDef(op=FixAdd, inputs=List(x2897, x2898)).name("x2899").ctrl(x2903) // FixAdd(x2897,x2898)
    val x2901_x2900 = x2899 // FixConvert(x2899,TRUE,_64,_0)
    // x2901 = SimpleStruct(ArrayBuffer((offset,x2900), (size,Const(128)), (isLoad,Const(true))))
    val b3069_b3067 = WriteMem(b3067, x2901_x2900).name("b3069_b3067").ctrl(x2903) // StreamWrite(x2893,x2901,b1288)
    val b3070_b3068 = WriteMem(b3068, Const(128)).name("b3070_b3068").ctrl(x2903) // StreamWrite(x2893,x2901,b1288)
    val x2904 = FringeDenseLoad(dram=List(x2767), cmdStream=List(b3067, b3068), dataStream=List(x2894)).name("x2904").ctrl(x2912) // FringeDenseLoad(x2767,x2893,x2894)
    val x2905 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2905").ctrl(x2912) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2906 = CounterChain(List(x2905)).name("x2906").ctrl(x2912) // CounterChainNew(List(x2905))
    val x2911 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2906).name("x2911").ctrl(x2912) // UnrolledForeach(List(b1288),x2906,Block(Const(())),List(List(b1426)),List(List(b1427)))
    val b1426 = CounterIter(x2905, None).ctrl(x2911).name("b1426")
    val b1427 = Const(true).ctrl(x2911).name("b1427")
    val x2907 = OpDef(op=BitAnd, inputs=List(b1427, b1288)).name("x2907").ctrl(x2911) // And(b1427,b1288)
    val x2908_x2908 = ReadMem(x2894).name("x2908").ctrl(x2911) // ParStreamRead(x2894,List(x2907))
    val x2909_x2909 = x2908_x2908 // x2909 = VectorApply(x2908,0)
    val x2910 = StoreBanks(List(x2784_d0_b0), List(b1426), x2909_x2909).name("x2910").ctrl(x2911) // ParSRAMStore(x2784,List(List(b1426)),List(x2909),List(x2907))
    val x2932 = UnitController(style=StreamPipe, level=OuterControl).name("x2932").ctrl(x3019) // UnitPipe(List(b1288),Block(Const(())))
    val b3071 = StreamOut(field="offset").name("b3071").ctrl(x2932) // x2913 = StreamOutNew(BurstCmdBus)
    val b3072 = StreamOut(field="size").name("b3072").ctrl(x2932) // x2913 = StreamOutNew(BurstCmdBus)
    val x2914 = StreamIn(field="data").name("x2914").ctrl(x2932) // x2914 = StreamInNew(BurstDataBus())
    val x2923 = UnitController(style=SeqPipe, level=InnerControl).name("x2923").ctrl(x2932) // UnitPipe(List(b1288),Block(x2922))
    val x2915 = b1286 // FixConvert(b1286,TRUE,_32,_0)
    val x2916 = OpDef(op=FixSla, inputs=List(x2915, Const(2))).name("x2916").ctrl(x2923) // FixLsh(x2915,Const(2))
    val x2917 = x2916 // FixConvert(x2916,TRUE,_64,_0)
    val x2918 = DramAddress(x2769).name("x2918").ctrl(x2923) // GetDRAMAddress(x2769)
    val x2919 = OpDef(op=FixAdd, inputs=List(x2917, x2918)).name("x2919").ctrl(x2923) // FixAdd(x2917,x2918)
    val x2921_x2920 = x2919 // FixConvert(x2919,TRUE,_64,_0)
    // x2921 = SimpleStruct(ArrayBuffer((offset,x2920), (size,Const(128)), (isLoad,Const(true))))
    val b3073_b3071 = WriteMem(b3071, x2921_x2920).name("b3073_b3071").ctrl(x2923) // StreamWrite(x2913,x2921,b1288)
    val b3074_b3072 = WriteMem(b3072, Const(128)).name("b3074_b3072").ctrl(x2923) // StreamWrite(x2913,x2921,b1288)
    val x2924 = FringeDenseLoad(dram=List(x2769), cmdStream=List(b3071, b3072), dataStream=List(x2914)).name("x2924").ctrl(x2932) // FringeDenseLoad(x2769,x2913,x2914)
    val x2925 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2925").ctrl(x2932) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2926 = CounterChain(List(x2925)).name("x2926").ctrl(x2932) // CounterChainNew(List(x2925))
    val x2931 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2926).name("x2931").ctrl(x2932) // UnrolledForeach(List(b1288),x2926,Block(Const(())),List(List(b1448)),List(List(b1449)))
    val b1448 = CounterIter(x2925, None).ctrl(x2931).name("b1448")
    val b1449 = Const(true).ctrl(x2931).name("b1449")
    val x2927 = OpDef(op=BitAnd, inputs=List(b1449, b1288)).name("x2927").ctrl(x2931) // And(b1449,b1288)
    val x2928_x2928 = ReadMem(x2914).name("x2928").ctrl(x2931) // ParStreamRead(x2914,List(x2927))
    val x2929_x2929 = x2928_x2928 // x2929 = VectorApply(x2928,0)
    val x2930 = StoreBanks(List(x2786_d0_b0), List(b1448), x2929_x2929).name("x2930").ctrl(x2931) // ParSRAMStore(x2786,List(List(b1448)),List(x2929),List(x2927))
    val x2952 = UnitController(style=StreamPipe, level=OuterControl).name("x2952").ctrl(x3019) // UnitPipe(List(b1288),Block(Const(())))
    val b3075 = StreamOut(field="offset").name("b3075").ctrl(x2952) // x2933 = StreamOutNew(BurstCmdBus)
    val b3076 = StreamOut(field="size").name("b3076").ctrl(x2952) // x2933 = StreamOutNew(BurstCmdBus)
    val x2934 = StreamIn(field="data").name("x2934").ctrl(x2952) // x2934 = StreamInNew(BurstDataBus())
    val x2943 = UnitController(style=SeqPipe, level=InnerControl).name("x2943").ctrl(x2952) // UnitPipe(List(b1288),Block(x2942))
    val x2935 = b1286 // FixConvert(b1286,TRUE,_32,_0)
    val x2936 = OpDef(op=FixSla, inputs=List(x2935, Const(2))).name("x2936").ctrl(x2943) // FixLsh(x2935,Const(2))
    val x2937 = x2936 // FixConvert(x2936,TRUE,_64,_0)
    val x2938 = DramAddress(x2771).name("x2938").ctrl(x2943) // GetDRAMAddress(x2771)
    val x2939 = OpDef(op=FixAdd, inputs=List(x2937, x2938)).name("x2939").ctrl(x2943) // FixAdd(x2937,x2938)
    val x2941_x2940 = x2939 // FixConvert(x2939,TRUE,_64,_0)
    // x2941 = SimpleStruct(ArrayBuffer((offset,x2940), (size,Const(128)), (isLoad,Const(true))))
    val b3077_b3075 = WriteMem(b3075, x2941_x2940).name("b3077_b3075").ctrl(x2943) // StreamWrite(x2933,x2941,b1288)
    val b3078_b3076 = WriteMem(b3076, Const(128)).name("b3078_b3076").ctrl(x2943) // StreamWrite(x2933,x2941,b1288)
    val x2944 = FringeDenseLoad(dram=List(x2771), cmdStream=List(b3075, b3076), dataStream=List(x2934)).name("x2944").ctrl(x2952) // FringeDenseLoad(x2771,x2933,x2934)
    val x2945 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2945").ctrl(x2952) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2946 = CounterChain(List(x2945)).name("x2946").ctrl(x2952) // CounterChainNew(List(x2945))
    val x2951 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2946).name("x2951").ctrl(x2952) // UnrolledForeach(List(b1288),x2946,Block(Const(())),List(List(b1470)),List(List(b1471)))
    val b1470 = CounterIter(x2945, None).ctrl(x2951).name("b1470")
    val b1471 = Const(true).ctrl(x2951).name("b1471")
    val x2947 = OpDef(op=BitAnd, inputs=List(b1471, b1288)).name("x2947").ctrl(x2951) // And(b1471,b1288)
    val x2948_x2948 = ReadMem(x2934).name("x2948").ctrl(x2951) // ParStreamRead(x2934,List(x2947))
    val x2949_x2949 = x2948_x2948 // x2949 = VectorApply(x2948,0)
    val x2950 = StoreBanks(List(x2788_d0_b0), List(b1470), x2949_x2949).name("x2950").ctrl(x2951) // ParSRAMStore(x2788,List(List(b1470)),List(x2949),List(x2947))
    val x2953_d0 = Reg(init=Some(0)).name("x2953_d0").ctrl(x3019) // x2953 = RegNew(Const(0))
    isAccum(x2953_d0) = false
    bufferDepthOf(x2953_d0) = 2
    val x2953_d1 = Reg(init=Some(0)).name("x2953_d1").ctrl(x3019) // x2953 = RegNew(Const(0))
    isAccum(x2953_d1) = true
    bufferDepthOf(x2953_d1) = 1
    val x2954_d0 = Reg(init=Some(0)).name("x2954_d0").ctrl(x3019) // x2954 = RegNew(Const(0))
    isAccum(x2954_d0) = false
    bufferDepthOf(x2954_d0) = 2
    val x2954_d1 = Reg(init=Some(0)).name("x2954_d1").ctrl(x3019) // x2954 = RegNew(Const(0))
    isAccum(x2954_d1) = true
    bufferDepthOf(x2954_d1) = 1
    val x2955 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2955").ctrl(x3019) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2956 = CounterChain(List(x2955)).name("x2956").ctrl(x3019) // CounterChainNew(List(x2955))
    val x2981 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2956).name("x2981").ctrl(x3019) // UnrolledReduce(List(b1287),x2956,x2953,Block((x2953) => Const(())),List(List(b1486)),List(List(b1487)))
    val b1486 = CounterIter(x2955, None).ctrl(x2981).name("b1486")
    val b1487 = Const(true).ctrl(x2981).name("b1487")
    val x2957 = OpDef(op=BitAnd, inputs=List(b1487, b1287)).name("x2957").ctrl(x2981) // And(b1487,b1287)
    val x2958 = LoadBanks(List(x2781_d0_b0), List(b1486)).name("x2958").ctrl(x2981) // ParSRAMLoad(x2781,List(List(b1486)),List(x2957))
    val x2959 = x2958 // x2959 = VectorApply(x2958,0)
    val x2960 = LoadBanks(List(x2785_d0_b0), List(b1486)).name("x2960").ctrl(x2981) // ParSRAMLoad(x2785,List(List(b1486)),List(x2957))
    val x2961 = x2960 // x2961 = VectorApply(x2960,0)
    val x2962 = LoadBanks(List(x2783_d0_b0), List(b1486)).name("x2962").ctrl(x2981) // ParSRAMLoad(x2783,List(List(b1486)),List(x2957))
    val x2963 = x2962 // x2963 = VectorApply(x2962,0)
    val x2964 = LoadBanks(List(x2787_d0_b0), List(b1486)).name("x2964").ctrl(x2981) // ParSRAMLoad(x2787,List(List(b1486)),List(x2957))
    val x2965 = x2964 // x2965 = VectorApply(x2964,0)
    val x2966 = OpDef(op=FixLt, inputs=List(Const(0), x2959)).name("x2966").ctrl(x2981) // FixLt(Const(0),x2959)
    val x2967 = OpDef(op=FixLt, inputs=List(x2959, Const(9999))).name("x2967").ctrl(x2981) // FixLt(x2959,Const(9999))
    val x2968 = OpDef(op=BitAnd, inputs=List(x2966, x2967)).name("x2968").ctrl(x2981) // And(x2966,x2967)
    val x2969 = OpDef(op=FixLeq, inputs=List(Const(0), x2961)).name("x2969").ctrl(x2981) // FixLeq(Const(0),x2961)
    val x2970 = OpDef(op=BitAnd, inputs=List(x2968, x2969)).name("x2970").ctrl(x2981) // And(x2968,x2969)
    val x2971 = OpDef(op=FixLeq, inputs=List(x2961, Const(9999))).name("x2971").ctrl(x2981) // FixLeq(x2961,Const(9999))
    val x2972 = OpDef(op=BitAnd, inputs=List(x2970, x2971)).name("x2972").ctrl(x2981) // And(x2970,x2971)
    val x2973 = OpDef(op=FixLt, inputs=List(x2963, Const(24))).name("x2973").ctrl(x2981) // FixLt(x2963,Const(24))
    val x2974 = OpDef(op=BitAnd, inputs=List(x2972, x2973)).name("x2974").ctrl(x2981) // And(x2972,x2973)
    val x2975 = OpDef(op=FixMul, inputs=List(x2965, x2961)).name("x2975").ctrl(x2981) // FixMul(x2965,x2961)
    val x2976 = OpDef(op=MuxOp, inputs=List(x2974, x2975, Const(0))).name("x2976").ctrl(x2981) // Mux(x2974,x2975,Const(0))
    val x2977 = ReadMem(x2953_d1).name("x2977").ctrl(x2981) // RegRead(x2953)
    val x2978 = OpDef(op=FixEql, inputs=List(b1486, Const(0))).name("x2978").ctrl(x2981) // FixEql(b1486,Const(0))
    val x2979 = ReduceAccumOp(op=FixAdd, input=x2976, accum=x2977).name("x2979").ctrl(x2981) // FixAdd(x2976,x2977)
    val x2980_x2953_d0 = WriteMem(x2953_d0, x2979).name("x2980_x2953_d0").ctrl(x2981) // RegWrite(x2953,x2979,b1287)
    val x2980_x2953_d1 = WriteMem(x2953_d1, x2979).name("x2980_x2953_d1").ctrl(x2981) // RegWrite(x2953,x2979,b1287)
    val x2982 = Counter(min=Const(0), max=Const(32), step=Const(1), par=16).name("x2982").ctrl(x3019) // CounterNew(Const(0),Const(32),Const(1),Const(16))
    val x2983 = CounterChain(List(x2982)).name("x2983").ctrl(x3019) // CounterChainNew(List(x2982))
    val x3008 = LoopController(style=InnerPipe, level=InnerControl, cchain=x2983).name("x3008").ctrl(x3019) // UnrolledReduce(List(b1288),x2983,x2954,Block((x2954) => Const(())),List(List(b1513)),List(List(b1514)))
    val b1513 = CounterIter(x2982, None).ctrl(x3008).name("b1513")
    val b1514 = Const(true).ctrl(x3008).name("b1514")
    val x2984 = OpDef(op=BitAnd, inputs=List(b1514, b1288)).name("x2984").ctrl(x3008) // And(b1514,b1288)
    val x2985 = LoadBanks(List(x2782_d0_b0), List(b1513)).name("x2985").ctrl(x3008) // ParSRAMLoad(x2782,List(List(b1513)),List(x2984))
    val x2986 = x2985 // x2986 = VectorApply(x2985,0)
    val x2987 = LoadBanks(List(x2786_d0_b0), List(b1513)).name("x2987").ctrl(x3008) // ParSRAMLoad(x2786,List(List(b1513)),List(x2984))
    val x2988 = x2987 // x2988 = VectorApply(x2987,0)
    val x2989 = LoadBanks(List(x2784_d0_b0), List(b1513)).name("x2989").ctrl(x3008) // ParSRAMLoad(x2784,List(List(b1513)),List(x2984))
    val x2990 = x2989 // x2990 = VectorApply(x2989,0)
    val x2991 = LoadBanks(List(x2788_d0_b0), List(b1513)).name("x2991").ctrl(x3008) // ParSRAMLoad(x2788,List(List(b1513)),List(x2984))
    val x2992 = x2991 // x2992 = VectorApply(x2991,0)
    val x2993 = OpDef(op=FixLt, inputs=List(Const(0), x2986)).name("x2993").ctrl(x3008) // FixLt(Const(0),x2986)
    val x2994 = OpDef(op=FixLt, inputs=List(x2986, Const(9999))).name("x2994").ctrl(x3008) // FixLt(x2986,Const(9999))
    val x2995 = OpDef(op=BitAnd, inputs=List(x2993, x2994)).name("x2995").ctrl(x3008) // And(x2993,x2994)
    val x2996 = OpDef(op=FixLeq, inputs=List(Const(0), x2988)).name("x2996").ctrl(x3008) // FixLeq(Const(0),x2988)
    val x2997 = OpDef(op=BitAnd, inputs=List(x2995, x2996)).name("x2997").ctrl(x3008) // And(x2995,x2996)
    val x2998 = OpDef(op=FixLeq, inputs=List(x2988, Const(9999))).name("x2998").ctrl(x3008) // FixLeq(x2988,Const(9999))
    val x2999 = OpDef(op=BitAnd, inputs=List(x2997, x2998)).name("x2999").ctrl(x3008) // And(x2997,x2998)
    val x3000 = OpDef(op=FixLt, inputs=List(x2990, Const(24))).name("x3000").ctrl(x3008) // FixLt(x2990,Const(24))
    val x3001 = OpDef(op=BitAnd, inputs=List(x2999, x3000)).name("x3001").ctrl(x3008) // And(x2999,x3000)
    val x3002 = OpDef(op=FixMul, inputs=List(x2992, x2988)).name("x3002").ctrl(x3008) // FixMul(x2992,x2988)
    val x3003 = OpDef(op=MuxOp, inputs=List(x3001, x3002, Const(0))).name("x3003").ctrl(x3008) // Mux(x3001,x3002,Const(0))
    val x3004 = ReadMem(x2954_d1).name("x3004").ctrl(x3008) // RegRead(x2954)
    val x3005 = OpDef(op=FixEql, inputs=List(b1513, Const(0))).name("x3005").ctrl(x3008) // FixEql(b1513,Const(0))
    val x3006 = ReduceAccumOp(op=FixAdd, input=x3003, accum=x3004).name("x3006").ctrl(x3008) // FixAdd(x3003,x3004)
    val x3007_x2954_d0 = WriteMem(x2954_d0, x3006).name("x3007_x2954_d0").ctrl(x3008) // RegWrite(x2954,x3006,b1288)
    val x3007_x2954_d1 = WriteMem(x2954_d1, x3006).name("x3007_x2954_d1").ctrl(x3008) // RegWrite(x2954,x3006,b1288)
    val x3018 = UnitController(style=SeqPipe, level=InnerControl).name("x3018").ctrl(x3019) // UnitPipe(List(Const(true)),Block(x3017))
    val x3009 = ReadMem(x2954_d0).name("x3009").ctrl(x3018) // RegRead(x2954)
    val x3010 = ReadMem(x2953_d0).name("x3010").ctrl(x3018) // RegRead(x2953)
    val x3011 = OpDef(op=FixAdd, inputs=List(x3010, x3009)).name("x3011").ctrl(x3018) // FixAdd(x3010,x3009)
    val x3012 = OpDef(op=MuxOp, inputs=List(b1288, x3011, x3010)).name("x3012").ctrl(x3018) // Mux(b1288,x3011,x3010)
    val x3013 = OpDef(op=BitOr, inputs=List(b1287, b1288)).name("x3013").ctrl(x3018) // Or(b1287,b1288)
    val x3014 = ReadMem(x2777_d1).name("x3014").ctrl(x3018) // RegRead(x2777)
    val x3015 = OpDef(op=FixEql, inputs=List(b1285, Const(0))).name("x3015").ctrl(x3018) // FixEql(b1285,Const(0))
    val x3016 = ReduceAccumOp(op=FixAdd, input=x3012, accum=x3014).name("x3016").ctrl(x3018) // FixAdd(x3012,x3014)
    val x3017_x2777_d0 = WriteMem(x2777_d0, x3016).name("x3017_x2777_d0").ctrl(x3018) // RegWrite(x2777,x3016,Const(true))
    val x3017_x2777_d1 = WriteMem(x2777_d1, x3016).name("x3017_x2777_d1").ctrl(x3018) // RegWrite(x2777,x3016,Const(true))
    val x3022 = UnitController(style=SeqPipe, level=InnerControl).name("x3022").ctrl(x3023) // UnitPipe(List(Const(true)),Block(Const(())))
    val x3020 = ReadMem(x2777_d0).name("x3020").ctrl(x3022) // RegRead(x2777)
    val x3021_x2772 = WriteMem(x2772, x3020).name("x3021_x2772").ctrl(x3022) // RegWrite(x2772,x3020,Const(true))
    
  }
}
