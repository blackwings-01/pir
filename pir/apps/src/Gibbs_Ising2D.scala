import pir._
import pir.node._
import arch._
import pirc.enums._

object Gibbs_Ising2D extends PIRApp {
  def main(top:Top) = {
    val x5090 = top.argIn(init=0).name("x5090").ctrl(top) // ArgInNew(Const(0))
    val x5091_d0 = top.argIn(init=0.0).name("x5091_d0").ctrl(top) // ArgInNew(Const(0))
    val x5092_d0 = top.argIn(init=0.0).name("x5092_d0").ctrl(top) // ArgInNew(Const(0))
    val x5099 = DRAM().name("x5099").ctrl(top) // x5099 = DRAMNew(ArrayBuffer(Const(9)),Const(0))
    val x5100 = DRAM().name("x5100").ctrl(top) // x5100 = DRAMNew(ArrayBuffer(Const(32), Const(64)),Const(0))
    val x5101 = DRAM().name("x5101").ctrl(top) // x5101 = DRAMNew(ArrayBuffer(Const(32), Const(64)),Const(0))
    val x5568 = UnitController(style=SeqPipe, level=OuterControl).name("x5568").ctrl(top) // Hwblock(Block(Const(())),false)
    val x5108_d0_b0 = SRAM(size=9, banking=NoBanking()).name("x5108_d0_b0").ctrl(x5568) // x5108 = SRAMNew(ArrayBuffer(Const(9)))
    val x5108_d1_b0 = SRAM(size=9, banking=NoBanking()).name("x5108_d1_b0").ctrl(x5568) // x5108 = SRAMNew(ArrayBuffer(Const(9)))
    val x5108_d2_b0 = SRAM(size=9, banking=NoBanking()).name("x5108_d2_b0").ctrl(x5568) // x5108 = SRAMNew(ArrayBuffer(Const(9)))
    val x5108_d3_b0 = SRAM(size=9, banking=NoBanking()).name("x5108_d3_b0").ctrl(x5568) // x5108 = SRAMNew(ArrayBuffer(Const(9)))
    val x5108_d4_b0 = SRAM(size=9, banking=NoBanking()).name("x5108_d4_b0").ctrl(x5568) // x5108 = SRAMNew(ArrayBuffer(Const(9)))
    val x5108_d5_b0 = SRAM(size=9, banking=NoBanking()).name("x5108_d5_b0").ctrl(x5568) // x5108 = SRAMNew(ArrayBuffer(Const(9)))
    val x5108_d6_b0 = SRAM(size=9, banking=NoBanking()).name("x5108_d6_b0").ctrl(x5568) // x5108 = SRAMNew(ArrayBuffer(Const(9)))
    val x5108_d7_b0 = SRAM(size=9, banking=NoBanking()).name("x5108_d7_b0").ctrl(x5568) // x5108 = SRAMNew(ArrayBuffer(Const(9)))
    val x5109_d0_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d0_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d0_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d0_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d0_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d0_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d0_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d0_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d1_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d1_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d1_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d1_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d1_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d1_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d1_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d1_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d2_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d2_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d2_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d2_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d2_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d2_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d2_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d2_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d3_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d3_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d3_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d3_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d3_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d3_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d3_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d3_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d4_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d4_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d4_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d4_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d4_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d4_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d4_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d4_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d5_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d5_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d5_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d5_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d5_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d5_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d5_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d5_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d6_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d6_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d6_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d6_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d6_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d6_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d6_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d6_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d7_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d7_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d7_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d7_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d7_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d7_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d7_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d7_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d8_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d8_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d8_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d8_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d8_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d8_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d8_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d8_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d9_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d9_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d9_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d9_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d9_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d9_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d9_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d9_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d10_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d10_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d10_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d10_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d10_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d10_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d10_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d10_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d11_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d11_b0").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d11_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d11_b1").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d11_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d11_b2").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5109_d11_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5109_d11_b3").ctrl(x5568) // x5109 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5128 = UnitController(style=StreamPipe, level=OuterControl).name("x5128").ctrl(x5568) // UnitPipe(List(Const(true)),Block(Const(())))
    val b5621 = StreamOut(field="offset").name("b5621").ctrl(x5128) // x5110 = StreamOutNew(BurstCmdBus)
    val b5622 = StreamOut(field="size").name("b5622").ctrl(x5128) // x5110 = StreamOutNew(BurstCmdBus)
    val b5623 = StreamIn(field="data").name("b5623").ctrl(x5128) // x5111 = StreamInNew(BurstDataBus())
    val x5120 = UnitController(style=SeqPipe, level=InnerControl).name("x5120").ctrl(x5128) // UnitPipe(List(Const(true)),Block(x5119))
    val x5112 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x5120))).name("x5112").ctrl(x5120) // FixConvert(Const(0),TRUE,_32,_0)
    val x5113 = OpDef(op=FixSla, inputs=List(x5112, Const(2).ctrl(x5120))).name("x5113").ctrl(x5120) // FixLsh(x5112,Const(2))
    val x5114 = OpDef(op=FixConvert, inputs=List(x5113)).name("x5114").ctrl(x5120) // FixConvert(x5113,TRUE,_64,_0)
    val x5115 = top.dramAddress(x5099).name("x5115").ctrl(x5120) // GetDRAMAddress(x5099)
    val x5116 = OpDef(op=FixAdd, inputs=List(x5114, x5115)).name("x5116").ctrl(x5120) // FixAdd(x5114,x5115)
    val x5117 = OpDef(op=FixConvert, inputs=List(x5116)).name("x5117").ctrl(x5120) // FixConvert(x5116,TRUE,_64,_0)
    // x5118 = SimpleStruct(ArrayBuffer((offset,x5117), (size,Const(36)), (isLoad,Const(true))))
    val b5624 = StoreDef(List(b5621), None, x5117).name("b5624").ctrl(x5120) // StreamWrite(x5110,x5118,Const(true))
    val b5625 = StoreDef(List(b5622), None, Const(36)).name("b5625").ctrl(x5120) // StreamWrite(x5110,x5118,Const(true))
    val x5121 = FringeContainer(x5099,b5621,b5622,b5623).name("x5121").ctrl(x5128) // FringeDenseLoad(x5099,x5110,x5111)
    val x5122 = Counter(min=Const(0).ctrl(x5128), max=Const(9).ctrl(x5128), step=Const(1).ctrl(x5128), par=1).name("x5122").ctrl(x5128) // CounterNew(Const(0),Const(9),Const(1),Const(1))
    val x5123 = CounterChain(List(x5122)).name("x5123").ctrl(x5128) // CounterChainNew(List(x5122))
    val x5127 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5123).name("x5127").ctrl(x5128) // UnrolledForeach(List(Const(true)),x5123,Block(Const(())),List(List(b2556)),List(List(b2557)))
    val b2556 = IterDef(x5122, None).ctrl(x5127).name("b2556")
    val b2557 = DummyDef().ctrl(x5127).name("b2557")
    val b5626 = LoadDef(List(b5623), None).name("b5626").ctrl(x5127) // ParStreamRead(x5111,List(b2557))
    val b5627 = b5626 // x5125 = VectorApply(x5124,0)
    val x5126 = StoreDef(List(x5108_d0_b0, x5108_d5_b0, x5108_d1_b0, x5108_d6_b0, x5108_d2_b0, x5108_d7_b0, x5108_d3_b0, x5108_d4_b0), Some(List(b2556)), b5627).name("x5126").ctrl(x5127) // ParSRAMStore(x5108,List(List(b2556)),List(x5125),List(b2557))
    val x5129 = Counter(min=Const(0).ctrl(x5568), max=Const(32).ctrl(x5568), step=Const(1).ctrl(x5568), par=1).name("x5129").ctrl(x5568) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x5130 = CounterChain(List(x5129)).name("x5130").ctrl(x5568) // CounterChainNew(List(x5129))
    val x5153 = LoopController(style=StreamPipe, level=OuterControl, cchain=x5130).name("x5153").ctrl(x5568) // UnrolledForeach(List(Const(true)),x5130,Block(Const(())),List(List(b2565)),List(List(b2566)))
    val b2565 = IterDef(x5129, Some(0)).ctrl(x5153).name("b2565")
    val b2566 = DummyDef().ctrl(x5153).name("b2566")
    val b5628 = StreamOut(field="offset").name("b5628").ctrl(x5153) // x5131 = StreamOutNew(BurstCmdBus)
    val b5629 = StreamOut(field="size").name("b5629").ctrl(x5153) // x5131 = StreamOutNew(BurstCmdBus)
    val b5630 = StreamIn(field="data").name("b5630").ctrl(x5153) // x5132 = StreamInNew(BurstDataBus())
    val x5144 = UnitController(style=SeqPipe, level=InnerControl).name("x5144").ctrl(x5153) // UnitPipe(List(b2566),Block(x5143))
    val x5133 = OpDef(op=FixConvert, inputs=List(b2565)).name("x5133").ctrl(x5144) // FixConvert(b2565,TRUE,_32,_0)
    val x5134 = OpDef(op=FixSla, inputs=List(x5133, Const(6).ctrl(x5144))).name("x5134").ctrl(x5144) // FixLsh(x5133,Const(6))
    val x5135 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x5144))).name("x5135").ctrl(x5144) // FixConvert(Const(0),TRUE,_32,_0)
    val x5136 = OpDef(op=FixAdd, inputs=List(x5134, x5135)).name("x5136").ctrl(x5144) // FixAdd(x5134,x5135)
    val x5137 = OpDef(op=FixSla, inputs=List(x5136, Const(2).ctrl(x5144))).name("x5137").ctrl(x5144) // FixLsh(x5136,Const(2))
    val x5138 = OpDef(op=FixConvert, inputs=List(x5137)).name("x5138").ctrl(x5144) // FixConvert(x5137,TRUE,_64,_0)
    val x5139 = top.dramAddress(x5100).name("x5139").ctrl(x5144) // GetDRAMAddress(x5100)
    val x5140 = OpDef(op=FixAdd, inputs=List(x5138, x5139)).name("x5140").ctrl(x5144) // FixAdd(x5138,x5139)
    val x5141 = OpDef(op=FixConvert, inputs=List(x5140)).name("x5141").ctrl(x5144) // FixConvert(x5140,TRUE,_64,_0)
    // x5142 = SimpleStruct(ArrayBuffer((offset,x5141), (size,Const(256)), (isLoad,Const(true))))
    val b5631 = StoreDef(List(b5628), None, x5141).name("b5631").ctrl(x5144) // StreamWrite(x5131,x5142,b2566)
    val b5632 = StoreDef(List(b5629), None, Const(256)).name("b5632").ctrl(x5144) // StreamWrite(x5131,x5142,b2566)
    val x5145 = FringeContainer(x5100,b5628,b5629,b5630).name("x5145").ctrl(x5153) // FringeDenseLoad(x5100,x5131,x5132)
    val x5146 = Counter(min=Const(0).ctrl(x5153), max=Const(64).ctrl(x5153), step=Const(1).ctrl(x5153), par=16).name("x5146").ctrl(x5153) // CounterNew(Const(0),Const(64),Const(1),Const(16))
    val x5147 = CounterChain(List(x5146)).name("x5147").ctrl(x5153) // CounterChainNew(List(x5146))
    val x5152 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5147).name("x5152").ctrl(x5153) // UnrolledForeach(List(b2566),x5147,Block(Const(())),List(List(b2584)),List(List(b2585)))
    val b2584 = IterDef(x5146, None).ctrl(x5152).name("b2584")
    val b2585 = DummyDef().ctrl(x5152).name("b2585")
    val x5148 = OpDef(op=BitAnd, inputs=List(b2585, b2566)).name("x5148").ctrl(x5152) // And(b2585,b2566)
    val b5633 = LoadDef(List(b5630), None).name("b5633").ctrl(x5152) // ParStreamRead(x5132,List(x5148))
    val b5634 = b5633 // x5150 = VectorApply(x5149,0)
    val x5151 = StoreDef(List(x5109_d0_b0, x5109_d0_b1, x5109_d0_b2, x5109_d0_b3, x5109_d5_b0, x5109_d5_b1, x5109_d5_b2, x5109_d5_b3, x5109_d10_b0, x5109_d10_b1, x5109_d10_b2, x5109_d10_b3, x5109_d1_b0, x5109_d1_b1, x5109_d1_b2, x5109_d1_b3, x5109_d6_b0, x5109_d6_b1, x5109_d6_b2, x5109_d6_b3, x5109_d9_b0, x5109_d9_b1, x5109_d9_b2, x5109_d9_b3, x5109_d2_b0, x5109_d2_b1, x5109_d2_b2, x5109_d2_b3, x5109_d7_b0, x5109_d7_b1, x5109_d7_b2, x5109_d7_b3, x5109_d3_b0, x5109_d3_b1, x5109_d3_b2, x5109_d3_b3, x5109_d11_b0, x5109_d11_b1, x5109_d11_b2, x5109_d11_b3, x5109_d8_b0, x5109_d8_b1, x5109_d8_b2, x5109_d8_b3, x5109_d4_b0, x5109_d4_b1, x5109_d4_b2, x5109_d4_b3), Some(List(b2565, b2584)), b5634).name("x5151").ctrl(x5152) // ParSRAMStore(x5109,List(List(b2565, b2584)),List(x5150),List(x5148))
    val x5154_d0_b0 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5154_d0_b0").ctrl(x5568) // x5154 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5154_d0_b1 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5154_d0_b1").ctrl(x5568) // x5154 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5154_d0_b2 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5154_d0_b2").ctrl(x5568) // x5154 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5154_d0_b3 = SRAM(size=32, banking=Strided(banks=16, stride=1)).name("x5154_d0_b3").ctrl(x5568) // x5154 = SRAMNew(ArrayBuffer(Const(32), Const(64)))
    val x5155 = Counter(min=Const(0).ctrl(x5568), max=Const(32).ctrl(x5568), step=Const(1).ctrl(x5568), par=1).name("x5155").ctrl(x5568) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x5156 = CounterChain(List(x5155)).name("x5156").ctrl(x5568) // CounterChainNew(List(x5155))
    val x5179 = LoopController(style=StreamPipe, level=OuterControl, cchain=x5156).name("x5179").ctrl(x5568) // UnrolledForeach(List(Const(true)),x5156,Block(Const(())),List(List(b2595)),List(List(b2596)))
    val b2595 = IterDef(x5155, Some(0)).ctrl(x5179).name("b2595")
    val b2596 = DummyDef().ctrl(x5179).name("b2596")
    val b5635 = StreamOut(field="offset").name("b5635").ctrl(x5179) // x5157 = StreamOutNew(BurstCmdBus)
    val b5636 = StreamOut(field="size").name("b5636").ctrl(x5179) // x5157 = StreamOutNew(BurstCmdBus)
    val b5637 = StreamIn(field="data").name("b5637").ctrl(x5179) // x5158 = StreamInNew(BurstDataBus())
    val x5170 = UnitController(style=SeqPipe, level=InnerControl).name("x5170").ctrl(x5179) // UnitPipe(List(b2596),Block(x5169))
    val x5159 = OpDef(op=FixConvert, inputs=List(b2595)).name("x5159").ctrl(x5170) // FixConvert(b2595,TRUE,_32,_0)
    val x5160 = OpDef(op=FixSla, inputs=List(x5159, Const(6).ctrl(x5170))).name("x5160").ctrl(x5170) // FixLsh(x5159,Const(6))
    val x5161 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x5170))).name("x5161").ctrl(x5170) // FixConvert(Const(0),TRUE,_32,_0)
    val x5162 = OpDef(op=FixAdd, inputs=List(x5160, x5161)).name("x5162").ctrl(x5170) // FixAdd(x5160,x5161)
    val x5163 = OpDef(op=FixSla, inputs=List(x5162, Const(2).ctrl(x5170))).name("x5163").ctrl(x5170) // FixLsh(x5162,Const(2))
    val x5164 = OpDef(op=FixConvert, inputs=List(x5163)).name("x5164").ctrl(x5170) // FixConvert(x5163,TRUE,_64,_0)
    val x5165 = top.dramAddress(x5101).name("x5165").ctrl(x5170) // GetDRAMAddress(x5101)
    val x5166 = OpDef(op=FixAdd, inputs=List(x5164, x5165)).name("x5166").ctrl(x5170) // FixAdd(x5164,x5165)
    val x5167 = OpDef(op=FixConvert, inputs=List(x5166)).name("x5167").ctrl(x5170) // FixConvert(x5166,TRUE,_64,_0)
    // x5168 = SimpleStruct(ArrayBuffer((offset,x5167), (size,Const(256)), (isLoad,Const(true))))
    val b5638 = StoreDef(List(b5635), None, x5167).name("b5638").ctrl(x5170) // StreamWrite(x5157,x5168,b2596)
    val b5639 = StoreDef(List(b5636), None, Const(256)).name("b5639").ctrl(x5170) // StreamWrite(x5157,x5168,b2596)
    val x5171 = FringeContainer(x5101,b5635,b5636,b5637).name("x5171").ctrl(x5179) // FringeDenseLoad(x5101,x5157,x5158)
    val x5172 = Counter(min=Const(0).ctrl(x5179), max=Const(64).ctrl(x5179), step=Const(1).ctrl(x5179), par=16).name("x5172").ctrl(x5179) // CounterNew(Const(0),Const(64),Const(1),Const(16))
    val x5173 = CounterChain(List(x5172)).name("x5173").ctrl(x5179) // CounterChainNew(List(x5172))
    val x5178 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5173).name("x5178").ctrl(x5179) // UnrolledForeach(List(b2596),x5173,Block(Const(())),List(List(b2614)),List(List(b2615)))
    val b2614 = IterDef(x5172, None).ctrl(x5178).name("b2614")
    val b2615 = DummyDef().ctrl(x5178).name("b2615")
    val x5174 = OpDef(op=BitAnd, inputs=List(b2615, b2596)).name("x5174").ctrl(x5178) // And(b2615,b2596)
    val b5640 = LoadDef(List(b5637), None).name("b5640").ctrl(x5178) // ParStreamRead(x5158,List(x5174))
    val b5641 = b5640 // x5176 = VectorApply(x5175,0)
    val x5177 = StoreDef(List(x5154_d0_b0, x5154_d0_b1, x5154_d0_b2, x5154_d0_b3), Some(List(b2595, b2614)), b5641).name("x5177").ctrl(x5178) // ParSRAMStore(x5154,List(List(b2595, b2614)),List(x5176),List(x5174))
    val x5180 = LoadDef(List(x5090), None).name("x5180").ctrl(x5568) // RegRead(x5090)
    val x5181 = Counter(min=Const(0).ctrl(x5568), max=x5180, step=Const(1).ctrl(x5568), par=1).name("x5181").ctrl(x5568) // CounterNew(Const(0),x5180,Const(1),Const(1))
    val x5182 = CounterChain(List(x5181)).name("x5182").ctrl(x5568) // CounterChainNew(List(x5181))
    val x5538 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5182).name("x5538").ctrl(x5568) // UnrolledForeach(List(Const(true)),x5182,Block(Const(())),List(List(b2625)),List(List(b2626)))
    val b2625 = IterDef(x5181, Some(0)).ctrl(x5538).name("b2625")
    val b2626 = DummyDef().ctrl(x5538).name("b2626")
    val x5183 = Counter(min=Const(0).ctrl(x5538), max=Const(32).ctrl(x5538), step=Const(1).ctrl(x5538), par=4).name("x5183").ctrl(x5538) // CounterNew(Const(0),Const(32),Const(1),Const(4))
    val x5184 = CounterChain(List(x5183)).name("x5184").ctrl(x5538) // CounterChainNew(List(x5183))
    val x5537 = LoopController(style=MetaPipe, level=OuterControl, cchain=x5184).name("x5537").ctrl(x5538) // UnrolledForeach(List(b2626),x5184,Block(Const(())),List(List(b2629, b2630, b2631, b2632)),List(List(b2633, b2634, b2635, b2636)))
    val b2629 = IterDef(x5183, Some(0)).ctrl(x5537).name("b2629")
    val b2633 = DummyDef().ctrl(x5537).name("b2633")
    val b2630 = IterDef(x5183, Some(1)).ctrl(x5537).name("b2630")
    val b2634 = DummyDef().ctrl(x5537).name("b2634")
    val b2631 = IterDef(x5183, Some(2)).ctrl(x5537).name("b2631")
    val b2635 = DummyDef().ctrl(x5537).name("b2635")
    val b2632 = IterDef(x5183, Some(3)).ctrl(x5537).name("b2632")
    val b2636 = DummyDef().ctrl(x5537).name("b2636")
    val x5185 = Reg(init=0).name("x5185").ctrl(x5537) // x5185 = RegNew(Const(0))
    val x5186 = Reg(init=0).name("x5186").ctrl(x5537) // x5186 = RegNew(Const(0))
    val x5187 = Reg(init=0).name("x5187").ctrl(x5537) // x5187 = RegNew(Const(0))
    val x5188 = Reg(init=0).name("x5188").ctrl(x5537) // x5188 = RegNew(Const(0))
    val x5195 = UnitController(style=SeqPipe, level=InnerControl).name("x5195").ctrl(x5537) // UnitPipe(List(b2633, b2626),Block(Const(())))
    val x5189 = b2629 // x5189 = DataAsBits(b2629)
    val x5190 = OpDef(op=BitAnd, inputs=List(x5189, Const(1))).name("x5190").ctrl(x5195) // VectorSlice(x5189,1,0) strMask=00000000000000000000000000000001
    val x5191 = x5190 // x5191 = BitsAsData(x5190,FixPt[TRUE,_32,_0])
    val x5192 = OpDef(op=FixNeg, inputs=List(x5191)).name("x5192").ctrl(x5195) // FixNeg(x5191)
    val x5193 = OpDef(op=BitAnd, inputs=List(b2633, b2626)).name("x5193").ctrl(x5195) // And(b2633,b2626)
    val x5194 = StoreDef(List(x5185), None, x5192).name("x5194").ctrl(x5195) // RegWrite(x5185,x5192,x5193)
    val x5202 = UnitController(style=SeqPipe, level=InnerControl).name("x5202").ctrl(x5537) // UnitPipe(List(b2634, b2626),Block(Const(())))
    val x5196 = b2630 // x5196 = DataAsBits(b2630)
    val x5197 = OpDef(op=BitAnd, inputs=List(x5196, Const(1))).name("x5197").ctrl(x5202) // VectorSlice(x5196,1,0) strMask=00000000000000000000000000000001
    val x5198 = x5197 // x5198 = BitsAsData(x5197,FixPt[TRUE,_32,_0])
    val x5199 = OpDef(op=FixNeg, inputs=List(x5198)).name("x5199").ctrl(x5202) // FixNeg(x5198)
    val x5200 = OpDef(op=BitAnd, inputs=List(b2634, b2626)).name("x5200").ctrl(x5202) // And(b2634,b2626)
    val x5201 = StoreDef(List(x5186), None, x5199).name("x5201").ctrl(x5202) // RegWrite(x5186,x5199,x5200)
    val x5209 = UnitController(style=SeqPipe, level=InnerControl).name("x5209").ctrl(x5537) // UnitPipe(List(b2635, b2626),Block(Const(())))
    val x5203 = b2631 // x5203 = DataAsBits(b2631)
    val x5204 = OpDef(op=BitAnd, inputs=List(x5203, Const(1))).name("x5204").ctrl(x5209) // VectorSlice(x5203,1,0) strMask=00000000000000000000000000000001
    val x5205 = x5204 // x5205 = BitsAsData(x5204,FixPt[TRUE,_32,_0])
    val x5206 = OpDef(op=FixNeg, inputs=List(x5205)).name("x5206").ctrl(x5209) // FixNeg(x5205)
    val x5207 = OpDef(op=BitAnd, inputs=List(b2635, b2626)).name("x5207").ctrl(x5209) // And(b2635,b2626)
    val x5208 = StoreDef(List(x5187), None, x5206).name("x5208").ctrl(x5209) // RegWrite(x5187,x5206,x5207)
    val x5216 = UnitController(style=SeqPipe, level=InnerControl).name("x5216").ctrl(x5537) // UnitPipe(List(b2636, b2626),Block(Const(())))
    val x5210 = b2632 // x5210 = DataAsBits(b2632)
    val x5211 = OpDef(op=BitAnd, inputs=List(x5210, Const(1))).name("x5211").ctrl(x5216) // VectorSlice(x5210,1,0) strMask=00000000000000000000000000000001
    val x5212 = x5211 // x5212 = BitsAsData(x5211,FixPt[TRUE,_32,_0])
    val x5213 = OpDef(op=FixNeg, inputs=List(x5212)).name("x5213").ctrl(x5216) // FixNeg(x5212)
    val x5214 = OpDef(op=BitAnd, inputs=List(b2636, b2626)).name("x5214").ctrl(x5216) // And(b2636,b2626)
    val x5215 = StoreDef(List(x5188), None, x5213).name("x5215").ctrl(x5216) // RegWrite(x5188,x5213,x5214)
    val x5217 = LoadDef(List(x5185), None).name("x5217").ctrl(x5537) // RegRead(x5185)
    val x5218 = Counter(min=x5217, max=Const(64).ctrl(x5537), step=Const(1).ctrl(x5537), par=1).name("x5218").ctrl(x5537) // CounterNew(x5217,Const(64),Const(1),Const(1))
    val x5219 = CounterChain(List(x5218)).name("x5219").ctrl(x5537) // CounterChainNew(List(x5218))
    val x5296 = LoopController(style=SeqPipe, level=OuterControl, cchain=x5219).name("x5296").ctrl(x5537) // UnrolledForeach(List(b2633, b2626),x5219,Block(Const(())),List(List(b2674)),List(List(b2675)))
    val b2674 = IterDef(x5218, Some(0)).ctrl(x5296).name("b2674")
    val b2675 = DummyDef().ctrl(x5296).name("b2675")
    val x5220 = Reg(init=0).name("x5220").ctrl(x5296) // x5220 = RegNew(Const(0))
    val x5221 = Reg(init=0.0).name("x5221").ctrl(x5296) // x5221 = RegNew(Const(0))
    val x5222_d0 = Reg(init=false).name("x5222_d0").ctrl(x5296) // x5222 = RegNew(Const(false))
    val x5222_d1 = Reg(init=false).name("x5222_d1").ctrl(x5296) // x5222 = RegNew(Const(false))
    val x5223 = Reg(init=false).name("x5223").ctrl(x5296) // x5223 = RegNew(Const(false))
    val x5280 = UnitController(style=SeqPipe, level=InnerControl).name("x5280").ctrl(x5296) // UnitPipe(List(b2675, b2633, b2626),Block(Const(())))
    val x5224 = OpDef(op=FixAdd, inputs=List(b2629, Const(1).ctrl(x5280))).name("x5224").ctrl(x5280) // FixAdd(b2629,Const(1))
    val x5225 = x5224 // x5225 = DataAsBits(x5224)
    val x5226 = OpDef(op=BitAnd, inputs=List(x5225, Const(15))).name("x5226").ctrl(x5280) // VectorSlice(x5225,4,0) strMask=00000000000000000000000000001111
    val x5227 = x5226 // x5227 = BitsAsData(x5226,FixPt[TRUE,_32,_0])
    val x5228 = OpDef(op=BitAnd, inputs=List(b2675, b2633)).name("x5228").ctrl(x5280) // And(b2675,b2633)
    val x5229 = OpDef(op=BitAnd, inputs=List(x5228, b2626)).name("x5229").ctrl(x5280) // And(x5228,b2626)
    val x5230 = LoadDef(List(x5109_d8_b0, x5109_d8_b1, x5109_d8_b2, x5109_d8_b3), Some(List(x5227, b2674))).name("x5230").ctrl(x5280) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(x5227, b2674),Const(0),x5229)
    val x5231 = OpDef(op=FixAdd, inputs=List(b2674, Const(1).ctrl(x5280))).name("x5231").ctrl(x5280) // FixAdd(b2674,Const(1))
    val x5232 = x5231 // x5232 = DataAsBits(x5231)
    val x5233 = OpDef(op=BitAnd, inputs=List(x5232, Const(31))).name("x5233").ctrl(x5280) // VectorSlice(x5232,5,0) strMask=00000000000000000000000000011111
    val x5234 = x5233 // x5234 = BitsAsData(x5233,FixPt[TRUE,_32,_0])
    val x5235 = LoadDef(List(x5109_d7_b0), Some(List(b2629, x5234))).name("x5235").ctrl(x5280) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2629, x5234),Const(0),x5229)
    val x5236 = OpDef(op=FixSub, inputs=List(b2629, Const(1).ctrl(x5280))).name("x5236").ctrl(x5280) // FixSub(b2629,Const(1))
    val x5237 = x5236 // x5237 = DataAsBits(x5236)
    val x5238 = OpDef(op=BitAnd, inputs=List(x5237, Const(15))).name("x5238").ctrl(x5280) // VectorSlice(x5237,4,0) strMask=00000000000000000000000000001111
    val x5239 = x5238 // x5239 = BitsAsData(x5238,FixPt[TRUE,_32,_0])
    val x5240 = LoadDef(List(x5109_d3_b0, x5109_d3_b1, x5109_d3_b2, x5109_d3_b3), Some(List(x5239, b2674))).name("x5240").ctrl(x5280) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(x5239, b2674),Const(0),x5229)
    val x5241 = OpDef(op=FixSub, inputs=List(b2674, Const(1).ctrl(x5280))).name("x5241").ctrl(x5280) // FixSub(b2674,Const(1))
    val x5242 = x5241 // x5242 = DataAsBits(x5241)
    val x5243 = OpDef(op=BitAnd, inputs=List(x5242, Const(31))).name("x5243").ctrl(x5280) // VectorSlice(x5242,5,0) strMask=00000000000000000000000000011111
    val x5244 = x5243 // x5244 = BitsAsData(x5243,FixPt[TRUE,_32,_0])
    val x5245 = LoadDef(List(x5109_d2_b0), Some(List(b2629, x5244))).name("x5245").ctrl(x5280) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2629, x5244),Const(0),x5229)
    val x5246 = LoadDef(List(x5109_d1_b0), Some(List(b2629, b2674))).name("x5246").ctrl(x5280) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2629, b2674),Const(0),x5229)
    val x5247 = OpDef(op=FixAdd, inputs=List(x5230, x5235)).name("x5247").ctrl(x5280) // FixAdd(x5230,x5235)
    val x5248 = OpDef(op=FixAdd, inputs=List(x5247, x5240)).name("x5248").ctrl(x5280) // FixAdd(x5247,x5240)
    val x5249 = OpDef(op=FixAdd, inputs=List(x5248, x5245)).name("x5249").ctrl(x5280) // FixAdd(x5248,x5245)
    val x5250 = OpDef(op=FixMul, inputs=List(x5249, x5246)).name("x5250").ctrl(x5280) // FixMul(x5249,x5246)
    val x5251 = OpDef(op=FixNeg, inputs=List(x5250)).name("x5251").ctrl(x5280) // FixNeg(x5250)
    val x5252 = OpDef(op=FixAdd, inputs=List(x5251, Const(4).ctrl(x5280))).name("x5252").ctrl(x5280) // FixAdd(x5251,Const(4))
    val x5253 = LoadDef(List(x5108_d4_b0), Some(List(x5252))).name("x5253").ctrl(x5280) // SRAMLoad(x5108,ArrayBuffer(Const(9)),List(x5252),Const(0),x5229)
    val x5254 = OpDef(op=FixAdd, inputs=List(x5250, Const(4).ctrl(x5280))).name("x5254").ctrl(x5280) // FixAdd(x5250,Const(4))
    val x5255 = LoadDef(List(x5108_d0_b0), Some(List(x5254))).name("x5255").ctrl(x5280) // SRAMLoad(x5108,ArrayBuffer(Const(9)),List(x5254),Const(0),x5229)
    val x5256 = LoadDef(List(x5154_d0_b0), Some(List(b2629, b2674))).name("x5256").ctrl(x5280) // SRAMLoad(x5154,ArrayBuffer(Const(32), Const(64)),List(b2629, b2674),Const(0),x5229)
    val x5257 = OpDef(op=FixMul, inputs=List(x5256, x5246)).name("x5257").ctrl(x5280) // FixMul(x5256,x5246)
    val x5258 = OpDef(op=FixLt, inputs=List(x5257, Const(0).ctrl(x5280))).name("x5258").ctrl(x5280) // FixLt(x5257,Const(0))
    val x5259 = LoadDef(List(x5092_d0), None).name("x5259").ctrl(x5280) // RegRead(x5092)
    val x5260 = LoadDef(List(x5091_d0), None).name("x5260").ctrl(x5280) // RegRead(x5091)
    val x5261 = OpDef(op=MuxOp, inputs=List(x5258, x5259, x5260)).name("x5261").ctrl(x5280) // Mux(x5258,x5259,x5260)
    val x5262 = OpDef(op=FixMul, inputs=List(x5255, x5261)).name("x5262").ctrl(x5280) // FixMul(x5255,x5261)
    val x5263 = OpDef(op=FixMin, inputs=List(Const(1).ctrl(x5280), x5262)).name("x5263").ctrl(x5280) // Min(Const(1),x5262)
    val x5264 = OpDef(op=FixUnif, inputs=List()).name("x5264").ctrl(x5280) // FixUnif()
    val x5265 = OpDef(op=FixLt, inputs=List(Const(1).ctrl(x5280), x5262)).name("x5265").ctrl(x5280) // FixLt(Const(1),x5262)
    val x5266 = x5263 // x5266 = DataAsBits(x5263)
    val x5267 = OpDef(op=BitAnd, inputs=List(x5266, Const(32512))).name("x5267").ctrl(x5280) // VectorSlice(x5266,15,8) strMask=00000000000000000111111100000000
    val x5268 = x5267 // x5268 = BitsAsData(x5267,FixPt[FALSE,_0,_8])
    val x5269 = OpDef(op=FixLt, inputs=List(x5264, x5268)).name("x5269").ctrl(x5280) // FixLt(x5264,x5268)
    val x5270 = OpDef(op=MuxOp, inputs=List(x5269, Const(1).ctrl(x5280), Const(0).ctrl(x5280))).name("x5270").ctrl(x5280) // Mux(x5269,Const(1),Const(0))
    val x5271 = OpDef(op=MuxOp, inputs=List(x5265, Const(1).ctrl(x5280), x5270)).name("x5271").ctrl(x5280) // Mux(x5265,Const(1),x5270)
    val x5272 = OpDef(op=FixLeq, inputs=List(Const(0).ctrl(x5280), b2674)).name("x5272").ctrl(x5280) // FixLeq(Const(0),b2674)
    val x5273 = OpDef(op=FixLt, inputs=List(b2674, Const(64).ctrl(x5280))).name("x5273").ctrl(x5280) // FixLt(b2674,Const(64))
    val x5274 = OpDef(op=BitAnd, inputs=List(x5272, x5273)).name("x5274").ctrl(x5280) // And(x5272,x5273)
    val x5275 = OpDef(op=BitNot, inputs=List(x5274)).name("x5275").ctrl(x5280) // Not(x5274)
    val x5276 = StoreDef(List(x5220), None, x5246).name("x5276").ctrl(x5280) // RegWrite(x5220,x5246,x5229)
    val x5277 = StoreDef(List(x5221), None, x5271).name("x5277").ctrl(x5280) // RegWrite(x5221,x5271,x5229)
    val x5278 = StoreDef(List(x5222_d0, x5222_d1), None, x5274).name("x5278").ctrl(x5280) // RegWrite(x5222,x5274,x5229)
    val x5279 = StoreDef(List(x5223), None, x5275).name("x5279").ctrl(x5280) // RegWrite(x5223,x5275,x5229)
    val x5281 = LoadDef(List(x5223), None).name("x5281").ctrl(x5296) // RegRead(x5223)
    val x5282 = LoadDef(List(x5222_d1), None).name("x5282").ctrl(x5296) // RegRead(x5222)
    val x5295 = UnitController(style=ForkSwitch, level=OuterControl).name("x5295").ctrl(x5296) // //TODO Switch(Block(x5294),List(x5282, x5281),List(x5293, x5294))
    val x5293 = UnitController(style=SeqPipe, level=InnerControl).name("x5293").ctrl(x5295) // //TODO SwitchCase(Block(x5292))
    val x5283 = LoadDef(List(x5221), None).name("x5283").ctrl(x5293) // RegRead(x5221)
    val x5284 = OpDef(op=FixEql, inputs=List(x5283, Const(1).ctrl(x5293))).name("x5284").ctrl(x5293) // FixEql(x5283,Const(1))
    val x5285 = LoadDef(List(x5220), None).name("x5285").ctrl(x5293) // RegRead(x5220)
    val x5286 = OpDef(op=FixNeg, inputs=List(x5285)).name("x5286").ctrl(x5293) // FixNeg(x5285)
    val x5287 = OpDef(op=MuxOp, inputs=List(x5284, x5286, x5285)).name("x5287").ctrl(x5293) // Mux(x5284,x5286,x5285)
    val x5288 = LoadDef(List(x5222_d0), None).name("x5288").ctrl(x5293) // RegRead(x5222)
    val x5289 = OpDef(op=BitAnd, inputs=List(b2675, b2633)).name("x5289").ctrl(x5293) // And(b2675,b2633)
    val x5290 = OpDef(op=BitAnd, inputs=List(x5289, b2626)).name("x5290").ctrl(x5293) // And(x5289,b2626)
    val x5291 = OpDef(op=BitAnd, inputs=List(x5288, x5290)).name("x5291").ctrl(x5293) // And(x5288,x5290)
    val x5292 = StoreDef(List(x5109_d0_b0, x5109_d5_b0, x5109_d10_b0, x5109_d1_b0, x5109_d6_b0, x5109_d9_b0, x5109_d2_b0, x5109_d7_b0, x5109_d3_b0, x5109_d11_b0, x5109_d8_b0, x5109_d4_b0), Some(List(b2629, b2674)), x5287).name("x5292").ctrl(x5293) // SRAMStore(x5109,ArrayBuffer(Const(32), Const(64)),List(b2629, b2674),Const(0),x5287,x5291)
    val x5294 = UnitController(style=SeqPipe, level=InnerControl).name("x5294").ctrl(x5295) // //TODO SwitchCase(Block(Const(())))
    val x5297 = LoadDef(List(x5186), None).name("x5297").ctrl(x5537) // RegRead(x5186)
    val x5298 = Counter(min=x5297, max=Const(64).ctrl(x5537), step=Const(1).ctrl(x5537), par=1).name("x5298").ctrl(x5537) // CounterNew(x5297,Const(64),Const(1),Const(1))
    val x5299 = CounterChain(List(x5298)).name("x5299").ctrl(x5537) // CounterChainNew(List(x5298))
    val x5376 = LoopController(style=SeqPipe, level=OuterControl, cchain=x5299).name("x5376").ctrl(x5537) // UnrolledForeach(List(b2634, b2626),x5299,Block(Const(())),List(List(b2745)),List(List(b2746)))
    val b2745 = IterDef(x5298, Some(0)).ctrl(x5376).name("b2745")
    val b2746 = DummyDef().ctrl(x5376).name("b2746")
    val x5300 = Reg(init=0).name("x5300").ctrl(x5376) // x5300 = RegNew(Const(0))
    val x5301 = Reg(init=0.0).name("x5301").ctrl(x5376) // x5301 = RegNew(Const(0))
    val x5302_d0 = Reg(init=false).name("x5302_d0").ctrl(x5376) // x5302 = RegNew(Const(false))
    val x5302_d1 = Reg(init=false).name("x5302_d1").ctrl(x5376) // x5302 = RegNew(Const(false))
    val x5303 = Reg(init=false).name("x5303").ctrl(x5376) // x5303 = RegNew(Const(false))
    val x5360 = UnitController(style=SeqPipe, level=InnerControl).name("x5360").ctrl(x5376) // UnitPipe(List(b2746, b2634, b2626),Block(Const(())))
    val x5304 = OpDef(op=FixAdd, inputs=List(b2630, Const(1).ctrl(x5360))).name("x5304").ctrl(x5360) // FixAdd(b2630,Const(1))
    val x5305 = x5304 // x5305 = DataAsBits(x5304)
    val x5306 = OpDef(op=BitAnd, inputs=List(x5305, Const(15))).name("x5306").ctrl(x5360) // VectorSlice(x5305,4,0) strMask=00000000000000000000000000001111
    val x5307 = x5306 // x5307 = BitsAsData(x5306,FixPt[TRUE,_32,_0])
    val x5308 = OpDef(op=BitAnd, inputs=List(b2746, b2634)).name("x5308").ctrl(x5360) // And(b2746,b2634)
    val x5309 = OpDef(op=BitAnd, inputs=List(x5308, b2626)).name("x5309").ctrl(x5360) // And(x5308,b2626)
    val x5310 = LoadDef(List(x5109_d9_b0, x5109_d9_b1, x5109_d9_b2, x5109_d9_b3), Some(List(x5307, b2745))).name("x5310").ctrl(x5360) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(x5307, b2745),Const(0),x5309)
    val x5311 = OpDef(op=FixAdd, inputs=List(b2745, Const(1).ctrl(x5360))).name("x5311").ctrl(x5360) // FixAdd(b2745,Const(1))
    val x5312 = x5311 // x5312 = DataAsBits(x5311)
    val x5313 = OpDef(op=BitAnd, inputs=List(x5312, Const(31))).name("x5313").ctrl(x5360) // VectorSlice(x5312,5,0) strMask=00000000000000000000000000011111
    val x5314 = x5313 // x5314 = BitsAsData(x5313,FixPt[TRUE,_32,_0])
    val x5315 = LoadDef(List(x5109_d7_b1), Some(List(b2630, x5314))).name("x5315").ctrl(x5360) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2630, x5314),Const(0),x5309)
    val x5316 = OpDef(op=FixSub, inputs=List(b2630, Const(1).ctrl(x5360))).name("x5316").ctrl(x5360) // FixSub(b2630,Const(1))
    val x5317 = x5316 // x5317 = DataAsBits(x5316)
    val x5318 = OpDef(op=BitAnd, inputs=List(x5317, Const(15))).name("x5318").ctrl(x5360) // VectorSlice(x5317,4,0) strMask=00000000000000000000000000001111
    val x5319 = x5318 // x5319 = BitsAsData(x5318,FixPt[TRUE,_32,_0])
    val x5320 = LoadDef(List(x5109_d4_b0, x5109_d4_b1, x5109_d4_b2, x5109_d4_b3), Some(List(x5319, b2745))).name("x5320").ctrl(x5360) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(x5319, b2745),Const(0),x5309)
    val x5321 = OpDef(op=FixSub, inputs=List(b2745, Const(1).ctrl(x5360))).name("x5321").ctrl(x5360) // FixSub(b2745,Const(1))
    val x5322 = x5321 // x5322 = DataAsBits(x5321)
    val x5323 = OpDef(op=BitAnd, inputs=List(x5322, Const(31))).name("x5323").ctrl(x5360) // VectorSlice(x5322,5,0) strMask=00000000000000000000000000011111
    val x5324 = x5323 // x5324 = BitsAsData(x5323,FixPt[TRUE,_32,_0])
    val x5325 = LoadDef(List(x5109_d2_b1), Some(List(b2630, x5324))).name("x5325").ctrl(x5360) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2630, x5324),Const(0),x5309)
    val x5326 = LoadDef(List(x5109_d1_b1), Some(List(b2630, b2745))).name("x5326").ctrl(x5360) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2630, b2745),Const(0),x5309)
    val x5327 = OpDef(op=FixAdd, inputs=List(x5310, x5315)).name("x5327").ctrl(x5360) // FixAdd(x5310,x5315)
    val x5328 = OpDef(op=FixAdd, inputs=List(x5327, x5320)).name("x5328").ctrl(x5360) // FixAdd(x5327,x5320)
    val x5329 = OpDef(op=FixAdd, inputs=List(x5328, x5325)).name("x5329").ctrl(x5360) // FixAdd(x5328,x5325)
    val x5330 = OpDef(op=FixMul, inputs=List(x5329, x5326)).name("x5330").ctrl(x5360) // FixMul(x5329,x5326)
    val x5331 = OpDef(op=FixNeg, inputs=List(x5330)).name("x5331").ctrl(x5360) // FixNeg(x5330)
    val x5332 = OpDef(op=FixAdd, inputs=List(x5331, Const(4).ctrl(x5360))).name("x5332").ctrl(x5360) // FixAdd(x5331,Const(4))
    val x5333 = LoadDef(List(x5108_d5_b0), Some(List(x5332))).name("x5333").ctrl(x5360) // SRAMLoad(x5108,ArrayBuffer(Const(9)),List(x5332),Const(0),x5309)
    val x5334 = OpDef(op=FixAdd, inputs=List(x5330, Const(4).ctrl(x5360))).name("x5334").ctrl(x5360) // FixAdd(x5330,Const(4))
    val x5335 = LoadDef(List(x5108_d1_b0), Some(List(x5334))).name("x5335").ctrl(x5360) // SRAMLoad(x5108,ArrayBuffer(Const(9)),List(x5334),Const(0),x5309)
    val x5336 = LoadDef(List(x5154_d0_b1), Some(List(b2630, b2745))).name("x5336").ctrl(x5360) // SRAMLoad(x5154,ArrayBuffer(Const(32), Const(64)),List(b2630, b2745),Const(0),x5309)
    val x5337 = OpDef(op=FixMul, inputs=List(x5336, x5326)).name("x5337").ctrl(x5360) // FixMul(x5336,x5326)
    val x5338 = OpDef(op=FixLt, inputs=List(x5337, Const(0).ctrl(x5360))).name("x5338").ctrl(x5360) // FixLt(x5337,Const(0))
    val x5339 = LoadDef(List(x5092_d0), None).name("x5339").ctrl(x5360) // RegRead(x5092)
    val x5340 = LoadDef(List(x5091_d0), None).name("x5340").ctrl(x5360) // RegRead(x5091)
    val x5341 = OpDef(op=MuxOp, inputs=List(x5338, x5339, x5340)).name("x5341").ctrl(x5360) // Mux(x5338,x5339,x5340)
    val x5342 = OpDef(op=FixMul, inputs=List(x5335, x5341)).name("x5342").ctrl(x5360) // FixMul(x5335,x5341)
    val x5343 = OpDef(op=FixMin, inputs=List(Const(1).ctrl(x5360), x5342)).name("x5343").ctrl(x5360) // Min(Const(1),x5342)
    val x5344 = OpDef(op=FixUnif, inputs=List()).name("x5344").ctrl(x5360) // FixUnif()
    val x5345 = OpDef(op=FixLt, inputs=List(Const(1).ctrl(x5360), x5342)).name("x5345").ctrl(x5360) // FixLt(Const(1),x5342)
    val x5346 = x5343 // x5346 = DataAsBits(x5343)
    val x5347 = OpDef(op=BitAnd, inputs=List(x5346, Const(32512))).name("x5347").ctrl(x5360) // VectorSlice(x5346,15,8) strMask=00000000000000000111111100000000
    val x5348 = x5347 // x5348 = BitsAsData(x5347,FixPt[FALSE,_0,_8])
    val x5349 = OpDef(op=FixLt, inputs=List(x5344, x5348)).name("x5349").ctrl(x5360) // FixLt(x5344,x5348)
    val x5350 = OpDef(op=MuxOp, inputs=List(x5349, Const(1).ctrl(x5360), Const(0).ctrl(x5360))).name("x5350").ctrl(x5360) // Mux(x5349,Const(1),Const(0))
    val x5351 = OpDef(op=MuxOp, inputs=List(x5345, Const(1).ctrl(x5360), x5350)).name("x5351").ctrl(x5360) // Mux(x5345,Const(1),x5350)
    val x5352 = OpDef(op=FixLeq, inputs=List(Const(0).ctrl(x5360), b2745)).name("x5352").ctrl(x5360) // FixLeq(Const(0),b2745)
    val x5353 = OpDef(op=FixLt, inputs=List(b2745, Const(64).ctrl(x5360))).name("x5353").ctrl(x5360) // FixLt(b2745,Const(64))
    val x5354 = OpDef(op=BitAnd, inputs=List(x5352, x5353)).name("x5354").ctrl(x5360) // And(x5352,x5353)
    val x5355 = OpDef(op=BitNot, inputs=List(x5354)).name("x5355").ctrl(x5360) // Not(x5354)
    val x5356 = StoreDef(List(x5300), None, x5326).name("x5356").ctrl(x5360) // RegWrite(x5300,x5326,x5309)
    val x5357 = StoreDef(List(x5301), None, x5351).name("x5357").ctrl(x5360) // RegWrite(x5301,x5351,x5309)
    val x5358 = StoreDef(List(x5302_d0, x5302_d1), None, x5354).name("x5358").ctrl(x5360) // RegWrite(x5302,x5354,x5309)
    val x5359 = StoreDef(List(x5303), None, x5355).name("x5359").ctrl(x5360) // RegWrite(x5303,x5355,x5309)
    val x5361 = LoadDef(List(x5303), None).name("x5361").ctrl(x5376) // RegRead(x5303)
    val x5362 = LoadDef(List(x5302_d1), None).name("x5362").ctrl(x5376) // RegRead(x5302)
    val x5375 = UnitController(style=ForkSwitch, level=OuterControl).name("x5375").ctrl(x5376) // //TODO Switch(Block(x5374),List(x5362, x5361),List(x5373, x5374))
    val x5373 = UnitController(style=SeqPipe, level=InnerControl).name("x5373").ctrl(x5375) // //TODO SwitchCase(Block(x5372))
    val x5363 = LoadDef(List(x5301), None).name("x5363").ctrl(x5373) // RegRead(x5301)
    val x5364 = OpDef(op=FixEql, inputs=List(x5363, Const(1).ctrl(x5373))).name("x5364").ctrl(x5373) // FixEql(x5363,Const(1))
    val x5365 = LoadDef(List(x5300), None).name("x5365").ctrl(x5373) // RegRead(x5300)
    val x5366 = OpDef(op=FixNeg, inputs=List(x5365)).name("x5366").ctrl(x5373) // FixNeg(x5365)
    val x5367 = OpDef(op=MuxOp, inputs=List(x5364, x5366, x5365)).name("x5367").ctrl(x5373) // Mux(x5364,x5366,x5365)
    val x5368 = LoadDef(List(x5302_d0), None).name("x5368").ctrl(x5373) // RegRead(x5302)
    val x5369 = OpDef(op=BitAnd, inputs=List(b2746, b2634)).name("x5369").ctrl(x5373) // And(b2746,b2634)
    val x5370 = OpDef(op=BitAnd, inputs=List(x5369, b2626)).name("x5370").ctrl(x5373) // And(x5369,b2626)
    val x5371 = OpDef(op=BitAnd, inputs=List(x5368, x5370)).name("x5371").ctrl(x5373) // And(x5368,x5370)
    val x5372 = StoreDef(List(x5109_d0_b1, x5109_d5_b1, x5109_d10_b1, x5109_d1_b1, x5109_d6_b1, x5109_d9_b1, x5109_d2_b1, x5109_d7_b1, x5109_d3_b1, x5109_d11_b1, x5109_d8_b1, x5109_d4_b1), Some(List(b2630, b2745)), x5367).name("x5372").ctrl(x5373) // SRAMStore(x5109,ArrayBuffer(Const(32), Const(64)),List(b2630, b2745),Const(0),x5367,x5371)
    val x5374 = UnitController(style=SeqPipe, level=InnerControl).name("x5374").ctrl(x5375) // //TODO SwitchCase(Block(Const(())))
    val x5377 = LoadDef(List(x5187), None).name("x5377").ctrl(x5537) // RegRead(x5187)
    val x5378 = Counter(min=x5377, max=Const(64).ctrl(x5537), step=Const(1).ctrl(x5537), par=1).name("x5378").ctrl(x5537) // CounterNew(x5377,Const(64),Const(1),Const(1))
    val x5379 = CounterChain(List(x5378)).name("x5379").ctrl(x5537) // CounterChainNew(List(x5378))
    val x5456 = LoopController(style=SeqPipe, level=OuterControl, cchain=x5379).name("x5456").ctrl(x5537) // UnrolledForeach(List(b2635, b2626),x5379,Block(Const(())),List(List(b2816)),List(List(b2817)))
    val b2816 = IterDef(x5378, Some(0)).ctrl(x5456).name("b2816")
    val b2817 = DummyDef().ctrl(x5456).name("b2817")
    val x5380 = Reg(init=0).name("x5380").ctrl(x5456) // x5380 = RegNew(Const(0))
    val x5381 = Reg(init=0.0).name("x5381").ctrl(x5456) // x5381 = RegNew(Const(0))
    val x5382_d0 = Reg(init=false).name("x5382_d0").ctrl(x5456) // x5382 = RegNew(Const(false))
    val x5382_d1 = Reg(init=false).name("x5382_d1").ctrl(x5456) // x5382 = RegNew(Const(false))
    val x5383 = Reg(init=false).name("x5383").ctrl(x5456) // x5383 = RegNew(Const(false))
    val x5440 = UnitController(style=SeqPipe, level=InnerControl).name("x5440").ctrl(x5456) // UnitPipe(List(b2817, b2635, b2626),Block(Const(())))
    val x5384 = OpDef(op=FixAdd, inputs=List(b2631, Const(1).ctrl(x5440))).name("x5384").ctrl(x5440) // FixAdd(b2631,Const(1))
    val x5385 = x5384 // x5385 = DataAsBits(x5384)
    val x5386 = OpDef(op=BitAnd, inputs=List(x5385, Const(15))).name("x5386").ctrl(x5440) // VectorSlice(x5385,4,0) strMask=00000000000000000000000000001111
    val x5387 = x5386 // x5387 = BitsAsData(x5386,FixPt[TRUE,_32,_0])
    val x5388 = OpDef(op=BitAnd, inputs=List(b2817, b2635)).name("x5388").ctrl(x5440) // And(b2817,b2635)
    val x5389 = OpDef(op=BitAnd, inputs=List(x5388, b2626)).name("x5389").ctrl(x5440) // And(x5388,b2626)
    val x5390 = LoadDef(List(x5109_d10_b0, x5109_d10_b1, x5109_d10_b2, x5109_d10_b3), Some(List(x5387, b2816))).name("x5390").ctrl(x5440) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(x5387, b2816),Const(0),x5389)
    val x5391 = OpDef(op=FixAdd, inputs=List(b2816, Const(1).ctrl(x5440))).name("x5391").ctrl(x5440) // FixAdd(b2816,Const(1))
    val x5392 = x5391 // x5392 = DataAsBits(x5391)
    val x5393 = OpDef(op=BitAnd, inputs=List(x5392, Const(31))).name("x5393").ctrl(x5440) // VectorSlice(x5392,5,0) strMask=00000000000000000000000000011111
    val x5394 = x5393 // x5394 = BitsAsData(x5393,FixPt[TRUE,_32,_0])
    val x5395 = LoadDef(List(x5109_d7_b2), Some(List(b2631, x5394))).name("x5395").ctrl(x5440) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2631, x5394),Const(0),x5389)
    val x5396 = OpDef(op=FixSub, inputs=List(b2631, Const(1).ctrl(x5440))).name("x5396").ctrl(x5440) // FixSub(b2631,Const(1))
    val x5397 = x5396 // x5397 = DataAsBits(x5396)
    val x5398 = OpDef(op=BitAnd, inputs=List(x5397, Const(15))).name("x5398").ctrl(x5440) // VectorSlice(x5397,4,0) strMask=00000000000000000000000000001111
    val x5399 = x5398 // x5399 = BitsAsData(x5398,FixPt[TRUE,_32,_0])
    val x5400 = LoadDef(List(x5109_d5_b0, x5109_d5_b1, x5109_d5_b2, x5109_d5_b3), Some(List(x5399, b2816))).name("x5400").ctrl(x5440) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(x5399, b2816),Const(0),x5389)
    val x5401 = OpDef(op=FixSub, inputs=List(b2816, Const(1).ctrl(x5440))).name("x5401").ctrl(x5440) // FixSub(b2816,Const(1))
    val x5402 = x5401 // x5402 = DataAsBits(x5401)
    val x5403 = OpDef(op=BitAnd, inputs=List(x5402, Const(31))).name("x5403").ctrl(x5440) // VectorSlice(x5402,5,0) strMask=00000000000000000000000000011111
    val x5404 = x5403 // x5404 = BitsAsData(x5403,FixPt[TRUE,_32,_0])
    val x5405 = LoadDef(List(x5109_d2_b2), Some(List(b2631, x5404))).name("x5405").ctrl(x5440) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2631, x5404),Const(0),x5389)
    val x5406 = LoadDef(List(x5109_d1_b2), Some(List(b2631, b2816))).name("x5406").ctrl(x5440) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2631, b2816),Const(0),x5389)
    val x5407 = OpDef(op=FixAdd, inputs=List(x5390, x5395)).name("x5407").ctrl(x5440) // FixAdd(x5390,x5395)
    val x5408 = OpDef(op=FixAdd, inputs=List(x5407, x5400)).name("x5408").ctrl(x5440) // FixAdd(x5407,x5400)
    val x5409 = OpDef(op=FixAdd, inputs=List(x5408, x5405)).name("x5409").ctrl(x5440) // FixAdd(x5408,x5405)
    val x5410 = OpDef(op=FixMul, inputs=List(x5409, x5406)).name("x5410").ctrl(x5440) // FixMul(x5409,x5406)
    val x5411 = OpDef(op=FixNeg, inputs=List(x5410)).name("x5411").ctrl(x5440) // FixNeg(x5410)
    val x5412 = OpDef(op=FixAdd, inputs=List(x5411, Const(4).ctrl(x5440))).name("x5412").ctrl(x5440) // FixAdd(x5411,Const(4))
    val x5413 = LoadDef(List(x5108_d6_b0), Some(List(x5412))).name("x5413").ctrl(x5440) // SRAMLoad(x5108,ArrayBuffer(Const(9)),List(x5412),Const(0),x5389)
    val x5414 = OpDef(op=FixAdd, inputs=List(x5410, Const(4).ctrl(x5440))).name("x5414").ctrl(x5440) // FixAdd(x5410,Const(4))
    val x5415 = LoadDef(List(x5108_d2_b0), Some(List(x5414))).name("x5415").ctrl(x5440) // SRAMLoad(x5108,ArrayBuffer(Const(9)),List(x5414),Const(0),x5389)
    val x5416 = LoadDef(List(x5154_d0_b2), Some(List(b2631, b2816))).name("x5416").ctrl(x5440) // SRAMLoad(x5154,ArrayBuffer(Const(32), Const(64)),List(b2631, b2816),Const(0),x5389)
    val x5417 = OpDef(op=FixMul, inputs=List(x5416, x5406)).name("x5417").ctrl(x5440) // FixMul(x5416,x5406)
    val x5418 = OpDef(op=FixLt, inputs=List(x5417, Const(0).ctrl(x5440))).name("x5418").ctrl(x5440) // FixLt(x5417,Const(0))
    val x5419 = LoadDef(List(x5092_d0), None).name("x5419").ctrl(x5440) // RegRead(x5092)
    val x5420 = LoadDef(List(x5091_d0), None).name("x5420").ctrl(x5440) // RegRead(x5091)
    val x5421 = OpDef(op=MuxOp, inputs=List(x5418, x5419, x5420)).name("x5421").ctrl(x5440) // Mux(x5418,x5419,x5420)
    val x5422 = OpDef(op=FixMul, inputs=List(x5415, x5421)).name("x5422").ctrl(x5440) // FixMul(x5415,x5421)
    val x5423 = OpDef(op=FixMin, inputs=List(Const(1).ctrl(x5440), x5422)).name("x5423").ctrl(x5440) // Min(Const(1),x5422)
    val x5424 = OpDef(op=FixUnif, inputs=List()).name("x5424").ctrl(x5440) // FixUnif()
    val x5425 = OpDef(op=FixLt, inputs=List(Const(1).ctrl(x5440), x5422)).name("x5425").ctrl(x5440) // FixLt(Const(1),x5422)
    val x5426 = x5423 // x5426 = DataAsBits(x5423)
    val x5427 = OpDef(op=BitAnd, inputs=List(x5426, Const(32512))).name("x5427").ctrl(x5440) // VectorSlice(x5426,15,8) strMask=00000000000000000111111100000000
    val x5428 = x5427 // x5428 = BitsAsData(x5427,FixPt[FALSE,_0,_8])
    val x5429 = OpDef(op=FixLt, inputs=List(x5424, x5428)).name("x5429").ctrl(x5440) // FixLt(x5424,x5428)
    val x5430 = OpDef(op=MuxOp, inputs=List(x5429, Const(1).ctrl(x5440), Const(0).ctrl(x5440))).name("x5430").ctrl(x5440) // Mux(x5429,Const(1),Const(0))
    val x5431 = OpDef(op=MuxOp, inputs=List(x5425, Const(1).ctrl(x5440), x5430)).name("x5431").ctrl(x5440) // Mux(x5425,Const(1),x5430)
    val x5432 = OpDef(op=FixLeq, inputs=List(Const(0).ctrl(x5440), b2816)).name("x5432").ctrl(x5440) // FixLeq(Const(0),b2816)
    val x5433 = OpDef(op=FixLt, inputs=List(b2816, Const(64).ctrl(x5440))).name("x5433").ctrl(x5440) // FixLt(b2816,Const(64))
    val x5434 = OpDef(op=BitAnd, inputs=List(x5432, x5433)).name("x5434").ctrl(x5440) // And(x5432,x5433)
    val x5435 = OpDef(op=BitNot, inputs=List(x5434)).name("x5435").ctrl(x5440) // Not(x5434)
    val x5436 = StoreDef(List(x5380), None, x5406).name("x5436").ctrl(x5440) // RegWrite(x5380,x5406,x5389)
    val x5437 = StoreDef(List(x5381), None, x5431).name("x5437").ctrl(x5440) // RegWrite(x5381,x5431,x5389)
    val x5438 = StoreDef(List(x5382_d0, x5382_d1), None, x5434).name("x5438").ctrl(x5440) // RegWrite(x5382,x5434,x5389)
    val x5439 = StoreDef(List(x5383), None, x5435).name("x5439").ctrl(x5440) // RegWrite(x5383,x5435,x5389)
    val x5441 = LoadDef(List(x5383), None).name("x5441").ctrl(x5456) // RegRead(x5383)
    val x5442 = LoadDef(List(x5382_d1), None).name("x5442").ctrl(x5456) // RegRead(x5382)
    val x5455 = UnitController(style=ForkSwitch, level=OuterControl).name("x5455").ctrl(x5456) // //TODO Switch(Block(x5454),List(x5442, x5441),List(x5453, x5454))
    val x5453 = UnitController(style=SeqPipe, level=InnerControl).name("x5453").ctrl(x5455) // //TODO SwitchCase(Block(x5452))
    val x5443 = LoadDef(List(x5381), None).name("x5443").ctrl(x5453) // RegRead(x5381)
    val x5444 = OpDef(op=FixEql, inputs=List(x5443, Const(1).ctrl(x5453))).name("x5444").ctrl(x5453) // FixEql(x5443,Const(1))
    val x5445 = LoadDef(List(x5380), None).name("x5445").ctrl(x5453) // RegRead(x5380)
    val x5446 = OpDef(op=FixNeg, inputs=List(x5445)).name("x5446").ctrl(x5453) // FixNeg(x5445)
    val x5447 = OpDef(op=MuxOp, inputs=List(x5444, x5446, x5445)).name("x5447").ctrl(x5453) // Mux(x5444,x5446,x5445)
    val x5448 = LoadDef(List(x5382_d0), None).name("x5448").ctrl(x5453) // RegRead(x5382)
    val x5449 = OpDef(op=BitAnd, inputs=List(b2817, b2635)).name("x5449").ctrl(x5453) // And(b2817,b2635)
    val x5450 = OpDef(op=BitAnd, inputs=List(x5449, b2626)).name("x5450").ctrl(x5453) // And(x5449,b2626)
    val x5451 = OpDef(op=BitAnd, inputs=List(x5448, x5450)).name("x5451").ctrl(x5453) // And(x5448,x5450)
    val x5452 = StoreDef(List(x5109_d0_b2, x5109_d5_b2, x5109_d10_b2, x5109_d1_b2, x5109_d6_b2, x5109_d9_b2, x5109_d2_b2, x5109_d7_b2, x5109_d3_b2, x5109_d11_b2, x5109_d8_b2, x5109_d4_b2), Some(List(b2631, b2816)), x5447).name("x5452").ctrl(x5453) // SRAMStore(x5109,ArrayBuffer(Const(32), Const(64)),List(b2631, b2816),Const(0),x5447,x5451)
    val x5454 = UnitController(style=SeqPipe, level=InnerControl).name("x5454").ctrl(x5455) // //TODO SwitchCase(Block(Const(())))
    val x5457 = LoadDef(List(x5188), None).name("x5457").ctrl(x5537) // RegRead(x5188)
    val x5458 = Counter(min=x5457, max=Const(64).ctrl(x5537), step=Const(1).ctrl(x5537), par=1).name("x5458").ctrl(x5537) // CounterNew(x5457,Const(64),Const(1),Const(1))
    val x5459 = CounterChain(List(x5458)).name("x5459").ctrl(x5537) // CounterChainNew(List(x5458))
    val x5536 = LoopController(style=SeqPipe, level=OuterControl, cchain=x5459).name("x5536").ctrl(x5537) // UnrolledForeach(List(b2636, b2626),x5459,Block(Const(())),List(List(b2887)),List(List(b2888)))
    val b2887 = IterDef(x5458, Some(0)).ctrl(x5536).name("b2887")
    val b2888 = DummyDef().ctrl(x5536).name("b2888")
    val x5460 = Reg(init=0).name("x5460").ctrl(x5536) // x5460 = RegNew(Const(0))
    val x5461 = Reg(init=0.0).name("x5461").ctrl(x5536) // x5461 = RegNew(Const(0))
    val x5462_d0 = Reg(init=false).name("x5462_d0").ctrl(x5536) // x5462 = RegNew(Const(false))
    val x5462_d1 = Reg(init=false).name("x5462_d1").ctrl(x5536) // x5462 = RegNew(Const(false))
    val x5463 = Reg(init=false).name("x5463").ctrl(x5536) // x5463 = RegNew(Const(false))
    val x5520 = UnitController(style=SeqPipe, level=InnerControl).name("x5520").ctrl(x5536) // UnitPipe(List(b2888, b2636, b2626),Block(Const(())))
    val x5464 = OpDef(op=FixAdd, inputs=List(b2632, Const(1).ctrl(x5520))).name("x5464").ctrl(x5520) // FixAdd(b2632,Const(1))
    val x5465 = x5464 // x5465 = DataAsBits(x5464)
    val x5466 = OpDef(op=BitAnd, inputs=List(x5465, Const(15))).name("x5466").ctrl(x5520) // VectorSlice(x5465,4,0) strMask=00000000000000000000000000001111
    val x5467 = x5466 // x5467 = BitsAsData(x5466,FixPt[TRUE,_32,_0])
    val x5468 = OpDef(op=BitAnd, inputs=List(b2888, b2636)).name("x5468").ctrl(x5520) // And(b2888,b2636)
    val x5469 = OpDef(op=BitAnd, inputs=List(x5468, b2626)).name("x5469").ctrl(x5520) // And(x5468,b2626)
    val x5470 = LoadDef(List(x5109_d11_b0, x5109_d11_b1, x5109_d11_b2, x5109_d11_b3), Some(List(x5467, b2887))).name("x5470").ctrl(x5520) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(x5467, b2887),Const(0),x5469)
    val x5471 = OpDef(op=FixAdd, inputs=List(b2887, Const(1).ctrl(x5520))).name("x5471").ctrl(x5520) // FixAdd(b2887,Const(1))
    val x5472 = x5471 // x5472 = DataAsBits(x5471)
    val x5473 = OpDef(op=BitAnd, inputs=List(x5472, Const(31))).name("x5473").ctrl(x5520) // VectorSlice(x5472,5,0) strMask=00000000000000000000000000011111
    val x5474 = x5473 // x5474 = BitsAsData(x5473,FixPt[TRUE,_32,_0])
    val x5475 = LoadDef(List(x5109_d7_b3), Some(List(b2632, x5474))).name("x5475").ctrl(x5520) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2632, x5474),Const(0),x5469)
    val x5476 = OpDef(op=FixSub, inputs=List(b2632, Const(1).ctrl(x5520))).name("x5476").ctrl(x5520) // FixSub(b2632,Const(1))
    val x5477 = x5476 // x5477 = DataAsBits(x5476)
    val x5478 = OpDef(op=BitAnd, inputs=List(x5477, Const(15))).name("x5478").ctrl(x5520) // VectorSlice(x5477,4,0) strMask=00000000000000000000000000001111
    val x5479 = x5478 // x5479 = BitsAsData(x5478,FixPt[TRUE,_32,_0])
    val x5480 = LoadDef(List(x5109_d6_b0, x5109_d6_b1, x5109_d6_b2, x5109_d6_b3), Some(List(x5479, b2887))).name("x5480").ctrl(x5520) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(x5479, b2887),Const(0),x5469)
    val x5481 = OpDef(op=FixSub, inputs=List(b2887, Const(1).ctrl(x5520))).name("x5481").ctrl(x5520) // FixSub(b2887,Const(1))
    val x5482 = x5481 // x5482 = DataAsBits(x5481)
    val x5483 = OpDef(op=BitAnd, inputs=List(x5482, Const(31))).name("x5483").ctrl(x5520) // VectorSlice(x5482,5,0) strMask=00000000000000000000000000011111
    val x5484 = x5483 // x5484 = BitsAsData(x5483,FixPt[TRUE,_32,_0])
    val x5485 = LoadDef(List(x5109_d2_b3), Some(List(b2632, x5484))).name("x5485").ctrl(x5520) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2632, x5484),Const(0),x5469)
    val x5486 = LoadDef(List(x5109_d1_b3), Some(List(b2632, b2887))).name("x5486").ctrl(x5520) // SRAMLoad(x5109,ArrayBuffer(Const(32), Const(64)),List(b2632, b2887),Const(0),x5469)
    val x5487 = OpDef(op=FixAdd, inputs=List(x5470, x5475)).name("x5487").ctrl(x5520) // FixAdd(x5470,x5475)
    val x5488 = OpDef(op=FixAdd, inputs=List(x5487, x5480)).name("x5488").ctrl(x5520) // FixAdd(x5487,x5480)
    val x5489 = OpDef(op=FixAdd, inputs=List(x5488, x5485)).name("x5489").ctrl(x5520) // FixAdd(x5488,x5485)
    val x5490 = OpDef(op=FixMul, inputs=List(x5489, x5486)).name("x5490").ctrl(x5520) // FixMul(x5489,x5486)
    val x5491 = OpDef(op=FixNeg, inputs=List(x5490)).name("x5491").ctrl(x5520) // FixNeg(x5490)
    val x5492 = OpDef(op=FixAdd, inputs=List(x5491, Const(4).ctrl(x5520))).name("x5492").ctrl(x5520) // FixAdd(x5491,Const(4))
    val x5493 = LoadDef(List(x5108_d7_b0), Some(List(x5492))).name("x5493").ctrl(x5520) // SRAMLoad(x5108,ArrayBuffer(Const(9)),List(x5492),Const(0),x5469)
    val x5494 = OpDef(op=FixAdd, inputs=List(x5490, Const(4).ctrl(x5520))).name("x5494").ctrl(x5520) // FixAdd(x5490,Const(4))
    val x5495 = LoadDef(List(x5108_d3_b0), Some(List(x5494))).name("x5495").ctrl(x5520) // SRAMLoad(x5108,ArrayBuffer(Const(9)),List(x5494),Const(0),x5469)
    val x5496 = LoadDef(List(x5154_d0_b3), Some(List(b2632, b2887))).name("x5496").ctrl(x5520) // SRAMLoad(x5154,ArrayBuffer(Const(32), Const(64)),List(b2632, b2887),Const(0),x5469)
    val x5497 = OpDef(op=FixMul, inputs=List(x5496, x5486)).name("x5497").ctrl(x5520) // FixMul(x5496,x5486)
    val x5498 = OpDef(op=FixLt, inputs=List(x5497, Const(0).ctrl(x5520))).name("x5498").ctrl(x5520) // FixLt(x5497,Const(0))
    val x5499 = LoadDef(List(x5092_d0), None).name("x5499").ctrl(x5520) // RegRead(x5092)
    val x5500 = LoadDef(List(x5091_d0), None).name("x5500").ctrl(x5520) // RegRead(x5091)
    val x5501 = OpDef(op=MuxOp, inputs=List(x5498, x5499, x5500)).name("x5501").ctrl(x5520) // Mux(x5498,x5499,x5500)
    val x5502 = OpDef(op=FixMul, inputs=List(x5495, x5501)).name("x5502").ctrl(x5520) // FixMul(x5495,x5501)
    val x5503 = OpDef(op=FixMin, inputs=List(Const(1).ctrl(x5520), x5502)).name("x5503").ctrl(x5520) // Min(Const(1),x5502)
    val x5504 = OpDef(op=FixUnif, inputs=List()).name("x5504").ctrl(x5520) // FixUnif()
    val x5505 = OpDef(op=FixLt, inputs=List(Const(1).ctrl(x5520), x5502)).name("x5505").ctrl(x5520) // FixLt(Const(1),x5502)
    val x5506 = x5503 // x5506 = DataAsBits(x5503)
    val x5507 = OpDef(op=BitAnd, inputs=List(x5506, Const(32512))).name("x5507").ctrl(x5520) // VectorSlice(x5506,15,8) strMask=00000000000000000111111100000000
    val x5508 = x5507 // x5508 = BitsAsData(x5507,FixPt[FALSE,_0,_8])
    val x5509 = OpDef(op=FixLt, inputs=List(x5504, x5508)).name("x5509").ctrl(x5520) // FixLt(x5504,x5508)
    val x5510 = OpDef(op=MuxOp, inputs=List(x5509, Const(1).ctrl(x5520), Const(0).ctrl(x5520))).name("x5510").ctrl(x5520) // Mux(x5509,Const(1),Const(0))
    val x5511 = OpDef(op=MuxOp, inputs=List(x5505, Const(1).ctrl(x5520), x5510)).name("x5511").ctrl(x5520) // Mux(x5505,Const(1),x5510)
    val x5512 = OpDef(op=FixLeq, inputs=List(Const(0).ctrl(x5520), b2887)).name("x5512").ctrl(x5520) // FixLeq(Const(0),b2887)
    val x5513 = OpDef(op=FixLt, inputs=List(b2887, Const(64).ctrl(x5520))).name("x5513").ctrl(x5520) // FixLt(b2887,Const(64))
    val x5514 = OpDef(op=BitAnd, inputs=List(x5512, x5513)).name("x5514").ctrl(x5520) // And(x5512,x5513)
    val x5515 = OpDef(op=BitNot, inputs=List(x5514)).name("x5515").ctrl(x5520) // Not(x5514)
    val x5516 = StoreDef(List(x5460), None, x5486).name("x5516").ctrl(x5520) // RegWrite(x5460,x5486,x5469)
    val x5517 = StoreDef(List(x5461), None, x5511).name("x5517").ctrl(x5520) // RegWrite(x5461,x5511,x5469)
    val x5518 = StoreDef(List(x5462_d0, x5462_d1), None, x5514).name("x5518").ctrl(x5520) // RegWrite(x5462,x5514,x5469)
    val x5519 = StoreDef(List(x5463), None, x5515).name("x5519").ctrl(x5520) // RegWrite(x5463,x5515,x5469)
    val x5521 = LoadDef(List(x5463), None).name("x5521").ctrl(x5536) // RegRead(x5463)
    val x5522 = LoadDef(List(x5462_d1), None).name("x5522").ctrl(x5536) // RegRead(x5462)
    val x5535 = UnitController(style=ForkSwitch, level=OuterControl).name("x5535").ctrl(x5536) // //TODO Switch(Block(x5534),List(x5522, x5521),List(x5533, x5534))
    val x5533 = UnitController(style=SeqPipe, level=InnerControl).name("x5533").ctrl(x5535) // //TODO SwitchCase(Block(x5532))
    val x5523 = LoadDef(List(x5461), None).name("x5523").ctrl(x5533) // RegRead(x5461)
    val x5524 = OpDef(op=FixEql, inputs=List(x5523, Const(1).ctrl(x5533))).name("x5524").ctrl(x5533) // FixEql(x5523,Const(1))
    val x5525 = LoadDef(List(x5460), None).name("x5525").ctrl(x5533) // RegRead(x5460)
    val x5526 = OpDef(op=FixNeg, inputs=List(x5525)).name("x5526").ctrl(x5533) // FixNeg(x5525)
    val x5527 = OpDef(op=MuxOp, inputs=List(x5524, x5526, x5525)).name("x5527").ctrl(x5533) // Mux(x5524,x5526,x5525)
    val x5528 = LoadDef(List(x5462_d0), None).name("x5528").ctrl(x5533) // RegRead(x5462)
    val x5529 = OpDef(op=BitAnd, inputs=List(b2888, b2636)).name("x5529").ctrl(x5533) // And(b2888,b2636)
    val x5530 = OpDef(op=BitAnd, inputs=List(x5529, b2626)).name("x5530").ctrl(x5533) // And(x5529,b2626)
    val x5531 = OpDef(op=BitAnd, inputs=List(x5528, x5530)).name("x5531").ctrl(x5533) // And(x5528,x5530)
    val x5532 = StoreDef(List(x5109_d0_b3, x5109_d5_b3, x5109_d10_b3, x5109_d1_b3, x5109_d6_b3, x5109_d9_b3, x5109_d2_b3, x5109_d7_b3, x5109_d3_b3, x5109_d11_b3, x5109_d8_b3, x5109_d4_b3), Some(List(b2632, b2887)), x5527).name("x5532").ctrl(x5533) // SRAMStore(x5109,ArrayBuffer(Const(32), Const(64)),List(b2632, b2887),Const(0),x5527,x5531)
    val x5534 = UnitController(style=SeqPipe, level=InnerControl).name("x5534").ctrl(x5535) // //TODO SwitchCase(Block(Const(())))
    val x5539 = Counter(min=Const(0).ctrl(x5568), max=Const(32).ctrl(x5568), step=Const(1).ctrl(x5568), par=1).name("x5539").ctrl(x5568) // CounterNew(Const(0),Const(32),Const(1),Const(1))
    val x5540 = CounterChain(List(x5539)).name("x5540").ctrl(x5568) // CounterChainNew(List(x5539))
    val x5567 = LoopController(style=StreamPipe, level=OuterControl, cchain=x5540).name("x5567").ctrl(x5568) // UnrolledForeach(List(Const(true)),x5540,Block(Const(())),List(List(b2963)),List(List(b2964)))
    val b2963 = IterDef(x5539, Some(0)).ctrl(x5567).name("b2963")
    val b2964 = DummyDef().ctrl(x5567).name("b2964")
    val b5642 = StreamOut(field="offset").name("b5642").ctrl(x5567) // x5541 = StreamOutNew(BurstCmdBus)
    val b5643 = StreamOut(field="size").name("b5643").ctrl(x5567) // x5541 = StreamOutNew(BurstCmdBus)
    val b5644 = StreamOut(field="data").name("b5644").ctrl(x5567) // x5542 = StreamOutNew(BurstFullDataBus())
    val b5645 = StreamIn(field="ack").name("b5645").ctrl(x5567) // x5543 = StreamInNew(BurstAckBus)
    val x5555 = UnitController(style=SeqPipe, level=InnerControl).name("x5555").ctrl(x5567) // UnitPipe(List(b2964),Block(x5554))
    val x5544 = OpDef(op=FixConvert, inputs=List(b2963)).name("x5544").ctrl(x5555) // FixConvert(b2963,TRUE,_32,_0)
    val x5545 = OpDef(op=FixSla, inputs=List(x5544, Const(6).ctrl(x5555))).name("x5545").ctrl(x5555) // FixLsh(x5544,Const(6))
    val x5546 = OpDef(op=FixConvert, inputs=List(Const(0).ctrl(x5555))).name("x5546").ctrl(x5555) // FixConvert(Const(0),TRUE,_32,_0)
    val x5547 = OpDef(op=FixAdd, inputs=List(x5545, x5546)).name("x5547").ctrl(x5555) // FixAdd(x5545,x5546)
    val x5548 = OpDef(op=FixSla, inputs=List(x5547, Const(2).ctrl(x5555))).name("x5548").ctrl(x5555) // FixLsh(x5547,Const(2))
    val x5549 = OpDef(op=FixConvert, inputs=List(x5548)).name("x5549").ctrl(x5555) // FixConvert(x5548,TRUE,_64,_0)
    val x5550 = top.dramAddress(x5100).name("x5550").ctrl(x5555) // GetDRAMAddress(x5100)
    val x5551 = OpDef(op=FixAdd, inputs=List(x5549, x5550)).name("x5551").ctrl(x5555) // FixAdd(x5549,x5550)
    val x5552 = OpDef(op=FixConvert, inputs=List(x5551)).name("x5552").ctrl(x5555) // FixConvert(x5551,TRUE,_64,_0)
    // x5553 = SimpleStruct(ArrayBuffer((offset,x5552), (size,Const(256)), (isLoad,Const(false))))
    val b5646 = StoreDef(List(b5642), None, x5552).name("b5646").ctrl(x5555) // StreamWrite(x5541,x5553,b2964)
    val b5647 = StoreDef(List(b5643), None, Const(256)).name("b5647").ctrl(x5555) // StreamWrite(x5541,x5553,b2964)
    val x5556 = Counter(min=Const(0).ctrl(x5567), max=Const(64).ctrl(x5567), step=Const(1).ctrl(x5567), par=16).name("x5556").ctrl(x5567) // CounterNew(Const(0),Const(64),Const(1),Const(16))
    val x5557 = CounterChain(List(x5556)).name("x5557").ctrl(x5567) // CounterChainNew(List(x5556))
    val x5563 = LoopController(style=InnerPipe, level=InnerControl, cchain=x5557).name("x5563").ctrl(x5567) // UnrolledForeach(List(b2964),x5557,Block(Const(())),List(List(b2982)),List(List(b2983)))
    val b2982 = IterDef(x5556, None).ctrl(x5563).name("b2982")
    val b2983 = DummyDef().ctrl(x5563).name("b2983")
    val x5558 = OpDef(op=BitAnd, inputs=List(b2983, b2964)).name("x5558").ctrl(x5563) // And(b2983,b2964)
    val x5559 = LoadDef(List(x5109_d0_b0, x5109_d0_b1, x5109_d0_b2, x5109_d0_b3), Some(List(b2963, b2982))).name("x5559").ctrl(x5563) // ParSRAMLoad(x5109,List(List(b2963, b2982)),List(x5558))
    val x5560 = x5559 // x5560 = VectorApply(x5559,0)
    // x5561 = SimpleStruct(ArrayBuffer((_1,x5560), (_2,Const(true))))
    val b5648 = StoreDef(List(b5644), None, x5560).name("b5648").ctrl(x5563) // ParStreamWrite(x5542,List(x5561),List(x5558))
    val x5564 = FringeContainer(x5100,b5642,b5643,b5644,b5645).name("x5564").ctrl(x5567) // FringeDenseStore(x5100,x5541,x5542,x5543)
    val x5566 = UnitController(style=SeqPipe, level=InnerControl).name("x5566").ctrl(x5567) // UnitPipe(List(b2964),Block(Const(())))
    val b5649 = LoadDef(List(b5645), None).name("b5649").ctrl(x5566) // StreamRead(x5543,b2964)
    
  }
}
